{{>licenseInfo}}
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from "rxjs/Observable";
import { map, toPromise } from "rxjs";
import IHttpClient from "../IHttpClient";
import { inject, injectable } from "inversify";
import { Headers } from "../Headers";
import HttpResponse from "../HttpResponse";
import {
    {{#imports}}
    {{classname}} 
    {{/imports}}
} from 'api-models';

{{#withInterfaces}}
import { {{classname}}Interface }  from './{{classname}}Interface';
{{/withInterfaces}}

{{#operations}}

{{#description}}
/**
 * {{&description}}
 */
{{/description}}

@injectable()
{{#withInterfaces}}
export class Store_{{classname}} implements {{classname}}Interface {
{{/withInterfaces}}
{{^withInterfaces}}
export class Store_{{classname}} {
{{/withInterfaces}}

    constructor(@inject("Store") private store: Store<any>) {}
{{#operation}}

    /**
     * {{summary}}
     * {{notes}}
     {{#allParams}}* @param {{paramName}} {{description}}
     {{/allParams}}{{#useHttpClient}}* @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.{{/useHttpClient}}
     */
    public store_{{nickname}}({{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}, {{/allParams}}, headers?: Headers): {{#usePromise}}Promise{{/usePromise}}<{{#returnType}}{{{returnType}}}{{#isResponseTypeFile}}|undefined{{/isResponseTypeFile}}{{/returnType}}{{^returnType}}any{{/returnType}}>;
        const response = await nickname({{nickname}}({{#allParams}}{{paramName}},'body', headers);
        // TODO: Implement {{nickname}}
        addResponsetoStore(this.store, response.data, true, true);
        return response;
    }

{{/operation}}}
{{/operations}}
