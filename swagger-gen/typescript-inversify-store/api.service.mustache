{{>licenseInfo}}
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from "rxjs";
import { map } from "rxjs/operators";
import { inject, injectable } from "inversify";
import { Store } from 'redux';
import {
    HttpResponse,
    Headers,
    IHttpClient,
    {{#imports}}
    {{classname}}, 
    {{/imports}}
} from 'api-models';

import { {{classname}} } from '../../base/api/index'

{{#withInterfaces}}
import { {{classname}}Interface }  from './{{classname}}Interface';


{{/withInterfaces}}

{{#operations}}

{{#description}}
/**
 * {{&description}}
 */
{{/description}}

@injectable()
{{#withInterfaces}}
export class Store{{classname}} implements {{classname}}Interface {
{{/withInterfaces}}
{{^withInterfaces}}
export class Store{{classname}} {
{{/withInterfaces}}

    constructor(@inject("Store") protected store: Store<any>, @inject("{{classname}}") protected baseService:{{classname}}) {}
{{#operation}}

    /**
     * {{summary}}
     * {{notes}}
     */
    public async store_{{nickname}}({{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}, {{/allParams}} headers?: Headers): Promise<{{#returnType}}{{{returnType}}}{{#isResponseTypeFile}}|undefined{{/isResponseTypeFile}}{{/returnType}}{{^returnType}}any{{/returnType}}>
    {
        const response = await this.baseService.{{nickname}}({{#allParams}}{{paramName}},{{/allParams}}'body', headers).toPromise();
        // TODO: Implement {{nickname}}
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }

{{/operation}}}
{{/operations}}
