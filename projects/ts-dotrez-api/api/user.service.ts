/**
 * API - Current Routes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: trunk
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from "rxjs/Observable";
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import IHttpClient from "../IHttpClient";
import { inject, injectable } from "inversify";
import { IAPIConfiguration } from "../IAPIConfiguration";
import { Headers } from "../Headers";
import HttpResponse from "../HttpResponse";

import * as Models from '../models';
import { Dictionary } from '../models';
import * as Enums from '../enums';
import { getClient, Request } from '../helper';

import { BookingSearchResult } from '../model/bookingSearchResult';
import { BookingTripResult } from '../model/bookingTripResult';
import { DeltaMapperSingleSignOnTokenRequest } from '../model/deltaMapperSingleSignOnTokenRequest';
import { DeltaMapperUserRequest } from '../model/deltaMapperUserRequest';
import { DeltaMapperUserRolePatchRequest } from '../model/deltaMapperUserRolePatchRequest';
import { IJsonResponse } from '../model/iJsonResponse';
import { SessionRoles } from '../model/sessionRoles';
import { SingleSignOnTokenRequest } from '../model/singleSignOnTokenRequest';
import { User } from '../model/user';
import { UserChangePasswordRequestBase } from '../model/userChangePasswordRequestBase';
import { UserCustomerCreateRequest } from '../model/userCustomerCreateRequest';
import { UserCustomerCreateRequestv2 } from '../model/userCustomerCreateRequestv2';
import { UserImpersonateRequest } from '../model/userImpersonateRequest';
import { UserRequest } from '../model/userRequest';
import { UserRole } from '../model/userRole';
import { UserRoleCreateRequest } from '../model/userRoleCreateRequest';
import { UserRoleEditRequest } from '../model/userRoleEditRequest';
import { UserSingleSignOnToken } from '../model/userSingleSignOnToken';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class UserService {

    constructor(@inject(HTTP_CLIENT) protected client: ApiHttpClient) {}

    /**
     * Searches the logged in user booking upcoming and past bookings.
     * This is similar to the user booking endpoint but returns more focused trip information.  This endpoint will only return data where a booking&#39;s passenger customer number matches the current logged in user.  Bookings made by the user where the passenger customer number is not assigned are ignored.
     * @param startDate Booking start search date.
     * @param endDate Booking end search date.
     
     */
    public apiNskV1UserBookingsByPassengerGet = (startDate?: Date, endDate?: Date, ) => {
        let queryParameters: string[] = [];
        if (startDate !== undefined) {
           queryParameters.push("startDate="+encodeURIComponent(<any>startDate.toISOString()));
        }
        if (endDate !== undefined) {
           queryParameters.push("endDate="+encodeURIComponent(<any>endDate.toISOString()));
        }


            const requestObj: Request<{
                startDate?: Date, endDate?: Date, 
            }> = {
                url: '/api/nsk/v1/user/bookingsByPassenger',
                method: 'get',
                data: {
                    startDate,endDate,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Searches the logged in user booking upcoming and past bookings.
     * 
     * @param returnCount The number of results to be returned.
     * @param associatedFirstName An associated passenger/contact first name.
     * @param associatedLastName An associated passenger/contact last name.
     * @param phoneticSearch Flag indicating to search using the phonetic option.
     * @param tripIdentifier Filter by trip identifier.
     * @param origin Filter by origin station code.
     * @param destination Filter by destination station code.
     * @param searchArchive Flag indicating to search archived bookings.
     * @param tripDate Filter by trip date.
     * @param startDate Filter by starting search date.
     * @param endDate Filter by ending search date.
     * @param searchByCustomerNumber Flag indicating to search by the users customer number instead of user identifier.
     * @param lastBookingKey The last booking key (used for paging).
     
     */
    public apiNskV1UserBookingsGet = (returnCount: number, associatedFirstName?: string, associatedLastName?: string, phoneticSearch?: boolean, tripIdentifier?: string, origin?: string, destination?: string, searchArchive?: boolean, tripDate?: Date, startDate?: Date, endDate?: Date, searchByCustomerNumber?: boolean, lastBookingKey?: string, ) => {
        if (!returnCount){
            throw new Error('Required parameter returnCount was null or undefined when calling apiNskV1UserBookingsGet.');
        }

        let queryParameters: string[] = [];
        if (associatedFirstName !== undefined) {
            queryParameters.push("associatedFirstName="+encodeURIComponent(String(associatedFirstName)));
        }
        if (associatedLastName !== undefined) {
            queryParameters.push("associatedLastName="+encodeURIComponent(String(associatedLastName)));
        }
        if (phoneticSearch !== undefined) {
            queryParameters.push("phoneticSearch="+encodeURIComponent(String(phoneticSearch)));
        }
        if (tripIdentifier !== undefined) {
            queryParameters.push("tripIdentifier="+encodeURIComponent(String(tripIdentifier)));
        }
        if (origin !== undefined) {
            queryParameters.push("origin="+encodeURIComponent(String(origin)));
        }
        if (destination !== undefined) {
            queryParameters.push("destination="+encodeURIComponent(String(destination)));
        }
        if (searchArchive !== undefined) {
            queryParameters.push("searchArchive="+encodeURIComponent(String(searchArchive)));
        }
        if (tripDate !== undefined) {
           queryParameters.push("tripDate="+encodeURIComponent(<any>tripDate.toISOString()));
        }
        if (startDate !== undefined) {
           queryParameters.push("startDate="+encodeURIComponent(<any>startDate.toISOString()));
        }
        if (endDate !== undefined) {
           queryParameters.push("endDate="+encodeURIComponent(<any>endDate.toISOString()));
        }
        if (searchByCustomerNumber !== undefined) {
            queryParameters.push("searchByCustomerNumber="+encodeURIComponent(String(searchByCustomerNumber)));
        }
        if (returnCount !== undefined) {
            queryParameters.push("returnCount="+encodeURIComponent(String(returnCount)));
        }
        if (lastBookingKey !== undefined) {
            queryParameters.push("lastBookingKey="+encodeURIComponent(String(lastBookingKey)));
        }


            const requestObj: Request<{
                returnCount: number, associatedFirstName?: string, associatedLastName?: string, phoneticSearch?: boolean, tripIdentifier?: string, origin?: string, destination?: string, searchArchive?: boolean, tripDate?: Date, startDate?: Date, endDate?: Date, searchByCustomerNumber?: boolean, lastBookingKey?: string, 
            }> = {
                url: '/api/nsk/v1/user/bookings',
                method: 'get',
                data: {
                    returnCount,associatedFirstName,associatedLastName,phoneticSearch,tripIdentifier,origin,destination,searchArchive,tripDate,startDate,endDate,searchByCustomerNumber,lastBookingKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the current logged in user.
     * 
     
     */
    public apiNskV1UserGet = () => {

            const requestObj: Request<{
                
            }> = {
                url: '/api/nsk/v1/user',
                method: 'get',
                data: {
                    
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Resets the logged in users role.
     * 
     
     */
    public apiNskV1UserImpersonateDelete = () => {

            const requestObj: Request<{
                
            }> = {
                url: '/api/nsk/v1/user/impersonate',
                method: 'delete',
                data: {
                    
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets the logged in users current session roles state.
     * 
     
     */
    public apiNskV1UserImpersonateGet = () => {

            const requestObj: Request<{
                
            }> = {
                url: '/api/nsk/v1/user/impersonate',
                method: 'get',
                data: {
                    
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Impersonates a new role for the logged in user.
     * 
     * @param request The user impersonate request.
     
     */
    public apiNskV1UserImpersonatePost = (request?: UserImpersonateRequest, ) => {

            const requestObj: Request<{
                request?: UserImpersonateRequest, 
            }> = {
                url: '/api/nsk/v1/user/impersonate',
                method: 'post',
                data: {
                    request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Changes the logged in user&#39;s password.
     * 
     * @param request The change password request.
     
     */
    public apiNskV1UserPasswordChangePost = (request?: UserChangePasswordRequestBase, ) => {

            const requestObj: Request<{
                request?: UserChangePasswordRequestBase, 
            }> = {
                url: '/api/nsk/v1/user/password/change',
                method: 'post',
                data: {
                    request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Patches the current logged in user.
     * 
     * @param request The user patch request.
     
     */
    public apiNskV1UserPatch = (request?: DeltaMapperUserRequest, ) => {

            const requestObj: Request<{
                request?: DeltaMapperUserRequest, 
            }> = {
                url: '/api/nsk/v1/user',
                method: 'patch',
                data: {
                    request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Creates a user with customer creation parameter defaults.
     * This endpoint will create a user based off the system configured customer creation parameters. The associated  person has to be of type customer or an exception will be thrown. To change these default settings please configure  utilities.
     * @param request The user customer create request.
     
     */
    public apiNskV1UserPost = (request?: UserCustomerCreateRequest, ) => {

            const requestObj: Request<{
                request?: UserCustomerCreateRequest, 
            }> = {
                url: '/api/nsk/v1/user',
                method: 'post',
                data: {
                    request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Updates the current logged in user.
     * 
     * @param request The user edit request.
     
     */
    public apiNskV1UserPut = (request?: UserRequest, ) => {

            const requestObj: Request<{
                request?: UserRequest, 
            }> = {
                url: '/api/nsk/v1/user',
                method: 'put',
                data: {
                    request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Delets a specific role on the logged in user.
     * 
     * @param userRoleKey The unique user role key.
     
     */
    public apiNskV1UserRolesByUserRoleKeyDelete = (userRoleKey: string, ) => {
        if (!userRoleKey){
            throw new Error('Required parameter userRoleKey was null or undefined when calling apiNskV1UserRolesByUserRoleKeyDelete.');
        }


            const requestObj: Request<{
                userRoleKey: string, 
            }> = {
                url: '/api/nsk/v1/user/roles/${encodeURIComponent(String(userRoleKey))}',
                method: 'delete',
                data: {
                    userRoleKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets a specific role from the logged in user.
     * 
     * @param userRoleKey The unique user role key
     
     */
    public apiNskV1UserRolesByUserRoleKeyGet = (userRoleKey: string, ) => {
        if (!userRoleKey){
            throw new Error('Required parameter userRoleKey was null or undefined when calling apiNskV1UserRolesByUserRoleKeyGet.');
        }


            const requestObj: Request<{
                userRoleKey: string, 
            }> = {
                url: '/api/nsk/v1/user/roles/${encodeURIComponent(String(userRoleKey))}',
                method: 'get',
                data: {
                    userRoleKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Patches a specific role on the logged in user.
     * 
     * @param userRoleKey The unique user role key.
     * @param request The patched role.
     
     */
    public apiNskV1UserRolesByUserRoleKeyPatch = (userRoleKey: string, request?: DeltaMapperUserRolePatchRequest, ) => {
        if (!userRoleKey){
            throw new Error('Required parameter userRoleKey was null or undefined when calling apiNskV1UserRolesByUserRoleKeyPatch.');
        }


            const requestObj: Request<{
                userRoleKey: string, request?: DeltaMapperUserRolePatchRequest, 
            }> = {
                url: '/api/nsk/v1/user/roles/${encodeURIComponent(String(userRoleKey))}',
                method: 'patch',
                data: {
                    userRoleKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Updates a specific role on the logged in user.
     * 
     * @param userRoleKey The unique user role key.
     * @param request The modified role.
     
     */
    public apiNskV1UserRolesByUserRoleKeyPut = (userRoleKey: string, request?: UserRoleEditRequest, ) => {
        if (!userRoleKey){
            throw new Error('Required parameter userRoleKey was null or undefined when calling apiNskV1UserRolesByUserRoleKeyPut.');
        }


            const requestObj: Request<{
                userRoleKey: string, request?: UserRoleEditRequest, 
            }> = {
                url: '/api/nsk/v1/user/roles/${encodeURIComponent(String(userRoleKey))}',
                method: 'put',
                data: {
                    userRoleKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets all roles from the logged in user.
     * 
     
     */
    public apiNskV1UserRolesGet = () => {

            const requestObj: Request<{
                
            }> = {
                url: '/api/nsk/v1/user/roles',
                method: 'get',
                data: {
                    
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Creates a new role on the logged in user.
     * 
     * @param request The new role.
     
     */
    public apiNskV1UserRolesPost = (request?: UserRoleCreateRequest, ) => {

            const requestObj: Request<{
                request?: UserRoleCreateRequest, 
            }> = {
                url: '/api/nsk/v1/user/roles',
                method: 'post',
                data: {
                    request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Deletes a token associated with the single sign on provider from the logged-in user.
     * 
     * @param providerKey The single sign on provider key.
     
     */
    public apiNskV1UserSingleSignOnTokenByProviderKeyDelete = (providerKey: string, ) => {
        if (!providerKey){
            throw new Error('Required parameter providerKey was null or undefined when calling apiNskV1UserSingleSignOnTokenByProviderKeyDelete.');
        }


            const requestObj: Request<{
                providerKey: string, 
            }> = {
                url: '/api/nsk/v1/user/singleSignOnToken/${encodeURIComponent(String(providerKey))}',
                method: 'delete',
                data: {
                    providerKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets a single sign on token associated with a specific user.
     * 
     * @param providerKey The single sign on provider key.
     
     */
    public apiNskV1UserSingleSignOnTokenByProviderKeyGet = (providerKey: string, ) => {
        if (!providerKey){
            throw new Error('Required parameter providerKey was null or undefined when calling apiNskV1UserSingleSignOnTokenByProviderKeyGet.');
        }


            const requestObj: Request<{
                providerKey: string, 
            }> = {
                url: '/api/nsk/v1/user/singleSignOnToken/${encodeURIComponent(String(providerKey))}',
                method: 'get',
                data: {
                    providerKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Patches an existing token associated with the logged-in user.
     * 
     * @param providerKey The single sign on provider key.
     * @param tokenRequest The single sign on token request.
     
     */
    public apiNskV1UserSingleSignOnTokenByProviderKeyPatch = (providerKey: string, tokenRequest?: DeltaMapperSingleSignOnTokenRequest, ) => {
        if (!providerKey){
            throw new Error('Required parameter providerKey was null or undefined when calling apiNskV1UserSingleSignOnTokenByProviderKeyPatch.');
        }


            const requestObj: Request<{
                providerKey: string, tokenRequest?: DeltaMapperSingleSignOnTokenRequest, 
            }> = {
                url: '/api/nsk/v1/user/singleSignOnToken/${encodeURIComponent(String(providerKey))}',
                method: 'patch',
                data: {
                    providerKey,tokenRequest,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Links the requested token with the logged-in user.
     * 
     * @param providerKey The single sign on provider key.
     * @param tokenRequest The single sign on token request.
     
     */
    public apiNskV1UserSingleSignOnTokenByProviderKeyPost = (providerKey: string, tokenRequest?: SingleSignOnTokenRequest, ) => {
        if (!providerKey){
            throw new Error('Required parameter providerKey was null or undefined when calling apiNskV1UserSingleSignOnTokenByProviderKeyPost.');
        }


            const requestObj: Request<{
                providerKey: string, tokenRequest?: SingleSignOnTokenRequest, 
            }> = {
                url: '/api/nsk/v1/user/singleSignOnToken/${encodeURIComponent(String(providerKey))}',
                method: 'post',
                data: {
                    providerKey,tokenRequest,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Updates an existing token associated with the logged-in user.
     * 
     * @param providerKey The single sign on provider key.
     * @param tokenRequest The single sign on token request.
     
     */
    public apiNskV1UserSingleSignOnTokenByProviderKeyPut = (providerKey: string, tokenRequest?: SingleSignOnTokenRequest, ) => {
        if (!providerKey){
            throw new Error('Required parameter providerKey was null or undefined when calling apiNskV1UserSingleSignOnTokenByProviderKeyPut.');
        }


            const requestObj: Request<{
                providerKey: string, tokenRequest?: SingleSignOnTokenRequest, 
            }> = {
                url: '/api/nsk/v1/user/singleSignOnToken/${encodeURIComponent(String(providerKey))}',
                method: 'put',
                data: {
                    providerKey,tokenRequest,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets all of the single sign on tokens associated with a specific user.
     * 
     
     */
    public apiNskV1UserSingleSignOnTokenGet = () => {

            const requestObj: Request<{
                
            }> = {
                url: '/api/nsk/v1/user/singleSignOnToken',
                method: 'get',
                data: {
                    
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Creates a user with customer creation parameter defaults.
     * This endpoint will create a user based off the system configured customer creation parameters. The associated  person has to be of type customer or an exception will be thrown. To change these default settings please configure  utilities.
     * @param request The user customer create request v2.
     
     */
    public apiNskV2UserPost = (request?: UserCustomerCreateRequestv2, ) => {

            const requestObj: Request<{
                request?: UserCustomerCreateRequestv2, 
            }> = {
                url: '/api/nsk/v2/user',
                method: 'post',
                data: {
                    request,
                }
            };
            return this.client.makeRequest(requestObj);
    }

}
