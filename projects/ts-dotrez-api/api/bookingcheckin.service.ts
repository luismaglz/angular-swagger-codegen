/**
 * API - Current Routes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: trunk
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from "rxjs/Observable";
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import IHttpClient from "../IHttpClient";
import { inject, injectable } from "inversify";
import { IAPIConfiguration } from "../IAPIConfiguration";
import { Headers } from "../Headers";
import HttpResponse from "../HttpResponse";

import { CheckinPassengerLiftStatus } from '../model/checkinPassengerLiftStatus';
import { CheckinPassengersRequest } from '../model/checkinPassengersRequest';
import { CheckinPassengersRequestv3 } from '../model/checkinPassengersRequestv3';
import { CheckinRequirements } from '../model/checkinRequirements';
import { IJsonResponse } from '../model/iJsonResponse';
import { InlineResponse2003 } from '../model/inlineResponse2003';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class BookingcheckinService {
    private basePath: string = 'https://localhost';

    constructor(@inject("IApiHttpClient") private httpClient: IHttpClient,
        @inject("IAPIConfiguration") private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * Removes the checkin status of passengers for a specific journey in state.
     * 
     * @param journeyKey The journey key.
     * @param request The checkin passengers request.
     
     */
    public apiNskV1BookingCheckinJourneyByJourneyKeyDelete(journeyKey: string, request?: CheckinPassengersRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1BookingCheckinJourneyByJourneyKeyDelete(journeyKey: string, request?: CheckinPassengersRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1BookingCheckinJourneyByJourneyKeyDelete(journeyKey: string, request?: CheckinPassengersRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!journeyKey){
            throw new Error('Required parameter journeyKey was null or undefined when calling apiNskV1BookingCheckinJourneyByJourneyKeyDelete.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.delete(`${this.basePath}/api/nsk/v1/booking/checkin/journey/${encodeURIComponent(String(journeyKey))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets the checkin pre-validation requirements for a specific journey.
     * 
     * @param journeyKey The journey key to be pre validate checkin with.
     
     */
    public apiNskV1BookingCheckinJourneyByJourneyKeyRequirementsGet(journeyKey: string, observe?: 'body', headers?: Headers): Observable<CheckinRequirements>;
    public apiNskV1BookingCheckinJourneyByJourneyKeyRequirementsGet(journeyKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<CheckinRequirements>>;
    public apiNskV1BookingCheckinJourneyByJourneyKeyRequirementsGet(journeyKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!journeyKey){
            throw new Error('Required parameter journeyKey was null or undefined when calling apiNskV1BookingCheckinJourneyByJourneyKeyRequirementsGet.');
        }


        const response: Observable<HttpResponse<CheckinRequirements>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/booking/checkin/journey/${encodeURIComponent(String(journeyKey))}/requirements`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <CheckinRequirements>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets the passengers lift status for a specific journey based on the booking in state.
     * 
     * @param journeyKey The journey to check lift statuses.
     
     */
    public apiNskV1BookingCheckinJourneyByJourneyKeyStatusGet(journeyKey: string, observe?: 'body', headers?: Headers): Observable<Array<CheckinPassengerLiftStatus>>;
    public apiNskV1BookingCheckinJourneyByJourneyKeyStatusGet(journeyKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<CheckinPassengerLiftStatus>>>;
    public apiNskV1BookingCheckinJourneyByJourneyKeyStatusGet(journeyKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!journeyKey){
            throw new Error('Required parameter journeyKey was null or undefined when calling apiNskV1BookingCheckinJourneyByJourneyKeyStatusGet.');
        }


        const response: Observable<HttpResponse<Array<CheckinPassengerLiftStatus>>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/booking/checkin/journey/${encodeURIComponent(String(journeyKey))}/status`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<CheckinPassengerLiftStatus>>(httpResponse.response));
        }
        return response;
    }


    /**
     * Removes the checkin status of passengers for a specific journey&#39;s segment in state.
     * 
     * @param segmentKey The segment key.
     * @param request The checkin passengers request.
     
     */
    public apiNskV1BookingCheckinSegmentBySegmentKeyDelete(segmentKey: string, request?: CheckinPassengersRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1BookingCheckinSegmentBySegmentKeyDelete(segmentKey: string, request?: CheckinPassengersRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1BookingCheckinSegmentBySegmentKeyDelete(segmentKey: string, request?: CheckinPassengersRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!segmentKey){
            throw new Error('Required parameter segmentKey was null or undefined when calling apiNskV1BookingCheckinSegmentBySegmentKeyDelete.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.delete(`${this.basePath}/api/nsk/v1/booking/checkin/segment/${encodeURIComponent(String(segmentKey))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets the checkin pre-validation requirements for a specific journey&#39;s segment.
     * 
     * @param segmentKey The segment key to pre validate checkin with.
     
     */
    public apiNskV1BookingCheckinSegmentBySegmentKeyRequirementsGet(segmentKey: string, observe?: 'body', headers?: Headers): Observable<CheckinRequirements>;
    public apiNskV1BookingCheckinSegmentBySegmentKeyRequirementsGet(segmentKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<CheckinRequirements>>;
    public apiNskV1BookingCheckinSegmentBySegmentKeyRequirementsGet(segmentKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!segmentKey){
            throw new Error('Required parameter segmentKey was null or undefined when calling apiNskV1BookingCheckinSegmentBySegmentKeyRequirementsGet.');
        }


        const response: Observable<HttpResponse<CheckinRequirements>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/booking/checkin/segment/${encodeURIComponent(String(segmentKey))}/requirements`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <CheckinRequirements>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets the passenger lift status for a specific segment based on the booking in state.
     * 
     * @param segmentKey The segment key in reference.
     
     */
    public apiNskV1BookingCheckinSegmentBySegmentKeyStatusGet(segmentKey: string, observe?: 'body', headers?: Headers): Observable<InlineResponse2003>;
    public apiNskV1BookingCheckinSegmentBySegmentKeyStatusGet(segmentKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<InlineResponse2003>>;
    public apiNskV1BookingCheckinSegmentBySegmentKeyStatusGet(segmentKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!segmentKey){
            throw new Error('Required parameter segmentKey was null or undefined when calling apiNskV1BookingCheckinSegmentBySegmentKeyStatusGet.');
        }


        const response: Observable<HttpResponse<InlineResponse2003>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/booking/checkin/segment/${encodeURIComponent(String(segmentKey))}/status`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <InlineResponse2003>(httpResponse.response));
        }
        return response;
    }


    /**
     * Checks in a collection of passengers to a specific journey in state.
     * 
     * @param journeyKey The journey key of the segments to checkin.
     * @param request The checkin passengers request.
     
     */
    public apiNskV3BookingCheckinJourneyByJourneyKeyPost(journeyKey: string, request?: CheckinPassengersRequestv3, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV3BookingCheckinJourneyByJourneyKeyPost(journeyKey: string, request?: CheckinPassengersRequestv3, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV3BookingCheckinJourneyByJourneyKeyPost(journeyKey: string, request?: CheckinPassengersRequestv3, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!journeyKey){
            throw new Error('Required parameter journeyKey was null or undefined when calling apiNskV3BookingCheckinJourneyByJourneyKeyPost.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.post(`${this.basePath}/api/nsk/v3/booking/checkin/journey/${encodeURIComponent(String(journeyKey))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Checks in a collection of passengers to a specific journey&#39;s segment in state.
     * 
     * @param segmentKey The segment key of the segment to checkin.
     * @param request The checkin passengers request.
     
     */
    public apiNskV3BookingCheckinSegmentBySegmentKeyPost(segmentKey: string, request?: CheckinPassengersRequestv3, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV3BookingCheckinSegmentBySegmentKeyPost(segmentKey: string, request?: CheckinPassengersRequestv3, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV3BookingCheckinSegmentBySegmentKeyPost(segmentKey: string, request?: CheckinPassengersRequestv3, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!segmentKey){
            throw new Error('Required parameter segmentKey was null or undefined when calling apiNskV3BookingCheckinSegmentBySegmentKeyPost.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.post(`${this.basePath}/api/nsk/v3/booking/checkin/segment/${encodeURIComponent(String(segmentKey))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }

}
