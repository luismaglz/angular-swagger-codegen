/**
 * API - Current Routes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: trunk
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from "rxjs/Observable";
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import IHttpClient from "../IHttpClient";
import { inject, injectable } from "inversify";
import { IAPIConfiguration } from "../IAPIConfiguration";
import { Headers } from "../Headers";
import HttpResponse from "../HttpResponse";

import * as Models from '../models';
import { Dictionary } from '../models';
import * as Enums from '../enums';
import { getClient, Request } from '../helper';

import { CheckinPassengerLiftStatus } from '../model/checkinPassengerLiftStatus';
import { CheckinPassengersRequest } from '../model/checkinPassengersRequest';
import { CheckinPassengersRequestv3 } from '../model/checkinPassengersRequestv3';
import { CheckinRequirements } from '../model/checkinRequirements';
import { IJsonResponse } from '../model/iJsonResponse';
import { InlineResponse2003 } from '../model/inlineResponse2003';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class BookingcheckinService {

    constructor(@inject(HTTP_CLIENT) protected client: ApiHttpClient) {}

    /**
     * Removes the checkin status of passengers for a specific journey in state.
     * 
     * @param journeyKey The journey key.
     * @param request The checkin passengers request.
     
     */
    public apiNskV1BookingCheckinJourneyByJourneyKeyDelete = (journeyKey: string, request?: CheckinPassengersRequest, ) => {
        if (!journeyKey){
            throw new Error('Required parameter journeyKey was null or undefined when calling apiNskV1BookingCheckinJourneyByJourneyKeyDelete.');
        }


            const requestObj: Request<{
                journeyKey: string, request?: CheckinPassengersRequest, 
            }> = {
                url: '/api/nsk/v1/booking/checkin/journey/${encodeURIComponent(String(journeyKey))}',
                method: 'delete',
                data: {
                    journeyKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets the checkin pre-validation requirements for a specific journey.
     * 
     * @param journeyKey The journey key to be pre validate checkin with.
     
     */
    public apiNskV1BookingCheckinJourneyByJourneyKeyRequirementsGet = (journeyKey: string, ) => {
        if (!journeyKey){
            throw new Error('Required parameter journeyKey was null or undefined when calling apiNskV1BookingCheckinJourneyByJourneyKeyRequirementsGet.');
        }


            const requestObj: Request<{
                journeyKey: string, 
            }> = {
                url: '/api/nsk/v1/booking/checkin/journey/${encodeURIComponent(String(journeyKey))}/requirements',
                method: 'get',
                data: {
                    journeyKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets the passengers lift status for a specific journey based on the booking in state.
     * 
     * @param journeyKey The journey to check lift statuses.
     
     */
    public apiNskV1BookingCheckinJourneyByJourneyKeyStatusGet = (journeyKey: string, ) => {
        if (!journeyKey){
            throw new Error('Required parameter journeyKey was null or undefined when calling apiNskV1BookingCheckinJourneyByJourneyKeyStatusGet.');
        }


            const requestObj: Request<{
                journeyKey: string, 
            }> = {
                url: '/api/nsk/v1/booking/checkin/journey/${encodeURIComponent(String(journeyKey))}/status',
                method: 'get',
                data: {
                    journeyKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Removes the checkin status of passengers for a specific journey&#39;s segment in state.
     * 
     * @param segmentKey The segment key.
     * @param request The checkin passengers request.
     
     */
    public apiNskV1BookingCheckinSegmentBySegmentKeyDelete = (segmentKey: string, request?: CheckinPassengersRequest, ) => {
        if (!segmentKey){
            throw new Error('Required parameter segmentKey was null or undefined when calling apiNskV1BookingCheckinSegmentBySegmentKeyDelete.');
        }


            const requestObj: Request<{
                segmentKey: string, request?: CheckinPassengersRequest, 
            }> = {
                url: '/api/nsk/v1/booking/checkin/segment/${encodeURIComponent(String(segmentKey))}',
                method: 'delete',
                data: {
                    segmentKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets the checkin pre-validation requirements for a specific journey&#39;s segment.
     * 
     * @param segmentKey The segment key to pre validate checkin with.
     
     */
    public apiNskV1BookingCheckinSegmentBySegmentKeyRequirementsGet = (segmentKey: string, ) => {
        if (!segmentKey){
            throw new Error('Required parameter segmentKey was null or undefined when calling apiNskV1BookingCheckinSegmentBySegmentKeyRequirementsGet.');
        }


            const requestObj: Request<{
                segmentKey: string, 
            }> = {
                url: '/api/nsk/v1/booking/checkin/segment/${encodeURIComponent(String(segmentKey))}/requirements',
                method: 'get',
                data: {
                    segmentKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets the passenger lift status for a specific segment based on the booking in state.
     * 
     * @param segmentKey The segment key in reference.
     
     */
    public apiNskV1BookingCheckinSegmentBySegmentKeyStatusGet = (segmentKey: string, ) => {
        if (!segmentKey){
            throw new Error('Required parameter segmentKey was null or undefined when calling apiNskV1BookingCheckinSegmentBySegmentKeyStatusGet.');
        }


            const requestObj: Request<{
                segmentKey: string, 
            }> = {
                url: '/api/nsk/v1/booking/checkin/segment/${encodeURIComponent(String(segmentKey))}/status',
                method: 'get',
                data: {
                    segmentKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Checks in a collection of passengers to a specific journey in state.
     * 
     * @param journeyKey The journey key of the segments to checkin.
     * @param request The checkin passengers request.
     
     */
    public apiNskV3BookingCheckinJourneyByJourneyKeyPost = (journeyKey: string, request?: CheckinPassengersRequestv3, ) => {
        if (!journeyKey){
            throw new Error('Required parameter journeyKey was null or undefined when calling apiNskV3BookingCheckinJourneyByJourneyKeyPost.');
        }


            const requestObj: Request<{
                journeyKey: string, request?: CheckinPassengersRequestv3, 
            }> = {
                url: '/api/nsk/v3/booking/checkin/journey/${encodeURIComponent(String(journeyKey))}',
                method: 'post',
                data: {
                    journeyKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Checks in a collection of passengers to a specific journey&#39;s segment in state.
     * 
     * @param segmentKey The segment key of the segment to checkin.
     * @param request The checkin passengers request.
     
     */
    public apiNskV3BookingCheckinSegmentBySegmentKeyPost = (segmentKey: string, request?: CheckinPassengersRequestv3, ) => {
        if (!segmentKey){
            throw new Error('Required parameter segmentKey was null or undefined when calling apiNskV3BookingCheckinSegmentBySegmentKeyPost.');
        }


            const requestObj: Request<{
                segmentKey: string, request?: CheckinPassengersRequestv3, 
            }> = {
                url: '/api/nsk/v3/booking/checkin/segment/${encodeURIComponent(String(segmentKey))}',
                method: 'post',
                data: {
                    segmentKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }

}
