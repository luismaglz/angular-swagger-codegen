/**
 * API - Current Routes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: trunk
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from "rxjs/Observable";
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import IHttpClient from "../IHttpClient";
import { inject, injectable } from "inversify";
import { IAPIConfiguration } from "../IAPIConfiguration";
import { Headers } from "../Headers";
import HttpResponse from "../HttpResponse";

import * as Models from '../models';
import { Dictionary } from '../models';
import * as Enums from '../enums';
import { getClient, Request } from '../helper';

import { IJsonResponse } from '../model/iJsonResponse';
import { MessageBase } from '../model/messageBase';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class MessagesService {

    constructor(@inject(HTTP_CLIENT) protected client: ApiHttpClient) {}

    /**
     * Deletes a message item.
     * 
     * @param messageKey The key of the message to delete.
     
     */
    public apiNskV1MessagesByMessageKeyDelete = (messageKey: string, ) => {
        if (!messageKey){
            throw new Error('Required parameter messageKey was null or undefined when calling apiNskV1MessagesByMessageKeyDelete.');
        }


            const requestObj: Request<{
                messageKey: string, 
            }> = {
                url: '/api/nsk/v1/messages/${encodeURIComponent(String(messageKey))}',
                method: 'delete',
                data: {
                    messageKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves a specific message item.
     * 
     * @param messageKey The key of the message to be retrieved.
     
     */
    public apiNskV1MessagesByMessageKeyGet = (messageKey: string, ) => {
        if (!messageKey){
            throw new Error('Required parameter messageKey was null or undefined when calling apiNskV1MessagesByMessageKeyGet.');
        }


            const requestObj: Request<{
                messageKey: string, 
            }> = {
                url: '/api/nsk/v1/messages/${encodeURIComponent(String(messageKey))}',
                method: 'get',
                data: {
                    messageKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves a collection of messages based on search criteria.
     * 
     * @param searchType The type of search to be performed.
     * @param messageTypeCode The message type code to search for.
     * @param searchStartDate The start of created date range to search for.
     * @param searchEndDate The end of created date range to search for.
     * @param pageSize The number of records to return when paging.
     * @param lastIndex The index of the last set of records retrieved when paging.
     * @param searchValue The search query.
     
     */
    public apiNskV1MessagesGet = (searchType: 'StartsWith' | 'EndsWith' | 'Contains' | 'ExactMatch', messageTypeCode?: string, searchStartDate?: Date, searchEndDate?: Date, pageSize?: number, lastIndex?: number, searchValue?: string, ) => {
        if (!searchType){
            throw new Error('Required parameter searchType was null or undefined when calling apiNskV1MessagesGet.');
        }

        let queryParameters: string[] = [];
        if (messageTypeCode !== undefined) {
            queryParameters.push("messageTypeCode="+encodeURIComponent(String(messageTypeCode)));
        }
        if (searchStartDate !== undefined) {
           queryParameters.push("searchStartDate="+encodeURIComponent(<any>searchStartDate.toISOString()));
        }
        if (searchEndDate !== undefined) {
           queryParameters.push("searchEndDate="+encodeURIComponent(<any>searchEndDate.toISOString()));
        }
        if (pageSize !== undefined) {
            queryParameters.push("pageSize="+encodeURIComponent(String(pageSize)));
        }
        if (lastIndex !== undefined) {
            queryParameters.push("lastIndex="+encodeURIComponent(String(lastIndex)));
        }
        if (searchValue !== undefined) {
            queryParameters.push("searchValue="+encodeURIComponent(String(searchValue)));
        }
        if (searchType !== undefined) {
            queryParameters.push("searchType="+encodeURIComponent(String(searchType)));
        }


            const requestObj: Request<{
                searchType: 'StartsWith' | 'EndsWith' | 'Contains' | 'ExactMatch', messageTypeCode?: string, searchStartDate?: Date, searchEndDate?: Date, pageSize?: number, lastIndex?: number, searchValue?: string, 
            }> = {
                url: '/api/nsk/v1/messages',
                method: 'get',
                data: {
                    searchType,messageTypeCode,searchStartDate,searchEndDate,pageSize,lastIndex,searchValue,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Adds a new message item.
     * 
     * @param request The message queue.
     
     */
    public apiNskV1MessagesPost = (request?: MessageBase, ) => {

            const requestObj: Request<{
                request?: MessageBase, 
            }> = {
                url: '/api/nsk/v1/messages',
                method: 'post',
                data: {
                    request,
                }
            };
            return this.client.makeRequest(requestObj);
    }

}
