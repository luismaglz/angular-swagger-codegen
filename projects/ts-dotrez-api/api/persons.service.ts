/**
 * API - Current Routes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: trunk
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from "rxjs/Observable";
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import IHttpClient from "../IHttpClient";
import { inject, injectable } from "inversify";
import { IAPIConfiguration } from "../IAPIConfiguration";
import { Headers } from "../Headers";
import HttpResponse from "../HttpResponse";

import * as Models from '../models';
import { Dictionary } from '../models';
import * as Enums from '../enums';
import { getClient, Request } from '../helper';

import { Account } from '../model/account';
import { AccountCollectionRequest } from '../model/accountCollectionRequest';
import { CreateAccountRequest } from '../model/createAccountRequest';
import { DeltaMapperPersonAddressEditRequest } from '../model/deltaMapperPersonAddressEditRequest';
import { DeltaMapperPersonAliasRequest } from '../model/deltaMapperPersonAliasRequest';
import { DeltaMapperPersonCommentRequest } from '../model/deltaMapperPersonCommentRequest';
import { DeltaMapperPersonCustomerProgramEditRequest } from '../model/deltaMapperPersonCustomerProgramEditRequest';
import { DeltaMapperPersonEditRequest } from '../model/deltaMapperPersonEditRequest';
import { DeltaMapperPersonEmailEditRequest } from '../model/deltaMapperPersonEmailEditRequest';
import { DeltaMapperPersonInformationEditRequest } from '../model/deltaMapperPersonInformationEditRequest';
import { DeltaMapperPersonPhoneNumberRequest } from '../model/deltaMapperPersonPhoneNumberRequest';
import { DeltaMapperPersonPreferenceEditRequest } from '../model/deltaMapperPersonPreferenceEditRequest';
import { DeltaMapperPersonStoredPaymentUpdateRequest } from '../model/deltaMapperPersonStoredPaymentUpdateRequest';
import { DeltaMapperTravelDocumentEditRequestv2 } from '../model/deltaMapperTravelDocumentEditRequestv2';
import { DeltaMapperTravelNotificationEditRequest } from '../model/deltaMapperTravelNotificationEditRequest';
import { IJsonResponse } from '../model/iJsonResponse';
import { NotificationEvent } from '../model/notificationEvent';
import { NotificationEventCreateRequest } from '../model/notificationEventCreateRequest';
import { NotificationTimedEvent } from '../model/notificationTimedEvent';
import { NotificationTimedEventCreateRequest } from '../model/notificationTimedEventCreateRequest';
import { NotificationTimedEventEditRequest } from '../model/notificationTimedEventEditRequest';
import { Person } from '../model/person';
import { PersonAddress } from '../model/personAddress';
import { PersonAddressCreateRequest } from '../model/personAddressCreateRequest';
import { PersonAddressEditRequest } from '../model/personAddressEditRequest';
import { PersonAlias } from '../model/personAlias';
import { PersonAliasRequest } from '../model/personAliasRequest';
import { PersonComment } from '../model/personComment';
import { PersonCommentRequest } from '../model/personCommentRequest';
import { PersonCreateRequest } from '../model/personCreateRequest';
import { PersonCustomerProgram } from '../model/personCustomerProgram';
import { PersonCustomerProgramCreateRequest } from '../model/personCustomerProgramCreateRequest';
import { PersonCustomerProgramEditRequest } from '../model/personCustomerProgramEditRequest';
import { PersonEditRequest } from '../model/personEditRequest';
import { PersonEmail } from '../model/personEmail';
import { PersonEmailCreateRequest } from '../model/personEmailCreateRequest';
import { PersonEmailEditRequest } from '../model/personEmailEditRequest';
import { PersonInformation } from '../model/personInformation';
import { PersonInformationCreateRequest } from '../model/personInformationCreateRequest';
import { PersonInformationEditRequest } from '../model/personInformationEditRequest';
import { PersonPhoneNumber } from '../model/personPhoneNumber';
import { PersonPhoneNumberRequest } from '../model/personPhoneNumberRequest';
import { PersonPreference } from '../model/personPreference';
import { PersonPreferenceCreateRequest } from '../model/personPreferenceCreateRequest';
import { PersonPreferenceEditRequest } from '../model/personPreferenceEditRequest';
import { PersonRecord } from '../model/personRecord';
import { PersonStoredPayment } from '../model/personStoredPayment';
import { PersonStoredPaymentRequest } from '../model/personStoredPaymentRequest';
import { PersonTravelDocument } from '../model/personTravelDocument';
import { PersonTravelDocumentRequest } from '../model/personTravelDocumentRequest';
import { Transaction } from '../model/transaction';
import { TransactionRequest } from '../model/transactionRequest';
import { TravelDocumentEditRequestv2 } from '../model/travelDocumentEditRequestv2';
import { TravelNotification } from '../model/travelNotification';
import { TravelNotificationCreateRequest } from '../model/travelNotificationCreateRequest';
import { TravelNotificationEditRequest } from '../model/travelNotificationEditRequest';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class PersonsService {

    constructor(@inject(HTTP_CLIENT) protected client: ApiHttpClient) {}

    /**
     * Retrieves the person account collection transactions based on the person key,  the account collection key, and data in the request.
     * 
     * @param personKey The person key.
     * @param accountCollectionKey The account collection key.
     * @param startTime The starting date and time of the date range to search in.
     * @param sortByNewest Optional filter to sort results by newest.
     * @param endTime The end date and time of the date range to search in.
     * @param pageSize Used to specify the number of records to return.
     * @param pageIndex Represents the index of the requested paged item.
     
     */
    public apiNskV1PersonsByPersonKeyAccountCollectionByAccountCollectionKeyTransactionsGet = (personKey: string, accountCollectionKey: string, startTime: Date, sortByNewest: boolean, endTime?: Date, pageSize?: number, pageIndex?: number, ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyAccountCollectionByAccountCollectionKeyTransactionsGet.');
        }

        if (!accountCollectionKey){
            throw new Error('Required parameter accountCollectionKey was null or undefined when calling apiNskV1PersonsByPersonKeyAccountCollectionByAccountCollectionKeyTransactionsGet.');
        }

        if (!startTime){
            throw new Error('Required parameter startTime was null or undefined when calling apiNskV1PersonsByPersonKeyAccountCollectionByAccountCollectionKeyTransactionsGet.');
        }

        if (!sortByNewest){
            throw new Error('Required parameter sortByNewest was null or undefined when calling apiNskV1PersonsByPersonKeyAccountCollectionByAccountCollectionKeyTransactionsGet.');
        }

        let queryParameters: string[] = [];
        if (startTime !== undefined) {
           queryParameters.push("startTime="+encodeURIComponent(<any>startTime.toISOString()));
        }
        if (endTime !== undefined) {
           queryParameters.push("endTime="+encodeURIComponent(<any>endTime.toISOString()));
        }
        if (sortByNewest !== undefined) {
            queryParameters.push("sortByNewest="+encodeURIComponent(String(sortByNewest)));
        }
        if (pageSize !== undefined) {
            queryParameters.push("pageSize="+encodeURIComponent(String(pageSize)));
        }
        if (pageIndex !== undefined) {
            queryParameters.push("pageIndex="+encodeURIComponent(String(pageIndex)));
        }


            const requestObj: Request<{
                personKey: string, accountCollectionKey: string, startTime: Date, sortByNewest: boolean, endTime?: Date, pageSize?: number, pageIndex?: number, 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/account/collection/${encodeURIComponent(String(accountCollectionKey))}/transactions',
                method: 'get',
                data: {
                    personKey,accountCollectionKey,startTime,sortByNewest,endTime,pageSize,pageIndex,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Creates an account collection transaction based on the person key, the  account collection key, and data in the request.
     * This endpoint will add a transaction to an existing account collection.  If there are no account collections, or the account collection key does  not match an existing collection, the request will fail.  To add a new account collection, see /api/nsk/v1/persons/{personKey}/account/collection.
     * @param personKey The person key.
     * @param accountCollectionKey The account collection key.
     * @param request The create transaction request.
     
     */
    public apiNskV1PersonsByPersonKeyAccountCollectionByAccountCollectionKeyTransactionsPost = (personKey: string, accountCollectionKey: string, request?: TransactionRequest, ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyAccountCollectionByAccountCollectionKeyTransactionsPost.');
        }

        if (!accountCollectionKey){
            throw new Error('Required parameter accountCollectionKey was null or undefined when calling apiNskV1PersonsByPersonKeyAccountCollectionByAccountCollectionKeyTransactionsPost.');
        }


            const requestObj: Request<{
                personKey: string, accountCollectionKey: string, request?: TransactionRequest, 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/account/collection/${encodeURIComponent(String(accountCollectionKey))}/transactions',
                method: 'post',
                data: {
                    personKey,accountCollectionKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Creates an account collection based on the person key and data in the request.
     * This endpoint will create a new account collection and a transaction if no account  transaction exists or no matching collection is found.  An account collection is unique  based on the transaction code and the expiration date.  If a matching account collection  is found, a transaction for that collection is generated and the account collection will  be updated.  See /api/nsk/v1/resources/accountTransactionCodes for a list of available account transaction  codes.
     * @param personKey The person key.
     * @param request The create account collection request.
     
     */
    public apiNskV1PersonsByPersonKeyAccountCollectionPost = (personKey: string, request?: AccountCollectionRequest, ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyAccountCollectionPost.');
        }


            const requestObj: Request<{
                personKey: string, request?: AccountCollectionRequest, 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/account/collection',
                method: 'post',
                data: {
                    personKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the person account and credits based on the person key.
     * 
     * @param personKey The person key.
     
     */
    public apiNskV1PersonsByPersonKeyAccountGet = (personKey: string, ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyAccountGet.');
        }


            const requestObj: Request<{
                personKey: string, 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/account',
                method: 'get',
                data: {
                    personKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Creates the person account based on the person key and  data in the request.
     * 
     * @param personKey The person key.
     * @param request The create account request.
     
     */
    public apiNskV1PersonsByPersonKeyAccountPost = (personKey: string, request?: CreateAccountRequest, ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyAccountPost.');
        }


            const requestObj: Request<{
                personKey: string, request?: CreateAccountRequest, 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/account',
                method: 'post',
                data: {
                    personKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Updates the person account status.
     * 
     * @param personKey The person key.
     * @param status The new account status.
     
     */
    public apiNskV1PersonsByPersonKeyAccountStatusPut = (personKey: string, status: 'Open' | 'Closed' | 'AgencyInactive' | 'Unknown', ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyAccountStatusPut.');
        }

        if (!status){
            throw new Error('Required parameter status was null or undefined when calling apiNskV1PersonsByPersonKeyAccountStatusPut.');
        }

        let queryParameters: string[] = [];
        if (status !== undefined) {
            queryParameters.push("status="+encodeURIComponent(String(status)));
        }


            const requestObj: Request<{
                personKey: string, status: 'Open' | 'Closed' | 'AgencyInactive' | 'Unknown', 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/account/status',
                method: 'put',
                data: {
                    personKey,status,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves all transactions for every collection.
     * 
     * @param personKey The person key.
     * @param startTime The starting date and time of the date range to search in.
     * @param sortByNewest Optional filter to sort results by newest.
     * @param endTime The end date and time of the date range to search in.
     * @param pageSize Used to specify the number of records to return.
     * @param pageIndex Represents the index of the requested paged item.
     
     */
    public apiNskV1PersonsByPersonKeyAccountTransactionsGet = (personKey: string, startTime: Date, sortByNewest: boolean, endTime?: Date, pageSize?: number, pageIndex?: number, ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyAccountTransactionsGet.');
        }

        if (!startTime){
            throw new Error('Required parameter startTime was null or undefined when calling apiNskV1PersonsByPersonKeyAccountTransactionsGet.');
        }

        if (!sortByNewest){
            throw new Error('Required parameter sortByNewest was null or undefined when calling apiNskV1PersonsByPersonKeyAccountTransactionsGet.');
        }

        let queryParameters: string[] = [];
        if (startTime !== undefined) {
           queryParameters.push("startTime="+encodeURIComponent(<any>startTime.toISOString()));
        }
        if (endTime !== undefined) {
           queryParameters.push("endTime="+encodeURIComponent(<any>endTime.toISOString()));
        }
        if (sortByNewest !== undefined) {
            queryParameters.push("sortByNewest="+encodeURIComponent(String(sortByNewest)));
        }
        if (pageSize !== undefined) {
            queryParameters.push("pageSize="+encodeURIComponent(String(pageSize)));
        }
        if (pageIndex !== undefined) {
            queryParameters.push("pageIndex="+encodeURIComponent(String(pageIndex)));
        }


            const requestObj: Request<{
                personKey: string, startTime: Date, sortByNewest: boolean, endTime?: Date, pageSize?: number, pageIndex?: number, 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/account/transactions',
                method: 'get',
                data: {
                    personKey,startTime,sortByNewest,endTime,pageSize,pageIndex,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Deletes a specific address for a specific person.
     * 
     * @param personKey The unique person key.
     * @param personAddressKey The unique person address key.
     
     */
    public apiNskV1PersonsByPersonKeyAddressesByPersonAddressKeyDelete = (personKey: string, personAddressKey: string, ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyAddressesByPersonAddressKeyDelete.');
        }

        if (!personAddressKey){
            throw new Error('Required parameter personAddressKey was null or undefined when calling apiNskV1PersonsByPersonKeyAddressesByPersonAddressKeyDelete.');
        }


            const requestObj: Request<{
                personKey: string, personAddressKey: string, 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/addresses/${encodeURIComponent(String(personAddressKey))}',
                method: 'delete',
                data: {
                    personKey,personAddressKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets a specific address for a specific person.
     * 
     * @param personKey The unique person key.
     * @param personAddressKey The unique address key.
     
     */
    public apiNskV1PersonsByPersonKeyAddressesByPersonAddressKeyGet = (personKey: string, personAddressKey: string, ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyAddressesByPersonAddressKeyGet.');
        }

        if (!personAddressKey){
            throw new Error('Required parameter personAddressKey was null or undefined when calling apiNskV1PersonsByPersonKeyAddressesByPersonAddressKeyGet.');
        }


            const requestObj: Request<{
                personKey: string, personAddressKey: string, 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/addresses/${encodeURIComponent(String(personAddressKey))}',
                method: 'get',
                data: {
                    personKey,personAddressKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Patches a specific address for a specific person.
     * 
     * @param personKey The unique person key.
     * @param personAddressKey The unique person address key.
     * @param request The patched address.
     
     */
    public apiNskV1PersonsByPersonKeyAddressesByPersonAddressKeyPatch = (personKey: string, personAddressKey: string, request?: DeltaMapperPersonAddressEditRequest, ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyAddressesByPersonAddressKeyPatch.');
        }

        if (!personAddressKey){
            throw new Error('Required parameter personAddressKey was null or undefined when calling apiNskV1PersonsByPersonKeyAddressesByPersonAddressKeyPatch.');
        }


            const requestObj: Request<{
                personKey: string, personAddressKey: string, request?: DeltaMapperPersonAddressEditRequest, 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/addresses/${encodeURIComponent(String(personAddressKey))}',
                method: 'patch',
                data: {
                    personKey,personAddressKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Updates a specific address for a specific person.
     * 
     * @param personKey The unique person key.
     * @param personAddressKey The unique person address key.
     * @param request The modified address.
     
     */
    public apiNskV1PersonsByPersonKeyAddressesByPersonAddressKeyPut = (personKey: string, personAddressKey: string, request?: PersonAddressEditRequest, ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyAddressesByPersonAddressKeyPut.');
        }

        if (!personAddressKey){
            throw new Error('Required parameter personAddressKey was null or undefined when calling apiNskV1PersonsByPersonKeyAddressesByPersonAddressKeyPut.');
        }


            const requestObj: Request<{
                personKey: string, personAddressKey: string, request?: PersonAddressEditRequest, 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/addresses/${encodeURIComponent(String(personAddressKey))}',
                method: 'put',
                data: {
                    personKey,personAddressKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets the collection of addresses for a specific person.
     * 
     * @param personKey The unique person key.
     
     */
    public apiNskV1PersonsByPersonKeyAddressesGet = (personKey: string, ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyAddressesGet.');
        }


            const requestObj: Request<{
                personKey: string, 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/addresses',
                method: 'get',
                data: {
                    personKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Creates a new address for a specific person.
     * 
     * @param personKey The unique person key.
     * @param request The new address.
     
     */
    public apiNskV1PersonsByPersonKeyAddressesPost = (personKey: string, request?: PersonAddressCreateRequest, ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyAddressesPost.');
        }


            const requestObj: Request<{
                personKey: string, request?: PersonAddressCreateRequest, 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/addresses',
                method: 'post',
                data: {
                    personKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Deletes a specific alias for a specific person.
     * 
     * @param personKey The unique person key.
     * @param personAliasKey The unique person alias key.
     
     */
    public apiNskV1PersonsByPersonKeyAliasesByPersonAliasKeyDelete = (personKey: string, personAliasKey: string, ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyAliasesByPersonAliasKeyDelete.');
        }

        if (!personAliasKey){
            throw new Error('Required parameter personAliasKey was null or undefined when calling apiNskV1PersonsByPersonKeyAliasesByPersonAliasKeyDelete.');
        }


            const requestObj: Request<{
                personKey: string, personAliasKey: string, 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/aliases/${encodeURIComponent(String(personAliasKey))}',
                method: 'delete',
                data: {
                    personKey,personAliasKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets a specific alias for a specific person.
     * 
     * @param personKey The unique person key.
     * @param personAliasKey The unique person alias key.
     
     */
    public apiNskV1PersonsByPersonKeyAliasesByPersonAliasKeyGet = (personKey: string, personAliasKey: string, ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyAliasesByPersonAliasKeyGet.');
        }

        if (!personAliasKey){
            throw new Error('Required parameter personAliasKey was null or undefined when calling apiNskV1PersonsByPersonKeyAliasesByPersonAliasKeyGet.');
        }


            const requestObj: Request<{
                personKey: string, personAliasKey: string, 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/aliases/${encodeURIComponent(String(personAliasKey))}',
                method: 'get',
                data: {
                    personKey,personAliasKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Patches a specific alias for a specific person.
     * 
     * @param personKey The unique person key.
     * @param personAliasKey The unique person alias key.
     * @param request The patched alias.
     
     */
    public apiNskV1PersonsByPersonKeyAliasesByPersonAliasKeyPatch = (personKey: string, personAliasKey: string, request?: DeltaMapperPersonAliasRequest, ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyAliasesByPersonAliasKeyPatch.');
        }

        if (!personAliasKey){
            throw new Error('Required parameter personAliasKey was null or undefined when calling apiNskV1PersonsByPersonKeyAliasesByPersonAliasKeyPatch.');
        }


            const requestObj: Request<{
                personKey: string, personAliasKey: string, request?: DeltaMapperPersonAliasRequest, 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/aliases/${encodeURIComponent(String(personAliasKey))}',
                method: 'patch',
                data: {
                    personKey,personAliasKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Updates a specific alias for a specific person.
     * 
     * @param personKey The unique person key.
     * @param personAliasKey The unique person alias key.
     * @param request The modified alias.
     
     */
    public apiNskV1PersonsByPersonKeyAliasesByPersonAliasKeyPut = (personKey: string, personAliasKey: string, request?: PersonAliasRequest, ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyAliasesByPersonAliasKeyPut.');
        }

        if (!personAliasKey){
            throw new Error('Required parameter personAliasKey was null or undefined when calling apiNskV1PersonsByPersonKeyAliasesByPersonAliasKeyPut.');
        }


            const requestObj: Request<{
                personKey: string, personAliasKey: string, request?: PersonAliasRequest, 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/aliases/${encodeURIComponent(String(personAliasKey))}',
                method: 'put',
                data: {
                    personKey,personAliasKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets the collection of aliases for a specific person.
     * 
     * @param personKey The unique person key.
     
     */
    public apiNskV1PersonsByPersonKeyAliasesGet = (personKey: string, ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyAliasesGet.');
        }


            const requestObj: Request<{
                personKey: string, 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/aliases',
                method: 'get',
                data: {
                    personKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Creates a new alias for a specific person.
     * 
     * @param personKey The unique person key.
     * @param request The new alias.
     
     */
    public apiNskV1PersonsByPersonKeyAliasesPost = (personKey: string, request?: PersonAliasRequest, ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyAliasesPost.');
        }


            const requestObj: Request<{
                personKey: string, request?: PersonAliasRequest, 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/aliases',
                method: 'post',
                data: {
                    personKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Deletes a specific comment for a specific person.
     * 
     * @param personKey The unique person key.
     * @param personCommentKey The unique person comment key.
     
     */
    public apiNskV1PersonsByPersonKeyCommentsByPersonCommentKeyDelete = (personKey: string, personCommentKey: string, ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyCommentsByPersonCommentKeyDelete.');
        }

        if (!personCommentKey){
            throw new Error('Required parameter personCommentKey was null or undefined when calling apiNskV1PersonsByPersonKeyCommentsByPersonCommentKeyDelete.');
        }


            const requestObj: Request<{
                personKey: string, personCommentKey: string, 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/comments/${encodeURIComponent(String(personCommentKey))}',
                method: 'delete',
                data: {
                    personKey,personCommentKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets a specific comment for a specific person.
     * 
     * @param personKey The unique person key.
     * @param personCommentKey The unique comment key.
     
     */
    public apiNskV1PersonsByPersonKeyCommentsByPersonCommentKeyGet = (personKey: string, personCommentKey: string, ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyCommentsByPersonCommentKeyGet.');
        }

        if (!personCommentKey){
            throw new Error('Required parameter personCommentKey was null or undefined when calling apiNskV1PersonsByPersonKeyCommentsByPersonCommentKeyGet.');
        }


            const requestObj: Request<{
                personKey: string, personCommentKey: string, 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/comments/${encodeURIComponent(String(personCommentKey))}',
                method: 'get',
                data: {
                    personKey,personCommentKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Patches a specific comment for a specific person.
     * 
     * @param personKey The unique person key.
     * @param personCommentKey The unique person comment key.
     * @param request The patched comment.
     
     */
    public apiNskV1PersonsByPersonKeyCommentsByPersonCommentKeyPatch = (personKey: string, personCommentKey: string, request?: DeltaMapperPersonCommentRequest, ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyCommentsByPersonCommentKeyPatch.');
        }

        if (!personCommentKey){
            throw new Error('Required parameter personCommentKey was null or undefined when calling apiNskV1PersonsByPersonKeyCommentsByPersonCommentKeyPatch.');
        }


            const requestObj: Request<{
                personKey: string, personCommentKey: string, request?: DeltaMapperPersonCommentRequest, 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/comments/${encodeURIComponent(String(personCommentKey))}',
                method: 'patch',
                data: {
                    personKey,personCommentKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Updates a specific comment for a specific person.
     * 
     * @param personKey The unique person key.
     * @param personCommentKey The unique person comment key.
     * @param request The modified comment.
     
     */
    public apiNskV1PersonsByPersonKeyCommentsByPersonCommentKeyPut = (personKey: string, personCommentKey: string, request?: PersonCommentRequest, ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyCommentsByPersonCommentKeyPut.');
        }

        if (!personCommentKey){
            throw new Error('Required parameter personCommentKey was null or undefined when calling apiNskV1PersonsByPersonKeyCommentsByPersonCommentKeyPut.');
        }


            const requestObj: Request<{
                personKey: string, personCommentKey: string, request?: PersonCommentRequest, 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/comments/${encodeURIComponent(String(personCommentKey))}',
                method: 'put',
                data: {
                    personKey,personCommentKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets the collection of comments for a specific person.
     * 
     * @param personKey The unique person key.
     
     */
    public apiNskV1PersonsByPersonKeyCommentsGet = (personKey: string, ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyCommentsGet.');
        }


            const requestObj: Request<{
                personKey: string, 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/comments',
                method: 'get',
                data: {
                    personKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Creates a new comment for a specific person.
     * 
     * @param personKey The unique person key.
     * @param request The new comment.
     
     */
    public apiNskV1PersonsByPersonKeyCommentsPost = (personKey: string, request?: PersonCommentRequest, ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyCommentsPost.');
        }


            const requestObj: Request<{
                personKey: string, request?: PersonCommentRequest, 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/comments',
                method: 'post',
                data: {
                    personKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Deletes a person by setting the record to terminated.
     * 
     * @param personKey The unique person key.
     
     */
    public apiNskV1PersonsByPersonKeyDelete = (personKey: string, ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyDelete.');
        }


            const requestObj: Request<{
                personKey: string, 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}',
                method: 'delete',
                data: {
                    personKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Deletes a specific email address for a specific person.
     * 
     * @param personKey The unique person key.
     * @param personEmailAddressKey The unique person email address key.
     
     */
    public apiNskV1PersonsByPersonKeyEmailsByPersonEmailAddressKeyDelete = (personKey: string, personEmailAddressKey: string, ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyEmailsByPersonEmailAddressKeyDelete.');
        }

        if (!personEmailAddressKey){
            throw new Error('Required parameter personEmailAddressKey was null or undefined when calling apiNskV1PersonsByPersonKeyEmailsByPersonEmailAddressKeyDelete.');
        }


            const requestObj: Request<{
                personKey: string, personEmailAddressKey: string, 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/emails/${encodeURIComponent(String(personEmailAddressKey))}',
                method: 'delete',
                data: {
                    personKey,personEmailAddressKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets a specific email address for a specific person.
     * 
     * @param personKey The unique person key.
     * @param personEmailAddressKey The unique email address key.
     
     */
    public apiNskV1PersonsByPersonKeyEmailsByPersonEmailAddressKeyGet = (personKey: string, personEmailAddressKey: string, ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyEmailsByPersonEmailAddressKeyGet.');
        }

        if (!personEmailAddressKey){
            throw new Error('Required parameter personEmailAddressKey was null or undefined when calling apiNskV1PersonsByPersonKeyEmailsByPersonEmailAddressKeyGet.');
        }


            const requestObj: Request<{
                personKey: string, personEmailAddressKey: string, 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/emails/${encodeURIComponent(String(personEmailAddressKey))}',
                method: 'get',
                data: {
                    personKey,personEmailAddressKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Patches a specific email address for a specific person.
     * 
     * @param personKey The unique person key.
     * @param personEmailAddressKey The unique person email address key.
     * @param request The patched email address.
     
     */
    public apiNskV1PersonsByPersonKeyEmailsByPersonEmailAddressKeyPatch = (personKey: string, personEmailAddressKey: string, request?: DeltaMapperPersonEmailEditRequest, ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyEmailsByPersonEmailAddressKeyPatch.');
        }

        if (!personEmailAddressKey){
            throw new Error('Required parameter personEmailAddressKey was null or undefined when calling apiNskV1PersonsByPersonKeyEmailsByPersonEmailAddressKeyPatch.');
        }


            const requestObj: Request<{
                personKey: string, personEmailAddressKey: string, request?: DeltaMapperPersonEmailEditRequest, 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/emails/${encodeURIComponent(String(personEmailAddressKey))}',
                method: 'patch',
                data: {
                    personKey,personEmailAddressKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Updates a specific email address for a specific person.
     * 
     * @param personKey The unique person key.
     * @param personEmailAddressKey The unique person email address key.
     * @param request The modified email address.
     
     */
    public apiNskV1PersonsByPersonKeyEmailsByPersonEmailAddressKeyPut = (personKey: string, personEmailAddressKey: string, request?: PersonEmailEditRequest, ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyEmailsByPersonEmailAddressKeyPut.');
        }

        if (!personEmailAddressKey){
            throw new Error('Required parameter personEmailAddressKey was null or undefined when calling apiNskV1PersonsByPersonKeyEmailsByPersonEmailAddressKeyPut.');
        }


            const requestObj: Request<{
                personKey: string, personEmailAddressKey: string, request?: PersonEmailEditRequest, 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/emails/${encodeURIComponent(String(personEmailAddressKey))}',
                method: 'put',
                data: {
                    personKey,personEmailAddressKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets the collection of email addresses for a specific person.
     * 
     * @param personKey The unique person key.
     
     */
    public apiNskV1PersonsByPersonKeyEmailsGet = (personKey: string, ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyEmailsGet.');
        }


            const requestObj: Request<{
                personKey: string, 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/emails',
                method: 'get',
                data: {
                    personKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Creates a new email address for a specific person.
     * 
     * @param personKey The unique person key.
     * @param request The new email address.
     
     */
    public apiNskV1PersonsByPersonKeyEmailsPost = (personKey: string, request?: PersonEmailCreateRequest, ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyEmailsPost.');
        }


            const requestObj: Request<{
                personKey: string, request?: PersonEmailCreateRequest, 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/emails',
                method: 'post',
                data: {
                    personKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves a specific person by key.
     * 
     * @param personKey The unique person key.
     
     */
    public apiNskV1PersonsByPersonKeyGet = (personKey: string, ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyGet.');
        }


            const requestObj: Request<{
                personKey: string, 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}',
                method: 'get',
                data: {
                    personKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Deletes a specific information on the logged in user&#39;s person.
     * 
     * @param personKey The unique person key.
     * @param personInformationKey The unique person information key.
     
     */
    public apiNskV1PersonsByPersonKeyInformationByPersonInformationKeyDelete = (personKey: string, personInformationKey: string, ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyInformationByPersonInformationKeyDelete.');
        }

        if (!personInformationKey){
            throw new Error('Required parameter personInformationKey was null or undefined when calling apiNskV1PersonsByPersonKeyInformationByPersonInformationKeyDelete.');
        }


            const requestObj: Request<{
                personKey: string, personInformationKey: string, 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/information/${encodeURIComponent(String(personInformationKey))}',
                method: 'delete',
                data: {
                    personKey,personInformationKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets a specific information from the logged in user&#39;s person.
     * 
     * @param personKey The unique person key.
     * @param personInformationKey The unique person information key.
     
     */
    public apiNskV1PersonsByPersonKeyInformationByPersonInformationKeyGet = (personKey: string, personInformationKey: string, ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyInformationByPersonInformationKeyGet.');
        }

        if (!personInformationKey){
            throw new Error('Required parameter personInformationKey was null or undefined when calling apiNskV1PersonsByPersonKeyInformationByPersonInformationKeyGet.');
        }


            const requestObj: Request<{
                personKey: string, personInformationKey: string, 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/information/${encodeURIComponent(String(personInformationKey))}',
                method: 'get',
                data: {
                    personKey,personInformationKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Patches a specific information on the logged in user&#39;s person.
     * 
     * @param personKey The unique person key.
     * @param personInformationKey The unique person information key.
     * @param request The patched information.
     
     */
    public apiNskV1PersonsByPersonKeyInformationByPersonInformationKeyPatch = (personKey: string, personInformationKey: string, request?: DeltaMapperPersonInformationEditRequest, ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyInformationByPersonInformationKeyPatch.');
        }

        if (!personInformationKey){
            throw new Error('Required parameter personInformationKey was null or undefined when calling apiNskV1PersonsByPersonKeyInformationByPersonInformationKeyPatch.');
        }


            const requestObj: Request<{
                personKey: string, personInformationKey: string, request?: DeltaMapperPersonInformationEditRequest, 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/information/${encodeURIComponent(String(personInformationKey))}',
                method: 'patch',
                data: {
                    personKey,personInformationKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Updates a specific information on the logged in user&#39;s person.
     * 
     * @param personKey The unique person key.
     * @param personInformationKey The unique person information key.
     * @param request The modified information.
     
     */
    public apiNskV1PersonsByPersonKeyInformationByPersonInformationKeyPut = (personKey: string, personInformationKey: string, request?: PersonInformationEditRequest, ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyInformationByPersonInformationKeyPut.');
        }

        if (!personInformationKey){
            throw new Error('Required parameter personInformationKey was null or undefined when calling apiNskV1PersonsByPersonKeyInformationByPersonInformationKeyPut.');
        }


            const requestObj: Request<{
                personKey: string, personInformationKey: string, request?: PersonInformationEditRequest, 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/information/${encodeURIComponent(String(personInformationKey))}',
                method: 'put',
                data: {
                    personKey,personInformationKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets all information from the logged in user&#39;s person.
     * 
     * @param personKey The unique person key.
     
     */
    public apiNskV1PersonsByPersonKeyInformationGet = (personKey: string, ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyInformationGet.');
        }


            const requestObj: Request<{
                personKey: string, 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/information',
                method: 'get',
                data: {
                    personKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Creates a new information on the logged in user&#39;s person.
     * 
     * @param personKey The unique person key.
     * @param request The new information.
     
     */
    public apiNskV1PersonsByPersonKeyInformationPost = (personKey: string, request?: PersonInformationCreateRequest, ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyInformationPost.');
        }


            const requestObj: Request<{
                personKey: string, request?: PersonInformationCreateRequest, 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/information',
                method: 'post',
                data: {
                    personKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Patches the person records basic information.
     * Only need to send in the data that is being requested to be updated.
     * @param personKey The unique person key.
     * @param request The person patch request.
     
     */
    public apiNskV1PersonsByPersonKeyPatch = (personKey: string, request?: DeltaMapperPersonEditRequest, ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyPatch.');
        }


            const requestObj: Request<{
                personKey: string, request?: DeltaMapperPersonEditRequest, 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}',
                method: 'patch',
                data: {
                    personKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Deletes a specific phone number for a specific person.
     * 
     * @param personKey The unique person key.
     * @param personPhoneNumberKey The unique person phone number key.
     
     */
    public apiNskV1PersonsByPersonKeyPhoneNumbersByPersonPhoneNumberKeyDelete = (personKey: string, personPhoneNumberKey: string, ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyPhoneNumbersByPersonPhoneNumberKeyDelete.');
        }

        if (!personPhoneNumberKey){
            throw new Error('Required parameter personPhoneNumberKey was null or undefined when calling apiNskV1PersonsByPersonKeyPhoneNumbersByPersonPhoneNumberKeyDelete.');
        }


            const requestObj: Request<{
                personKey: string, personPhoneNumberKey: string, 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/phoneNumbers/${encodeURIComponent(String(personPhoneNumberKey))}',
                method: 'delete',
                data: {
                    personKey,personPhoneNumberKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets a specific phone number for a specific person.
     * 
     * @param personKey The unique person key.
     * @param personPhoneNumberKey The unique phone number key.
     
     */
    public apiNskV1PersonsByPersonKeyPhoneNumbersByPersonPhoneNumberKeyGet = (personKey: string, personPhoneNumberKey: string, ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyPhoneNumbersByPersonPhoneNumberKeyGet.');
        }

        if (!personPhoneNumberKey){
            throw new Error('Required parameter personPhoneNumberKey was null or undefined when calling apiNskV1PersonsByPersonKeyPhoneNumbersByPersonPhoneNumberKeyGet.');
        }


            const requestObj: Request<{
                personKey: string, personPhoneNumberKey: string, 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/phoneNumbers/${encodeURIComponent(String(personPhoneNumberKey))}',
                method: 'get',
                data: {
                    personKey,personPhoneNumberKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Patches a specific phone number for a specific person.
     * 
     * @param personKey The unique person key.
     * @param personPhoneNumberKey The unique person phone number key.
     * @param request The patched phone number.
     
     */
    public apiNskV1PersonsByPersonKeyPhoneNumbersByPersonPhoneNumberKeyPatch = (personKey: string, personPhoneNumberKey: string, request?: DeltaMapperPersonPhoneNumberRequest, ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyPhoneNumbersByPersonPhoneNumberKeyPatch.');
        }

        if (!personPhoneNumberKey){
            throw new Error('Required parameter personPhoneNumberKey was null or undefined when calling apiNskV1PersonsByPersonKeyPhoneNumbersByPersonPhoneNumberKeyPatch.');
        }


            const requestObj: Request<{
                personKey: string, personPhoneNumberKey: string, request?: DeltaMapperPersonPhoneNumberRequest, 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/phoneNumbers/${encodeURIComponent(String(personPhoneNumberKey))}',
                method: 'patch',
                data: {
                    personKey,personPhoneNumberKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Updates a specific phone number for a specific person.
     * 
     * @param personKey The unique person key.
     * @param personPhoneNumberKey The unique person phone number key.
     * @param request The modified phone number.
     
     */
    public apiNskV1PersonsByPersonKeyPhoneNumbersByPersonPhoneNumberKeyPut = (personKey: string, personPhoneNumberKey: string, request?: PersonPhoneNumberRequest, ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyPhoneNumbersByPersonPhoneNumberKeyPut.');
        }

        if (!personPhoneNumberKey){
            throw new Error('Required parameter personPhoneNumberKey was null or undefined when calling apiNskV1PersonsByPersonKeyPhoneNumbersByPersonPhoneNumberKeyPut.');
        }


            const requestObj: Request<{
                personKey: string, personPhoneNumberKey: string, request?: PersonPhoneNumberRequest, 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/phoneNumbers/${encodeURIComponent(String(personPhoneNumberKey))}',
                method: 'put',
                data: {
                    personKey,personPhoneNumberKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets the collection of phone numbers for a specific person.
     * 
     * @param personKey The unique person key.
     
     */
    public apiNskV1PersonsByPersonKeyPhoneNumbersGet = (personKey: string, ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyPhoneNumbersGet.');
        }


            const requestObj: Request<{
                personKey: string, 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/phoneNumbers',
                method: 'get',
                data: {
                    personKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Creates a new phone number for a specific person.
     * 
     * @param personKey The unique person key.
     * @param request The new phone number.
     
     */
    public apiNskV1PersonsByPersonKeyPhoneNumbersPost = (personKey: string, request?: PersonPhoneNumberRequest, ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyPhoneNumbersPost.');
        }


            const requestObj: Request<{
                personKey: string, request?: PersonPhoneNumberRequest, 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/phoneNumbers',
                method: 'post',
                data: {
                    personKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Deletes a specific preference for a specific person.
     * 
     * @param personKey The unique person key.
     * @param personPreferenceKey The unique person preference key.
     
     */
    public apiNskV1PersonsByPersonKeyPreferencesByPersonPreferenceKeyDelete = (personKey: string, personPreferenceKey: string, ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyPreferencesByPersonPreferenceKeyDelete.');
        }

        if (!personPreferenceKey){
            throw new Error('Required parameter personPreferenceKey was null or undefined when calling apiNskV1PersonsByPersonKeyPreferencesByPersonPreferenceKeyDelete.');
        }


            const requestObj: Request<{
                personKey: string, personPreferenceKey: string, 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/preferences/${encodeURIComponent(String(personPreferenceKey))}',
                method: 'delete',
                data: {
                    personKey,personPreferenceKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets a specific preference for a specific person.
     * 
     * @param personKey The unique person key.
     * @param personPreferenceKey The unique person preference key.
     
     */
    public apiNskV1PersonsByPersonKeyPreferencesByPersonPreferenceKeyGet = (personKey: string, personPreferenceKey: string, ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyPreferencesByPersonPreferenceKeyGet.');
        }

        if (!personPreferenceKey){
            throw new Error('Required parameter personPreferenceKey was null or undefined when calling apiNskV1PersonsByPersonKeyPreferencesByPersonPreferenceKeyGet.');
        }


            const requestObj: Request<{
                personKey: string, personPreferenceKey: string, 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/preferences/${encodeURIComponent(String(personPreferenceKey))}',
                method: 'get',
                data: {
                    personKey,personPreferenceKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Patches a specific preference for a specific person.
     * 
     * @param personKey The unique person key.
     * @param personPreferenceKey The unique person preference key.
     * @param request The patched preference.
     
     */
    public apiNskV1PersonsByPersonKeyPreferencesByPersonPreferenceKeyPatch = (personKey: string, personPreferenceKey: string, request?: DeltaMapperPersonPreferenceEditRequest, ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyPreferencesByPersonPreferenceKeyPatch.');
        }

        if (!personPreferenceKey){
            throw new Error('Required parameter personPreferenceKey was null or undefined when calling apiNskV1PersonsByPersonKeyPreferencesByPersonPreferenceKeyPatch.');
        }


            const requestObj: Request<{
                personKey: string, personPreferenceKey: string, request?: DeltaMapperPersonPreferenceEditRequest, 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/preferences/${encodeURIComponent(String(personPreferenceKey))}',
                method: 'patch',
                data: {
                    personKey,personPreferenceKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Updates a specific preference for a specific person.
     * 
     * @param personKey The unique person key.
     * @param personPreferenceKey The unique person preference key.
     * @param request The modified preference.
     
     */
    public apiNskV1PersonsByPersonKeyPreferencesByPersonPreferenceKeyPut = (personKey: string, personPreferenceKey: string, request?: PersonPreferenceEditRequest, ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyPreferencesByPersonPreferenceKeyPut.');
        }

        if (!personPreferenceKey){
            throw new Error('Required parameter personPreferenceKey was null or undefined when calling apiNskV1PersonsByPersonKeyPreferencesByPersonPreferenceKeyPut.');
        }


            const requestObj: Request<{
                personKey: string, personPreferenceKey: string, request?: PersonPreferenceEditRequest, 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/preferences/${encodeURIComponent(String(personPreferenceKey))}',
                method: 'put',
                data: {
                    personKey,personPreferenceKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets all preferences for a specific person.
     * 
     * @param personKey The unique person key.
     
     */
    public apiNskV1PersonsByPersonKeyPreferencesGet = (personKey: string, ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyPreferencesGet.');
        }


            const requestObj: Request<{
                personKey: string, 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/preferences',
                method: 'get',
                data: {
                    personKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Creates a new preference for a specific person.
     * 
     * @param personKey The unique person key.
     * @param request The new preference.
     
     */
    public apiNskV1PersonsByPersonKeyPreferencesPost = (personKey: string, request?: PersonPreferenceCreateRequest, ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyPreferencesPost.');
        }


            const requestObj: Request<{
                personKey: string, request?: PersonPreferenceCreateRequest, 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/preferences',
                method: 'post',
                data: {
                    personKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Deletes a specific program for a specific person.
     * 
     * @param personKey The unique person key.
     * @param personProgramKey The unique person program key.
     
     */
    public apiNskV1PersonsByPersonKeyProgramsByPersonProgramKeyDelete = (personKey: string, personProgramKey: string, ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyProgramsByPersonProgramKeyDelete.');
        }

        if (!personProgramKey){
            throw new Error('Required parameter personProgramKey was null or undefined when calling apiNskV1PersonsByPersonKeyProgramsByPersonProgramKeyDelete.');
        }


            const requestObj: Request<{
                personKey: string, personProgramKey: string, 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/programs/${encodeURIComponent(String(personProgramKey))}',
                method: 'delete',
                data: {
                    personKey,personProgramKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets a specific program for a specific person.
     * 
     * @param personKey The unique person key.
     * @param personProgramKey The unique program key.
     
     */
    public apiNskV1PersonsByPersonKeyProgramsByPersonProgramKeyGet = (personKey: string, personProgramKey: string, ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyProgramsByPersonProgramKeyGet.');
        }

        if (!personProgramKey){
            throw new Error('Required parameter personProgramKey was null or undefined when calling apiNskV1PersonsByPersonKeyProgramsByPersonProgramKeyGet.');
        }


            const requestObj: Request<{
                personKey: string, personProgramKey: string, 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/programs/${encodeURIComponent(String(personProgramKey))}',
                method: 'get',
                data: {
                    personKey,personProgramKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Patches a specific program for a specific person.
     * 
     * @param personKey The unique person key.
     * @param personProgramKey The unique person program key.
     * @param request The patched program.
     
     */
    public apiNskV1PersonsByPersonKeyProgramsByPersonProgramKeyPatch = (personKey: string, personProgramKey: string, request?: DeltaMapperPersonCustomerProgramEditRequest, ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyProgramsByPersonProgramKeyPatch.');
        }

        if (!personProgramKey){
            throw new Error('Required parameter personProgramKey was null or undefined when calling apiNskV1PersonsByPersonKeyProgramsByPersonProgramKeyPatch.');
        }


            const requestObj: Request<{
                personKey: string, personProgramKey: string, request?: DeltaMapperPersonCustomerProgramEditRequest, 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/programs/${encodeURIComponent(String(personProgramKey))}',
                method: 'patch',
                data: {
                    personKey,personProgramKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Updates a specific program for a specific person.
     * 
     * @param personKey The unique person key.
     * @param personProgramKey The unique person program key.
     * @param request The modified program.
     
     */
    public apiNskV1PersonsByPersonKeyProgramsByPersonProgramKeyPut = (personKey: string, personProgramKey: string, request?: PersonCustomerProgramEditRequest, ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyProgramsByPersonProgramKeyPut.');
        }

        if (!personProgramKey){
            throw new Error('Required parameter personProgramKey was null or undefined when calling apiNskV1PersonsByPersonKeyProgramsByPersonProgramKeyPut.');
        }


            const requestObj: Request<{
                personKey: string, personProgramKey: string, request?: PersonCustomerProgramEditRequest, 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/programs/${encodeURIComponent(String(personProgramKey))}',
                method: 'put',
                data: {
                    personKey,personProgramKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets the collection of programs for a specific person.
     * 
     * @param personKey The unique person key.
     
     */
    public apiNskV1PersonsByPersonKeyProgramsGet = (personKey: string, ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyProgramsGet.');
        }


            const requestObj: Request<{
                personKey: string, 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/programs',
                method: 'get',
                data: {
                    personKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Creates a new program for a specific person.
     * 
     * @param personKey The unique person key.
     * @param request The new program.
     
     */
    public apiNskV1PersonsByPersonKeyProgramsPost = (personKey: string, request?: PersonCustomerProgramCreateRequest, ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyProgramsPost.');
        }


            const requestObj: Request<{
                personKey: string, request?: PersonCustomerProgramCreateRequest, 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/programs',
                method: 'post',
                data: {
                    personKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Updates the person record basic information.
     * 
     * @param personKey The unique person key.
     * @param request The person edit request.
     
     */
    public apiNskV1PersonsByPersonKeyPut = (personKey: string, request?: PersonEditRequest, ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyPut.');
        }


            const requestObj: Request<{
                personKey: string, request?: PersonEditRequest, 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}',
                method: 'put',
                data: {
                    personKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Deletes a specific stored payment for a specific person.
     * 
     * @param personKey The unique person key.
     * @param personStoredPaymentKey The unique person stored payment key.
     
     */
    public apiNskV1PersonsByPersonKeyStoredPaymentsByPersonStoredPaymentKeyDelete = (personKey: string, personStoredPaymentKey: string, ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyStoredPaymentsByPersonStoredPaymentKeyDelete.');
        }

        if (!personStoredPaymentKey){
            throw new Error('Required parameter personStoredPaymentKey was null or undefined when calling apiNskV1PersonsByPersonKeyStoredPaymentsByPersonStoredPaymentKeyDelete.');
        }


            const requestObj: Request<{
                personKey: string, personStoredPaymentKey: string, 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/storedPayments/${encodeURIComponent(String(personStoredPaymentKey))}',
                method: 'delete',
                data: {
                    personKey,personStoredPaymentKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets a specific stored payment for a specific person.
     * 
     * @param personKey The unique person key.
     * @param personStoredPaymentKey The unique stored payment key.
     
     */
    public apiNskV1PersonsByPersonKeyStoredPaymentsByPersonStoredPaymentKeyGet = (personKey: string, personStoredPaymentKey: string, ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyStoredPaymentsByPersonStoredPaymentKeyGet.');
        }

        if (!personStoredPaymentKey){
            throw new Error('Required parameter personStoredPaymentKey was null or undefined when calling apiNskV1PersonsByPersonKeyStoredPaymentsByPersonStoredPaymentKeyGet.');
        }


            const requestObj: Request<{
                personKey: string, personStoredPaymentKey: string, 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/storedPayments/${encodeURIComponent(String(personStoredPaymentKey))}',
                method: 'get',
                data: {
                    personKey,personStoredPaymentKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Patches a specific stored payment for a specific person.
     * 
     * @param personKey The unique person key.
     * @param personStoredPaymentKey The unique person stored payment key.
     * @param request The patched stored payment.
     
     */
    public apiNskV1PersonsByPersonKeyStoredPaymentsByPersonStoredPaymentKeyPatch = (personKey: string, personStoredPaymentKey: string, request?: DeltaMapperPersonStoredPaymentUpdateRequest, ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyStoredPaymentsByPersonStoredPaymentKeyPatch.');
        }

        if (!personStoredPaymentKey){
            throw new Error('Required parameter personStoredPaymentKey was null or undefined when calling apiNskV1PersonsByPersonKeyStoredPaymentsByPersonStoredPaymentKeyPatch.');
        }


            const requestObj: Request<{
                personKey: string, personStoredPaymentKey: string, request?: DeltaMapperPersonStoredPaymentUpdateRequest, 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/storedPayments/${encodeURIComponent(String(personStoredPaymentKey))}',
                method: 'patch',
                data: {
                    personKey,personStoredPaymentKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Updates a specific stored payment for a specific person.
     * 
     * @param personKey The unique person key.
     * @param personStoredPaymentKey The unique person stored payment key.
     * @param request The modified stored payment.
     
     */
    public apiNskV1PersonsByPersonKeyStoredPaymentsByPersonStoredPaymentKeyPut = (personKey: string, personStoredPaymentKey: string, request?: PersonStoredPaymentRequest, ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyStoredPaymentsByPersonStoredPaymentKeyPut.');
        }

        if (!personStoredPaymentKey){
            throw new Error('Required parameter personStoredPaymentKey was null or undefined when calling apiNskV1PersonsByPersonKeyStoredPaymentsByPersonStoredPaymentKeyPut.');
        }


            const requestObj: Request<{
                personKey: string, personStoredPaymentKey: string, request?: PersonStoredPaymentRequest, 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/storedPayments/${encodeURIComponent(String(personStoredPaymentKey))}',
                method: 'put',
                data: {
                    personKey,personStoredPaymentKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets the collection of stored payments for a specific person.
     * 
     * @param personKey The unique person key.
     
     */
    public apiNskV1PersonsByPersonKeyStoredPaymentsGet = (personKey: string, ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyStoredPaymentsGet.');
        }


            const requestObj: Request<{
                personKey: string, 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/storedPayments',
                method: 'get',
                data: {
                    personKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Creates a new stored payment for a specific person.
     * 
     * @param personKey The unique person key.
     * @param request The new stored payment.
     
     */
    public apiNskV1PersonsByPersonKeyStoredPaymentsPost = (personKey: string, request?: PersonStoredPaymentRequest, ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyStoredPaymentsPost.');
        }


            const requestObj: Request<{
                personKey: string, request?: PersonStoredPaymentRequest, 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/storedPayments',
                method: 'post',
                data: {
                    personKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Deletes a specific travel document for a specific person.
     * 
     * @param personKey The unique person key.
     * @param personTravelDocumentKey The unique person travel document key.
     
     */
    public apiNskV1PersonsByPersonKeyTravelDocumentsByPersonTravelDocumentKeyDelete = (personKey: string, personTravelDocumentKey: string, ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyTravelDocumentsByPersonTravelDocumentKeyDelete.');
        }

        if (!personTravelDocumentKey){
            throw new Error('Required parameter personTravelDocumentKey was null or undefined when calling apiNskV1PersonsByPersonKeyTravelDocumentsByPersonTravelDocumentKeyDelete.');
        }


            const requestObj: Request<{
                personKey: string, personTravelDocumentKey: string, 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/travelDocuments/${encodeURIComponent(String(personTravelDocumentKey))}',
                method: 'delete',
                data: {
                    personKey,personTravelDocumentKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets a specific travel document for a specific person.
     * 
     * @param personKey The unique person key.
     * @param personTravelDocumentKey The unique travel document key.
     
     */
    public apiNskV1PersonsByPersonKeyTravelDocumentsByPersonTravelDocumentKeyGet = (personKey: string, personTravelDocumentKey: string, ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyTravelDocumentsByPersonTravelDocumentKeyGet.');
        }

        if (!personTravelDocumentKey){
            throw new Error('Required parameter personTravelDocumentKey was null or undefined when calling apiNskV1PersonsByPersonKeyTravelDocumentsByPersonTravelDocumentKeyGet.');
        }


            const requestObj: Request<{
                personKey: string, personTravelDocumentKey: string, 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/travelDocuments/${encodeURIComponent(String(personTravelDocumentKey))}',
                method: 'get',
                data: {
                    personKey,personTravelDocumentKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets the collection of travel documents for a specific person.
     * 
     * @param personKey The unique person key.
     
     */
    public apiNskV1PersonsByPersonKeyTravelDocumentsGet = (personKey: string, ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyTravelDocumentsGet.');
        }


            const requestObj: Request<{
                personKey: string, 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/travelDocuments',
                method: 'get',
                data: {
                    personKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Creates a new travel document for a specific person.
     * 
     * @param personKey The unique person key.
     * @param request The new travel document.
     
     */
    public apiNskV1PersonsByPersonKeyTravelDocumentsPost = (personKey: string, request?: PersonTravelDocumentRequest, ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyTravelDocumentsPost.');
        }


            const requestObj: Request<{
                personKey: string, request?: PersonTravelDocumentRequest, 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/travelDocuments',
                method: 'post',
                data: {
                    personKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Deletes a person travel notification for a person.
     * 
     * @param personKey The person key.
     * @param travelNotificationKey The travel notification key.
     
     */
    public apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyDelete = (personKey: string, travelNotificationKey: string, ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyDelete.');
        }

        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyDelete.');
        }


            const requestObj: Request<{
                personKey: string, travelNotificationKey: string, 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}',
                method: 'delete',
                data: {
                    personKey,travelNotificationKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Deletes a notification event from a person travel notification for a person.
     * 
     * @param personKey The person key.
     * @param travelNotificationKey The travel notification key.
     * @param eventType The notification event type.
     
     */
    public apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyEventsByEventTypeDelete = (personKey: string, travelNotificationKey: string, eventType: 'DepartureDelay' | 'ArrivalDelay' | 'ScheduleChange' | 'CheckIn', ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyEventsByEventTypeDelete.');
        }

        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyEventsByEventTypeDelete.');
        }

        if (!eventType){
            throw new Error('Required parameter eventType was null or undefined when calling apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyEventsByEventTypeDelete.');
        }


            const requestObj: Request<{
                personKey: string, travelNotificationKey: string, eventType: 'DepartureDelay' | 'ArrivalDelay' | 'ScheduleChange' | 'CheckIn', 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}/events/${encodeURIComponent(String(eventType))}',
                method: 'delete',
                data: {
                    personKey,travelNotificationKey,eventType,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets a notification event for a person travel notification for a person.
     * 
     * @param personKey The person key.
     * @param travelNotificationKey The travel notification key.
     * @param eventType The event type.
     
     */
    public apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyEventsByEventTypeGet = (personKey: string, travelNotificationKey: string, eventType: 'DepartureDelay' | 'ArrivalDelay' | 'ScheduleChange' | 'CheckIn', ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyEventsByEventTypeGet.');
        }

        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyEventsByEventTypeGet.');
        }

        if (!eventType){
            throw new Error('Required parameter eventType was null or undefined when calling apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyEventsByEventTypeGet.');
        }


            const requestObj: Request<{
                personKey: string, travelNotificationKey: string, eventType: 'DepartureDelay' | 'ArrivalDelay' | 'ScheduleChange' | 'CheckIn', 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}/events/${encodeURIComponent(String(eventType))}',
                method: 'get',
                data: {
                    personKey,travelNotificationKey,eventType,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets notification events for a person travel notification for a person.
     * 
     * @param personKey The person key.
     * @param travelNotificationKey The travel notification key.
     
     */
    public apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyEventsGet = (personKey: string, travelNotificationKey: string, ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyEventsGet.');
        }

        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyEventsGet.');
        }


            const requestObj: Request<{
                personKey: string, travelNotificationKey: string, 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}/events',
                method: 'get',
                data: {
                    personKey,travelNotificationKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Creates a notification event for a person travel notification for a person.
     * 
     * @param personKey The person key.
     * @param travelNotificationKey The travel notification key.
     * @param request The notification event create request.
     
     */
    public apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyEventsPost = (personKey: string, travelNotificationKey: string, request?: NotificationEventCreateRequest, ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyEventsPost.');
        }

        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyEventsPost.');
        }


            const requestObj: Request<{
                personKey: string, travelNotificationKey: string, request?: NotificationEventCreateRequest, 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}/events',
                method: 'post',
                data: {
                    personKey,travelNotificationKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets a person travel notification for a person.
     * 
     * @param personKey The person key.
     * @param travelNotificationKey The travel notification key.
     
     */
    public apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyGet = (personKey: string, travelNotificationKey: string, ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyGet.');
        }

        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyGet.');
        }


            const requestObj: Request<{
                personKey: string, travelNotificationKey: string, 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}',
                method: 'get',
                data: {
                    personKey,travelNotificationKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Patches a person travel notification for a person.
     * 
     * @param personKey The person key.
     * @param travelNotificationKey The travel notification key.
     * @param request The delta mapper travel notification edit request.
     
     */
    public apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyPatch = (personKey: string, travelNotificationKey: string, request?: DeltaMapperTravelNotificationEditRequest, ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyPatch.');
        }

        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyPatch.');
        }


            const requestObj: Request<{
                personKey: string, travelNotificationKey: string, request?: DeltaMapperTravelNotificationEditRequest, 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}',
                method: 'patch',
                data: {
                    personKey,travelNotificationKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Updates a person travel notification for a person.
     * 
     * @param personKey The person key.
     * @param travelNotificationKey The travel notification key.
     * @param request The travel notification edit request.
     
     */
    public apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyPut = (personKey: string, travelNotificationKey: string, request?: TravelNotificationEditRequest, ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyPut.');
        }

        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyPut.');
        }


            const requestObj: Request<{
                personKey: string, travelNotificationKey: string, request?: TravelNotificationEditRequest, 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}',
                method: 'put',
                data: {
                    personKey,travelNotificationKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Deletes a notification timed event from a person travel notification for a person.
     * 
     * @param personKey The person key.
     * @param travelNotificationKey The travel notification key.
     * @param timedEventType The notification timed event type.
     
     */
    public apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeDelete = (personKey: string, travelNotificationKey: string, timedEventType: 'Departure' | 'Arrival', ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeDelete.');
        }

        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeDelete.');
        }

        if (!timedEventType){
            throw new Error('Required parameter timedEventType was null or undefined when calling apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeDelete.');
        }


            const requestObj: Request<{
                personKey: string, travelNotificationKey: string, timedEventType: 'Departure' | 'Arrival', 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}/timedEvents/${encodeURIComponent(String(timedEventType))}',
                method: 'delete',
                data: {
                    personKey,travelNotificationKey,timedEventType,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets a notification timed event for a person travel notification for a person.
     * 
     * @param personKey The person key.
     * @param travelNotificationKey The travel notification key.
     * @param timedEventType The timed event type.
     
     */
    public apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeGet = (personKey: string, travelNotificationKey: string, timedEventType: 'Departure' | 'Arrival', ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeGet.');
        }

        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeGet.');
        }

        if (!timedEventType){
            throw new Error('Required parameter timedEventType was null or undefined when calling apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeGet.');
        }


            const requestObj: Request<{
                personKey: string, travelNotificationKey: string, timedEventType: 'Departure' | 'Arrival', 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}/timedEvents/${encodeURIComponent(String(timedEventType))}',
                method: 'get',
                data: {
                    personKey,travelNotificationKey,timedEventType,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Updates a notification timed event for a person travel notification for a person.
     * 
     * @param personKey The person key.
     * @param travelNotificationKey The travel notification key.
     * @param timedEventType The notification timed event type.
     * @param request The updated notification timed event request.
     
     */
    public apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypePut = (personKey: string, travelNotificationKey: string, timedEventType: 'Departure' | 'Arrival', request?: NotificationTimedEventEditRequest, ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypePut.');
        }

        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypePut.');
        }

        if (!timedEventType){
            throw new Error('Required parameter timedEventType was null or undefined when calling apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypePut.');
        }


            const requestObj: Request<{
                personKey: string, travelNotificationKey: string, timedEventType: 'Departure' | 'Arrival', request?: NotificationTimedEventEditRequest, 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}/timedEvents/${encodeURIComponent(String(timedEventType))}',
                method: 'put',
                data: {
                    personKey,travelNotificationKey,timedEventType,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets notification timed events for a person travel notification for a person.
     * 
     * @param personKey The person key.
     * @param travelNotificationKey The travel notification key.
     
     */
    public apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyTimedEventsGet = (personKey: string, travelNotificationKey: string, ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyTimedEventsGet.');
        }

        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyTimedEventsGet.');
        }


            const requestObj: Request<{
                personKey: string, travelNotificationKey: string, 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}/timedEvents',
                method: 'get',
                data: {
                    personKey,travelNotificationKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Creates a notification timed event for a person travel notification for a person.
     * 
     * @param personKey The person key.
     * @param travelNotificationKey The travel notification key.
     * @param request The notification timed even create request.
     
     */
    public apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyTimedEventsPost = (personKey: string, travelNotificationKey: string, request?: NotificationTimedEventCreateRequest, ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyTimedEventsPost.');
        }

        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyTimedEventsPost.');
        }


            const requestObj: Request<{
                personKey: string, travelNotificationKey: string, request?: NotificationTimedEventCreateRequest, 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}/timedEvents',
                method: 'post',
                data: {
                    personKey,travelNotificationKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets person travel notifications for a person.
     * 
     * @param personKey The person key.
     
     */
    public apiNskV1PersonsByPersonKeyTravelNotificationsGet = (personKey: string, ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyTravelNotificationsGet.');
        }


            const requestObj: Request<{
                personKey: string, 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/travelNotifications',
                method: 'get',
                data: {
                    personKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Creates a person travel notification for a person.
     * 
     * @param personKey The person key.
     * @param request The travel notification create request.
     
     */
    public apiNskV1PersonsByPersonKeyTravelNotificationsPost = (personKey: string, request?: TravelNotificationCreateRequest, ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyTravelNotificationsPost.');
        }


            const requestObj: Request<{
                personKey: string, request?: TravelNotificationCreateRequest, 
            }> = {
                url: '/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/travelNotifications',
                method: 'post',
                data: {
                    personKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Search person records.
     * 
     * @param activeOnly Include active person records only.
     * @param firstName The person&#39;s first name to search by.
     * @param lastName The person&#39;s last name to search by.
     * @param firstNameMatching The matching criteria for the person&#39;s first name.
     * @param customerNumber The person&#39;s customer number.
     * @param phoneNumber The phone number to search by.
     * @param emailAddress The email address to search by.
     * @param programNumber The program number to search by.
     * @param programCode The program code to search by.
     * @param type The person type to search by.
     * @param nationalIdNumber The national ID number to search by.
     * @param nationalIdNumberMatching The matching criteria for the national ID number.
     * @param returnCount The number of results to return.
     * @param lastPersonKey The last person key (used for paging).
     
     */
    public apiNskV1PersonsGet = (activeOnly: boolean, firstName?: string, lastName?: string, firstNameMatching?: 'StartsWith' | 'EndsWith' | 'Contains' | 'ExactMatch', customerNumber?: string, phoneNumber?: string, emailAddress?: string, programNumber?: string, programCode?: string, type?: 'None' | 'Customer' | 'Agent', nationalIdNumber?: string, nationalIdNumberMatching?: 'StartsWith' | 'EndsWith' | 'Contains' | 'ExactMatch', returnCount?: number, lastPersonKey?: string, ) => {
        if (!activeOnly){
            throw new Error('Required parameter activeOnly was null or undefined when calling apiNskV1PersonsGet.');
        }

        let queryParameters: string[] = [];
        if (firstName !== undefined) {
            queryParameters.push("firstName="+encodeURIComponent(String(firstName)));
        }
        if (lastName !== undefined) {
            queryParameters.push("lastName="+encodeURIComponent(String(lastName)));
        }
        if (firstNameMatching !== undefined) {
            queryParameters.push("firstNameMatching="+encodeURIComponent(String(firstNameMatching)));
        }
        if (customerNumber !== undefined) {
            queryParameters.push("customerNumber="+encodeURIComponent(String(customerNumber)));
        }
        if (phoneNumber !== undefined) {
            queryParameters.push("phoneNumber="+encodeURIComponent(String(phoneNumber)));
        }
        if (emailAddress !== undefined) {
            queryParameters.push("emailAddress="+encodeURIComponent(String(emailAddress)));
        }
        if (programNumber !== undefined) {
            queryParameters.push("programNumber="+encodeURIComponent(String(programNumber)));
        }
        if (programCode !== undefined) {
            queryParameters.push("programCode="+encodeURIComponent(String(programCode)));
        }
        if (type !== undefined) {
            queryParameters.push("type="+encodeURIComponent(String(type)));
        }
        if (nationalIdNumber !== undefined) {
            queryParameters.push("nationalIdNumber="+encodeURIComponent(String(nationalIdNumber)));
        }
        if (nationalIdNumberMatching !== undefined) {
            queryParameters.push("nationalIdNumberMatching="+encodeURIComponent(String(nationalIdNumberMatching)));
        }
        if (returnCount !== undefined) {
            queryParameters.push("returnCount="+encodeURIComponent(String(returnCount)));
        }
        if (lastPersonKey !== undefined) {
            queryParameters.push("lastPersonKey="+encodeURIComponent(String(lastPersonKey)));
        }
        if (activeOnly !== undefined) {
            queryParameters.push("activeOnly="+encodeURIComponent(String(activeOnly)));
        }


            const requestObj: Request<{
                activeOnly: boolean, firstName?: string, lastName?: string, firstNameMatching?: 'StartsWith' | 'EndsWith' | 'Contains' | 'ExactMatch', customerNumber?: string, phoneNumber?: string, emailAddress?: string, programNumber?: string, programCode?: string, type?: 'None' | 'Customer' | 'Agent', nationalIdNumber?: string, nationalIdNumberMatching?: 'StartsWith' | 'EndsWith' | 'Contains' | 'ExactMatch', returnCount?: number, lastPersonKey?: string, 
            }> = {
                url: '/api/nsk/v1/persons',
                method: 'get',
                data: {
                    activeOnly,firstName,lastName,firstNameMatching,customerNumber,phoneNumber,emailAddress,programNumber,programCode,type,nationalIdNumber,nationalIdNumberMatching,returnCount,lastPersonKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Creates a new person record.
     * 
     * @param request The person create request.
     
     */
    public apiNskV1PersonsPost = (request?: PersonCreateRequest, ) => {

            const requestObj: Request<{
                request?: PersonCreateRequest, 
            }> = {
                url: '/api/nsk/v1/persons',
                method: 'post',
                data: {
                    request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Patches a specific travel document for a specific person.
     * 
     * @param personKey The unique person key.
     * @param personTravelDocumentKey The unique person travel document key.
     * @param request The patched travel document.
     
     */
    public apiNskV2PersonsByPersonKeyTravelDocumentsByPersonTravelDocumentKeyPatch = (personKey: string, personTravelDocumentKey: string, request?: DeltaMapperTravelDocumentEditRequestv2, ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV2PersonsByPersonKeyTravelDocumentsByPersonTravelDocumentKeyPatch.');
        }

        if (!personTravelDocumentKey){
            throw new Error('Required parameter personTravelDocumentKey was null or undefined when calling apiNskV2PersonsByPersonKeyTravelDocumentsByPersonTravelDocumentKeyPatch.');
        }


            const requestObj: Request<{
                personKey: string, personTravelDocumentKey: string, request?: DeltaMapperTravelDocumentEditRequestv2, 
            }> = {
                url: '/api/nsk/v2/persons/${encodeURIComponent(String(personKey))}/travelDocuments/${encodeURIComponent(String(personTravelDocumentKey))}',
                method: 'patch',
                data: {
                    personKey,personTravelDocumentKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Updates a specific travel document for a specific person.
     * 
     * @param personKey The unique person key.
     * @param personTravelDocumentKey The unique person travel document key.
     * @param request The modified travel document.
     
     */
    public apiNskV2PersonsByPersonKeyTravelDocumentsByPersonTravelDocumentKeyPut = (personKey: string, personTravelDocumentKey: string, request?: TravelDocumentEditRequestv2, ) => {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV2PersonsByPersonKeyTravelDocumentsByPersonTravelDocumentKeyPut.');
        }

        if (!personTravelDocumentKey){
            throw new Error('Required parameter personTravelDocumentKey was null or undefined when calling apiNskV2PersonsByPersonKeyTravelDocumentsByPersonTravelDocumentKeyPut.');
        }


            const requestObj: Request<{
                personKey: string, personTravelDocumentKey: string, request?: TravelDocumentEditRequestv2, 
            }> = {
                url: '/api/nsk/v2/persons/${encodeURIComponent(String(personKey))}/travelDocuments/${encodeURIComponent(String(personTravelDocumentKey))}',
                method: 'put',
                data: {
                    personKey,personTravelDocumentKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }

}
