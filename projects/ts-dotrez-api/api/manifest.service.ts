/**
 * API - Current Routes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: trunk
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from "rxjs/Observable";
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import IHttpClient from "../IHttpClient";
import { inject, injectable } from "inversify";
import { IAPIConfiguration } from "../IAPIConfiguration";
import { Headers } from "../Headers";
import HttpResponse from "../HttpResponse";

import * as Models from '../models';
import { Dictionary } from '../models';
import * as Enums from '../enums';
import { getClient, Request } from '../helper';

import { IJsonResponse } from '../model/iJsonResponse';
import { Manifest } from '../model/manifest';
import { ManifestRequestBase } from '../model/manifestRequestBase';
import { PassengerDetails } from '../model/passengerDetails';
import { PassengerSeatAssignment } from '../model/passengerSeatAssignment';
import { TripInformationResponse } from '../model/tripInformationResponse';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class ManifestService {

    constructor(@inject(HTTP_CLIENT) protected client: ApiHttpClient) {}

    /**
     * Gets the passenger details for the specified leg.
     * 
     * @param legKey The leg key.
     
     */
    public apiNskV1ManifestByLegKeyPassengerDetailsGet = (legKey: string, ) => {
        if (!legKey){
            throw new Error('Required parameter legKey was null or undefined when calling apiNskV1ManifestByLegKeyPassengerDetailsGet.');
        }


            const requestObj: Request<{
                legKey: string, 
            }> = {
                url: '/api/nsk/v1/manifest/${encodeURIComponent(String(legKey))}/passengerDetails',
                method: 'get',
                data: {
                    legKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets a list of seat assignment reports for the specified leg.
     * 
     * @param legKey The leg key.
     
     */
    public apiNskV1ManifestByLegKeyPassengerSeatAssignmentsGet = (legKey: string, ) => {
        if (!legKey){
            throw new Error('Required parameter legKey was null or undefined when calling apiNskV1ManifestByLegKeyPassengerSeatAssignmentsGet.');
        }


            const requestObj: Request<{
                legKey: string, 
            }> = {
                url: '/api/nsk/v1/manifest/${encodeURIComponent(String(legKey))}/passengerSeatAssignments',
                method: 'get',
                data: {
                    legKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets the manifest for the specified leg.
     * 
     * @param legKey The manifest leg key.
     * @param request The manifest request
     
     */
    public apiNskV1ManifestByLegKeyPost = (legKey: string, request?: ManifestRequestBase, ) => {
        if (!legKey){
            throw new Error('Required parameter legKey was null or undefined when calling apiNskV1ManifestByLegKeyPost.');
        }


            const requestObj: Request<{
                legKey: string, request?: ManifestRequestBase, 
            }> = {
                url: '/api/nsk/v1/manifest/${encodeURIComponent(String(legKey))}',
                method: 'post',
                data: {
                    legKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets the manifest trip information response list for the specified   manifest trip information search request.
     * 
     * @param beginDate The starting date of the trip information search.
     * @param origin The departure station.
     * @param destination The arrival station.
     * @param identifier The transportation identifier, such as a flight number.
     * @param carrierCode The carrier code.
     * @param flightType The flight type.
     
     */
    public apiNskV1ManifestGet = (beginDate: Date, origin?: string, destination?: string, identifier?: string, carrierCode?: string, flightType?: 'All' | 'NonStop' | 'Through' | 'Direct' | 'Connect', ) => {
        if (!beginDate){
            throw new Error('Required parameter beginDate was null or undefined when calling apiNskV1ManifestGet.');
        }

        let queryParameters: string[] = [];
        if (origin !== undefined) {
            queryParameters.push("origin="+encodeURIComponent(String(origin)));
        }
        if (destination !== undefined) {
            queryParameters.push("destination="+encodeURIComponent(String(destination)));
        }
        if (beginDate !== undefined) {
           queryParameters.push("beginDate="+encodeURIComponent(<any>beginDate.toISOString()));
        }
        if (identifier !== undefined) {
            queryParameters.push("identifier="+encodeURIComponent(String(identifier)));
        }
        if (carrierCode !== undefined) {
            queryParameters.push("carrierCode="+encodeURIComponent(String(carrierCode)));
        }
        if (flightType !== undefined) {
            queryParameters.push("flightType="+encodeURIComponent(String(flightType)));
        }


            const requestObj: Request<{
                beginDate: Date, origin?: string, destination?: string, identifier?: string, carrierCode?: string, flightType?: 'All' | 'NonStop' | 'Through' | 'Direct' | 'Connect', 
            }> = {
                url: '/api/nsk/v1/manifest',
                method: 'get',
                data: {
                    beginDate,origin,destination,identifier,carrierCode,flightType,
                }
            };
            return this.client.makeRequest(requestObj);
    }

}
