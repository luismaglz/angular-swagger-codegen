/**
 * API - Current Routes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: trunk
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from "rxjs/Observable";
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import IHttpClient from "../IHttpClient";
import { inject, injectable } from "inversify";
import { IAPIConfiguration } from "../IAPIConfiguration";
import { Headers } from "../Headers";
import HttpResponse from "../HttpResponse";

import * as Models from '../models';
import { Dictionary } from '../models';
import * as Enums from '../enums';
import { getClient, Request } from '../helper';

import { IJsonResponse } from '../model/iJsonResponse';
import { Promotion } from '../model/promotion';
import { PromotionBase } from '../model/promotionBase';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class PromotionsService {

    constructor(@inject(HTTP_CLIENT) protected client: ApiHttpClient) {}

    /**
     * Gets a promotion based on the promotion code.
     * 
     * @param promotionCode The promotion code.
     
     */
    public apiNskV1PromotionsByPromotionCodeGet = (promotionCode: string, ) => {
        if (!promotionCode){
            throw new Error('Required parameter promotionCode was null or undefined when calling apiNskV1PromotionsByPromotionCodeGet.');
        }


            const requestObj: Request<{
                promotionCode: string, 
            }> = {
                url: '/api/nsk/v1/promotions/${encodeURIComponent(String(promotionCode))}',
                method: 'get',
                data: {
                    promotionCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Evaluates a promotion code and optional organization code to determine if   the associated promotion is valid or not.
     * This validates the promotion code based on the logged-in user if the   organization code is not provided.
     * @param promotionCode The promotion code.
     * @param organizationCode The optional organization code.
     
     */
    public apiNskV1PromotionsByPromotionCodeValidateGet = (promotionCode: string, organizationCode?: string, ) => {
        if (!promotionCode){
            throw new Error('Required parameter promotionCode was null or undefined when calling apiNskV1PromotionsByPromotionCodeValidateGet.');
        }

        let queryParameters: string[] = [];
        if (organizationCode !== undefined) {
            queryParameters.push("organizationCode="+encodeURIComponent(String(organizationCode)));
        }


            const requestObj: Request<{
                promotionCode: string, organizationCode?: string, 
            }> = {
                url: '/api/nsk/v1/promotions/${encodeURIComponent(String(promotionCode))}/validate',
                method: 'get',
                data: {
                    promotionCode,organizationCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets promotions based on data in the request.
     * 
     * @param promotionCode The promotion code.
     * @param organizationCode The organization code.
     * @param effectiveDate The effective date of the promotion.
     * @param cultureCode The requested culture code.
     * @param promotionCodeMatching The matching criteria for the promotion code, by default if not set the criteria will be an exact match.
     * @param organizationCodeMatching The matching criteria for the organization code, by default if not set the criteria will be an exact match.
     
     */
    public apiNskV1PromotionsGet = (promotionCode?: string, organizationCode?: string, effectiveDate?: Date, cultureCode?: string, promotionCodeMatching?: 'StartsWith' | 'EndsWith' | 'Contains' | 'ExactMatch', organizationCodeMatching?: 'StartsWith' | 'EndsWith' | 'Contains' | 'ExactMatch', ) => {
        let queryParameters: string[] = [];
        if (promotionCode !== undefined) {
            queryParameters.push("promotionCode="+encodeURIComponent(String(promotionCode)));
        }
        if (organizationCode !== undefined) {
            queryParameters.push("organizationCode="+encodeURIComponent(String(organizationCode)));
        }
        if (effectiveDate !== undefined) {
           queryParameters.push("effectiveDate="+encodeURIComponent(<any>effectiveDate.toISOString()));
        }
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }
        if (promotionCodeMatching !== undefined) {
            queryParameters.push("promotionCodeMatching="+encodeURIComponent(String(promotionCodeMatching)));
        }
        if (organizationCodeMatching !== undefined) {
            queryParameters.push("organizationCodeMatching="+encodeURIComponent(String(organizationCodeMatching)));
        }


            const requestObj: Request<{
                promotionCode?: string, organizationCode?: string, effectiveDate?: Date, cultureCode?: string, promotionCodeMatching?: 'StartsWith' | 'EndsWith' | 'Contains' | 'ExactMatch', organizationCodeMatching?: 'StartsWith' | 'EndsWith' | 'Contains' | 'ExactMatch', 
            }> = {
                url: '/api/nsk/v1/promotions',
                method: 'get',
                data: {
                    promotionCode,organizationCode,effectiveDate,cultureCode,promotionCodeMatching,organizationCodeMatching,
                }
            };
            return this.client.makeRequest(requestObj);
    }

}
