/**
 * API - Current Routes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: trunk
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from "rxjs/Observable";
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import IHttpClient from "../IHttpClient";
import { inject, injectable } from "inversify";
import { IAPIConfiguration } from "../IAPIConfiguration";
import { Headers } from "../Headers";
import HttpResponse from "../HttpResponse";

import * as Models from '../models';
import { Dictionary } from '../models';
import * as Enums from '../enums';
import { getClient, Request } from '../helper';

import { BookingSearchResult } from '../model/bookingSearchResult';
import { BookingTripResult } from '../model/bookingTripResult';
import { DeltaMapperPersonAddressEditRequest } from '../model/deltaMapperPersonAddressEditRequest';
import { DeltaMapperPersonAliasRequest } from '../model/deltaMapperPersonAliasRequest';
import { DeltaMapperPersonCommentRequest } from '../model/deltaMapperPersonCommentRequest';
import { DeltaMapperPersonCustomerProgramEditRequest } from '../model/deltaMapperPersonCustomerProgramEditRequest';
import { DeltaMapperPersonEditRequest } from '../model/deltaMapperPersonEditRequest';
import { DeltaMapperPersonEmailEditRequest } from '../model/deltaMapperPersonEmailEditRequest';
import { DeltaMapperPersonInformationEditRequest } from '../model/deltaMapperPersonInformationEditRequest';
import { DeltaMapperPersonPhoneNumberRequest } from '../model/deltaMapperPersonPhoneNumberRequest';
import { DeltaMapperPersonPreferenceEditRequest } from '../model/deltaMapperPersonPreferenceEditRequest';
import { DeltaMapperPersonStoredPaymentUpdateRequest } from '../model/deltaMapperPersonStoredPaymentUpdateRequest';
import { DeltaMapperTravelDocumentEditRequestv2 } from '../model/deltaMapperTravelDocumentEditRequestv2';
import { DeltaMapperTravelNotificationEditRequest } from '../model/deltaMapperTravelNotificationEditRequest';
import { DeltaMapperUserRequest } from '../model/deltaMapperUserRequest';
import { DeltaMapperUserRolePatchRequest } from '../model/deltaMapperUserRolePatchRequest';
import { IJsonResponse } from '../model/iJsonResponse';
import { NotificationEvent } from '../model/notificationEvent';
import { NotificationEventCreateRequest } from '../model/notificationEventCreateRequest';
import { NotificationTimedEvent } from '../model/notificationTimedEvent';
import { NotificationTimedEventCreateRequest } from '../model/notificationTimedEventCreateRequest';
import { NotificationTimedEventEditRequest } from '../model/notificationTimedEventEditRequest';
import { Person } from '../model/person';
import { PersonAddress } from '../model/personAddress';
import { PersonAddressCreateRequest } from '../model/personAddressCreateRequest';
import { PersonAddressEditRequest } from '../model/personAddressEditRequest';
import { PersonAlias } from '../model/personAlias';
import { PersonAliasRequest } from '../model/personAliasRequest';
import { PersonComment } from '../model/personComment';
import { PersonCommentRequest } from '../model/personCommentRequest';
import { PersonCustomerProgram } from '../model/personCustomerProgram';
import { PersonCustomerProgramCreateRequest } from '../model/personCustomerProgramCreateRequest';
import { PersonCustomerProgramEditRequest } from '../model/personCustomerProgramEditRequest';
import { PersonEditRequest } from '../model/personEditRequest';
import { PersonEmail } from '../model/personEmail';
import { PersonEmailCreateRequest } from '../model/personEmailCreateRequest';
import { PersonEmailEditRequest } from '../model/personEmailEditRequest';
import { PersonInformation } from '../model/personInformation';
import { PersonInformationCreateRequest } from '../model/personInformationCreateRequest';
import { PersonInformationEditRequest } from '../model/personInformationEditRequest';
import { PersonPhoneNumber } from '../model/personPhoneNumber';
import { PersonPhoneNumberRequest } from '../model/personPhoneNumberRequest';
import { PersonPreference } from '../model/personPreference';
import { PersonPreferenceCreateRequest } from '../model/personPreferenceCreateRequest';
import { PersonPreferenceEditRequest } from '../model/personPreferenceEditRequest';
import { PersonStoredPayment } from '../model/personStoredPayment';
import { PersonStoredPaymentRequest } from '../model/personStoredPaymentRequest';
import { PersonStoredPaymentUpdateRequest } from '../model/personStoredPaymentUpdateRequest';
import { PersonTravelDocument } from '../model/personTravelDocument';
import { PersonTravelDocumentRequest } from '../model/personTravelDocumentRequest';
import { TravelDocumentEditRequestv2 } from '../model/travelDocumentEditRequestv2';
import { TravelNotification } from '../model/travelNotification';
import { TravelNotificationCreateRequest } from '../model/travelNotificationCreateRequest';
import { TravelNotificationEditRequest } from '../model/travelNotificationEditRequest';
import { User } from '../model/user';
import { UserChangePasswordRequestBase } from '../model/userChangePasswordRequestBase';
import { UserCreateRequest } from '../model/userCreateRequest';
import { UserCreateRequestv2 } from '../model/userCreateRequestv2';
import { UserRecord } from '../model/userRecord';
import { UserRequest } from '../model/userRequest';
import { UserRole } from '../model/userRole';
import { UserRoleCreateRequest } from '../model/userRoleCreateRequest';
import { UserRoleEditRequest } from '../model/userRoleEditRequest';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class UsersService {

    constructor(@inject(HTTP_CLIENT) protected client: ApiHttpClient) {}

    /**
     * Searches the specific user upcoming and past bookings by passenger.
     * This is similar to the user booking endpoint but returns more focused trip information.  This endpoint will only return data where a bookings passenger customer number matches the current logged in user.  Bookings made by the user but where the passenger customer are not assigned are ignored.
     * @param userKey The user key.
     * @param startDate Booking start search date.
     * @param endDate Booking end search date.
     
     */
    public apiNskV1UsersByUserKeyBookingsByPassengerGet = (userKey: string, startDate?: Date, endDate?: Date, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyBookingsByPassengerGet.');
        }

        let queryParameters: string[] = [];
        if (startDate !== undefined) {
           queryParameters.push("startDate="+encodeURIComponent(<any>startDate.toISOString()));
        }
        if (endDate !== undefined) {
           queryParameters.push("endDate="+encodeURIComponent(<any>endDate.toISOString()));
        }


            const requestObj: Request<{
                userKey: string, startDate?: Date, endDate?: Date, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/bookingsByPassenger',
                method: 'get',
                data: {
                    userKey,startDate,endDate,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Searches the specific user for upcoming and past bookings.
     * 
     * @param userKey The unique user key.
     * @param returnCount The number of results to be returned.
     * @param associatedFirstName An associated passenger/contact first name.
     * @param associatedLastName An associated passenger/contact last name.
     * @param phoneticSearch Flag indicating to search using the phonetic option.
     * @param tripIdentifier Filter by trip identifier.
     * @param origin Filter by origin station code.
     * @param destination Filter by destination station code.
     * @param searchArchive Flag indicating to search archived bookings.
     * @param tripDate Filter by trip date.
     * @param startDate Filter by starting search date.
     * @param endDate Filter by ending search date.
     * @param searchByCustomerNumber Flag indicating to search by the users customer number instead of user identifier.
     * @param lastBookingKey The last booking key (used for paging).
     
     */
    public apiNskV1UsersByUserKeyBookingsGet = (userKey: string, returnCount: number, associatedFirstName?: string, associatedLastName?: string, phoneticSearch?: boolean, tripIdentifier?: string, origin?: string, destination?: string, searchArchive?: boolean, tripDate?: Date, startDate?: Date, endDate?: Date, searchByCustomerNumber?: boolean, lastBookingKey?: string, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyBookingsGet.');
        }

        if (!returnCount){
            throw new Error('Required parameter returnCount was null or undefined when calling apiNskV1UsersByUserKeyBookingsGet.');
        }

        let queryParameters: string[] = [];
        if (associatedFirstName !== undefined) {
            queryParameters.push("associatedFirstName="+encodeURIComponent(String(associatedFirstName)));
        }
        if (associatedLastName !== undefined) {
            queryParameters.push("associatedLastName="+encodeURIComponent(String(associatedLastName)));
        }
        if (phoneticSearch !== undefined) {
            queryParameters.push("phoneticSearch="+encodeURIComponent(String(phoneticSearch)));
        }
        if (tripIdentifier !== undefined) {
            queryParameters.push("tripIdentifier="+encodeURIComponent(String(tripIdentifier)));
        }
        if (origin !== undefined) {
            queryParameters.push("origin="+encodeURIComponent(String(origin)));
        }
        if (destination !== undefined) {
            queryParameters.push("destination="+encodeURIComponent(String(destination)));
        }
        if (searchArchive !== undefined) {
            queryParameters.push("searchArchive="+encodeURIComponent(String(searchArchive)));
        }
        if (tripDate !== undefined) {
           queryParameters.push("tripDate="+encodeURIComponent(<any>tripDate.toISOString()));
        }
        if (startDate !== undefined) {
           queryParameters.push("startDate="+encodeURIComponent(<any>startDate.toISOString()));
        }
        if (endDate !== undefined) {
           queryParameters.push("endDate="+encodeURIComponent(<any>endDate.toISOString()));
        }
        if (searchByCustomerNumber !== undefined) {
            queryParameters.push("searchByCustomerNumber="+encodeURIComponent(String(searchByCustomerNumber)));
        }
        if (returnCount !== undefined) {
            queryParameters.push("returnCount="+encodeURIComponent(String(returnCount)));
        }
        if (lastBookingKey !== undefined) {
            queryParameters.push("lastBookingKey="+encodeURIComponent(String(lastBookingKey)));
        }


            const requestObj: Request<{
                userKey: string, returnCount: number, associatedFirstName?: string, associatedLastName?: string, phoneticSearch?: boolean, tripIdentifier?: string, origin?: string, destination?: string, searchArchive?: boolean, tripDate?: Date, startDate?: Date, endDate?: Date, searchByCustomerNumber?: boolean, lastBookingKey?: string, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/bookings',
                method: 'get',
                data: {
                    userKey,returnCount,associatedFirstName,associatedLastName,phoneticSearch,tripIdentifier,origin,destination,searchArchive,tripDate,startDate,endDate,searchByCustomerNumber,lastBookingKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Delete the user.
     * This is a soft delete by setting the user record status to terminated.
     * @param userKey User key.
     
     */
    public apiNskV1UsersByUserKeyDelete = (userKey: string, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyDelete.');
        }


            const requestObj: Request<{
                userKey: string, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}',
                method: 'delete',
                data: {
                    userKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the a specific user.
     * 
     * @param userKey 
     
     */
    public apiNskV1UsersByUserKeyGet = (userKey: string, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyGet.');
        }


            const requestObj: Request<{
                userKey: string, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}',
                method: 'get',
                data: {
                    userKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Changes a specifics user&#39;s password.
     * 
     * @param userKey The unique user key.
     * @param request The change password request.
     
     */
    public apiNskV1UsersByUserKeyPasswordChangePost = (userKey: string, request?: UserChangePasswordRequestBase, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPasswordChangePost.');
        }


            const requestObj: Request<{
                userKey: string, request?: UserChangePasswordRequestBase, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/password/change',
                method: 'post',
                data: {
                    userKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Invokes the forgot password reset for a specific user.
     * 
     * @param userKey The unique user key.
     
     */
    public apiNskV1UsersByUserKeyPasswordResetPost = (userKey: string, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPasswordResetPost.');
        }


            const requestObj: Request<{
                userKey: string, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/password/reset',
                method: 'post',
                data: {
                    userKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Patches the current logged in user.
     * 
     * @param userKey The unique user key.
     * @param request The user patch request.
     
     */
    public apiNskV1UsersByUserKeyPatch = (userKey: string, request?: DeltaMapperUserRequest, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPatch.');
        }


            const requestObj: Request<{
                userKey: string, request?: DeltaMapperUserRequest, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}',
                method: 'patch',
                data: {
                    userKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Deletes a specific address on the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param personAddressKey The unique person address key.
     
     */
    public apiNskV1UsersByUserKeyPersonAddressesByPersonAddressKeyDelete = (userKey: string, personAddressKey: string, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonAddressesByPersonAddressKeyDelete.');
        }

        if (!personAddressKey){
            throw new Error('Required parameter personAddressKey was null or undefined when calling apiNskV1UsersByUserKeyPersonAddressesByPersonAddressKeyDelete.');
        }


            const requestObj: Request<{
                userKey: string, personAddressKey: string, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/addresses/${encodeURIComponent(String(personAddressKey))}',
                method: 'delete',
                data: {
                    userKey,personAddressKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets a specific address from the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param personAddressKey The unique person address key.
     
     */
    public apiNskV1UsersByUserKeyPersonAddressesByPersonAddressKeyGet = (userKey: string, personAddressKey: string, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonAddressesByPersonAddressKeyGet.');
        }

        if (!personAddressKey){
            throw new Error('Required parameter personAddressKey was null or undefined when calling apiNskV1UsersByUserKeyPersonAddressesByPersonAddressKeyGet.');
        }


            const requestObj: Request<{
                userKey: string, personAddressKey: string, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/addresses/${encodeURIComponent(String(personAddressKey))}',
                method: 'get',
                data: {
                    userKey,personAddressKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Patches a specific address on the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param personAddressKey The unique person address key.
     * @param request The patched address.
     
     */
    public apiNskV1UsersByUserKeyPersonAddressesByPersonAddressKeyPatch = (userKey: string, personAddressKey: string, request?: DeltaMapperPersonAddressEditRequest, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonAddressesByPersonAddressKeyPatch.');
        }

        if (!personAddressKey){
            throw new Error('Required parameter personAddressKey was null or undefined when calling apiNskV1UsersByUserKeyPersonAddressesByPersonAddressKeyPatch.');
        }


            const requestObj: Request<{
                userKey: string, personAddressKey: string, request?: DeltaMapperPersonAddressEditRequest, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/addresses/${encodeURIComponent(String(personAddressKey))}',
                method: 'patch',
                data: {
                    userKey,personAddressKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Updates a specific address on the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param personAddressKey The unique person address key.
     * @param request The modified address.
     
     */
    public apiNskV1UsersByUserKeyPersonAddressesByPersonAddressKeyPut = (userKey: string, personAddressKey: string, request?: PersonAddressEditRequest, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonAddressesByPersonAddressKeyPut.');
        }

        if (!personAddressKey){
            throw new Error('Required parameter personAddressKey was null or undefined when calling apiNskV1UsersByUserKeyPersonAddressesByPersonAddressKeyPut.');
        }


            const requestObj: Request<{
                userKey: string, personAddressKey: string, request?: PersonAddressEditRequest, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/addresses/${encodeURIComponent(String(personAddressKey))}',
                method: 'put',
                data: {
                    userKey,personAddressKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets all addresses from the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     
     */
    public apiNskV1UsersByUserKeyPersonAddressesGet = (userKey: string, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonAddressesGet.');
        }


            const requestObj: Request<{
                userKey: string, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/addresses',
                method: 'get',
                data: {
                    userKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Creates a new address on the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param request The new address.
     
     */
    public apiNskV1UsersByUserKeyPersonAddressesPost = (userKey: string, request?: PersonAddressCreateRequest, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonAddressesPost.');
        }


            const requestObj: Request<{
                userKey: string, request?: PersonAddressCreateRequest, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/addresses',
                method: 'post',
                data: {
                    userKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Deletes a specific alias on the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param personAliasKey The unique person alias key.
     
     */
    public apiNskV1UsersByUserKeyPersonAliasesByPersonAliasKeyDelete = (userKey: string, personAliasKey: string, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonAliasesByPersonAliasKeyDelete.');
        }

        if (!personAliasKey){
            throw new Error('Required parameter personAliasKey was null or undefined when calling apiNskV1UsersByUserKeyPersonAliasesByPersonAliasKeyDelete.');
        }


            const requestObj: Request<{
                userKey: string, personAliasKey: string, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/aliases/${encodeURIComponent(String(personAliasKey))}',
                method: 'delete',
                data: {
                    userKey,personAliasKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets a specific alias from the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param personAliasKey The unique person alias key.
     
     */
    public apiNskV1UsersByUserKeyPersonAliasesByPersonAliasKeyGet = (userKey: string, personAliasKey: string, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonAliasesByPersonAliasKeyGet.');
        }

        if (!personAliasKey){
            throw new Error('Required parameter personAliasKey was null or undefined when calling apiNskV1UsersByUserKeyPersonAliasesByPersonAliasKeyGet.');
        }


            const requestObj: Request<{
                userKey: string, personAliasKey: string, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/aliases/${encodeURIComponent(String(personAliasKey))}',
                method: 'get',
                data: {
                    userKey,personAliasKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Patches a specific alias on the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param personAliasKey The unique person alias key.
     * @param request The patched alias.
     
     */
    public apiNskV1UsersByUserKeyPersonAliasesByPersonAliasKeyPatch = (userKey: string, personAliasKey: string, request?: DeltaMapperPersonAliasRequest, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonAliasesByPersonAliasKeyPatch.');
        }

        if (!personAliasKey){
            throw new Error('Required parameter personAliasKey was null or undefined when calling apiNskV1UsersByUserKeyPersonAliasesByPersonAliasKeyPatch.');
        }


            const requestObj: Request<{
                userKey: string, personAliasKey: string, request?: DeltaMapperPersonAliasRequest, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/aliases/${encodeURIComponent(String(personAliasKey))}',
                method: 'patch',
                data: {
                    userKey,personAliasKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Updates a specific alias on the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param personAliasKey The unique person alias key.
     * @param request The modified alias.
     
     */
    public apiNskV1UsersByUserKeyPersonAliasesByPersonAliasKeyPut = (userKey: string, personAliasKey: string, request?: PersonAliasRequest, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonAliasesByPersonAliasKeyPut.');
        }

        if (!personAliasKey){
            throw new Error('Required parameter personAliasKey was null or undefined when calling apiNskV1UsersByUserKeyPersonAliasesByPersonAliasKeyPut.');
        }


            const requestObj: Request<{
                userKey: string, personAliasKey: string, request?: PersonAliasRequest, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/aliases/${encodeURIComponent(String(personAliasKey))}',
                method: 'put',
                data: {
                    userKey,personAliasKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets all aliases from the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     
     */
    public apiNskV1UsersByUserKeyPersonAliasesGet = (userKey: string, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonAliasesGet.');
        }


            const requestObj: Request<{
                userKey: string, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/aliases',
                method: 'get',
                data: {
                    userKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Creates a new alias on the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param request The new alias.
     
     */
    public apiNskV1UsersByUserKeyPersonAliasesPost = (userKey: string, request?: PersonAliasRequest, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonAliasesPost.');
        }


            const requestObj: Request<{
                userKey: string, request?: PersonAliasRequest, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/aliases',
                method: 'post',
                data: {
                    userKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Deletes a specific comment on the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param personCommentKey The unique person comment key.
     
     */
    public apiNskV1UsersByUserKeyPersonCommentsByPersonCommentKeyDelete = (userKey: string, personCommentKey: string, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonCommentsByPersonCommentKeyDelete.');
        }

        if (!personCommentKey){
            throw new Error('Required parameter personCommentKey was null or undefined when calling apiNskV1UsersByUserKeyPersonCommentsByPersonCommentKeyDelete.');
        }


            const requestObj: Request<{
                userKey: string, personCommentKey: string, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/comments/${encodeURIComponent(String(personCommentKey))}',
                method: 'delete',
                data: {
                    userKey,personCommentKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets a specific comment from the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param personCommentKey The unique person comment key.
     
     */
    public apiNskV1UsersByUserKeyPersonCommentsByPersonCommentKeyGet = (userKey: string, personCommentKey: string, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonCommentsByPersonCommentKeyGet.');
        }

        if (!personCommentKey){
            throw new Error('Required parameter personCommentKey was null or undefined when calling apiNskV1UsersByUserKeyPersonCommentsByPersonCommentKeyGet.');
        }


            const requestObj: Request<{
                userKey: string, personCommentKey: string, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/comments/${encodeURIComponent(String(personCommentKey))}',
                method: 'get',
                data: {
                    userKey,personCommentKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Patches a specific comment on the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param personCommentKey The unique person comment key.
     * @param request The patched comment.
     
     */
    public apiNskV1UsersByUserKeyPersonCommentsByPersonCommentKeyPatch = (userKey: string, personCommentKey: string, request?: DeltaMapperPersonCommentRequest, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonCommentsByPersonCommentKeyPatch.');
        }

        if (!personCommentKey){
            throw new Error('Required parameter personCommentKey was null or undefined when calling apiNskV1UsersByUserKeyPersonCommentsByPersonCommentKeyPatch.');
        }


            const requestObj: Request<{
                userKey: string, personCommentKey: string, request?: DeltaMapperPersonCommentRequest, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/comments/${encodeURIComponent(String(personCommentKey))}',
                method: 'patch',
                data: {
                    userKey,personCommentKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Updates a specific comment on the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param personCommentKey The unique person comment key.
     * @param request The modified comment.
     
     */
    public apiNskV1UsersByUserKeyPersonCommentsByPersonCommentKeyPut = (userKey: string, personCommentKey: string, request?: PersonCommentRequest, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonCommentsByPersonCommentKeyPut.');
        }

        if (!personCommentKey){
            throw new Error('Required parameter personCommentKey was null or undefined when calling apiNskV1UsersByUserKeyPersonCommentsByPersonCommentKeyPut.');
        }


            const requestObj: Request<{
                userKey: string, personCommentKey: string, request?: PersonCommentRequest, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/comments/${encodeURIComponent(String(personCommentKey))}',
                method: 'put',
                data: {
                    userKey,personCommentKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets all comments from the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     
     */
    public apiNskV1UsersByUserKeyPersonCommentsGet = (userKey: string, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonCommentsGet.');
        }


            const requestObj: Request<{
                userKey: string, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/comments',
                method: 'get',
                data: {
                    userKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Creates a new comment on the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param request The new comment.
     
     */
    public apiNskV1UsersByUserKeyPersonCommentsPost = (userKey: string, request?: PersonCommentRequest, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonCommentsPost.');
        }


            const requestObj: Request<{
                userKey: string, request?: PersonCommentRequest, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/comments',
                method: 'post',
                data: {
                    userKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Deletes a specific email address on the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param personEmailAddressKey The unique person email address key.
     
     */
    public apiNskV1UsersByUserKeyPersonEmailsByPersonEmailAddressKeyDelete = (userKey: string, personEmailAddressKey: string, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonEmailsByPersonEmailAddressKeyDelete.');
        }

        if (!personEmailAddressKey){
            throw new Error('Required parameter personEmailAddressKey was null or undefined when calling apiNskV1UsersByUserKeyPersonEmailsByPersonEmailAddressKeyDelete.');
        }


            const requestObj: Request<{
                userKey: string, personEmailAddressKey: string, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/emails/${encodeURIComponent(String(personEmailAddressKey))}',
                method: 'delete',
                data: {
                    userKey,personEmailAddressKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets a specific email address from the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param personEmailAddressKey The unique person email address key.
     
     */
    public apiNskV1UsersByUserKeyPersonEmailsByPersonEmailAddressKeyGet = (userKey: string, personEmailAddressKey: string, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonEmailsByPersonEmailAddressKeyGet.');
        }

        if (!personEmailAddressKey){
            throw new Error('Required parameter personEmailAddressKey was null or undefined when calling apiNskV1UsersByUserKeyPersonEmailsByPersonEmailAddressKeyGet.');
        }


            const requestObj: Request<{
                userKey: string, personEmailAddressKey: string, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/emails/${encodeURIComponent(String(personEmailAddressKey))}',
                method: 'get',
                data: {
                    userKey,personEmailAddressKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Patches a specific email address on the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param personEmailAddressKey The unique person email address key.
     * @param request The patched email address.
     
     */
    public apiNskV1UsersByUserKeyPersonEmailsByPersonEmailAddressKeyPatch = (userKey: string, personEmailAddressKey: string, request?: DeltaMapperPersonEmailEditRequest, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonEmailsByPersonEmailAddressKeyPatch.');
        }

        if (!personEmailAddressKey){
            throw new Error('Required parameter personEmailAddressKey was null or undefined when calling apiNskV1UsersByUserKeyPersonEmailsByPersonEmailAddressKeyPatch.');
        }


            const requestObj: Request<{
                userKey: string, personEmailAddressKey: string, request?: DeltaMapperPersonEmailEditRequest, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/emails/${encodeURIComponent(String(personEmailAddressKey))}',
                method: 'patch',
                data: {
                    userKey,personEmailAddressKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Creates a new email address on the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param personEmailAddressKey 
     * @param request The new email address.
     
     */
    public apiNskV1UsersByUserKeyPersonEmailsByPersonEmailAddressKeyPost = (userKey: string, personEmailAddressKey: string, request?: PersonEmailCreateRequest, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonEmailsByPersonEmailAddressKeyPost.');
        }

        if (!personEmailAddressKey){
            throw new Error('Required parameter personEmailAddressKey was null or undefined when calling apiNskV1UsersByUserKeyPersonEmailsByPersonEmailAddressKeyPost.');
        }


            const requestObj: Request<{
                userKey: string, personEmailAddressKey: string, request?: PersonEmailCreateRequest, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/emails/${encodeURIComponent(String(personEmailAddressKey))}',
                method: 'post',
                data: {
                    userKey,personEmailAddressKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Updates a specific email address on the specific user&#39;s person.
     * 
     * @param userKey The specific user key.
     * @param personEmailAddressKey The unique person email address key.
     * @param request The modified email address.
     
     */
    public apiNskV1UsersByUserKeyPersonEmailsByPersonEmailAddressKeyPut = (userKey: string, personEmailAddressKey: string, request?: PersonEmailEditRequest, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonEmailsByPersonEmailAddressKeyPut.');
        }

        if (!personEmailAddressKey){
            throw new Error('Required parameter personEmailAddressKey was null or undefined when calling apiNskV1UsersByUserKeyPersonEmailsByPersonEmailAddressKeyPut.');
        }


            const requestObj: Request<{
                userKey: string, personEmailAddressKey: string, request?: PersonEmailEditRequest, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/emails/${encodeURIComponent(String(personEmailAddressKey))}',
                method: 'put',
                data: {
                    userKey,personEmailAddressKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets all email addresses from the specific user&#39;s person.
     * 
     * @param userKey 
     
     */
    public apiNskV1UsersByUserKeyPersonEmailsGet = (userKey: string, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonEmailsGet.');
        }


            const requestObj: Request<{
                userKey: string, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/emails',
                method: 'get',
                data: {
                    userKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the a specific user&#39;s person.
     * 
     * @param userKey 
     
     */
    public apiNskV1UsersByUserKeyPersonGet = (userKey: string, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonGet.');
        }


            const requestObj: Request<{
                userKey: string, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person',
                method: 'get',
                data: {
                    userKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Deletes a specific information on the logged in user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param personInformationKey The unique person information key.
     
     */
    public apiNskV1UsersByUserKeyPersonInformationByPersonInformationKeyDelete = (userKey: string, personInformationKey: string, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonInformationByPersonInformationKeyDelete.');
        }

        if (!personInformationKey){
            throw new Error('Required parameter personInformationKey was null or undefined when calling apiNskV1UsersByUserKeyPersonInformationByPersonInformationKeyDelete.');
        }


            const requestObj: Request<{
                userKey: string, personInformationKey: string, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/information/${encodeURIComponent(String(personInformationKey))}',
                method: 'delete',
                data: {
                    userKey,personInformationKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets a specific information from the logged in user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param personInformationKey The unique person information key.
     
     */
    public apiNskV1UsersByUserKeyPersonInformationByPersonInformationKeyGet = (userKey: string, personInformationKey: string, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonInformationByPersonInformationKeyGet.');
        }

        if (!personInformationKey){
            throw new Error('Required parameter personInformationKey was null or undefined when calling apiNskV1UsersByUserKeyPersonInformationByPersonInformationKeyGet.');
        }


            const requestObj: Request<{
                userKey: string, personInformationKey: string, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/information/${encodeURIComponent(String(personInformationKey))}',
                method: 'get',
                data: {
                    userKey,personInformationKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Patches a specific information on the logged in user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param personInformationKey The unique person information key.
     * @param request The patched information.
     
     */
    public apiNskV1UsersByUserKeyPersonInformationByPersonInformationKeyPatch = (userKey: string, personInformationKey: string, request?: DeltaMapperPersonInformationEditRequest, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonInformationByPersonInformationKeyPatch.');
        }

        if (!personInformationKey){
            throw new Error('Required parameter personInformationKey was null or undefined when calling apiNskV1UsersByUserKeyPersonInformationByPersonInformationKeyPatch.');
        }


            const requestObj: Request<{
                userKey: string, personInformationKey: string, request?: DeltaMapperPersonInformationEditRequest, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/information/${encodeURIComponent(String(personInformationKey))}',
                method: 'patch',
                data: {
                    userKey,personInformationKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Updates a specific information on the logged in user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param personInformationKey The unique person information key.
     * @param request The modified information.
     
     */
    public apiNskV1UsersByUserKeyPersonInformationByPersonInformationKeyPut = (userKey: string, personInformationKey: string, request?: PersonInformationEditRequest, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonInformationByPersonInformationKeyPut.');
        }

        if (!personInformationKey){
            throw new Error('Required parameter personInformationKey was null or undefined when calling apiNskV1UsersByUserKeyPersonInformationByPersonInformationKeyPut.');
        }


            const requestObj: Request<{
                userKey: string, personInformationKey: string, request?: PersonInformationEditRequest, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/information/${encodeURIComponent(String(personInformationKey))}',
                method: 'put',
                data: {
                    userKey,personInformationKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets all information from the logged in user&#39;s person.
     * 
     * @param userKey The unique user key.
     
     */
    public apiNskV1UsersByUserKeyPersonInformationGet = (userKey: string, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonInformationGet.');
        }


            const requestObj: Request<{
                userKey: string, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/information',
                method: 'get',
                data: {
                    userKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Creates a new information on the logged in user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param request The new information.
     
     */
    public apiNskV1UsersByUserKeyPersonInformationPost = (userKey: string, request?: PersonInformationCreateRequest, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonInformationPost.');
        }


            const requestObj: Request<{
                userKey: string, request?: PersonInformationCreateRequest, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/information',
                method: 'post',
                data: {
                    userKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Patches the specific user&#39;s person records basic information.
     * 
     * @param userKey The unique user key.
     * @param request The person patch request.
     
     */
    public apiNskV1UsersByUserKeyPersonPatch = (userKey: string, request?: DeltaMapperPersonEditRequest, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonPatch.');
        }


            const requestObj: Request<{
                userKey: string, request?: DeltaMapperPersonEditRequest, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person',
                method: 'patch',
                data: {
                    userKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Deletes a specific phone number on the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param personPhoneNumberKey The unique person phone number key.
     
     */
    public apiNskV1UsersByUserKeyPersonPhoneNumbersByPersonPhoneNumberKeyDelete = (userKey: string, personPhoneNumberKey: string, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonPhoneNumbersByPersonPhoneNumberKeyDelete.');
        }

        if (!personPhoneNumberKey){
            throw new Error('Required parameter personPhoneNumberKey was null or undefined when calling apiNskV1UsersByUserKeyPersonPhoneNumbersByPersonPhoneNumberKeyDelete.');
        }


            const requestObj: Request<{
                userKey: string, personPhoneNumberKey: string, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/phoneNumbers/${encodeURIComponent(String(personPhoneNumberKey))}',
                method: 'delete',
                data: {
                    userKey,personPhoneNumberKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets a specific phone number from the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param personPhoneNumberKey The unique person phone number key.
     
     */
    public apiNskV1UsersByUserKeyPersonPhoneNumbersByPersonPhoneNumberKeyGet = (userKey: string, personPhoneNumberKey: string, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonPhoneNumbersByPersonPhoneNumberKeyGet.');
        }

        if (!personPhoneNumberKey){
            throw new Error('Required parameter personPhoneNumberKey was null or undefined when calling apiNskV1UsersByUserKeyPersonPhoneNumbersByPersonPhoneNumberKeyGet.');
        }


            const requestObj: Request<{
                userKey: string, personPhoneNumberKey: string, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/phoneNumbers/${encodeURIComponent(String(personPhoneNumberKey))}',
                method: 'get',
                data: {
                    userKey,personPhoneNumberKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Patches a specific phone number on the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param personPhoneNumberKey The unique person phone number key.
     * @param request The patched phone number.
     
     */
    public apiNskV1UsersByUserKeyPersonPhoneNumbersByPersonPhoneNumberKeyPatch = (userKey: string, personPhoneNumberKey: string, request?: DeltaMapperPersonPhoneNumberRequest, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonPhoneNumbersByPersonPhoneNumberKeyPatch.');
        }

        if (!personPhoneNumberKey){
            throw new Error('Required parameter personPhoneNumberKey was null or undefined when calling apiNskV1UsersByUserKeyPersonPhoneNumbersByPersonPhoneNumberKeyPatch.');
        }


            const requestObj: Request<{
                userKey: string, personPhoneNumberKey: string, request?: DeltaMapperPersonPhoneNumberRequest, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/phoneNumbers/${encodeURIComponent(String(personPhoneNumberKey))}',
                method: 'patch',
                data: {
                    userKey,personPhoneNumberKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Updates a specific phone number on the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param personPhoneNumberKey The unique person phone number key.
     * @param request The modified phone number.
     
     */
    public apiNskV1UsersByUserKeyPersonPhoneNumbersByPersonPhoneNumberKeyPut = (userKey: string, personPhoneNumberKey: string, request?: PersonPhoneNumberRequest, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonPhoneNumbersByPersonPhoneNumberKeyPut.');
        }

        if (!personPhoneNumberKey){
            throw new Error('Required parameter personPhoneNumberKey was null or undefined when calling apiNskV1UsersByUserKeyPersonPhoneNumbersByPersonPhoneNumberKeyPut.');
        }


            const requestObj: Request<{
                userKey: string, personPhoneNumberKey: string, request?: PersonPhoneNumberRequest, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/phoneNumbers/${encodeURIComponent(String(personPhoneNumberKey))}',
                method: 'put',
                data: {
                    userKey,personPhoneNumberKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets all phone numbers from the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     
     */
    public apiNskV1UsersByUserKeyPersonPhoneNumbersGet = (userKey: string, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonPhoneNumbersGet.');
        }


            const requestObj: Request<{
                userKey: string, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/phoneNumbers',
                method: 'get',
                data: {
                    userKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Creates a new phone number on the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param request The new phone number.
     
     */
    public apiNskV1UsersByUserKeyPersonPhoneNumbersPost = (userKey: string, request?: PersonPhoneNumberRequest, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonPhoneNumbersPost.');
        }


            const requestObj: Request<{
                userKey: string, request?: PersonPhoneNumberRequest, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/phoneNumbers',
                method: 'post',
                data: {
                    userKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Deletes a specific preference for a specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param personPreferenceKey The unique person preference key.
     
     */
    public apiNskV1UsersByUserKeyPersonPreferencesByPersonPreferenceKeyDelete = (userKey: string, personPreferenceKey: string, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonPreferencesByPersonPreferenceKeyDelete.');
        }

        if (!personPreferenceKey){
            throw new Error('Required parameter personPreferenceKey was null or undefined when calling apiNskV1UsersByUserKeyPersonPreferencesByPersonPreferenceKeyDelete.');
        }


            const requestObj: Request<{
                userKey: string, personPreferenceKey: string, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/preferences/${encodeURIComponent(String(personPreferenceKey))}',
                method: 'delete',
                data: {
                    userKey,personPreferenceKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets a specific preference for a specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param personPreferenceKey The unique person preference key.
     
     */
    public apiNskV1UsersByUserKeyPersonPreferencesByPersonPreferenceKeyGet = (userKey: string, personPreferenceKey: string, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonPreferencesByPersonPreferenceKeyGet.');
        }

        if (!personPreferenceKey){
            throw new Error('Required parameter personPreferenceKey was null or undefined when calling apiNskV1UsersByUserKeyPersonPreferencesByPersonPreferenceKeyGet.');
        }


            const requestObj: Request<{
                userKey: string, personPreferenceKey: string, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/preferences/${encodeURIComponent(String(personPreferenceKey))}',
                method: 'get',
                data: {
                    userKey,personPreferenceKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Patches a specific preference for a specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param personPreferenceKey The unique person preference key.
     * @param request The patched preference.
     
     */
    public apiNskV1UsersByUserKeyPersonPreferencesByPersonPreferenceKeyPatch = (userKey: string, personPreferenceKey: string, request?: DeltaMapperPersonPreferenceEditRequest, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonPreferencesByPersonPreferenceKeyPatch.');
        }

        if (!personPreferenceKey){
            throw new Error('Required parameter personPreferenceKey was null or undefined when calling apiNskV1UsersByUserKeyPersonPreferencesByPersonPreferenceKeyPatch.');
        }


            const requestObj: Request<{
                userKey: string, personPreferenceKey: string, request?: DeltaMapperPersonPreferenceEditRequest, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/preferences/${encodeURIComponent(String(personPreferenceKey))}',
                method: 'patch',
                data: {
                    userKey,personPreferenceKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Updates a specific preference for a specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param personPreferenceKey The unique person preference key.
     * @param request The modified preference.
     
     */
    public apiNskV1UsersByUserKeyPersonPreferencesByPersonPreferenceKeyPut = (userKey: string, personPreferenceKey: string, request?: PersonPreferenceEditRequest, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonPreferencesByPersonPreferenceKeyPut.');
        }

        if (!personPreferenceKey){
            throw new Error('Required parameter personPreferenceKey was null or undefined when calling apiNskV1UsersByUserKeyPersonPreferencesByPersonPreferenceKeyPut.');
        }


            const requestObj: Request<{
                userKey: string, personPreferenceKey: string, request?: PersonPreferenceEditRequest, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/preferences/${encodeURIComponent(String(personPreferenceKey))}',
                method: 'put',
                data: {
                    userKey,personPreferenceKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets all preferences for a specific user&#39;s person.
     * 
     * @param userKey The unique person key.
     
     */
    public apiNskV1UsersByUserKeyPersonPreferencesGet = (userKey: string, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonPreferencesGet.');
        }


            const requestObj: Request<{
                userKey: string, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/preferences',
                method: 'get',
                data: {
                    userKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Creates a new preference for a specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param request The new preference.
     
     */
    public apiNskV1UsersByUserKeyPersonPreferencesPost = (userKey: string, request?: PersonPreferenceCreateRequest, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonPreferencesPost.');
        }


            const requestObj: Request<{
                userKey: string, request?: PersonPreferenceCreateRequest, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/preferences',
                method: 'post',
                data: {
                    userKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Deletes a specific program on the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param personProgramKey The unique person address key.
     
     */
    public apiNskV1UsersByUserKeyPersonProgramsByPersonProgramKeyDelete = (userKey: string, personProgramKey: string, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonProgramsByPersonProgramKeyDelete.');
        }

        if (!personProgramKey){
            throw new Error('Required parameter personProgramKey was null or undefined when calling apiNskV1UsersByUserKeyPersonProgramsByPersonProgramKeyDelete.');
        }


            const requestObj: Request<{
                userKey: string, personProgramKey: string, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/programs/${encodeURIComponent(String(personProgramKey))}',
                method: 'delete',
                data: {
                    userKey,personProgramKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets a specific program from the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param personProgramKey The unique person program key.
     
     */
    public apiNskV1UsersByUserKeyPersonProgramsByPersonProgramKeyGet = (userKey: string, personProgramKey: string, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonProgramsByPersonProgramKeyGet.');
        }

        if (!personProgramKey){
            throw new Error('Required parameter personProgramKey was null or undefined when calling apiNskV1UsersByUserKeyPersonProgramsByPersonProgramKeyGet.');
        }


            const requestObj: Request<{
                userKey: string, personProgramKey: string, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/programs/${encodeURIComponent(String(personProgramKey))}',
                method: 'get',
                data: {
                    userKey,personProgramKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Patches a specific program on the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param personProgramKey The unique person program key.
     * @param request The patched program.
     
     */
    public apiNskV1UsersByUserKeyPersonProgramsByPersonProgramKeyPatch = (userKey: string, personProgramKey: string, request?: DeltaMapperPersonCustomerProgramEditRequest, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonProgramsByPersonProgramKeyPatch.');
        }

        if (!personProgramKey){
            throw new Error('Required parameter personProgramKey was null or undefined when calling apiNskV1UsersByUserKeyPersonProgramsByPersonProgramKeyPatch.');
        }


            const requestObj: Request<{
                userKey: string, personProgramKey: string, request?: DeltaMapperPersonCustomerProgramEditRequest, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/programs/${encodeURIComponent(String(personProgramKey))}',
                method: 'patch',
                data: {
                    userKey,personProgramKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Updates a specific program on the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param personProgramKey The unique person program key.
     * @param request The modified program.
     
     */
    public apiNskV1UsersByUserKeyPersonProgramsByPersonProgramKeyPut = (userKey: string, personProgramKey: string, request?: PersonCustomerProgramEditRequest, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonProgramsByPersonProgramKeyPut.');
        }

        if (!personProgramKey){
            throw new Error('Required parameter personProgramKey was null or undefined when calling apiNskV1UsersByUserKeyPersonProgramsByPersonProgramKeyPut.');
        }


            const requestObj: Request<{
                userKey: string, personProgramKey: string, request?: PersonCustomerProgramEditRequest, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/programs/${encodeURIComponent(String(personProgramKey))}',
                method: 'put',
                data: {
                    userKey,personProgramKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets all programs from the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     
     */
    public apiNskV1UsersByUserKeyPersonProgramsGet = (userKey: string, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonProgramsGet.');
        }


            const requestObj: Request<{
                userKey: string, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/programs',
                method: 'get',
                data: {
                    userKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Creates a new program on the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param request The new program.
     
     */
    public apiNskV1UsersByUserKeyPersonProgramsPost = (userKey: string, request?: PersonCustomerProgramCreateRequest, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonProgramsPost.');
        }


            const requestObj: Request<{
                userKey: string, request?: PersonCustomerProgramCreateRequest, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/programs',
                method: 'post',
                data: {
                    userKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Updates the specific user&#39;s person record basic information.
     * 
     * @param userKey The unique user key.
     * @param request The person edit request.
     
     */
    public apiNskV1UsersByUserKeyPersonPut = (userKey: string, request?: PersonEditRequest, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonPut.');
        }


            const requestObj: Request<{
                userKey: string, request?: PersonEditRequest, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person',
                method: 'put',
                data: {
                    userKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Deletes a specific stored payment on the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param personStoredPaymentKey The unique person stored payment key.
     
     */
    public apiNskV1UsersByUserKeyPersonStoredPaymentsByPersonStoredPaymentKeyDelete = (userKey: string, personStoredPaymentKey: string, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonStoredPaymentsByPersonStoredPaymentKeyDelete.');
        }

        if (!personStoredPaymentKey){
            throw new Error('Required parameter personStoredPaymentKey was null or undefined when calling apiNskV1UsersByUserKeyPersonStoredPaymentsByPersonStoredPaymentKeyDelete.');
        }


            const requestObj: Request<{
                userKey: string, personStoredPaymentKey: string, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/storedPayments/${encodeURIComponent(String(personStoredPaymentKey))}',
                method: 'delete',
                data: {
                    userKey,personStoredPaymentKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets a specific stored payment from the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param personStoredPaymentKey The unique person stored payment key.
     
     */
    public apiNskV1UsersByUserKeyPersonStoredPaymentsByPersonStoredPaymentKeyGet = (userKey: string, personStoredPaymentKey: string, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonStoredPaymentsByPersonStoredPaymentKeyGet.');
        }

        if (!personStoredPaymentKey){
            throw new Error('Required parameter personStoredPaymentKey was null or undefined when calling apiNskV1UsersByUserKeyPersonStoredPaymentsByPersonStoredPaymentKeyGet.');
        }


            const requestObj: Request<{
                userKey: string, personStoredPaymentKey: string, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/storedPayments/${encodeURIComponent(String(personStoredPaymentKey))}',
                method: 'get',
                data: {
                    userKey,personStoredPaymentKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Patches a specific stored payment on the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param personStoredPaymentKey The unique person stored payment key.
     * @param request The patched stored payment.
     
     */
    public apiNskV1UsersByUserKeyPersonStoredPaymentsByPersonStoredPaymentKeyPatch = (userKey: string, personStoredPaymentKey: string, request?: DeltaMapperPersonStoredPaymentUpdateRequest, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonStoredPaymentsByPersonStoredPaymentKeyPatch.');
        }

        if (!personStoredPaymentKey){
            throw new Error('Required parameter personStoredPaymentKey was null or undefined when calling apiNskV1UsersByUserKeyPersonStoredPaymentsByPersonStoredPaymentKeyPatch.');
        }


            const requestObj: Request<{
                userKey: string, personStoredPaymentKey: string, request?: DeltaMapperPersonStoredPaymentUpdateRequest, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/storedPayments/${encodeURIComponent(String(personStoredPaymentKey))}',
                method: 'patch',
                data: {
                    userKey,personStoredPaymentKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Updates a specific stored payment on the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param personStoredPaymentKey The unique person stored payment key.
     * @param request The modified stored payment.
     
     */
    public apiNskV1UsersByUserKeyPersonStoredPaymentsByPersonStoredPaymentKeyPut = (userKey: string, personStoredPaymentKey: string, request?: PersonStoredPaymentUpdateRequest, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonStoredPaymentsByPersonStoredPaymentKeyPut.');
        }

        if (!personStoredPaymentKey){
            throw new Error('Required parameter personStoredPaymentKey was null or undefined when calling apiNskV1UsersByUserKeyPersonStoredPaymentsByPersonStoredPaymentKeyPut.');
        }


            const requestObj: Request<{
                userKey: string, personStoredPaymentKey: string, request?: PersonStoredPaymentUpdateRequest, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/storedPayments/${encodeURIComponent(String(personStoredPaymentKey))}',
                method: 'put',
                data: {
                    userKey,personStoredPaymentKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets all stored payments from the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     
     */
    public apiNskV1UsersByUserKeyPersonStoredPaymentsGet = (userKey: string, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonStoredPaymentsGet.');
        }


            const requestObj: Request<{
                userKey: string, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/storedPayments',
                method: 'get',
                data: {
                    userKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Creates a new stored payment on the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param request The new stored payment.
     
     */
    public apiNskV1UsersByUserKeyPersonStoredPaymentsPost = (userKey: string, request?: PersonStoredPaymentRequest, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonStoredPaymentsPost.');
        }


            const requestObj: Request<{
                userKey: string, request?: PersonStoredPaymentRequest, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/storedPayments',
                method: 'post',
                data: {
                    userKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Deletes a specific travel document on the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param personTravelDocumentKey The unique person travel document key.
     
     */
    public apiNskV1UsersByUserKeyPersonTravelDocumentsByPersonTravelDocumentKeyDelete = (userKey: string, personTravelDocumentKey: string, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonTravelDocumentsByPersonTravelDocumentKeyDelete.');
        }

        if (!personTravelDocumentKey){
            throw new Error('Required parameter personTravelDocumentKey was null or undefined when calling apiNskV1UsersByUserKeyPersonTravelDocumentsByPersonTravelDocumentKeyDelete.');
        }


            const requestObj: Request<{
                userKey: string, personTravelDocumentKey: string, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/travelDocuments/${encodeURIComponent(String(personTravelDocumentKey))}',
                method: 'delete',
                data: {
                    userKey,personTravelDocumentKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets a specific travel document from the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param personTravelDocumentKey The unique person travel document key.
     
     */
    public apiNskV1UsersByUserKeyPersonTravelDocumentsByPersonTravelDocumentKeyGet = (userKey: string, personTravelDocumentKey: string, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonTravelDocumentsByPersonTravelDocumentKeyGet.');
        }

        if (!personTravelDocumentKey){
            throw new Error('Required parameter personTravelDocumentKey was null or undefined when calling apiNskV1UsersByUserKeyPersonTravelDocumentsByPersonTravelDocumentKeyGet.');
        }


            const requestObj: Request<{
                userKey: string, personTravelDocumentKey: string, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/travelDocuments/${encodeURIComponent(String(personTravelDocumentKey))}',
                method: 'get',
                data: {
                    userKey,personTravelDocumentKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets all travel documents from the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     
     */
    public apiNskV1UsersByUserKeyPersonTravelDocumentsGet = (userKey: string, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonTravelDocumentsGet.');
        }


            const requestObj: Request<{
                userKey: string, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/travelDocuments',
                method: 'get',
                data: {
                    userKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Creates a new travel document on the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param request The new travel document.
     
     */
    public apiNskV1UsersByUserKeyPersonTravelDocumentsPost = (userKey: string, request?: PersonTravelDocumentRequest, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonTravelDocumentsPost.');
        }


            const requestObj: Request<{
                userKey: string, request?: PersonTravelDocumentRequest, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/travelDocuments',
                method: 'post',
                data: {
                    userKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Deletes a person travel notification for a user&#39;s person.
     * 
     * @param userKey The user key.
     * @param travelNotificationKey The travel notification key.
     
     */
    public apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyDelete = (userKey: string, travelNotificationKey: string, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyDelete.');
        }

        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyDelete.');
        }


            const requestObj: Request<{
                userKey: string, travelNotificationKey: string, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}',
                method: 'delete',
                data: {
                    userKey,travelNotificationKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Deletes a notification event from a person travel notification for a user&#39;s person.
     * 
     * @param userKey The user key.
     * @param travelNotificationKey The travel notification key.
     * @param eventType The notification event type.
     
     */
    public apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyEventsByEventTypeDelete = (userKey: string, travelNotificationKey: string, eventType: 'DepartureDelay' | 'ArrivalDelay' | 'ScheduleChange' | 'CheckIn', ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyEventsByEventTypeDelete.');
        }

        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyEventsByEventTypeDelete.');
        }

        if (!eventType){
            throw new Error('Required parameter eventType was null or undefined when calling apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyEventsByEventTypeDelete.');
        }


            const requestObj: Request<{
                userKey: string, travelNotificationKey: string, eventType: 'DepartureDelay' | 'ArrivalDelay' | 'ScheduleChange' | 'CheckIn', 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}/events/${encodeURIComponent(String(eventType))}',
                method: 'delete',
                data: {
                    userKey,travelNotificationKey,eventType,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets a notification event for a person travel notification for a user&#39;s person.
     * 
     * @param userKey The user key.
     * @param travelNotificationKey The travel notification key.
     * @param eventType The event type.
     
     */
    public apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyEventsByEventTypeGet = (userKey: string, travelNotificationKey: string, eventType: 'DepartureDelay' | 'ArrivalDelay' | 'ScheduleChange' | 'CheckIn', ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyEventsByEventTypeGet.');
        }

        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyEventsByEventTypeGet.');
        }

        if (!eventType){
            throw new Error('Required parameter eventType was null or undefined when calling apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyEventsByEventTypeGet.');
        }


            const requestObj: Request<{
                userKey: string, travelNotificationKey: string, eventType: 'DepartureDelay' | 'ArrivalDelay' | 'ScheduleChange' | 'CheckIn', 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}/events/${encodeURIComponent(String(eventType))}',
                method: 'get',
                data: {
                    userKey,travelNotificationKey,eventType,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets notification events for a person travel notification for a user&#39;s person.
     * 
     * @param userKey The user key.
     * @param travelNotificationKey The travel notification key.
     
     */
    public apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyEventsGet = (userKey: string, travelNotificationKey: string, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyEventsGet.');
        }

        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyEventsGet.');
        }


            const requestObj: Request<{
                userKey: string, travelNotificationKey: string, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}/events',
                method: 'get',
                data: {
                    userKey,travelNotificationKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Creates a notification event for a person travel notification for a user&#39;s person.
     * 
     * @param userKey The user key.
     * @param travelNotificationKey The travel notification key.
     * @param request The notification event create request.
     
     */
    public apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyEventsPost = (userKey: string, travelNotificationKey: string, request?: NotificationEventCreateRequest, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyEventsPost.');
        }

        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyEventsPost.');
        }


            const requestObj: Request<{
                userKey: string, travelNotificationKey: string, request?: NotificationEventCreateRequest, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}/events',
                method: 'post',
                data: {
                    userKey,travelNotificationKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets a person travel notification for a user&#39;s person.
     * 
     * @param userKey The user key.
     * @param travelNotificationKey The person travel notification key.
     
     */
    public apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyGet = (userKey: string, travelNotificationKey: string, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyGet.');
        }

        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyGet.');
        }


            const requestObj: Request<{
                userKey: string, travelNotificationKey: string, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}',
                method: 'get',
                data: {
                    userKey,travelNotificationKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Patches a person travel notification for a user&#39;s person.
     * 
     * @param userKey The user key.
     * @param travelNotificationKey The travel notification key.
     * @param request The delta mapper travel notification edit request.
     
     */
    public apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyPatch = (userKey: string, travelNotificationKey: string, request?: DeltaMapperTravelNotificationEditRequest, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyPatch.');
        }

        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyPatch.');
        }


            const requestObj: Request<{
                userKey: string, travelNotificationKey: string, request?: DeltaMapperTravelNotificationEditRequest, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}',
                method: 'patch',
                data: {
                    userKey,travelNotificationKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Updates a person travel notification for a user&#39;s person.
     * 
     * @param userKey The user key.
     * @param travelNotificationKey The travel notification key.
     * @param request The travel notification edit request.
     
     */
    public apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyPut = (userKey: string, travelNotificationKey: string, request?: TravelNotificationEditRequest, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyPut.');
        }

        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyPut.');
        }


            const requestObj: Request<{
                userKey: string, travelNotificationKey: string, request?: TravelNotificationEditRequest, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}',
                method: 'put',
                data: {
                    userKey,travelNotificationKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Deletes a notification timed event from a person travel notification for a user&#39;s person.
     * 
     * @param userKey The user key.
     * @param travelNotificationKey The travel notification key.
     * @param timedEventType The notification timed event type.
     
     */
    public apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeDelete = (userKey: string, travelNotificationKey: string, timedEventType: 'Departure' | 'Arrival', ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeDelete.');
        }

        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeDelete.');
        }

        if (!timedEventType){
            throw new Error('Required parameter timedEventType was null or undefined when calling apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeDelete.');
        }


            const requestObj: Request<{
                userKey: string, travelNotificationKey: string, timedEventType: 'Departure' | 'Arrival', 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}/timedEvents/${encodeURIComponent(String(timedEventType))}',
                method: 'delete',
                data: {
                    userKey,travelNotificationKey,timedEventType,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets a notification timed event for a person travel notification for a user&#39;s person.
     * 
     * @param userKey The user key.
     * @param travelNotificationKey The travel notification key.
     * @param timedEventType The timed event type.
     
     */
    public apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeGet = (userKey: string, travelNotificationKey: string, timedEventType: 'Departure' | 'Arrival', ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeGet.');
        }

        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeGet.');
        }

        if (!timedEventType){
            throw new Error('Required parameter timedEventType was null or undefined when calling apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeGet.');
        }


            const requestObj: Request<{
                userKey: string, travelNotificationKey: string, timedEventType: 'Departure' | 'Arrival', 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}/timedEvents/${encodeURIComponent(String(timedEventType))}',
                method: 'get',
                data: {
                    userKey,travelNotificationKey,timedEventType,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Updates a notification timed event for a person travel notification for a user&#39;s person.
     * 
     * @param userKey The user key.
     * @param travelNotificationKey The travel notification key.
     * @param timedEventType The notification timed event type.
     * @param request The updated notification timed event request.
     
     */
    public apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypePut = (userKey: string, travelNotificationKey: string, timedEventType: 'Departure' | 'Arrival', request?: NotificationTimedEventEditRequest, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypePut.');
        }

        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypePut.');
        }

        if (!timedEventType){
            throw new Error('Required parameter timedEventType was null or undefined when calling apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypePut.');
        }


            const requestObj: Request<{
                userKey: string, travelNotificationKey: string, timedEventType: 'Departure' | 'Arrival', request?: NotificationTimedEventEditRequest, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}/timedEvents/${encodeURIComponent(String(timedEventType))}',
                method: 'put',
                data: {
                    userKey,travelNotificationKey,timedEventType,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets notification timed events for a person travel notification for a user&#39;s person.
     * 
     * @param userKey The user key.
     * @param travelNotificationKey The travel notification key.
     
     */
    public apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyTimedEventsGet = (userKey: string, travelNotificationKey: string, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyTimedEventsGet.');
        }

        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyTimedEventsGet.');
        }


            const requestObj: Request<{
                userKey: string, travelNotificationKey: string, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}/timedEvents',
                method: 'get',
                data: {
                    userKey,travelNotificationKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Creates a notification timed event for a person travel notification for a user&#39;s person.
     * 
     * @param userKey The user key.
     * @param travelNotificationKey The travel notification key.
     * @param request The notification timed even create request.
     
     */
    public apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyTimedEventsPost = (userKey: string, travelNotificationKey: string, request?: NotificationTimedEventCreateRequest, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyTimedEventsPost.');
        }

        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyTimedEventsPost.');
        }


            const requestObj: Request<{
                userKey: string, travelNotificationKey: string, request?: NotificationTimedEventCreateRequest, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}/timedEvents',
                method: 'post',
                data: {
                    userKey,travelNotificationKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets person travel notifications for a user&#39;s person.
     * 
     * @param userKey The user key.
     
     */
    public apiNskV1UsersByUserKeyPersonTravelNotificationsGet = (userKey: string, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonTravelNotificationsGet.');
        }


            const requestObj: Request<{
                userKey: string, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/travelNotifications',
                method: 'get',
                data: {
                    userKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Creates a person travel notification for a user&#39;s person.
     * 
     * @param userKey The user key.
     * @param request The travel notification create request.
     
     */
    public apiNskV1UsersByUserKeyPersonTravelNotificationsPost = (userKey: string, request?: TravelNotificationCreateRequest, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonTravelNotificationsPost.');
        }


            const requestObj: Request<{
                userKey: string, request?: TravelNotificationCreateRequest, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/travelNotifications',
                method: 'post',
                data: {
                    userKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Updates the specific user.
     * 
     * @param userKey The unique user key.
     * @param request The user edit request.
     
     */
    public apiNskV1UsersByUserKeyPut = (userKey: string, request?: UserRequest, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPut.');
        }


            const requestObj: Request<{
                userKey: string, request?: UserRequest, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}',
                method: 'put',
                data: {
                    userKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Delets a specific role for a specific user.
     * 
     * @param userKey The unique user key.
     * @param userRoleKey The unique user role key.
     
     */
    public apiNskV1UsersByUserKeyRolesByUserRoleKeyDelete = (userKey: string, userRoleKey: string, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyRolesByUserRoleKeyDelete.');
        }

        if (!userRoleKey){
            throw new Error('Required parameter userRoleKey was null or undefined when calling apiNskV1UsersByUserKeyRolesByUserRoleKeyDelete.');
        }


            const requestObj: Request<{
                userKey: string, userRoleKey: string, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/roles/${encodeURIComponent(String(userRoleKey))}',
                method: 'delete',
                data: {
                    userKey,userRoleKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets a specific role for a specific user.
     * 
     * @param userKey The unique user key.
     * @param userRoleKey The unique user role key
     
     */
    public apiNskV1UsersByUserKeyRolesByUserRoleKeyGet = (userKey: string, userRoleKey: string, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyRolesByUserRoleKeyGet.');
        }

        if (!userRoleKey){
            throw new Error('Required parameter userRoleKey was null or undefined when calling apiNskV1UsersByUserKeyRolesByUserRoleKeyGet.');
        }


            const requestObj: Request<{
                userKey: string, userRoleKey: string, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/roles/${encodeURIComponent(String(userRoleKey))}',
                method: 'get',
                data: {
                    userKey,userRoleKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Patches a specific role for a specific user.
     * 
     * @param userKey The unique user key.
     * @param userRoleKey The unique user role key.
     * @param request The patched role.
     
     */
    public apiNskV1UsersByUserKeyRolesByUserRoleKeyPatch = (userKey: string, userRoleKey: string, request?: DeltaMapperUserRolePatchRequest, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyRolesByUserRoleKeyPatch.');
        }

        if (!userRoleKey){
            throw new Error('Required parameter userRoleKey was null or undefined when calling apiNskV1UsersByUserKeyRolesByUserRoleKeyPatch.');
        }


            const requestObj: Request<{
                userKey: string, userRoleKey: string, request?: DeltaMapperUserRolePatchRequest, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/roles/${encodeURIComponent(String(userRoleKey))}',
                method: 'patch',
                data: {
                    userKey,userRoleKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Updates a specific role for a specific user.
     * 
     * @param userKey The unique user key.
     * @param userRoleKey The unique user role key.
     * @param request The modified role.
     
     */
    public apiNskV1UsersByUserKeyRolesByUserRoleKeyPut = (userKey: string, userRoleKey: string, request?: UserRoleEditRequest, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyRolesByUserRoleKeyPut.');
        }

        if (!userRoleKey){
            throw new Error('Required parameter userRoleKey was null or undefined when calling apiNskV1UsersByUserKeyRolesByUserRoleKeyPut.');
        }


            const requestObj: Request<{
                userKey: string, userRoleKey: string, request?: UserRoleEditRequest, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/roles/${encodeURIComponent(String(userRoleKey))}',
                method: 'put',
                data: {
                    userKey,userRoleKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets all roles for a specific user.
     * 
     * @param userKey The unique user key.
     
     */
    public apiNskV1UsersByUserKeyRolesGet = (userKey: string, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyRolesGet.');
        }


            const requestObj: Request<{
                userKey: string, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/roles',
                method: 'get',
                data: {
                    userKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Creates a new role for a specific user.
     * 
     * @param userKey The unique user key.
     * @param request The new role.
     
     */
    public apiNskV1UsersByUserKeyRolesPost = (userKey: string, request?: UserRoleCreateRequest, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyRolesPost.');
        }


            const requestObj: Request<{
                userKey: string, request?: UserRoleCreateRequest, 
            }> = {
                url: '/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/roles',
                method: 'post',
                data: {
                    userKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Creates a new user and person (used by agents to create other users).
     * This method is used by agents to create other users (either agents or customers).  Use this method when you want to create both a user and a person at the same time.
     * @param request 
     
     */
    public apiNskV1UsersPost = (request?: UserCreateRequest, ) => {

            const requestObj: Request<{
                request?: UserCreateRequest, 
            }> = {
                url: '/api/nsk/v1/users',
                method: 'post',
                data: {
                    request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Patches a specific travel document on the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param personTravelDocumentKey The unique person travel document key.
     * @param request The patched travel document.
     
     */
    public apiNskV2UsersByUserKeyPersonTravelDocumentsByPersonTravelDocumentKeyPatch = (userKey: string, personTravelDocumentKey: string, request?: DeltaMapperTravelDocumentEditRequestv2, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV2UsersByUserKeyPersonTravelDocumentsByPersonTravelDocumentKeyPatch.');
        }

        if (!personTravelDocumentKey){
            throw new Error('Required parameter personTravelDocumentKey was null or undefined when calling apiNskV2UsersByUserKeyPersonTravelDocumentsByPersonTravelDocumentKeyPatch.');
        }


            const requestObj: Request<{
                userKey: string, personTravelDocumentKey: string, request?: DeltaMapperTravelDocumentEditRequestv2, 
            }> = {
                url: '/api/nsk/v2/users/${encodeURIComponent(String(userKey))}/person/travelDocuments/${encodeURIComponent(String(personTravelDocumentKey))}',
                method: 'patch',
                data: {
                    userKey,personTravelDocumentKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Updates a specific travel document on the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param personTravelDocumentKey The unique person travel document key.
     * @param request The modified travel document.
     
     */
    public apiNskV2UsersByUserKeyPersonTravelDocumentsByPersonTravelDocumentKeyPut = (userKey: string, personTravelDocumentKey: string, request?: TravelDocumentEditRequestv2, ) => {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV2UsersByUserKeyPersonTravelDocumentsByPersonTravelDocumentKeyPut.');
        }

        if (!personTravelDocumentKey){
            throw new Error('Required parameter personTravelDocumentKey was null or undefined when calling apiNskV2UsersByUserKeyPersonTravelDocumentsByPersonTravelDocumentKeyPut.');
        }


            const requestObj: Request<{
                userKey: string, personTravelDocumentKey: string, request?: TravelDocumentEditRequestv2, 
            }> = {
                url: '/api/nsk/v2/users/${encodeURIComponent(String(userKey))}/person/travelDocuments/${encodeURIComponent(String(personTravelDocumentKey))}',
                method: 'put',
                data: {
                    userKey,personTravelDocumentKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Search user records.
     * 
     * @param organizationCode The organization code to search by.
     * @param locationGroupCode The location group code to search by.
     * @param domainCode The domain code to search in.
     * @param username The unique username to search by.
     * @param usernameMatching The matching criteria for the username.
     * @param firstName The agent&#39;s first name to search by.
     * @param firstNameMatching The matching criteria for the agent&#39;s first name.
     * @param lastName The agent&#39;s last name to search by.
     * @param roleCode The role code to search with.
     * @param status The agent status to search by.
     * @param returnCount The number of results to return.
     * @param lastIndex The last user index (used for paging).
     
     */
    public apiNskV2UsersGet = (organizationCode?: string, locationGroupCode?: string, domainCode?: string, username?: string, usernameMatching?: 'StartsWith' | 'EndsWith' | 'Contains' | 'ExactMatch', firstName?: string, firstNameMatching?: 'StartsWith' | 'EndsWith' | 'Contains' | 'ExactMatch', lastName?: string, roleCode?: string, status?: 'Default' | 'Active' | 'Pending' | 'Suspended' | 'Terminated', returnCount?: number, lastIndex?: number, ) => {
        let queryParameters: string[] = [];
        if (organizationCode !== undefined) {
            queryParameters.push("organizationCode="+encodeURIComponent(String(organizationCode)));
        }
        if (locationGroupCode !== undefined) {
            queryParameters.push("locationGroupCode="+encodeURIComponent(String(locationGroupCode)));
        }
        if (domainCode !== undefined) {
            queryParameters.push("domainCode="+encodeURIComponent(String(domainCode)));
        }
        if (username !== undefined) {
            queryParameters.push("username="+encodeURIComponent(String(username)));
        }
        if (usernameMatching !== undefined) {
            queryParameters.push("usernameMatching="+encodeURIComponent(String(usernameMatching)));
        }
        if (firstName !== undefined) {
            queryParameters.push("firstName="+encodeURIComponent(String(firstName)));
        }
        if (firstNameMatching !== undefined) {
            queryParameters.push("firstNameMatching="+encodeURIComponent(String(firstNameMatching)));
        }
        if (lastName !== undefined) {
            queryParameters.push("lastName="+encodeURIComponent(String(lastName)));
        }
        if (roleCode !== undefined) {
            queryParameters.push("roleCode="+encodeURIComponent(String(roleCode)));
        }
        if (status !== undefined) {
            queryParameters.push("status="+encodeURIComponent(String(status)));
        }
        if (returnCount !== undefined) {
            queryParameters.push("returnCount="+encodeURIComponent(String(returnCount)));
        }
        if (lastIndex !== undefined) {
            queryParameters.push("lastIndex="+encodeURIComponent(String(lastIndex)));
        }


            const requestObj: Request<{
                organizationCode?: string, locationGroupCode?: string, domainCode?: string, username?: string, usernameMatching?: 'StartsWith' | 'EndsWith' | 'Contains' | 'ExactMatch', firstName?: string, firstNameMatching?: 'StartsWith' | 'EndsWith' | 'Contains' | 'ExactMatch', lastName?: string, roleCode?: string, status?: 'Default' | 'Active' | 'Pending' | 'Suspended' | 'Terminated', returnCount?: number, lastIndex?: number, 
            }> = {
                url: '/api/nsk/v2/users',
                method: 'get',
                data: {
                    organizationCode,locationGroupCode,domainCode,username,usernameMatching,firstName,firstNameMatching,lastName,roleCode,status,returnCount,lastIndex,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Creates a new user for a person (used by agents to create other users).
     * This method is used by agents to create other users (either agents or customers) and connect them with an existing  person.  Use this method when a person already exists and you want to create a user for them.
     * @param request 
     
     */
    public apiNskV2UsersPost = (request?: UserCreateRequestv2, ) => {

            const requestObj: Request<{
                request?: UserCreateRequestv2, 
            }> = {
                url: '/api/nsk/v2/users',
                method: 'post',
                data: {
                    request,
                }
            };
            return this.client.makeRequest(requestObj);
    }

}
