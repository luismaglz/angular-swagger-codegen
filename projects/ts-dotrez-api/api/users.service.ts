/**
 * API - Current Routes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: trunk
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from "rxjs/Observable";
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import IHttpClient from "../IHttpClient";
import { inject, injectable } from "inversify";
import { IAPIConfiguration } from "../IAPIConfiguration";
import { Headers } from "../Headers";
import HttpResponse from "../HttpResponse";

import { BookingSearchResult } from '../model/bookingSearchResult';
import { BookingTripResult } from '../model/bookingTripResult';
import { DeltaMapperPersonAddressEditRequest } from '../model/deltaMapperPersonAddressEditRequest';
import { DeltaMapperPersonAliasRequest } from '../model/deltaMapperPersonAliasRequest';
import { DeltaMapperPersonCommentRequest } from '../model/deltaMapperPersonCommentRequest';
import { DeltaMapperPersonCustomerProgramEditRequest } from '../model/deltaMapperPersonCustomerProgramEditRequest';
import { DeltaMapperPersonEditRequest } from '../model/deltaMapperPersonEditRequest';
import { DeltaMapperPersonEmailEditRequest } from '../model/deltaMapperPersonEmailEditRequest';
import { DeltaMapperPersonInformationEditRequest } from '../model/deltaMapperPersonInformationEditRequest';
import { DeltaMapperPersonPhoneNumberRequest } from '../model/deltaMapperPersonPhoneNumberRequest';
import { DeltaMapperPersonPreferenceEditRequest } from '../model/deltaMapperPersonPreferenceEditRequest';
import { DeltaMapperPersonStoredPaymentUpdateRequest } from '../model/deltaMapperPersonStoredPaymentUpdateRequest';
import { DeltaMapperTravelDocumentEditRequestv2 } from '../model/deltaMapperTravelDocumentEditRequestv2';
import { DeltaMapperTravelNotificationEditRequest } from '../model/deltaMapperTravelNotificationEditRequest';
import { DeltaMapperUserRequest } from '../model/deltaMapperUserRequest';
import { DeltaMapperUserRolePatchRequest } from '../model/deltaMapperUserRolePatchRequest';
import { IJsonResponse } from '../model/iJsonResponse';
import { NotificationEvent } from '../model/notificationEvent';
import { NotificationEventCreateRequest } from '../model/notificationEventCreateRequest';
import { NotificationTimedEvent } from '../model/notificationTimedEvent';
import { NotificationTimedEventCreateRequest } from '../model/notificationTimedEventCreateRequest';
import { NotificationTimedEventEditRequest } from '../model/notificationTimedEventEditRequest';
import { Person } from '../model/person';
import { PersonAddress } from '../model/personAddress';
import { PersonAddressCreateRequest } from '../model/personAddressCreateRequest';
import { PersonAddressEditRequest } from '../model/personAddressEditRequest';
import { PersonAlias } from '../model/personAlias';
import { PersonAliasRequest } from '../model/personAliasRequest';
import { PersonComment } from '../model/personComment';
import { PersonCommentRequest } from '../model/personCommentRequest';
import { PersonCustomerProgram } from '../model/personCustomerProgram';
import { PersonCustomerProgramCreateRequest } from '../model/personCustomerProgramCreateRequest';
import { PersonCustomerProgramEditRequest } from '../model/personCustomerProgramEditRequest';
import { PersonEditRequest } from '../model/personEditRequest';
import { PersonEmail } from '../model/personEmail';
import { PersonEmailCreateRequest } from '../model/personEmailCreateRequest';
import { PersonEmailEditRequest } from '../model/personEmailEditRequest';
import { PersonInformation } from '../model/personInformation';
import { PersonInformationCreateRequest } from '../model/personInformationCreateRequest';
import { PersonInformationEditRequest } from '../model/personInformationEditRequest';
import { PersonPhoneNumber } from '../model/personPhoneNumber';
import { PersonPhoneNumberRequest } from '../model/personPhoneNumberRequest';
import { PersonPreference } from '../model/personPreference';
import { PersonPreferenceCreateRequest } from '../model/personPreferenceCreateRequest';
import { PersonPreferenceEditRequest } from '../model/personPreferenceEditRequest';
import { PersonStoredPayment } from '../model/personStoredPayment';
import { PersonStoredPaymentRequest } from '../model/personStoredPaymentRequest';
import { PersonStoredPaymentUpdateRequest } from '../model/personStoredPaymentUpdateRequest';
import { PersonTravelDocument } from '../model/personTravelDocument';
import { PersonTravelDocumentRequest } from '../model/personTravelDocumentRequest';
import { TravelDocumentEditRequestv2 } from '../model/travelDocumentEditRequestv2';
import { TravelNotification } from '../model/travelNotification';
import { TravelNotificationCreateRequest } from '../model/travelNotificationCreateRequest';
import { TravelNotificationEditRequest } from '../model/travelNotificationEditRequest';
import { User } from '../model/user';
import { UserChangePasswordRequestBase } from '../model/userChangePasswordRequestBase';
import { UserCreateRequest } from '../model/userCreateRequest';
import { UserCreateRequestv2 } from '../model/userCreateRequestv2';
import { UserRecord } from '../model/userRecord';
import { UserRequest } from '../model/userRequest';
import { UserRole } from '../model/userRole';
import { UserRoleCreateRequest } from '../model/userRoleCreateRequest';
import { UserRoleEditRequest } from '../model/userRoleEditRequest';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class UsersService {
    private basePath: string = 'https://localhost';

    constructor(@inject("IApiHttpClient") private httpClient: IHttpClient,
        @inject("IAPIConfiguration") private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * Searches the specific user upcoming and past bookings by passenger.
     * This is similar to the user booking endpoint but returns more focused trip information.  This endpoint will only return data where a bookings passenger customer number matches the current logged in user.  Bookings made by the user but where the passenger customer are not assigned are ignored.
     * @param userKey The user key.
     * @param startDate Booking start search date.
     * @param endDate Booking end search date.
     
     */
    public apiNskV1UsersByUserKeyBookingsByPassengerGet(userKey: string, startDate?: Date, endDate?: Date, observe?: 'body', headers?: Headers): Observable<Array<BookingTripResult>>;
    public apiNskV1UsersByUserKeyBookingsByPassengerGet(userKey: string, startDate?: Date, endDate?: Date, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<BookingTripResult>>>;
    public apiNskV1UsersByUserKeyBookingsByPassengerGet(userKey: string, startDate?: Date, endDate?: Date, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyBookingsByPassengerGet.');
        }

        let queryParameters: string[] = [];
        if (startDate !== undefined) {
           queryParameters.push("startDate="+encodeURIComponent(<any>startDate.toISOString()));
        }
        if (endDate !== undefined) {
           queryParameters.push("endDate="+encodeURIComponent(<any>endDate.toISOString()));
        }


        const response: Observable<HttpResponse<Array<BookingTripResult>>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/bookingsByPassenger?${queryParameters.join('&')}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<BookingTripResult>>(httpResponse.response));
        }
        return response;
    }


    /**
     * Searches the specific user for upcoming and past bookings.
     * 
     * @param userKey The unique user key.
     * @param returnCount The number of results to be returned.
     * @param associatedFirstName An associated passenger/contact first name.
     * @param associatedLastName An associated passenger/contact last name.
     * @param phoneticSearch Flag indicating to search using the phonetic option.
     * @param tripIdentifier Filter by trip identifier.
     * @param origin Filter by origin station code.
     * @param destination Filter by destination station code.
     * @param searchArchive Flag indicating to search archived bookings.
     * @param tripDate Filter by trip date.
     * @param startDate Filter by starting search date.
     * @param endDate Filter by ending search date.
     * @param searchByCustomerNumber Flag indicating to search by the users customer number instead of user identifier.
     * @param lastBookingKey The last booking key (used for paging).
     
     */
    public apiNskV1UsersByUserKeyBookingsGet(userKey: string, returnCount: number, associatedFirstName?: string, associatedLastName?: string, phoneticSearch?: boolean, tripIdentifier?: string, origin?: string, destination?: string, searchArchive?: boolean, tripDate?: Date, startDate?: Date, endDate?: Date, searchByCustomerNumber?: boolean, lastBookingKey?: string, observe?: 'body', headers?: Headers): Observable<Array<BookingSearchResult>>;
    public apiNskV1UsersByUserKeyBookingsGet(userKey: string, returnCount: number, associatedFirstName?: string, associatedLastName?: string, phoneticSearch?: boolean, tripIdentifier?: string, origin?: string, destination?: string, searchArchive?: boolean, tripDate?: Date, startDate?: Date, endDate?: Date, searchByCustomerNumber?: boolean, lastBookingKey?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<BookingSearchResult>>>;
    public apiNskV1UsersByUserKeyBookingsGet(userKey: string, returnCount: number, associatedFirstName?: string, associatedLastName?: string, phoneticSearch?: boolean, tripIdentifier?: string, origin?: string, destination?: string, searchArchive?: boolean, tripDate?: Date, startDate?: Date, endDate?: Date, searchByCustomerNumber?: boolean, lastBookingKey?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyBookingsGet.');
        }

        if (!returnCount){
            throw new Error('Required parameter returnCount was null or undefined when calling apiNskV1UsersByUserKeyBookingsGet.');
        }

        let queryParameters: string[] = [];
        if (associatedFirstName !== undefined) {
            queryParameters.push("associatedFirstName="+encodeURIComponent(String(associatedFirstName)));
        }
        if (associatedLastName !== undefined) {
            queryParameters.push("associatedLastName="+encodeURIComponent(String(associatedLastName)));
        }
        if (phoneticSearch !== undefined) {
            queryParameters.push("phoneticSearch="+encodeURIComponent(String(phoneticSearch)));
        }
        if (tripIdentifier !== undefined) {
            queryParameters.push("tripIdentifier="+encodeURIComponent(String(tripIdentifier)));
        }
        if (origin !== undefined) {
            queryParameters.push("origin="+encodeURIComponent(String(origin)));
        }
        if (destination !== undefined) {
            queryParameters.push("destination="+encodeURIComponent(String(destination)));
        }
        if (searchArchive !== undefined) {
            queryParameters.push("searchArchive="+encodeURIComponent(String(searchArchive)));
        }
        if (tripDate !== undefined) {
           queryParameters.push("tripDate="+encodeURIComponent(<any>tripDate.toISOString()));
        }
        if (startDate !== undefined) {
           queryParameters.push("startDate="+encodeURIComponent(<any>startDate.toISOString()));
        }
        if (endDate !== undefined) {
           queryParameters.push("endDate="+encodeURIComponent(<any>endDate.toISOString()));
        }
        if (searchByCustomerNumber !== undefined) {
            queryParameters.push("searchByCustomerNumber="+encodeURIComponent(String(searchByCustomerNumber)));
        }
        if (returnCount !== undefined) {
            queryParameters.push("returnCount="+encodeURIComponent(String(returnCount)));
        }
        if (lastBookingKey !== undefined) {
            queryParameters.push("lastBookingKey="+encodeURIComponent(String(lastBookingKey)));
        }


        const response: Observable<HttpResponse<Array<BookingSearchResult>>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/bookings?${queryParameters.join('&')}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<BookingSearchResult>>(httpResponse.response));
        }
        return response;
    }


    /**
     * Delete the user.
     * This is a soft delete by setting the user record status to terminated.
     * @param userKey User key.
     
     */
    public apiNskV1UsersByUserKeyDelete(userKey: string, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UsersByUserKeyDelete(userKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UsersByUserKeyDelete(userKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyDelete.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.delete(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Retrieves the a specific user.
     * 
     * @param userKey 
     
     */
    public apiNskV1UsersByUserKeyGet(userKey: string, observe?: 'body', headers?: Headers): Observable<User>;
    public apiNskV1UsersByUserKeyGet(userKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<User>>;
    public apiNskV1UsersByUserKeyGet(userKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyGet.');
        }


        const response: Observable<HttpResponse<User>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <User>(httpResponse.response));
        }
        return response;
    }


    /**
     * Changes a specifics user&#39;s password.
     * 
     * @param userKey The unique user key.
     * @param request The change password request.
     
     */
    public apiNskV1UsersByUserKeyPasswordChangePost(userKey: string, request?: UserChangePasswordRequestBase, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UsersByUserKeyPasswordChangePost(userKey: string, request?: UserChangePasswordRequestBase, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UsersByUserKeyPasswordChangePost(userKey: string, request?: UserChangePasswordRequestBase, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPasswordChangePost.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.post(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/password/change`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Invokes the forgot password reset for a specific user.
     * 
     * @param userKey The unique user key.
     
     */
    public apiNskV1UsersByUserKeyPasswordResetPost(userKey: string, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UsersByUserKeyPasswordResetPost(userKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UsersByUserKeyPasswordResetPost(userKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPasswordResetPost.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.post(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/password/reset`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Patches the current logged in user.
     * 
     * @param userKey The unique user key.
     * @param request The user patch request.
     
     */
    public apiNskV1UsersByUserKeyPatch(userKey: string, request?: DeltaMapperUserRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UsersByUserKeyPatch(userKey: string, request?: DeltaMapperUserRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UsersByUserKeyPatch(userKey: string, request?: DeltaMapperUserRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPatch.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.patch(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Deletes a specific address on the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param personAddressKey The unique person address key.
     
     */
    public apiNskV1UsersByUserKeyPersonAddressesByPersonAddressKeyDelete(userKey: string, personAddressKey: string, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UsersByUserKeyPersonAddressesByPersonAddressKeyDelete(userKey: string, personAddressKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UsersByUserKeyPersonAddressesByPersonAddressKeyDelete(userKey: string, personAddressKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonAddressesByPersonAddressKeyDelete.');
        }

        if (!personAddressKey){
            throw new Error('Required parameter personAddressKey was null or undefined when calling apiNskV1UsersByUserKeyPersonAddressesByPersonAddressKeyDelete.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.delete(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/addresses/${encodeURIComponent(String(personAddressKey))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets a specific address from the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param personAddressKey The unique person address key.
     
     */
    public apiNskV1UsersByUserKeyPersonAddressesByPersonAddressKeyGet(userKey: string, personAddressKey: string, observe?: 'body', headers?: Headers): Observable<PersonAddress>;
    public apiNskV1UsersByUserKeyPersonAddressesByPersonAddressKeyGet(userKey: string, personAddressKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<PersonAddress>>;
    public apiNskV1UsersByUserKeyPersonAddressesByPersonAddressKeyGet(userKey: string, personAddressKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonAddressesByPersonAddressKeyGet.');
        }

        if (!personAddressKey){
            throw new Error('Required parameter personAddressKey was null or undefined when calling apiNskV1UsersByUserKeyPersonAddressesByPersonAddressKeyGet.');
        }


        const response: Observable<HttpResponse<PersonAddress>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/addresses/${encodeURIComponent(String(personAddressKey))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <PersonAddress>(httpResponse.response));
        }
        return response;
    }


    /**
     * Patches a specific address on the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param personAddressKey The unique person address key.
     * @param request The patched address.
     
     */
    public apiNskV1UsersByUserKeyPersonAddressesByPersonAddressKeyPatch(userKey: string, personAddressKey: string, request?: DeltaMapperPersonAddressEditRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UsersByUserKeyPersonAddressesByPersonAddressKeyPatch(userKey: string, personAddressKey: string, request?: DeltaMapperPersonAddressEditRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UsersByUserKeyPersonAddressesByPersonAddressKeyPatch(userKey: string, personAddressKey: string, request?: DeltaMapperPersonAddressEditRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonAddressesByPersonAddressKeyPatch.');
        }

        if (!personAddressKey){
            throw new Error('Required parameter personAddressKey was null or undefined when calling apiNskV1UsersByUserKeyPersonAddressesByPersonAddressKeyPatch.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.patch(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/addresses/${encodeURIComponent(String(personAddressKey))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Updates a specific address on the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param personAddressKey The unique person address key.
     * @param request The modified address.
     
     */
    public apiNskV1UsersByUserKeyPersonAddressesByPersonAddressKeyPut(userKey: string, personAddressKey: string, request?: PersonAddressEditRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UsersByUserKeyPersonAddressesByPersonAddressKeyPut(userKey: string, personAddressKey: string, request?: PersonAddressEditRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UsersByUserKeyPersonAddressesByPersonAddressKeyPut(userKey: string, personAddressKey: string, request?: PersonAddressEditRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonAddressesByPersonAddressKeyPut.');
        }

        if (!personAddressKey){
            throw new Error('Required parameter personAddressKey was null or undefined when calling apiNskV1UsersByUserKeyPersonAddressesByPersonAddressKeyPut.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.put(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/addresses/${encodeURIComponent(String(personAddressKey))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets all addresses from the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     
     */
    public apiNskV1UsersByUserKeyPersonAddressesGet(userKey: string, observe?: 'body', headers?: Headers): Observable<Array<PersonAddress>>;
    public apiNskV1UsersByUserKeyPersonAddressesGet(userKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<PersonAddress>>>;
    public apiNskV1UsersByUserKeyPersonAddressesGet(userKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonAddressesGet.');
        }


        const response: Observable<HttpResponse<Array<PersonAddress>>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/addresses`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<PersonAddress>>(httpResponse.response));
        }
        return response;
    }


    /**
     * Creates a new address on the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param request The new address.
     
     */
    public apiNskV1UsersByUserKeyPersonAddressesPost(userKey: string, request?: PersonAddressCreateRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UsersByUserKeyPersonAddressesPost(userKey: string, request?: PersonAddressCreateRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UsersByUserKeyPersonAddressesPost(userKey: string, request?: PersonAddressCreateRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonAddressesPost.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.post(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/addresses`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Deletes a specific alias on the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param personAliasKey The unique person alias key.
     
     */
    public apiNskV1UsersByUserKeyPersonAliasesByPersonAliasKeyDelete(userKey: string, personAliasKey: string, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UsersByUserKeyPersonAliasesByPersonAliasKeyDelete(userKey: string, personAliasKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UsersByUserKeyPersonAliasesByPersonAliasKeyDelete(userKey: string, personAliasKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonAliasesByPersonAliasKeyDelete.');
        }

        if (!personAliasKey){
            throw new Error('Required parameter personAliasKey was null or undefined when calling apiNskV1UsersByUserKeyPersonAliasesByPersonAliasKeyDelete.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.delete(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/aliases/${encodeURIComponent(String(personAliasKey))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets a specific alias from the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param personAliasKey The unique person alias key.
     
     */
    public apiNskV1UsersByUserKeyPersonAliasesByPersonAliasKeyGet(userKey: string, personAliasKey: string, observe?: 'body', headers?: Headers): Observable<PersonAlias>;
    public apiNskV1UsersByUserKeyPersonAliasesByPersonAliasKeyGet(userKey: string, personAliasKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<PersonAlias>>;
    public apiNskV1UsersByUserKeyPersonAliasesByPersonAliasKeyGet(userKey: string, personAliasKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonAliasesByPersonAliasKeyGet.');
        }

        if (!personAliasKey){
            throw new Error('Required parameter personAliasKey was null or undefined when calling apiNskV1UsersByUserKeyPersonAliasesByPersonAliasKeyGet.');
        }


        const response: Observable<HttpResponse<PersonAlias>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/aliases/${encodeURIComponent(String(personAliasKey))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <PersonAlias>(httpResponse.response));
        }
        return response;
    }


    /**
     * Patches a specific alias on the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param personAliasKey The unique person alias key.
     * @param request The patched alias.
     
     */
    public apiNskV1UsersByUserKeyPersonAliasesByPersonAliasKeyPatch(userKey: string, personAliasKey: string, request?: DeltaMapperPersonAliasRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UsersByUserKeyPersonAliasesByPersonAliasKeyPatch(userKey: string, personAliasKey: string, request?: DeltaMapperPersonAliasRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UsersByUserKeyPersonAliasesByPersonAliasKeyPatch(userKey: string, personAliasKey: string, request?: DeltaMapperPersonAliasRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonAliasesByPersonAliasKeyPatch.');
        }

        if (!personAliasKey){
            throw new Error('Required parameter personAliasKey was null or undefined when calling apiNskV1UsersByUserKeyPersonAliasesByPersonAliasKeyPatch.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.patch(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/aliases/${encodeURIComponent(String(personAliasKey))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Updates a specific alias on the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param personAliasKey The unique person alias key.
     * @param request The modified alias.
     
     */
    public apiNskV1UsersByUserKeyPersonAliasesByPersonAliasKeyPut(userKey: string, personAliasKey: string, request?: PersonAliasRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UsersByUserKeyPersonAliasesByPersonAliasKeyPut(userKey: string, personAliasKey: string, request?: PersonAliasRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UsersByUserKeyPersonAliasesByPersonAliasKeyPut(userKey: string, personAliasKey: string, request?: PersonAliasRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonAliasesByPersonAliasKeyPut.');
        }

        if (!personAliasKey){
            throw new Error('Required parameter personAliasKey was null or undefined when calling apiNskV1UsersByUserKeyPersonAliasesByPersonAliasKeyPut.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.put(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/aliases/${encodeURIComponent(String(personAliasKey))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets all aliases from the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     
     */
    public apiNskV1UsersByUserKeyPersonAliasesGet(userKey: string, observe?: 'body', headers?: Headers): Observable<Array<PersonAlias>>;
    public apiNskV1UsersByUserKeyPersonAliasesGet(userKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<PersonAlias>>>;
    public apiNskV1UsersByUserKeyPersonAliasesGet(userKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonAliasesGet.');
        }


        const response: Observable<HttpResponse<Array<PersonAlias>>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/aliases`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<PersonAlias>>(httpResponse.response));
        }
        return response;
    }


    /**
     * Creates a new alias on the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param request The new alias.
     
     */
    public apiNskV1UsersByUserKeyPersonAliasesPost(userKey: string, request?: PersonAliasRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UsersByUserKeyPersonAliasesPost(userKey: string, request?: PersonAliasRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UsersByUserKeyPersonAliasesPost(userKey: string, request?: PersonAliasRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonAliasesPost.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.post(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/aliases`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Deletes a specific comment on the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param personCommentKey The unique person comment key.
     
     */
    public apiNskV1UsersByUserKeyPersonCommentsByPersonCommentKeyDelete(userKey: string, personCommentKey: string, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UsersByUserKeyPersonCommentsByPersonCommentKeyDelete(userKey: string, personCommentKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UsersByUserKeyPersonCommentsByPersonCommentKeyDelete(userKey: string, personCommentKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonCommentsByPersonCommentKeyDelete.');
        }

        if (!personCommentKey){
            throw new Error('Required parameter personCommentKey was null or undefined when calling apiNskV1UsersByUserKeyPersonCommentsByPersonCommentKeyDelete.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.delete(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/comments/${encodeURIComponent(String(personCommentKey))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets a specific comment from the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param personCommentKey The unique person comment key.
     
     */
    public apiNskV1UsersByUserKeyPersonCommentsByPersonCommentKeyGet(userKey: string, personCommentKey: string, observe?: 'body', headers?: Headers): Observable<PersonComment>;
    public apiNskV1UsersByUserKeyPersonCommentsByPersonCommentKeyGet(userKey: string, personCommentKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<PersonComment>>;
    public apiNskV1UsersByUserKeyPersonCommentsByPersonCommentKeyGet(userKey: string, personCommentKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonCommentsByPersonCommentKeyGet.');
        }

        if (!personCommentKey){
            throw new Error('Required parameter personCommentKey was null or undefined when calling apiNskV1UsersByUserKeyPersonCommentsByPersonCommentKeyGet.');
        }


        const response: Observable<HttpResponse<PersonComment>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/comments/${encodeURIComponent(String(personCommentKey))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <PersonComment>(httpResponse.response));
        }
        return response;
    }


    /**
     * Patches a specific comment on the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param personCommentKey The unique person comment key.
     * @param request The patched comment.
     
     */
    public apiNskV1UsersByUserKeyPersonCommentsByPersonCommentKeyPatch(userKey: string, personCommentKey: string, request?: DeltaMapperPersonCommentRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UsersByUserKeyPersonCommentsByPersonCommentKeyPatch(userKey: string, personCommentKey: string, request?: DeltaMapperPersonCommentRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UsersByUserKeyPersonCommentsByPersonCommentKeyPatch(userKey: string, personCommentKey: string, request?: DeltaMapperPersonCommentRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonCommentsByPersonCommentKeyPatch.');
        }

        if (!personCommentKey){
            throw new Error('Required parameter personCommentKey was null or undefined when calling apiNskV1UsersByUserKeyPersonCommentsByPersonCommentKeyPatch.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.patch(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/comments/${encodeURIComponent(String(personCommentKey))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Updates a specific comment on the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param personCommentKey The unique person comment key.
     * @param request The modified comment.
     
     */
    public apiNskV1UsersByUserKeyPersonCommentsByPersonCommentKeyPut(userKey: string, personCommentKey: string, request?: PersonCommentRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UsersByUserKeyPersonCommentsByPersonCommentKeyPut(userKey: string, personCommentKey: string, request?: PersonCommentRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UsersByUserKeyPersonCommentsByPersonCommentKeyPut(userKey: string, personCommentKey: string, request?: PersonCommentRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonCommentsByPersonCommentKeyPut.');
        }

        if (!personCommentKey){
            throw new Error('Required parameter personCommentKey was null or undefined when calling apiNskV1UsersByUserKeyPersonCommentsByPersonCommentKeyPut.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.put(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/comments/${encodeURIComponent(String(personCommentKey))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets all comments from the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     
     */
    public apiNskV1UsersByUserKeyPersonCommentsGet(userKey: string, observe?: 'body', headers?: Headers): Observable<Array<PersonComment>>;
    public apiNskV1UsersByUserKeyPersonCommentsGet(userKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<PersonComment>>>;
    public apiNskV1UsersByUserKeyPersonCommentsGet(userKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonCommentsGet.');
        }


        const response: Observable<HttpResponse<Array<PersonComment>>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/comments`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<PersonComment>>(httpResponse.response));
        }
        return response;
    }


    /**
     * Creates a new comment on the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param request The new comment.
     
     */
    public apiNskV1UsersByUserKeyPersonCommentsPost(userKey: string, request?: PersonCommentRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UsersByUserKeyPersonCommentsPost(userKey: string, request?: PersonCommentRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UsersByUserKeyPersonCommentsPost(userKey: string, request?: PersonCommentRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonCommentsPost.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.post(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/comments`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Deletes a specific email address on the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param personEmailAddressKey The unique person email address key.
     
     */
    public apiNskV1UsersByUserKeyPersonEmailsByPersonEmailAddressKeyDelete(userKey: string, personEmailAddressKey: string, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UsersByUserKeyPersonEmailsByPersonEmailAddressKeyDelete(userKey: string, personEmailAddressKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UsersByUserKeyPersonEmailsByPersonEmailAddressKeyDelete(userKey: string, personEmailAddressKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonEmailsByPersonEmailAddressKeyDelete.');
        }

        if (!personEmailAddressKey){
            throw new Error('Required parameter personEmailAddressKey was null or undefined when calling apiNskV1UsersByUserKeyPersonEmailsByPersonEmailAddressKeyDelete.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.delete(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/emails/${encodeURIComponent(String(personEmailAddressKey))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets a specific email address from the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param personEmailAddressKey The unique person email address key.
     
     */
    public apiNskV1UsersByUserKeyPersonEmailsByPersonEmailAddressKeyGet(userKey: string, personEmailAddressKey: string, observe?: 'body', headers?: Headers): Observable<PersonEmail>;
    public apiNskV1UsersByUserKeyPersonEmailsByPersonEmailAddressKeyGet(userKey: string, personEmailAddressKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<PersonEmail>>;
    public apiNskV1UsersByUserKeyPersonEmailsByPersonEmailAddressKeyGet(userKey: string, personEmailAddressKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonEmailsByPersonEmailAddressKeyGet.');
        }

        if (!personEmailAddressKey){
            throw new Error('Required parameter personEmailAddressKey was null or undefined when calling apiNskV1UsersByUserKeyPersonEmailsByPersonEmailAddressKeyGet.');
        }


        const response: Observable<HttpResponse<PersonEmail>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/emails/${encodeURIComponent(String(personEmailAddressKey))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <PersonEmail>(httpResponse.response));
        }
        return response;
    }


    /**
     * Patches a specific email address on the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param personEmailAddressKey The unique person email address key.
     * @param request The patched email address.
     
     */
    public apiNskV1UsersByUserKeyPersonEmailsByPersonEmailAddressKeyPatch(userKey: string, personEmailAddressKey: string, request?: DeltaMapperPersonEmailEditRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UsersByUserKeyPersonEmailsByPersonEmailAddressKeyPatch(userKey: string, personEmailAddressKey: string, request?: DeltaMapperPersonEmailEditRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UsersByUserKeyPersonEmailsByPersonEmailAddressKeyPatch(userKey: string, personEmailAddressKey: string, request?: DeltaMapperPersonEmailEditRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonEmailsByPersonEmailAddressKeyPatch.');
        }

        if (!personEmailAddressKey){
            throw new Error('Required parameter personEmailAddressKey was null or undefined when calling apiNskV1UsersByUserKeyPersonEmailsByPersonEmailAddressKeyPatch.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.patch(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/emails/${encodeURIComponent(String(personEmailAddressKey))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Creates a new email address on the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param personEmailAddressKey 
     * @param request The new email address.
     
     */
    public apiNskV1UsersByUserKeyPersonEmailsByPersonEmailAddressKeyPost(userKey: string, personEmailAddressKey: string, request?: PersonEmailCreateRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UsersByUserKeyPersonEmailsByPersonEmailAddressKeyPost(userKey: string, personEmailAddressKey: string, request?: PersonEmailCreateRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UsersByUserKeyPersonEmailsByPersonEmailAddressKeyPost(userKey: string, personEmailAddressKey: string, request?: PersonEmailCreateRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonEmailsByPersonEmailAddressKeyPost.');
        }

        if (!personEmailAddressKey){
            throw new Error('Required parameter personEmailAddressKey was null or undefined when calling apiNskV1UsersByUserKeyPersonEmailsByPersonEmailAddressKeyPost.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.post(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/emails/${encodeURIComponent(String(personEmailAddressKey))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Updates a specific email address on the specific user&#39;s person.
     * 
     * @param userKey The specific user key.
     * @param personEmailAddressKey The unique person email address key.
     * @param request The modified email address.
     
     */
    public apiNskV1UsersByUserKeyPersonEmailsByPersonEmailAddressKeyPut(userKey: string, personEmailAddressKey: string, request?: PersonEmailEditRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UsersByUserKeyPersonEmailsByPersonEmailAddressKeyPut(userKey: string, personEmailAddressKey: string, request?: PersonEmailEditRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UsersByUserKeyPersonEmailsByPersonEmailAddressKeyPut(userKey: string, personEmailAddressKey: string, request?: PersonEmailEditRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonEmailsByPersonEmailAddressKeyPut.');
        }

        if (!personEmailAddressKey){
            throw new Error('Required parameter personEmailAddressKey was null or undefined when calling apiNskV1UsersByUserKeyPersonEmailsByPersonEmailAddressKeyPut.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.put(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/emails/${encodeURIComponent(String(personEmailAddressKey))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets all email addresses from the specific user&#39;s person.
     * 
     * @param userKey 
     
     */
    public apiNskV1UsersByUserKeyPersonEmailsGet(userKey: string, observe?: 'body', headers?: Headers): Observable<Array<PersonEmail>>;
    public apiNskV1UsersByUserKeyPersonEmailsGet(userKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<PersonEmail>>>;
    public apiNskV1UsersByUserKeyPersonEmailsGet(userKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonEmailsGet.');
        }


        const response: Observable<HttpResponse<Array<PersonEmail>>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/emails`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<PersonEmail>>(httpResponse.response));
        }
        return response;
    }


    /**
     * Retrieves the a specific user&#39;s person.
     * 
     * @param userKey 
     
     */
    public apiNskV1UsersByUserKeyPersonGet(userKey: string, observe?: 'body', headers?: Headers): Observable<Person>;
    public apiNskV1UsersByUserKeyPersonGet(userKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Person>>;
    public apiNskV1UsersByUserKeyPersonGet(userKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonGet.');
        }


        const response: Observable<HttpResponse<Person>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Person>(httpResponse.response));
        }
        return response;
    }


    /**
     * Deletes a specific information on the logged in user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param personInformationKey The unique person information key.
     
     */
    public apiNskV1UsersByUserKeyPersonInformationByPersonInformationKeyDelete(userKey: string, personInformationKey: string, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UsersByUserKeyPersonInformationByPersonInformationKeyDelete(userKey: string, personInformationKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UsersByUserKeyPersonInformationByPersonInformationKeyDelete(userKey: string, personInformationKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonInformationByPersonInformationKeyDelete.');
        }

        if (!personInformationKey){
            throw new Error('Required parameter personInformationKey was null or undefined when calling apiNskV1UsersByUserKeyPersonInformationByPersonInformationKeyDelete.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.delete(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/information/${encodeURIComponent(String(personInformationKey))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets a specific information from the logged in user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param personInformationKey The unique person information key.
     
     */
    public apiNskV1UsersByUserKeyPersonInformationByPersonInformationKeyGet(userKey: string, personInformationKey: string, observe?: 'body', headers?: Headers): Observable<PersonInformation>;
    public apiNskV1UsersByUserKeyPersonInformationByPersonInformationKeyGet(userKey: string, personInformationKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<PersonInformation>>;
    public apiNskV1UsersByUserKeyPersonInformationByPersonInformationKeyGet(userKey: string, personInformationKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonInformationByPersonInformationKeyGet.');
        }

        if (!personInformationKey){
            throw new Error('Required parameter personInformationKey was null or undefined when calling apiNskV1UsersByUserKeyPersonInformationByPersonInformationKeyGet.');
        }


        const response: Observable<HttpResponse<PersonInformation>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/information/${encodeURIComponent(String(personInformationKey))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <PersonInformation>(httpResponse.response));
        }
        return response;
    }


    /**
     * Patches a specific information on the logged in user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param personInformationKey The unique person information key.
     * @param request The patched information.
     
     */
    public apiNskV1UsersByUserKeyPersonInformationByPersonInformationKeyPatch(userKey: string, personInformationKey: string, request?: DeltaMapperPersonInformationEditRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UsersByUserKeyPersonInformationByPersonInformationKeyPatch(userKey: string, personInformationKey: string, request?: DeltaMapperPersonInformationEditRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UsersByUserKeyPersonInformationByPersonInformationKeyPatch(userKey: string, personInformationKey: string, request?: DeltaMapperPersonInformationEditRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonInformationByPersonInformationKeyPatch.');
        }

        if (!personInformationKey){
            throw new Error('Required parameter personInformationKey was null or undefined when calling apiNskV1UsersByUserKeyPersonInformationByPersonInformationKeyPatch.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.patch(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/information/${encodeURIComponent(String(personInformationKey))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Updates a specific information on the logged in user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param personInformationKey The unique person information key.
     * @param request The modified information.
     
     */
    public apiNskV1UsersByUserKeyPersonInformationByPersonInformationKeyPut(userKey: string, personInformationKey: string, request?: PersonInformationEditRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UsersByUserKeyPersonInformationByPersonInformationKeyPut(userKey: string, personInformationKey: string, request?: PersonInformationEditRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UsersByUserKeyPersonInformationByPersonInformationKeyPut(userKey: string, personInformationKey: string, request?: PersonInformationEditRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonInformationByPersonInformationKeyPut.');
        }

        if (!personInformationKey){
            throw new Error('Required parameter personInformationKey was null or undefined when calling apiNskV1UsersByUserKeyPersonInformationByPersonInformationKeyPut.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.put(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/information/${encodeURIComponent(String(personInformationKey))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets all information from the logged in user&#39;s person.
     * 
     * @param userKey The unique user key.
     
     */
    public apiNskV1UsersByUserKeyPersonInformationGet(userKey: string, observe?: 'body', headers?: Headers): Observable<Array<PersonInformation>>;
    public apiNskV1UsersByUserKeyPersonInformationGet(userKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<PersonInformation>>>;
    public apiNskV1UsersByUserKeyPersonInformationGet(userKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonInformationGet.');
        }


        const response: Observable<HttpResponse<Array<PersonInformation>>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/information`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<PersonInformation>>(httpResponse.response));
        }
        return response;
    }


    /**
     * Creates a new information on the logged in user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param request The new information.
     
     */
    public apiNskV1UsersByUserKeyPersonInformationPost(userKey: string, request?: PersonInformationCreateRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UsersByUserKeyPersonInformationPost(userKey: string, request?: PersonInformationCreateRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UsersByUserKeyPersonInformationPost(userKey: string, request?: PersonInformationCreateRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonInformationPost.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.post(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/information`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Patches the specific user&#39;s person records basic information.
     * 
     * @param userKey The unique user key.
     * @param request The person patch request.
     
     */
    public apiNskV1UsersByUserKeyPersonPatch(userKey: string, request?: DeltaMapperPersonEditRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UsersByUserKeyPersonPatch(userKey: string, request?: DeltaMapperPersonEditRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UsersByUserKeyPersonPatch(userKey: string, request?: DeltaMapperPersonEditRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonPatch.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.patch(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Deletes a specific phone number on the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param personPhoneNumberKey The unique person phone number key.
     
     */
    public apiNskV1UsersByUserKeyPersonPhoneNumbersByPersonPhoneNumberKeyDelete(userKey: string, personPhoneNumberKey: string, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UsersByUserKeyPersonPhoneNumbersByPersonPhoneNumberKeyDelete(userKey: string, personPhoneNumberKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UsersByUserKeyPersonPhoneNumbersByPersonPhoneNumberKeyDelete(userKey: string, personPhoneNumberKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonPhoneNumbersByPersonPhoneNumberKeyDelete.');
        }

        if (!personPhoneNumberKey){
            throw new Error('Required parameter personPhoneNumberKey was null or undefined when calling apiNskV1UsersByUserKeyPersonPhoneNumbersByPersonPhoneNumberKeyDelete.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.delete(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/phoneNumbers/${encodeURIComponent(String(personPhoneNumberKey))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets a specific phone number from the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param personPhoneNumberKey The unique person phone number key.
     
     */
    public apiNskV1UsersByUserKeyPersonPhoneNumbersByPersonPhoneNumberKeyGet(userKey: string, personPhoneNumberKey: string, observe?: 'body', headers?: Headers): Observable<PersonPhoneNumber>;
    public apiNskV1UsersByUserKeyPersonPhoneNumbersByPersonPhoneNumberKeyGet(userKey: string, personPhoneNumberKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<PersonPhoneNumber>>;
    public apiNskV1UsersByUserKeyPersonPhoneNumbersByPersonPhoneNumberKeyGet(userKey: string, personPhoneNumberKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonPhoneNumbersByPersonPhoneNumberKeyGet.');
        }

        if (!personPhoneNumberKey){
            throw new Error('Required parameter personPhoneNumberKey was null or undefined when calling apiNskV1UsersByUserKeyPersonPhoneNumbersByPersonPhoneNumberKeyGet.');
        }


        const response: Observable<HttpResponse<PersonPhoneNumber>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/phoneNumbers/${encodeURIComponent(String(personPhoneNumberKey))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <PersonPhoneNumber>(httpResponse.response));
        }
        return response;
    }


    /**
     * Patches a specific phone number on the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param personPhoneNumberKey The unique person phone number key.
     * @param request The patched phone number.
     
     */
    public apiNskV1UsersByUserKeyPersonPhoneNumbersByPersonPhoneNumberKeyPatch(userKey: string, personPhoneNumberKey: string, request?: DeltaMapperPersonPhoneNumberRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UsersByUserKeyPersonPhoneNumbersByPersonPhoneNumberKeyPatch(userKey: string, personPhoneNumberKey: string, request?: DeltaMapperPersonPhoneNumberRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UsersByUserKeyPersonPhoneNumbersByPersonPhoneNumberKeyPatch(userKey: string, personPhoneNumberKey: string, request?: DeltaMapperPersonPhoneNumberRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonPhoneNumbersByPersonPhoneNumberKeyPatch.');
        }

        if (!personPhoneNumberKey){
            throw new Error('Required parameter personPhoneNumberKey was null or undefined when calling apiNskV1UsersByUserKeyPersonPhoneNumbersByPersonPhoneNumberKeyPatch.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.patch(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/phoneNumbers/${encodeURIComponent(String(personPhoneNumberKey))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Updates a specific phone number on the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param personPhoneNumberKey The unique person phone number key.
     * @param request The modified phone number.
     
     */
    public apiNskV1UsersByUserKeyPersonPhoneNumbersByPersonPhoneNumberKeyPut(userKey: string, personPhoneNumberKey: string, request?: PersonPhoneNumberRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UsersByUserKeyPersonPhoneNumbersByPersonPhoneNumberKeyPut(userKey: string, personPhoneNumberKey: string, request?: PersonPhoneNumberRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UsersByUserKeyPersonPhoneNumbersByPersonPhoneNumberKeyPut(userKey: string, personPhoneNumberKey: string, request?: PersonPhoneNumberRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonPhoneNumbersByPersonPhoneNumberKeyPut.');
        }

        if (!personPhoneNumberKey){
            throw new Error('Required parameter personPhoneNumberKey was null or undefined when calling apiNskV1UsersByUserKeyPersonPhoneNumbersByPersonPhoneNumberKeyPut.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.put(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/phoneNumbers/${encodeURIComponent(String(personPhoneNumberKey))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets all phone numbers from the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     
     */
    public apiNskV1UsersByUserKeyPersonPhoneNumbersGet(userKey: string, observe?: 'body', headers?: Headers): Observable<Array<PersonPhoneNumber>>;
    public apiNskV1UsersByUserKeyPersonPhoneNumbersGet(userKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<PersonPhoneNumber>>>;
    public apiNskV1UsersByUserKeyPersonPhoneNumbersGet(userKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonPhoneNumbersGet.');
        }


        const response: Observable<HttpResponse<Array<PersonPhoneNumber>>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/phoneNumbers`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<PersonPhoneNumber>>(httpResponse.response));
        }
        return response;
    }


    /**
     * Creates a new phone number on the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param request The new phone number.
     
     */
    public apiNskV1UsersByUserKeyPersonPhoneNumbersPost(userKey: string, request?: PersonPhoneNumberRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UsersByUserKeyPersonPhoneNumbersPost(userKey: string, request?: PersonPhoneNumberRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UsersByUserKeyPersonPhoneNumbersPost(userKey: string, request?: PersonPhoneNumberRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonPhoneNumbersPost.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.post(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/phoneNumbers`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Deletes a specific preference for a specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param personPreferenceKey The unique person preference key.
     
     */
    public apiNskV1UsersByUserKeyPersonPreferencesByPersonPreferenceKeyDelete(userKey: string, personPreferenceKey: string, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UsersByUserKeyPersonPreferencesByPersonPreferenceKeyDelete(userKey: string, personPreferenceKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UsersByUserKeyPersonPreferencesByPersonPreferenceKeyDelete(userKey: string, personPreferenceKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonPreferencesByPersonPreferenceKeyDelete.');
        }

        if (!personPreferenceKey){
            throw new Error('Required parameter personPreferenceKey was null or undefined when calling apiNskV1UsersByUserKeyPersonPreferencesByPersonPreferenceKeyDelete.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.delete(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/preferences/${encodeURIComponent(String(personPreferenceKey))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets a specific preference for a specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param personPreferenceKey The unique person preference key.
     
     */
    public apiNskV1UsersByUserKeyPersonPreferencesByPersonPreferenceKeyGet(userKey: string, personPreferenceKey: string, observe?: 'body', headers?: Headers): Observable<PersonPreference>;
    public apiNskV1UsersByUserKeyPersonPreferencesByPersonPreferenceKeyGet(userKey: string, personPreferenceKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<PersonPreference>>;
    public apiNskV1UsersByUserKeyPersonPreferencesByPersonPreferenceKeyGet(userKey: string, personPreferenceKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonPreferencesByPersonPreferenceKeyGet.');
        }

        if (!personPreferenceKey){
            throw new Error('Required parameter personPreferenceKey was null or undefined when calling apiNskV1UsersByUserKeyPersonPreferencesByPersonPreferenceKeyGet.');
        }


        const response: Observable<HttpResponse<PersonPreference>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/preferences/${encodeURIComponent(String(personPreferenceKey))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <PersonPreference>(httpResponse.response));
        }
        return response;
    }


    /**
     * Patches a specific preference for a specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param personPreferenceKey The unique person preference key.
     * @param request The patched preference.
     
     */
    public apiNskV1UsersByUserKeyPersonPreferencesByPersonPreferenceKeyPatch(userKey: string, personPreferenceKey: string, request?: DeltaMapperPersonPreferenceEditRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UsersByUserKeyPersonPreferencesByPersonPreferenceKeyPatch(userKey: string, personPreferenceKey: string, request?: DeltaMapperPersonPreferenceEditRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UsersByUserKeyPersonPreferencesByPersonPreferenceKeyPatch(userKey: string, personPreferenceKey: string, request?: DeltaMapperPersonPreferenceEditRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonPreferencesByPersonPreferenceKeyPatch.');
        }

        if (!personPreferenceKey){
            throw new Error('Required parameter personPreferenceKey was null or undefined when calling apiNskV1UsersByUserKeyPersonPreferencesByPersonPreferenceKeyPatch.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.patch(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/preferences/${encodeURIComponent(String(personPreferenceKey))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Updates a specific preference for a specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param personPreferenceKey The unique person preference key.
     * @param request The modified preference.
     
     */
    public apiNskV1UsersByUserKeyPersonPreferencesByPersonPreferenceKeyPut(userKey: string, personPreferenceKey: string, request?: PersonPreferenceEditRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UsersByUserKeyPersonPreferencesByPersonPreferenceKeyPut(userKey: string, personPreferenceKey: string, request?: PersonPreferenceEditRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UsersByUserKeyPersonPreferencesByPersonPreferenceKeyPut(userKey: string, personPreferenceKey: string, request?: PersonPreferenceEditRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonPreferencesByPersonPreferenceKeyPut.');
        }

        if (!personPreferenceKey){
            throw new Error('Required parameter personPreferenceKey was null or undefined when calling apiNskV1UsersByUserKeyPersonPreferencesByPersonPreferenceKeyPut.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.put(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/preferences/${encodeURIComponent(String(personPreferenceKey))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets all preferences for a specific user&#39;s person.
     * 
     * @param userKey The unique person key.
     
     */
    public apiNskV1UsersByUserKeyPersonPreferencesGet(userKey: string, observe?: 'body', headers?: Headers): Observable<Array<PersonPreference>>;
    public apiNskV1UsersByUserKeyPersonPreferencesGet(userKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<PersonPreference>>>;
    public apiNskV1UsersByUserKeyPersonPreferencesGet(userKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonPreferencesGet.');
        }


        const response: Observable<HttpResponse<Array<PersonPreference>>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/preferences`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<PersonPreference>>(httpResponse.response));
        }
        return response;
    }


    /**
     * Creates a new preference for a specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param request The new preference.
     
     */
    public apiNskV1UsersByUserKeyPersonPreferencesPost(userKey: string, request?: PersonPreferenceCreateRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UsersByUserKeyPersonPreferencesPost(userKey: string, request?: PersonPreferenceCreateRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UsersByUserKeyPersonPreferencesPost(userKey: string, request?: PersonPreferenceCreateRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonPreferencesPost.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.post(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/preferences`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Deletes a specific program on the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param personProgramKey The unique person address key.
     
     */
    public apiNskV1UsersByUserKeyPersonProgramsByPersonProgramKeyDelete(userKey: string, personProgramKey: string, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UsersByUserKeyPersonProgramsByPersonProgramKeyDelete(userKey: string, personProgramKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UsersByUserKeyPersonProgramsByPersonProgramKeyDelete(userKey: string, personProgramKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonProgramsByPersonProgramKeyDelete.');
        }

        if (!personProgramKey){
            throw new Error('Required parameter personProgramKey was null or undefined when calling apiNskV1UsersByUserKeyPersonProgramsByPersonProgramKeyDelete.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.delete(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/programs/${encodeURIComponent(String(personProgramKey))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets a specific program from the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param personProgramKey The unique person program key.
     
     */
    public apiNskV1UsersByUserKeyPersonProgramsByPersonProgramKeyGet(userKey: string, personProgramKey: string, observe?: 'body', headers?: Headers): Observable<PersonCustomerProgram>;
    public apiNskV1UsersByUserKeyPersonProgramsByPersonProgramKeyGet(userKey: string, personProgramKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<PersonCustomerProgram>>;
    public apiNskV1UsersByUserKeyPersonProgramsByPersonProgramKeyGet(userKey: string, personProgramKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonProgramsByPersonProgramKeyGet.');
        }

        if (!personProgramKey){
            throw new Error('Required parameter personProgramKey was null or undefined when calling apiNskV1UsersByUserKeyPersonProgramsByPersonProgramKeyGet.');
        }


        const response: Observable<HttpResponse<PersonCustomerProgram>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/programs/${encodeURIComponent(String(personProgramKey))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <PersonCustomerProgram>(httpResponse.response));
        }
        return response;
    }


    /**
     * Patches a specific program on the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param personProgramKey The unique person program key.
     * @param request The patched program.
     
     */
    public apiNskV1UsersByUserKeyPersonProgramsByPersonProgramKeyPatch(userKey: string, personProgramKey: string, request?: DeltaMapperPersonCustomerProgramEditRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UsersByUserKeyPersonProgramsByPersonProgramKeyPatch(userKey: string, personProgramKey: string, request?: DeltaMapperPersonCustomerProgramEditRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UsersByUserKeyPersonProgramsByPersonProgramKeyPatch(userKey: string, personProgramKey: string, request?: DeltaMapperPersonCustomerProgramEditRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonProgramsByPersonProgramKeyPatch.');
        }

        if (!personProgramKey){
            throw new Error('Required parameter personProgramKey was null or undefined when calling apiNskV1UsersByUserKeyPersonProgramsByPersonProgramKeyPatch.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.patch(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/programs/${encodeURIComponent(String(personProgramKey))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Updates a specific program on the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param personProgramKey The unique person program key.
     * @param request The modified program.
     
     */
    public apiNskV1UsersByUserKeyPersonProgramsByPersonProgramKeyPut(userKey: string, personProgramKey: string, request?: PersonCustomerProgramEditRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UsersByUserKeyPersonProgramsByPersonProgramKeyPut(userKey: string, personProgramKey: string, request?: PersonCustomerProgramEditRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UsersByUserKeyPersonProgramsByPersonProgramKeyPut(userKey: string, personProgramKey: string, request?: PersonCustomerProgramEditRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonProgramsByPersonProgramKeyPut.');
        }

        if (!personProgramKey){
            throw new Error('Required parameter personProgramKey was null or undefined when calling apiNskV1UsersByUserKeyPersonProgramsByPersonProgramKeyPut.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.put(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/programs/${encodeURIComponent(String(personProgramKey))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets all programs from the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     
     */
    public apiNskV1UsersByUserKeyPersonProgramsGet(userKey: string, observe?: 'body', headers?: Headers): Observable<Array<PersonCustomerProgram>>;
    public apiNskV1UsersByUserKeyPersonProgramsGet(userKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<PersonCustomerProgram>>>;
    public apiNskV1UsersByUserKeyPersonProgramsGet(userKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonProgramsGet.');
        }


        const response: Observable<HttpResponse<Array<PersonCustomerProgram>>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/programs`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<PersonCustomerProgram>>(httpResponse.response));
        }
        return response;
    }


    /**
     * Creates a new program on the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param request The new program.
     
     */
    public apiNskV1UsersByUserKeyPersonProgramsPost(userKey: string, request?: PersonCustomerProgramCreateRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UsersByUserKeyPersonProgramsPost(userKey: string, request?: PersonCustomerProgramCreateRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UsersByUserKeyPersonProgramsPost(userKey: string, request?: PersonCustomerProgramCreateRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonProgramsPost.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.post(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/programs`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Updates the specific user&#39;s person record basic information.
     * 
     * @param userKey The unique user key.
     * @param request The person edit request.
     
     */
    public apiNskV1UsersByUserKeyPersonPut(userKey: string, request?: PersonEditRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UsersByUserKeyPersonPut(userKey: string, request?: PersonEditRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UsersByUserKeyPersonPut(userKey: string, request?: PersonEditRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonPut.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.put(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Deletes a specific stored payment on the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param personStoredPaymentKey The unique person stored payment key.
     
     */
    public apiNskV1UsersByUserKeyPersonStoredPaymentsByPersonStoredPaymentKeyDelete(userKey: string, personStoredPaymentKey: string, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UsersByUserKeyPersonStoredPaymentsByPersonStoredPaymentKeyDelete(userKey: string, personStoredPaymentKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UsersByUserKeyPersonStoredPaymentsByPersonStoredPaymentKeyDelete(userKey: string, personStoredPaymentKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonStoredPaymentsByPersonStoredPaymentKeyDelete.');
        }

        if (!personStoredPaymentKey){
            throw new Error('Required parameter personStoredPaymentKey was null or undefined when calling apiNskV1UsersByUserKeyPersonStoredPaymentsByPersonStoredPaymentKeyDelete.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.delete(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/storedPayments/${encodeURIComponent(String(personStoredPaymentKey))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets a specific stored payment from the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param personStoredPaymentKey The unique person stored payment key.
     
     */
    public apiNskV1UsersByUserKeyPersonStoredPaymentsByPersonStoredPaymentKeyGet(userKey: string, personStoredPaymentKey: string, observe?: 'body', headers?: Headers): Observable<PersonStoredPayment>;
    public apiNskV1UsersByUserKeyPersonStoredPaymentsByPersonStoredPaymentKeyGet(userKey: string, personStoredPaymentKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<PersonStoredPayment>>;
    public apiNskV1UsersByUserKeyPersonStoredPaymentsByPersonStoredPaymentKeyGet(userKey: string, personStoredPaymentKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonStoredPaymentsByPersonStoredPaymentKeyGet.');
        }

        if (!personStoredPaymentKey){
            throw new Error('Required parameter personStoredPaymentKey was null or undefined when calling apiNskV1UsersByUserKeyPersonStoredPaymentsByPersonStoredPaymentKeyGet.');
        }


        const response: Observable<HttpResponse<PersonStoredPayment>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/storedPayments/${encodeURIComponent(String(personStoredPaymentKey))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <PersonStoredPayment>(httpResponse.response));
        }
        return response;
    }


    /**
     * Patches a specific stored payment on the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param personStoredPaymentKey The unique person stored payment key.
     * @param request The patched stored payment.
     
     */
    public apiNskV1UsersByUserKeyPersonStoredPaymentsByPersonStoredPaymentKeyPatch(userKey: string, personStoredPaymentKey: string, request?: DeltaMapperPersonStoredPaymentUpdateRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UsersByUserKeyPersonStoredPaymentsByPersonStoredPaymentKeyPatch(userKey: string, personStoredPaymentKey: string, request?: DeltaMapperPersonStoredPaymentUpdateRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UsersByUserKeyPersonStoredPaymentsByPersonStoredPaymentKeyPatch(userKey: string, personStoredPaymentKey: string, request?: DeltaMapperPersonStoredPaymentUpdateRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonStoredPaymentsByPersonStoredPaymentKeyPatch.');
        }

        if (!personStoredPaymentKey){
            throw new Error('Required parameter personStoredPaymentKey was null or undefined when calling apiNskV1UsersByUserKeyPersonStoredPaymentsByPersonStoredPaymentKeyPatch.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.patch(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/storedPayments/${encodeURIComponent(String(personStoredPaymentKey))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Updates a specific stored payment on the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param personStoredPaymentKey The unique person stored payment key.
     * @param request The modified stored payment.
     
     */
    public apiNskV1UsersByUserKeyPersonStoredPaymentsByPersonStoredPaymentKeyPut(userKey: string, personStoredPaymentKey: string, request?: PersonStoredPaymentUpdateRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UsersByUserKeyPersonStoredPaymentsByPersonStoredPaymentKeyPut(userKey: string, personStoredPaymentKey: string, request?: PersonStoredPaymentUpdateRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UsersByUserKeyPersonStoredPaymentsByPersonStoredPaymentKeyPut(userKey: string, personStoredPaymentKey: string, request?: PersonStoredPaymentUpdateRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonStoredPaymentsByPersonStoredPaymentKeyPut.');
        }

        if (!personStoredPaymentKey){
            throw new Error('Required parameter personStoredPaymentKey was null or undefined when calling apiNskV1UsersByUserKeyPersonStoredPaymentsByPersonStoredPaymentKeyPut.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.put(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/storedPayments/${encodeURIComponent(String(personStoredPaymentKey))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets all stored payments from the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     
     */
    public apiNskV1UsersByUserKeyPersonStoredPaymentsGet(userKey: string, observe?: 'body', headers?: Headers): Observable<Array<PersonStoredPayment>>;
    public apiNskV1UsersByUserKeyPersonStoredPaymentsGet(userKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<PersonStoredPayment>>>;
    public apiNskV1UsersByUserKeyPersonStoredPaymentsGet(userKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonStoredPaymentsGet.');
        }


        const response: Observable<HttpResponse<Array<PersonStoredPayment>>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/storedPayments`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<PersonStoredPayment>>(httpResponse.response));
        }
        return response;
    }


    /**
     * Creates a new stored payment on the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param request The new stored payment.
     
     */
    public apiNskV1UsersByUserKeyPersonStoredPaymentsPost(userKey: string, request?: PersonStoredPaymentRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UsersByUserKeyPersonStoredPaymentsPost(userKey: string, request?: PersonStoredPaymentRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UsersByUserKeyPersonStoredPaymentsPost(userKey: string, request?: PersonStoredPaymentRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonStoredPaymentsPost.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.post(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/storedPayments`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Deletes a specific travel document on the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param personTravelDocumentKey The unique person travel document key.
     
     */
    public apiNskV1UsersByUserKeyPersonTravelDocumentsByPersonTravelDocumentKeyDelete(userKey: string, personTravelDocumentKey: string, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UsersByUserKeyPersonTravelDocumentsByPersonTravelDocumentKeyDelete(userKey: string, personTravelDocumentKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UsersByUserKeyPersonTravelDocumentsByPersonTravelDocumentKeyDelete(userKey: string, personTravelDocumentKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonTravelDocumentsByPersonTravelDocumentKeyDelete.');
        }

        if (!personTravelDocumentKey){
            throw new Error('Required parameter personTravelDocumentKey was null or undefined when calling apiNskV1UsersByUserKeyPersonTravelDocumentsByPersonTravelDocumentKeyDelete.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.delete(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/travelDocuments/${encodeURIComponent(String(personTravelDocumentKey))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets a specific travel document from the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param personTravelDocumentKey The unique person travel document key.
     
     */
    public apiNskV1UsersByUserKeyPersonTravelDocumentsByPersonTravelDocumentKeyGet(userKey: string, personTravelDocumentKey: string, observe?: 'body', headers?: Headers): Observable<PersonTravelDocument>;
    public apiNskV1UsersByUserKeyPersonTravelDocumentsByPersonTravelDocumentKeyGet(userKey: string, personTravelDocumentKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<PersonTravelDocument>>;
    public apiNskV1UsersByUserKeyPersonTravelDocumentsByPersonTravelDocumentKeyGet(userKey: string, personTravelDocumentKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonTravelDocumentsByPersonTravelDocumentKeyGet.');
        }

        if (!personTravelDocumentKey){
            throw new Error('Required parameter personTravelDocumentKey was null or undefined when calling apiNskV1UsersByUserKeyPersonTravelDocumentsByPersonTravelDocumentKeyGet.');
        }


        const response: Observable<HttpResponse<PersonTravelDocument>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/travelDocuments/${encodeURIComponent(String(personTravelDocumentKey))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <PersonTravelDocument>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets all travel documents from the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     
     */
    public apiNskV1UsersByUserKeyPersonTravelDocumentsGet(userKey: string, observe?: 'body', headers?: Headers): Observable<Array<PersonTravelDocument>>;
    public apiNskV1UsersByUserKeyPersonTravelDocumentsGet(userKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<PersonTravelDocument>>>;
    public apiNskV1UsersByUserKeyPersonTravelDocumentsGet(userKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonTravelDocumentsGet.');
        }


        const response: Observable<HttpResponse<Array<PersonTravelDocument>>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/travelDocuments`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<PersonTravelDocument>>(httpResponse.response));
        }
        return response;
    }


    /**
     * Creates a new travel document on the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param request The new travel document.
     
     */
    public apiNskV1UsersByUserKeyPersonTravelDocumentsPost(userKey: string, request?: PersonTravelDocumentRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UsersByUserKeyPersonTravelDocumentsPost(userKey: string, request?: PersonTravelDocumentRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UsersByUserKeyPersonTravelDocumentsPost(userKey: string, request?: PersonTravelDocumentRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonTravelDocumentsPost.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.post(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/travelDocuments`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Deletes a person travel notification for a user&#39;s person.
     * 
     * @param userKey The user key.
     * @param travelNotificationKey The travel notification key.
     
     */
    public apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyDelete(userKey: string, travelNotificationKey: string, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyDelete(userKey: string, travelNotificationKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyDelete(userKey: string, travelNotificationKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyDelete.');
        }

        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyDelete.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.delete(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Deletes a notification event from a person travel notification for a user&#39;s person.
     * 
     * @param userKey The user key.
     * @param travelNotificationKey The travel notification key.
     * @param eventType The notification event type.
     
     */
    public apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyEventsByEventTypeDelete(userKey: string, travelNotificationKey: string, eventType: 'DepartureDelay' | 'ArrivalDelay' | 'ScheduleChange' | 'CheckIn', observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyEventsByEventTypeDelete(userKey: string, travelNotificationKey: string, eventType: 'DepartureDelay' | 'ArrivalDelay' | 'ScheduleChange' | 'CheckIn', observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyEventsByEventTypeDelete(userKey: string, travelNotificationKey: string, eventType: 'DepartureDelay' | 'ArrivalDelay' | 'ScheduleChange' | 'CheckIn', observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyEventsByEventTypeDelete.');
        }

        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyEventsByEventTypeDelete.');
        }

        if (!eventType){
            throw new Error('Required parameter eventType was null or undefined when calling apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyEventsByEventTypeDelete.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.delete(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}/events/${encodeURIComponent(String(eventType))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets a notification event for a person travel notification for a user&#39;s person.
     * 
     * @param userKey The user key.
     * @param travelNotificationKey The travel notification key.
     * @param eventType The event type.
     
     */
    public apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyEventsByEventTypeGet(userKey: string, travelNotificationKey: string, eventType: 'DepartureDelay' | 'ArrivalDelay' | 'ScheduleChange' | 'CheckIn', observe?: 'body', headers?: Headers): Observable<NotificationEvent>;
    public apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyEventsByEventTypeGet(userKey: string, travelNotificationKey: string, eventType: 'DepartureDelay' | 'ArrivalDelay' | 'ScheduleChange' | 'CheckIn', observe?: 'response', headers?: Headers): Observable<HttpResponse<NotificationEvent>>;
    public apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyEventsByEventTypeGet(userKey: string, travelNotificationKey: string, eventType: 'DepartureDelay' | 'ArrivalDelay' | 'ScheduleChange' | 'CheckIn', observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyEventsByEventTypeGet.');
        }

        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyEventsByEventTypeGet.');
        }

        if (!eventType){
            throw new Error('Required parameter eventType was null or undefined when calling apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyEventsByEventTypeGet.');
        }


        const response: Observable<HttpResponse<NotificationEvent>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}/events/${encodeURIComponent(String(eventType))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <NotificationEvent>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets notification events for a person travel notification for a user&#39;s person.
     * 
     * @param userKey The user key.
     * @param travelNotificationKey The travel notification key.
     
     */
    public apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyEventsGet(userKey: string, travelNotificationKey: string, observe?: 'body', headers?: Headers): Observable<Array<NotificationEvent>>;
    public apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyEventsGet(userKey: string, travelNotificationKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<NotificationEvent>>>;
    public apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyEventsGet(userKey: string, travelNotificationKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyEventsGet.');
        }

        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyEventsGet.');
        }


        const response: Observable<HttpResponse<Array<NotificationEvent>>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}/events`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<NotificationEvent>>(httpResponse.response));
        }
        return response;
    }


    /**
     * Creates a notification event for a person travel notification for a user&#39;s person.
     * 
     * @param userKey The user key.
     * @param travelNotificationKey The travel notification key.
     * @param request The notification event create request.
     
     */
    public apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyEventsPost(userKey: string, travelNotificationKey: string, request?: NotificationEventCreateRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyEventsPost(userKey: string, travelNotificationKey: string, request?: NotificationEventCreateRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyEventsPost(userKey: string, travelNotificationKey: string, request?: NotificationEventCreateRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyEventsPost.');
        }

        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyEventsPost.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.post(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}/events`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets a person travel notification for a user&#39;s person.
     * 
     * @param userKey The user key.
     * @param travelNotificationKey The person travel notification key.
     
     */
    public apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyGet(userKey: string, travelNotificationKey: string, observe?: 'body', headers?: Headers): Observable<TravelNotification>;
    public apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyGet(userKey: string, travelNotificationKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<TravelNotification>>;
    public apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyGet(userKey: string, travelNotificationKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyGet.');
        }

        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyGet.');
        }


        const response: Observable<HttpResponse<TravelNotification>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <TravelNotification>(httpResponse.response));
        }
        return response;
    }


    /**
     * Patches a person travel notification for a user&#39;s person.
     * 
     * @param userKey The user key.
     * @param travelNotificationKey The travel notification key.
     * @param request The delta mapper travel notification edit request.
     
     */
    public apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyPatch(userKey: string, travelNotificationKey: string, request?: DeltaMapperTravelNotificationEditRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyPatch(userKey: string, travelNotificationKey: string, request?: DeltaMapperTravelNotificationEditRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyPatch(userKey: string, travelNotificationKey: string, request?: DeltaMapperTravelNotificationEditRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyPatch.');
        }

        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyPatch.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.patch(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Updates a person travel notification for a user&#39;s person.
     * 
     * @param userKey The user key.
     * @param travelNotificationKey The travel notification key.
     * @param request The travel notification edit request.
     
     */
    public apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyPut(userKey: string, travelNotificationKey: string, request?: TravelNotificationEditRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyPut(userKey: string, travelNotificationKey: string, request?: TravelNotificationEditRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyPut(userKey: string, travelNotificationKey: string, request?: TravelNotificationEditRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyPut.');
        }

        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyPut.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.put(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Deletes a notification timed event from a person travel notification for a user&#39;s person.
     * 
     * @param userKey The user key.
     * @param travelNotificationKey The travel notification key.
     * @param timedEventType The notification timed event type.
     
     */
    public apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeDelete(userKey: string, travelNotificationKey: string, timedEventType: 'Departure' | 'Arrival', observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeDelete(userKey: string, travelNotificationKey: string, timedEventType: 'Departure' | 'Arrival', observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeDelete(userKey: string, travelNotificationKey: string, timedEventType: 'Departure' | 'Arrival', observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeDelete.');
        }

        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeDelete.');
        }

        if (!timedEventType){
            throw new Error('Required parameter timedEventType was null or undefined when calling apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeDelete.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.delete(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}/timedEvents/${encodeURIComponent(String(timedEventType))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets a notification timed event for a person travel notification for a user&#39;s person.
     * 
     * @param userKey The user key.
     * @param travelNotificationKey The travel notification key.
     * @param timedEventType The timed event type.
     
     */
    public apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeGet(userKey: string, travelNotificationKey: string, timedEventType: 'Departure' | 'Arrival', observe?: 'body', headers?: Headers): Observable<NotificationTimedEvent>;
    public apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeGet(userKey: string, travelNotificationKey: string, timedEventType: 'Departure' | 'Arrival', observe?: 'response', headers?: Headers): Observable<HttpResponse<NotificationTimedEvent>>;
    public apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeGet(userKey: string, travelNotificationKey: string, timedEventType: 'Departure' | 'Arrival', observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeGet.');
        }

        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeGet.');
        }

        if (!timedEventType){
            throw new Error('Required parameter timedEventType was null or undefined when calling apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeGet.');
        }


        const response: Observable<HttpResponse<NotificationTimedEvent>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}/timedEvents/${encodeURIComponent(String(timedEventType))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <NotificationTimedEvent>(httpResponse.response));
        }
        return response;
    }


    /**
     * Updates a notification timed event for a person travel notification for a user&#39;s person.
     * 
     * @param userKey The user key.
     * @param travelNotificationKey The travel notification key.
     * @param timedEventType The notification timed event type.
     * @param request The updated notification timed event request.
     
     */
    public apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypePut(userKey: string, travelNotificationKey: string, timedEventType: 'Departure' | 'Arrival', request?: NotificationTimedEventEditRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypePut(userKey: string, travelNotificationKey: string, timedEventType: 'Departure' | 'Arrival', request?: NotificationTimedEventEditRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypePut(userKey: string, travelNotificationKey: string, timedEventType: 'Departure' | 'Arrival', request?: NotificationTimedEventEditRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypePut.');
        }

        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypePut.');
        }

        if (!timedEventType){
            throw new Error('Required parameter timedEventType was null or undefined when calling apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypePut.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.put(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}/timedEvents/${encodeURIComponent(String(timedEventType))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets notification timed events for a person travel notification for a user&#39;s person.
     * 
     * @param userKey The user key.
     * @param travelNotificationKey The travel notification key.
     
     */
    public apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyTimedEventsGet(userKey: string, travelNotificationKey: string, observe?: 'body', headers?: Headers): Observable<Array<NotificationTimedEvent>>;
    public apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyTimedEventsGet(userKey: string, travelNotificationKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<NotificationTimedEvent>>>;
    public apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyTimedEventsGet(userKey: string, travelNotificationKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyTimedEventsGet.');
        }

        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyTimedEventsGet.');
        }


        const response: Observable<HttpResponse<Array<NotificationTimedEvent>>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}/timedEvents`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<NotificationTimedEvent>>(httpResponse.response));
        }
        return response;
    }


    /**
     * Creates a notification timed event for a person travel notification for a user&#39;s person.
     * 
     * @param userKey The user key.
     * @param travelNotificationKey The travel notification key.
     * @param request The notification timed even create request.
     
     */
    public apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyTimedEventsPost(userKey: string, travelNotificationKey: string, request?: NotificationTimedEventCreateRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyTimedEventsPost(userKey: string, travelNotificationKey: string, request?: NotificationTimedEventCreateRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyTimedEventsPost(userKey: string, travelNotificationKey: string, request?: NotificationTimedEventCreateRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyTimedEventsPost.');
        }

        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyTimedEventsPost.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.post(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}/timedEvents`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets person travel notifications for a user&#39;s person.
     * 
     * @param userKey The user key.
     
     */
    public apiNskV1UsersByUserKeyPersonTravelNotificationsGet(userKey: string, observe?: 'body', headers?: Headers): Observable<Array<TravelNotification>>;
    public apiNskV1UsersByUserKeyPersonTravelNotificationsGet(userKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<TravelNotification>>>;
    public apiNskV1UsersByUserKeyPersonTravelNotificationsGet(userKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonTravelNotificationsGet.');
        }


        const response: Observable<HttpResponse<Array<TravelNotification>>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/travelNotifications`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<TravelNotification>>(httpResponse.response));
        }
        return response;
    }


    /**
     * Creates a person travel notification for a user&#39;s person.
     * 
     * @param userKey The user key.
     * @param request The travel notification create request.
     
     */
    public apiNskV1UsersByUserKeyPersonTravelNotificationsPost(userKey: string, request?: TravelNotificationCreateRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UsersByUserKeyPersonTravelNotificationsPost(userKey: string, request?: TravelNotificationCreateRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UsersByUserKeyPersonTravelNotificationsPost(userKey: string, request?: TravelNotificationCreateRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPersonTravelNotificationsPost.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.post(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/person/travelNotifications`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Updates the specific user.
     * 
     * @param userKey The unique user key.
     * @param request The user edit request.
     
     */
    public apiNskV1UsersByUserKeyPut(userKey: string, request?: UserRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UsersByUserKeyPut(userKey: string, request?: UserRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UsersByUserKeyPut(userKey: string, request?: UserRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyPut.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.put(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Delets a specific role for a specific user.
     * 
     * @param userKey The unique user key.
     * @param userRoleKey The unique user role key.
     
     */
    public apiNskV1UsersByUserKeyRolesByUserRoleKeyDelete(userKey: string, userRoleKey: string, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UsersByUserKeyRolesByUserRoleKeyDelete(userKey: string, userRoleKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UsersByUserKeyRolesByUserRoleKeyDelete(userKey: string, userRoleKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyRolesByUserRoleKeyDelete.');
        }

        if (!userRoleKey){
            throw new Error('Required parameter userRoleKey was null or undefined when calling apiNskV1UsersByUserKeyRolesByUserRoleKeyDelete.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.delete(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/roles/${encodeURIComponent(String(userRoleKey))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets a specific role for a specific user.
     * 
     * @param userKey The unique user key.
     * @param userRoleKey The unique user role key
     
     */
    public apiNskV1UsersByUserKeyRolesByUserRoleKeyGet(userKey: string, userRoleKey: string, observe?: 'body', headers?: Headers): Observable<UserRole>;
    public apiNskV1UsersByUserKeyRolesByUserRoleKeyGet(userKey: string, userRoleKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<UserRole>>;
    public apiNskV1UsersByUserKeyRolesByUserRoleKeyGet(userKey: string, userRoleKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyRolesByUserRoleKeyGet.');
        }

        if (!userRoleKey){
            throw new Error('Required parameter userRoleKey was null or undefined when calling apiNskV1UsersByUserKeyRolesByUserRoleKeyGet.');
        }


        const response: Observable<HttpResponse<UserRole>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/roles/${encodeURIComponent(String(userRoleKey))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <UserRole>(httpResponse.response));
        }
        return response;
    }


    /**
     * Patches a specific role for a specific user.
     * 
     * @param userKey The unique user key.
     * @param userRoleKey The unique user role key.
     * @param request The patched role.
     
     */
    public apiNskV1UsersByUserKeyRolesByUserRoleKeyPatch(userKey: string, userRoleKey: string, request?: DeltaMapperUserRolePatchRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UsersByUserKeyRolesByUserRoleKeyPatch(userKey: string, userRoleKey: string, request?: DeltaMapperUserRolePatchRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UsersByUserKeyRolesByUserRoleKeyPatch(userKey: string, userRoleKey: string, request?: DeltaMapperUserRolePatchRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyRolesByUserRoleKeyPatch.');
        }

        if (!userRoleKey){
            throw new Error('Required parameter userRoleKey was null or undefined when calling apiNskV1UsersByUserKeyRolesByUserRoleKeyPatch.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.patch(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/roles/${encodeURIComponent(String(userRoleKey))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Updates a specific role for a specific user.
     * 
     * @param userKey The unique user key.
     * @param userRoleKey The unique user role key.
     * @param request The modified role.
     
     */
    public apiNskV1UsersByUserKeyRolesByUserRoleKeyPut(userKey: string, userRoleKey: string, request?: UserRoleEditRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UsersByUserKeyRolesByUserRoleKeyPut(userKey: string, userRoleKey: string, request?: UserRoleEditRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UsersByUserKeyRolesByUserRoleKeyPut(userKey: string, userRoleKey: string, request?: UserRoleEditRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyRolesByUserRoleKeyPut.');
        }

        if (!userRoleKey){
            throw new Error('Required parameter userRoleKey was null or undefined when calling apiNskV1UsersByUserKeyRolesByUserRoleKeyPut.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.put(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/roles/${encodeURIComponent(String(userRoleKey))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets all roles for a specific user.
     * 
     * @param userKey The unique user key.
     
     */
    public apiNskV1UsersByUserKeyRolesGet(userKey: string, observe?: 'body', headers?: Headers): Observable<Array<UserRole>>;
    public apiNskV1UsersByUserKeyRolesGet(userKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<UserRole>>>;
    public apiNskV1UsersByUserKeyRolesGet(userKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyRolesGet.');
        }


        const response: Observable<HttpResponse<Array<UserRole>>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/roles`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<UserRole>>(httpResponse.response));
        }
        return response;
    }


    /**
     * Creates a new role for a specific user.
     * 
     * @param userKey The unique user key.
     * @param request The new role.
     
     */
    public apiNskV1UsersByUserKeyRolesPost(userKey: string, request?: UserRoleCreateRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UsersByUserKeyRolesPost(userKey: string, request?: UserRoleCreateRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UsersByUserKeyRolesPost(userKey: string, request?: UserRoleCreateRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV1UsersByUserKeyRolesPost.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.post(`${this.basePath}/api/nsk/v1/users/${encodeURIComponent(String(userKey))}/roles`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Creates a new user and person (used by agents to create other users).
     * This method is used by agents to create other users (either agents or customers).  Use this method when you want to create both a user and a person at the same time.
     * @param request 
     
     */
    public apiNskV1UsersPost(request?: UserCreateRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UsersPost(request?: UserCreateRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UsersPost(request?: UserCreateRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {

        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.post(`${this.basePath}/api/nsk/v1/users`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Patches a specific travel document on the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param personTravelDocumentKey The unique person travel document key.
     * @param request The patched travel document.
     
     */
    public apiNskV2UsersByUserKeyPersonTravelDocumentsByPersonTravelDocumentKeyPatch(userKey: string, personTravelDocumentKey: string, request?: DeltaMapperTravelDocumentEditRequestv2, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV2UsersByUserKeyPersonTravelDocumentsByPersonTravelDocumentKeyPatch(userKey: string, personTravelDocumentKey: string, request?: DeltaMapperTravelDocumentEditRequestv2, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV2UsersByUserKeyPersonTravelDocumentsByPersonTravelDocumentKeyPatch(userKey: string, personTravelDocumentKey: string, request?: DeltaMapperTravelDocumentEditRequestv2, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV2UsersByUserKeyPersonTravelDocumentsByPersonTravelDocumentKeyPatch.');
        }

        if (!personTravelDocumentKey){
            throw new Error('Required parameter personTravelDocumentKey was null or undefined when calling apiNskV2UsersByUserKeyPersonTravelDocumentsByPersonTravelDocumentKeyPatch.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.patch(`${this.basePath}/api/nsk/v2/users/${encodeURIComponent(String(userKey))}/person/travelDocuments/${encodeURIComponent(String(personTravelDocumentKey))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Updates a specific travel document on the specific user&#39;s person.
     * 
     * @param userKey The unique user key.
     * @param personTravelDocumentKey The unique person travel document key.
     * @param request The modified travel document.
     
     */
    public apiNskV2UsersByUserKeyPersonTravelDocumentsByPersonTravelDocumentKeyPut(userKey: string, personTravelDocumentKey: string, request?: TravelDocumentEditRequestv2, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV2UsersByUserKeyPersonTravelDocumentsByPersonTravelDocumentKeyPut(userKey: string, personTravelDocumentKey: string, request?: TravelDocumentEditRequestv2, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV2UsersByUserKeyPersonTravelDocumentsByPersonTravelDocumentKeyPut(userKey: string, personTravelDocumentKey: string, request?: TravelDocumentEditRequestv2, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!userKey){
            throw new Error('Required parameter userKey was null or undefined when calling apiNskV2UsersByUserKeyPersonTravelDocumentsByPersonTravelDocumentKeyPut.');
        }

        if (!personTravelDocumentKey){
            throw new Error('Required parameter personTravelDocumentKey was null or undefined when calling apiNskV2UsersByUserKeyPersonTravelDocumentsByPersonTravelDocumentKeyPut.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.put(`${this.basePath}/api/nsk/v2/users/${encodeURIComponent(String(userKey))}/person/travelDocuments/${encodeURIComponent(String(personTravelDocumentKey))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Search user records.
     * 
     * @param organizationCode The organization code to search by.
     * @param locationGroupCode The location group code to search by.
     * @param domainCode The domain code to search in.
     * @param username The unique username to search by.
     * @param usernameMatching The matching criteria for the username.
     * @param firstName The agent&#39;s first name to search by.
     * @param firstNameMatching The matching criteria for the agent&#39;s first name.
     * @param lastName The agent&#39;s last name to search by.
     * @param roleCode The role code to search with.
     * @param status The agent status to search by.
     * @param returnCount The number of results to return.
     * @param lastIndex The last user index (used for paging).
     
     */
    public apiNskV2UsersGet(organizationCode?: string, locationGroupCode?: string, domainCode?: string, username?: string, usernameMatching?: 'StartsWith' | 'EndsWith' | 'Contains' | 'ExactMatch', firstName?: string, firstNameMatching?: 'StartsWith' | 'EndsWith' | 'Contains' | 'ExactMatch', lastName?: string, roleCode?: string, status?: 'Default' | 'Active' | 'Pending' | 'Suspended' | 'Terminated', returnCount?: number, lastIndex?: number, observe?: 'body', headers?: Headers): Observable<Array<UserRecord>>;
    public apiNskV2UsersGet(organizationCode?: string, locationGroupCode?: string, domainCode?: string, username?: string, usernameMatching?: 'StartsWith' | 'EndsWith' | 'Contains' | 'ExactMatch', firstName?: string, firstNameMatching?: 'StartsWith' | 'EndsWith' | 'Contains' | 'ExactMatch', lastName?: string, roleCode?: string, status?: 'Default' | 'Active' | 'Pending' | 'Suspended' | 'Terminated', returnCount?: number, lastIndex?: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<UserRecord>>>;
    public apiNskV2UsersGet(organizationCode?: string, locationGroupCode?: string, domainCode?: string, username?: string, usernameMatching?: 'StartsWith' | 'EndsWith' | 'Contains' | 'ExactMatch', firstName?: string, firstNameMatching?: 'StartsWith' | 'EndsWith' | 'Contains' | 'ExactMatch', lastName?: string, roleCode?: string, status?: 'Default' | 'Active' | 'Pending' | 'Suspended' | 'Terminated', returnCount?: number, lastIndex?: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        let queryParameters: string[] = [];
        if (organizationCode !== undefined) {
            queryParameters.push("organizationCode="+encodeURIComponent(String(organizationCode)));
        }
        if (locationGroupCode !== undefined) {
            queryParameters.push("locationGroupCode="+encodeURIComponent(String(locationGroupCode)));
        }
        if (domainCode !== undefined) {
            queryParameters.push("domainCode="+encodeURIComponent(String(domainCode)));
        }
        if (username !== undefined) {
            queryParameters.push("username="+encodeURIComponent(String(username)));
        }
        if (usernameMatching !== undefined) {
            queryParameters.push("usernameMatching="+encodeURIComponent(String(usernameMatching)));
        }
        if (firstName !== undefined) {
            queryParameters.push("firstName="+encodeURIComponent(String(firstName)));
        }
        if (firstNameMatching !== undefined) {
            queryParameters.push("firstNameMatching="+encodeURIComponent(String(firstNameMatching)));
        }
        if (lastName !== undefined) {
            queryParameters.push("lastName="+encodeURIComponent(String(lastName)));
        }
        if (roleCode !== undefined) {
            queryParameters.push("roleCode="+encodeURIComponent(String(roleCode)));
        }
        if (status !== undefined) {
            queryParameters.push("status="+encodeURIComponent(String(status)));
        }
        if (returnCount !== undefined) {
            queryParameters.push("returnCount="+encodeURIComponent(String(returnCount)));
        }
        if (lastIndex !== undefined) {
            queryParameters.push("lastIndex="+encodeURIComponent(String(lastIndex)));
        }


        const response: Observable<HttpResponse<Array<UserRecord>>> = this.httpClient.get(`${this.basePath}/api/nsk/v2/users?${queryParameters.join('&')}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<UserRecord>>(httpResponse.response));
        }
        return response;
    }


    /**
     * Creates a new user for a person (used by agents to create other users).
     * This method is used by agents to create other users (either agents or customers) and connect them with an existing  person.  Use this method when a person already exists and you want to create a user for them.
     * @param request 
     
     */
    public apiNskV2UsersPost(request?: UserCreateRequestv2, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV2UsersPost(request?: UserCreateRequestv2, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV2UsersPost(request?: UserCreateRequestv2, observe: any = 'body', headers: Headers = {}): Observable<any> {

        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.post(`${this.basePath}/api/nsk/v2/users`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }

}
