/**
 * API - Current Routes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: trunk
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from "rxjs/Observable";
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import IHttpClient from "../IHttpClient";
import { inject, injectable } from "inversify";
import { IAPIConfiguration } from "../IAPIConfiguration";
import { Headers } from "../Headers";
import HttpResponse from "../HttpResponse";

import * as Models from '../models';
import { Dictionary } from '../models';
import * as Enums from '../enums';
import { getClient, Request } from '../helper';

import { ApplyBookingCreditRequestv2 } from '../model/applyBookingCreditRequestv2';
import { ApplyCreditAccountRequest } from '../model/applyCreditAccountRequest';
import { ApplyCreditRequest } from '../model/applyCreditRequest';
import { CreditAccount } from '../model/creditAccount';
import { CustomerCreditRefundRequest } from '../model/customerCreditRefundRequest';
import { DccRequestBasev2 } from '../model/dccRequestBasev2';
import { DirectCurrencyConversionAvailability } from '../model/directCurrencyConversionAvailability';
import { IJsonResponse } from '../model/iJsonResponse';
import { InlineResponse2008 } from '../model/inlineResponse2008';
import { InlineResponse2009 } from '../model/inlineResponse2009';
import { OrganizationRefundRequest } from '../model/organizationRefundRequest';
import { Payment } from '../model/payment';
import { PaymentFeeResponse } from '../model/paymentFeeResponse';
import { PaymentMethodRequest } from '../model/paymentMethodRequest';
import { PaymentRefundRequest } from '../model/paymentRefundRequest';
import { PaymentRequest } from '../model/paymentRequest';
import { ThreeDSecurePaymentMethodRequestv2 } from '../model/threeDSecurePaymentMethodRequestv2';
import { ThreeDSecureResponse } from '../model/threeDSecureResponse';
import { VoucherInformation } from '../model/voucherInformation';
import { VoucherPaymentRequest } from '../model/voucherPaymentRequest';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class BookingpaymentsService {

    constructor(@inject(HTTP_CLIENT) protected client: ApiHttpClient) {}

    /**
     * Deletes the payment.
     * 
     * @param paymentKey Payment key.
     
     */
    public apiNskV1BookingPaymentsByPaymentKeyDelete = (paymentKey: string, ) => {
        if (!paymentKey){
            throw new Error('Required parameter paymentKey was null or undefined when calling apiNskV1BookingPaymentsByPaymentKeyDelete.');
        }


            const requestObj: Request<{
                paymentKey: string, 
            }> = {
                url: '/api/nsk/v1/booking/payments/${encodeURIComponent(String(paymentKey))}',
                method: 'delete',
                data: {
                    paymentKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets a specific payment.
     * 
     * @param paymentKey Payment key.
     
     */
    public apiNskV1BookingPaymentsByPaymentKeyGet = (paymentKey: string, ) => {
        if (!paymentKey){
            throw new Error('Required parameter paymentKey was null or undefined when calling apiNskV1BookingPaymentsByPaymentKeyGet.');
        }


            const requestObj: Request<{
                paymentKey: string, 
            }> = {
                url: '/api/nsk/v1/booking/payments/${encodeURIComponent(String(paymentKey))}',
                method: 'get',
                data: {
                    paymentKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the booking payments on the booking in state.
     * Requires a booking in state.
     
     */
    public apiNskV1BookingPaymentsGet = () => {

            const requestObj: Request<{
                
            }> = {
                url: '/api/nsk/v1/booking/payments',
                method: 'get',
                data: {
                    
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the booking payment methods available for a refund on the booking in state.
     * Requires a booking in state.
     
     */
    public apiNskV1BookingPaymentsRefundsGet = () => {

            const requestObj: Request<{
                
            }> = {
                url: '/api/nsk/v1/booking/payments/refunds',
                method: 'get',
                data: {
                    
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Creates an organization account refund for a payment from  the booking in state.
     * 
     * @param request The organization refund request.
     
     */
    public apiNskV1BookingPaymentsRefundsOrganizationCreditPost = (request?: OrganizationRefundRequest, ) => {

            const requestObj: Request<{
                request?: OrganizationRefundRequest, 
            }> = {
                url: '/api/nsk/v1/booking/payments/refunds/organizationCredit',
                method: 'post',
                data: {
                    request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Deletes a voucher payment on the booking in state.
     * 
     * @param voucherPaymentReference Voucher payment reference.
     
     */
    public apiNskV1BookingPaymentsVoucherByVoucherPaymentReferenceDelete = (voucherPaymentReference: string, ) => {
        if (!voucherPaymentReference){
            throw new Error('Required parameter voucherPaymentReference was null or undefined when calling apiNskV1BookingPaymentsVoucherByVoucherPaymentReferenceDelete.');
        }


            const requestObj: Request<{
                voucherPaymentReference: string, 
            }> = {
                url: '/api/nsk/v1/booking/payments/voucher/${encodeURIComponent(String(voucherPaymentReference))}',
                method: 'delete',
                data: {
                    voucherPaymentReference,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets information regarding a specific voucher code.
     * 
     * @param referenceCode The voucher reference code.
     * @param overrideRestrictions Override restrictions. Defaults to false.
     
     */
    public apiNskV1BookingPaymentsVoucherGet = (referenceCode: string, overrideRestrictions?: boolean, ) => {
        if (!referenceCode){
            throw new Error('Required parameter referenceCode was null or undefined when calling apiNskV1BookingPaymentsVoucherGet.');
        }

        let queryParameters: string[] = [];
        if (referenceCode !== undefined) {
            queryParameters.push("referenceCode="+encodeURIComponent(String(referenceCode)));
        }
        if (overrideRestrictions !== undefined) {
            queryParameters.push("overrideRestrictions="+encodeURIComponent(String(overrideRestrictions)));
        }


            const requestObj: Request<{
                referenceCode: string, overrideRestrictions?: boolean, 
            }> = {
                url: '/api/nsk/v1/booking/payments/voucher',
                method: 'get',
                data: {
                    referenceCode,overrideRestrictions,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the booking payment methods available for the booking in state.
     * Requires a booking in state.
     
     */
    public apiNskV2BookingPaymentsAvailableGet = () => {

            const requestObj: Request<{
                
            }> = {
                url: '/api/nsk/v2/booking/payments/available',
                method: 'get',
                data: {
                    
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets credit available from a past booking.
     * See booking retrieve. This method uses the same validation rules.
     * @param recordLocator Record locator being requested.
     * @param currencyCode The currency code of the account.
     * @param emailAddress The email address of a contact.
     * @param origin The origin station code.
     * @param firstName The first name of a passenger or contact.
     * @param lastName The last name of a passenger or contact.
     * @param customerNumber One of the passengers customer numbers applied.
     * @param departureDate The first journeys departure date.
     
     */
    public apiNskV2BookingPaymentsBookingCreditGet = (recordLocator: string, currencyCode?: string, emailAddress?: string, origin?: string, firstName?: string, lastName?: string, customerNumber?: string, departureDate?: Date, ) => {
        if (!recordLocator){
            throw new Error('Required parameter recordLocator was null or undefined when calling apiNskV2BookingPaymentsBookingCreditGet.');
        }

        let queryParameters: string[] = [];
        if (currencyCode !== undefined) {
            queryParameters.push("currencyCode="+encodeURIComponent(String(currencyCode)));
        }
        if (recordLocator !== undefined) {
            queryParameters.push("recordLocator="+encodeURIComponent(String(recordLocator)));
        }
        if (emailAddress !== undefined) {
            queryParameters.push("emailAddress="+encodeURIComponent(String(emailAddress)));
        }
        if (origin !== undefined) {
            queryParameters.push("origin="+encodeURIComponent(String(origin)));
        }
        if (firstName !== undefined) {
            queryParameters.push("firstName="+encodeURIComponent(String(firstName)));
        }
        if (lastName !== undefined) {
            queryParameters.push("lastName="+encodeURIComponent(String(lastName)));
        }
        if (customerNumber !== undefined) {
            queryParameters.push("customerNumber="+encodeURIComponent(String(customerNumber)));
        }
        if (departureDate !== undefined) {
           queryParameters.push("departureDate="+encodeURIComponent(<any>departureDate.toISOString()));
        }


            const requestObj: Request<{
                recordLocator: string, currencyCode?: string, emailAddress?: string, origin?: string, firstName?: string, lastName?: string, customerNumber?: string, departureDate?: Date, 
            }> = {
                url: '/api/nsk/v2/booking/payments/bookingCredit',
                method: 'get',
                data: {
                    recordLocator,currencyCode,emailAddress,origin,firstName,lastName,customerNumber,departureDate,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Applies credit from a past booking.
     * 
     * @param request Apply booking credit request.
     
     */
    public apiNskV2BookingPaymentsBookingCreditPost = (request?: ApplyBookingCreditRequestv2, ) => {

            const requestObj: Request<{
                request?: ApplyBookingCreditRequestv2, 
            }> = {
                url: '/api/nsk/v2/booking/payments/bookingCredit',
                method: 'post',
                data: {
                    request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets credit available by reference number and type.
     * This endpoint is for agents and can get credit available for any user or type.
     * @param referenceNumber The account reference. This will be the record locator, customer account number, or organization code depending on  the type.
     * @param type Defines the type of credit being applied.
     * @param currencyCode The currency code of the account.
     
     */
    public apiNskV2BookingPaymentsCreditGet = (referenceNumber: string, type: 'Customer' | 'Booking' | 'Organization', currencyCode?: string, ) => {
        if (!referenceNumber){
            throw new Error('Required parameter referenceNumber was null or undefined when calling apiNskV2BookingPaymentsCreditGet.');
        }

        if (!type){
            throw new Error('Required parameter type was null or undefined when calling apiNskV2BookingPaymentsCreditGet.');
        }

        let queryParameters: string[] = [];
        if (referenceNumber !== undefined) {
            queryParameters.push("referenceNumber="+encodeURIComponent(String(referenceNumber)));
        }
        if (currencyCode !== undefined) {
            queryParameters.push("currencyCode="+encodeURIComponent(String(currencyCode)));
        }
        if (type !== undefined) {
            queryParameters.push("type="+encodeURIComponent(String(type)));
        }


            const requestObj: Request<{
                referenceNumber: string, type: 'Customer' | 'Booking' | 'Organization', currencyCode?: string, 
            }> = {
                url: '/api/nsk/v2/booking/payments/credit',
                method: 'get',
                data: {
                    referenceNumber,type,currencyCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Applies credit by reference number and type.
     * This endpoint is for agents and can apply credit for any user or type.
     * @param request Apply credit request.
     
     */
    public apiNskV2BookingPaymentsCreditPost = (request?: ApplyCreditAccountRequest, ) => {

            const requestObj: Request<{
                request?: ApplyCreditAccountRequest, 
            }> = {
                url: '/api/nsk/v2/booking/payments/credit',
                method: 'post',
                data: {
                    request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets credit available for the logged in user on the booking in state.
     * Depending on configuration, credit may be validated by the contacts and passengers on the booking.
     * @param currencyCode The currency code of the account.
     
     */
    public apiNskV2BookingPaymentsCustomerCreditGet = (currencyCode?: string, ) => {
        let queryParameters: string[] = [];
        if (currencyCode !== undefined) {
            queryParameters.push("currencyCode="+encodeURIComponent(String(currencyCode)));
        }


            const requestObj: Request<{
                currencyCode?: string, 
            }> = {
                url: '/api/nsk/v2/booking/payments/customerCredit',
                method: 'get',
                data: {
                    currencyCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Applies credit from the logged in customer to the booking in state.
     * 
     * @param request Apply credit request.
     
     */
    public apiNskV2BookingPaymentsCustomerCreditPost = (request?: ApplyCreditRequest, ) => {

            const requestObj: Request<{
                request?: ApplyCreditRequest, 
            }> = {
                url: '/api/nsk/v2/booking/payments/customerCredit',
                method: 'post',
                data: {
                    request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets credit available for the logged in users organization.
     * Depending on configuration, credit may be validated by the contacts and passengers on the booking.
     * @param currencyCode The currency code of the account.
     
     */
    public apiNskV2BookingPaymentsOrganizationCreditGet = (currencyCode?: string, ) => {
        let queryParameters: string[] = [];
        if (currencyCode !== undefined) {
            queryParameters.push("currencyCode="+encodeURIComponent(String(currencyCode)));
        }


            const requestObj: Request<{
                currencyCode?: string, 
            }> = {
                url: '/api/nsk/v2/booking/payments/organizationCredit',
                method: 'get',
                data: {
                    currencyCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Applies credit to the logged in user&#39;s organization.
     * 
     * @param request Apply credit request.
     
     */
    public apiNskV2BookingPaymentsOrganizationCreditPost = (request?: ApplyCreditRequest, ) => {

            const requestObj: Request<{
                request?: ApplyCreditRequest, 
            }> = {
                url: '/api/nsk/v2/booking/payments/organizationCredit',
                method: 'post',
                data: {
                    request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Creates a new external payment or prepaid payment on the booking in state.
     * &lt;p&gt;                      The payment fields are dynamic to the criteria of your payment provider. Here is an example request for a                      credit card payment that does not require address, zip, etc.                      { \&quot;amount\&quot;: 10, \&quot;currencyCode\&quot;: \&quot;USD\&quot;, \&quot;paymentFields\&quot;: {\&quot;ACCTNO\&quot;:\&quot;411111111111\&quot;, \&quot;EXPDATE\&quot;:\&quot;10/8/2017\&quot;,                      \&quot;CC::AccountHolderName\&quot;:\&quot;Bob Smith\&quot;, \&quot;CC::VerificationCode\&quot;:\&quot;111\&quot;}}                  &lt;/p&gt;  &lt;p&gt;                      A 202 (HTTP status code) response returns alternate data signifying that Three D Secure was enabled for this                      payment                      and is required for this payment type. The payment will need to be resent using the 3DS endpoint.                  &lt;/p&gt;  &lt;p&gt;                      If you would like to make a ThreeDSecure payment, you will need to have these headers populated:                      &lt;ul&gt;&lt;li&gt;                              User Agent                          &lt;/li&gt;&lt;li&gt;                              Ip Address                          &lt;/li&gt;&lt;li&gt;                              Accept                          &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;
     * @param request Payment request.
     * @param termUrl The term URL.
     
     */
    public apiNskV2BookingPaymentsPost = (request?: PaymentMethodRequest, termUrl?: string, ) => {
        let queryParameters: string[] = [];
        if (termUrl !== undefined) {
            queryParameters.push("termUrl="+encodeURIComponent(String(termUrl)));
        }


            const requestObj: Request<{
                request?: PaymentMethodRequest, termUrl?: string, 
            }> = {
                url: '/api/nsk/v2/booking/payments',
                method: 'post',
                data: {
                    request,termUrl,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Creates a customer credit for a specified customer.
     * Requires a booking in state and an agent token. Agents should use /refunds endpoint for booking credits.
     * @param request 
     
     */
    public apiNskV2BookingPaymentsRefundsCustomerCreditPost = (request?: CustomerCreditRefundRequest, ) => {

            const requestObj: Request<{
                request?: CustomerCreditRefundRequest, 
            }> = {
                url: '/api/nsk/v2/booking/payments/refunds/customerCredit',
                method: 'post',
                data: {
                    request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Deletes a voucher payment on the booking in state.
     * 
     * @param voucherPaymentReference Voucher payment reference.
     
     */
    public apiNskV2BookingPaymentsVoucherByVoucherPaymentReferenceDelete = (voucherPaymentReference: string, ) => {
        if (!voucherPaymentReference){
            throw new Error('Required parameter voucherPaymentReference was null or undefined when calling apiNskV2BookingPaymentsVoucherByVoucherPaymentReferenceDelete.');
        }


            const requestObj: Request<{
                voucherPaymentReference: string, 
            }> = {
                url: '/api/nsk/v2/booking/payments/voucher/${encodeURIComponent(String(voucherPaymentReference))}',
                method: 'delete',
                data: {
                    voucherPaymentReference,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets the available direct currency codes offer.
     * 
     * @param paymentMethod Payment method code.
     * @param amount The amount being applied as a payment.
     * @param accountNumber The account number.
     * @param quotedCurrencyCode The quoted currency code to convert to.
     
     */
    public apiNskV3BookingPaymentsByPaymentMethodDccGet = (paymentMethod: string, amount: number, accountNumber: string, quotedCurrencyCode: string, ) => {
        if (!paymentMethod){
            throw new Error('Required parameter paymentMethod was null or undefined when calling apiNskV3BookingPaymentsByPaymentMethodDccGet.');
        }

        if (!amount){
            throw new Error('Required parameter amount was null or undefined when calling apiNskV3BookingPaymentsByPaymentMethodDccGet.');
        }

        if (!accountNumber){
            throw new Error('Required parameter accountNumber was null or undefined when calling apiNskV3BookingPaymentsByPaymentMethodDccGet.');
        }

        if (!quotedCurrencyCode){
            throw new Error('Required parameter quotedCurrencyCode was null or undefined when calling apiNskV3BookingPaymentsByPaymentMethodDccGet.');
        }

        let queryParameters: string[] = [];
        if (amount !== undefined) {
            queryParameters.push("amount="+encodeURIComponent(String(amount)));
        }
        if (accountNumber !== undefined) {
            queryParameters.push("accountNumber="+encodeURIComponent(String(accountNumber)));
        }
        if (quotedCurrencyCode !== undefined) {
            queryParameters.push("quotedCurrencyCode="+encodeURIComponent(String(quotedCurrencyCode)));
        }


            const requestObj: Request<{
                paymentMethod: string, amount: number, accountNumber: string, quotedCurrencyCode: string, 
            }> = {
                url: '/api/nsk/v3/booking/payments/${encodeURIComponent(String(paymentMethod))}/dcc',
                method: 'get',
                data: {
                    paymentMethod,amount,accountNumber,quotedCurrencyCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the payment fee for the fee code.
     * 
     * @param feeCode The unique fee code identifier.
     * @param amount The amount being payed.
     * @param currencyCode The currency code. This will default to the bookings currency code.
     * @param collectedCurrencyCode The optional collected currency code. This will be needed for MCC requests.
     
     */
    public apiNskV3BookingPaymentsFeesByFeeCodeGet = (feeCode: string, amount: number, currencyCode?: string, collectedCurrencyCode?: string, ) => {
        if (!feeCode){
            throw new Error('Required parameter feeCode was null or undefined when calling apiNskV3BookingPaymentsFeesByFeeCodeGet.');
        }

        if (!amount){
            throw new Error('Required parameter amount was null or undefined when calling apiNskV3BookingPaymentsFeesByFeeCodeGet.');
        }

        let queryParameters: string[] = [];
        if (amount !== undefined) {
            queryParameters.push("amount="+encodeURIComponent(String(amount)));
        }
        if (currencyCode !== undefined) {
            queryParameters.push("currencyCode="+encodeURIComponent(String(currencyCode)));
        }
        if (collectedCurrencyCode !== undefined) {
            queryParameters.push("collectedCurrencyCode="+encodeURIComponent(String(collectedCurrencyCode)));
        }


            const requestObj: Request<{
                feeCode: string, amount: number, currencyCode?: string, collectedCurrencyCode?: string, 
            }> = {
                url: '/api/nsk/v3/booking/payments/fees/${encodeURIComponent(String(feeCode))}',
                method: 'get',
                data: {
                    feeCode,amount,currencyCode,collectedCurrencyCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Creates a new MCC payment.
     * This is affected by the booking currency code.
     * @param currencyCode The collected currency code.
     * @param request The payment method request.
     
     */
    public apiNskV3BookingPaymentsMccByCurrencyCodePost = (currencyCode: string, request?: PaymentMethodRequest, ) => {
        if (!currencyCode){
            throw new Error('Required parameter currencyCode was null or undefined when calling apiNskV3BookingPaymentsMccByCurrencyCodePost.');
        }


            const requestObj: Request<{
                currencyCode: string, request?: PaymentMethodRequest, 
            }> = {
                url: '/api/nsk/v3/booking/payments/mcc/${encodeURIComponent(String(currencyCode))}',
                method: 'post',
                data: {
                    currencyCode,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Creates a new MCC payment from a stored payment.
     * This is affected by the booking currency code.
     * @param currencyCode The collected currency code.
     * @param storedPaymentKey Stored payment key.
     * @param request The payment method request.
     
     */
    public apiNskV3BookingPaymentsMccByCurrencyCodeStoredPaymentByStoredPaymentKeyPost = (currencyCode: string, storedPaymentKey: string, request?: PaymentRequest, ) => {
        if (!currencyCode){
            throw new Error('Required parameter currencyCode was null or undefined when calling apiNskV3BookingPaymentsMccByCurrencyCodeStoredPaymentByStoredPaymentKeyPost.');
        }

        if (!storedPaymentKey){
            throw new Error('Required parameter storedPaymentKey was null or undefined when calling apiNskV3BookingPaymentsMccByCurrencyCodeStoredPaymentByStoredPaymentKeyPost.');
        }


            const requestObj: Request<{
                currencyCode: string, storedPaymentKey: string, request?: PaymentRequest, 
            }> = {
                url: '/api/nsk/v3/booking/payments/mcc/${encodeURIComponent(String(currencyCode))}/storedPayment/${encodeURIComponent(String(storedPaymentKey))}',
                method: 'post',
                data: {
                    currencyCode,storedPaymentKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets the available multi-currency codes available.
     * This is affected by the booking currency code.
     
     */
    public apiNskV3BookingPaymentsMccGet = () => {

            const requestObj: Request<{
                
            }> = {
                url: '/api/nsk/v3/booking/payments/mcc',
                method: 'get',
                data: {
                    
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Creates a refund for the booking in state.
     * Requires a booking in state. Credit shell payment types will default to a customer credit if logged in. If not  logged in a booking credit will be applied.
     * @param request 
     
     */
    public apiNskV3BookingPaymentsRefundsPost = (request?: PaymentRefundRequest, ) => {

            const requestObj: Request<{
                request?: PaymentRefundRequest, 
            }> = {
                url: '/api/nsk/v3/booking/payments/refunds',
                method: 'post',
                data: {
                    request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Creates a payment using the stored payment information for the booking in state.
     * Account Number and Expiration Date are stored.  With stored payments, payment fields may still be required to complete the transaction.  For example, a credit card that requires address information, this information is not stored with the stored  payment.
     * @param storedPaymentKey Stored payment key.
     * @param request Payment request.
     
     */
    public apiNskV3BookingPaymentsStoredPaymentByStoredPaymentKeyPost = (storedPaymentKey: string, request?: PaymentRequest, ) => {
        if (!storedPaymentKey){
            throw new Error('Required parameter storedPaymentKey was null or undefined when calling apiNskV3BookingPaymentsStoredPaymentByStoredPaymentKeyPost.');
        }


            const requestObj: Request<{
                storedPaymentKey: string, request?: PaymentRequest, 
            }> = {
                url: '/api/nsk/v3/booking/payments/storedPayment/${encodeURIComponent(String(storedPaymentKey))}',
                method: 'post',
                data: {
                    storedPaymentKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Creates a new ThreeDSecure external payment or prepaid payment on the booking in state.
     * &lt;p&gt;                      A call to payments post should be made first and processed to verify a 3DS payment is required.                  &lt;/p&gt;  &lt;p&gt;                      If you would like to make a ThreeDSecure payment, you will need to provide a valid term url.                      You will also need to have these headers populated:                      &lt;ul&gt;&lt;li&gt;                              User Agent                          &lt;/li&gt;&lt;li&gt;                              Ip Address                          &lt;/li&gt;&lt;li&gt;                              Accept                          &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;
     * @param request Payment request.
     * @param termUrl The term URL.
     
     */
    public apiNskV3BookingPaymentsThreeDSecurePost = (request?: ThreeDSecurePaymentMethodRequestv2, termUrl?: string, ) => {
        let queryParameters: string[] = [];
        if (termUrl !== undefined) {
            queryParameters.push("termUrl="+encodeURIComponent(String(termUrl)));
        }


            const requestObj: Request<{
                request?: ThreeDSecurePaymentMethodRequestv2, termUrl?: string, 
            }> = {
                url: '/api/nsk/v3/booking/payments/threeDSecure',
                method: 'post',
                data: {
                    request,termUrl,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Creates a new voucher payment on the booking in state.
     * 
     * @param request 
     
     */
    public apiNskV3BookingPaymentsVoucherPost = (request?: VoucherPaymentRequest, ) => {

            const requestObj: Request<{
                request?: VoucherPaymentRequest, 
            }> = {
                url: '/api/nsk/v3/booking/payments/voucher',
                method: 'post',
                data: {
                    request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Creates a new external payment with direct currency conversion.
     * 
     * @param dccKey 
     * @param request 
     
     */
    public apiNskV4BookingPaymentsDccByDccKeyPost = (dccKey: string, request?: DccRequestBasev2, ) => {
        if (!dccKey){
            throw new Error('Required parameter dccKey was null or undefined when calling apiNskV4BookingPaymentsDccByDccKeyPost.');
        }


            const requestObj: Request<{
                dccKey: string, request?: DccRequestBasev2, 
            }> = {
                url: '/api/nsk/v4/booking/payments/dcc/${encodeURIComponent(String(dccKey))}',
                method: 'post',
                data: {
                    dccKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }

}
