/**
 * API - Current Routes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: trunk
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from "rxjs/Observable";
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import IHttpClient from "../IHttpClient";
import { inject, injectable } from "inversify";
import { IAPIConfiguration } from "../IAPIConfiguration";
import { Headers } from "../Headers";
import HttpResponse from "../HttpResponse";

import * as Models from '../models';
import { Dictionary } from '../models';
import * as Enums from '../enums';
import { getClient, Request } from '../helper';

import { Credentials } from '../model/credentials';
import { IJsonResponse } from '../model/iJsonResponse';
import { NskSessionContext } from '../model/nskSessionContext';
import { NskTokenRequest } from '../model/nskTokenRequest';
import { ServerTransferRequest } from '../model/serverTransferRequest';
import { SingleSignOnCredentials } from '../model/singleSignOnCredentials';
import { TokenRequest } from '../model/tokenRequest';
import { TokenResponse } from '../model/tokenResponse';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class TokenService {

    constructor(@inject(HTTP_CLIENT) protected client: ApiHttpClient) {}

    /**
     * Sets the culture code for the lifetime of the token.
     * Note there is middleware that looks for \&quot;Culture\&quot; on every request in the headers or query string parameters.  These can be used if you want to set the culture for a single request only.
     * @param defaultCultureCode 
     
     */
    public apiNskV1TokenCulturePost = (defaultCultureCode?: string, ) => {
        let queryParameters: string[] = [];
        if (defaultCultureCode !== undefined) {
            queryParameters.push("defaultCultureCode="+encodeURIComponent(String(defaultCultureCode)));
        }


            const requestObj: Request<{
                defaultCultureCode?: string, 
            }> = {
                url: '/api/nsk/v1/token/culture',
                method: 'post',
                data: {
                    defaultCultureCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Abandons the active token.
     * 
     
     */
    public apiNskV1TokenDelete = () => {

            const requestObj: Request<{
                
            }> = {
                url: '/api/nsk/v1/token',
                method: 'delete',
                data: {
                    
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Get the information about the current token.
     * 
     
     */
    public apiNskV1TokenGet = () => {

            const requestObj: Request<{
                
            }> = {
                url: '/api/nsk/v1/token',
                method: 'get',
                data: {
                    
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Creates the general access token that will grant access to the API.
     * Security Note:  This endpoint has the ability to log in as any role assigned to a user  or that is allowed through impersonation settings. A user may still log  into a role that is not assigned to them if the impersonation settings  allow it.
     * @param request The nsk token request.
     
     */
    public apiNskV1TokenPost = (request?: NskTokenRequest, ) => {

            const requestObj: Request<{
                request?: NskTokenRequest, 
            }> = {
                url: '/api/nsk/v1/token',
                method: 'post',
                data: {
                    request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Given a non-null request, upgrades the current session&#39;s logged in user.  Otherwise, keeps the active token alive.
     * Security Note:  This endpoint has the ability to log in as any role assigned to a user  or that is allowed through impersonation settings. A user may still log  into a role that is not assigned to them if the impersonation settings  allow it.
     * @param request 
     
     */
    public apiNskV1TokenPut = (request?: Credentials, ) => {

            const requestObj: Request<{
                request?: Credentials, 
            }> = {
                url: '/api/nsk/v1/token',
                method: 'put',
                data: {
                    request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Transfers the server context from NewSkies and returns a new token.
     * This endpoint returns a new token.  The new token must be applied in the  authorization header to access the transferred server context.
     * @param request The server transfer request.
     
     */
    public apiNskV1TokenServerTransferPost = (request?: ServerTransferRequest, ) => {

            const requestObj: Request<{
                request?: ServerTransferRequest, 
            }> = {
                url: '/api/nsk/v1/token/serverTransfer',
                method: 'post',
                data: {
                    request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Creates the general access token that will grant access to the API.
     * In order to use single sign on, a single sign on token must first be  associated with a user.  Refer to the \&quot;user/singleSignOnToken\&quot; endpoints.
     * @param credentials The single sign on credentials.
     
     */
    public apiNskV1TokenSingleSignOnPost = (credentials?: SingleSignOnCredentials, ) => {

            const requestObj: Request<{
                credentials?: SingleSignOnCredentials, 
            }> = {
                url: '/api/nsk/v1/token/singleSignOn',
                method: 'post',
                data: {
                    credentials,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Given a non-null request, upgrades the current session&#39;s logged in user.  Otherwise, keeps the active token alive.
     * In order to use single sign on, a single sign on token must first be  associated with a user.  Refer to the \&quot;user/singleSignOnToken\&quot; endpoints.
     * @param credentials The single sign on credentials.
     
     */
    public apiNskV1TokenSingleSignOnPut = (credentials?: SingleSignOnCredentials, ) => {

            const requestObj: Request<{
                credentials?: SingleSignOnCredentials, 
            }> = {
                url: '/api/nsk/v1/token/singleSignOn',
                method: 'put',
                data: {
                    credentials,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * 
     * 
     
     */
    public apiV1TokenDelete = () => {

            const requestObj: Request<{
                
            }> = {
                url: '/api/v1/token',
                method: 'delete',
                data: {
                    
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * 
     * 
     * @param request 
     
     */
    public apiV1TokenPost = (request?: TokenRequest, ) => {

            const requestObj: Request<{
                request?: TokenRequest, 
            }> = {
                url: '/api/v1/token',
                method: 'post',
                data: {
                    request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * 
     * 
     
     */
    public apiV1TokenPut = () => {

            const requestObj: Request<{
                
            }> = {
                url: '/api/v1/token',
                method: 'put',
                data: {
                    
                }
            };
            return this.client.makeRequest(requestObj);
    }

}
