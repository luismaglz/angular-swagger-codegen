/**
 * API - Current Routes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: trunk
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from "rxjs/Observable";
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import IHttpClient from "../IHttpClient";
import { inject, injectable } from "inversify";
import { IAPIConfiguration } from "../IAPIConfiguration";
import { Headers } from "../Headers";
import HttpResponse from "../HttpResponse";

import { Account } from '../model/account';
import { DeltaMapperPersonAddressEditRequest } from '../model/deltaMapperPersonAddressEditRequest';
import { DeltaMapperPersonAliasRequest } from '../model/deltaMapperPersonAliasRequest';
import { DeltaMapperPersonCommentRequest } from '../model/deltaMapperPersonCommentRequest';
import { DeltaMapperPersonCustomerProgramEditRequest } from '../model/deltaMapperPersonCustomerProgramEditRequest';
import { DeltaMapperPersonEditRequest } from '../model/deltaMapperPersonEditRequest';
import { DeltaMapperPersonEmailEditRequest } from '../model/deltaMapperPersonEmailEditRequest';
import { DeltaMapperPersonInformationEditRequest } from '../model/deltaMapperPersonInformationEditRequest';
import { DeltaMapperPersonPhoneNumberRequest } from '../model/deltaMapperPersonPhoneNumberRequest';
import { DeltaMapperPersonPreferenceEditRequest } from '../model/deltaMapperPersonPreferenceEditRequest';
import { DeltaMapperPersonStoredPaymentUpdateRequest } from '../model/deltaMapperPersonStoredPaymentUpdateRequest';
import { DeltaMapperTravelDocumentEditRequestv2 } from '../model/deltaMapperTravelDocumentEditRequestv2';
import { DeltaMapperTravelNotificationEditRequest } from '../model/deltaMapperTravelNotificationEditRequest';
import { IJsonResponse } from '../model/iJsonResponse';
import { NotificationEvent } from '../model/notificationEvent';
import { NotificationEventCreateRequest } from '../model/notificationEventCreateRequest';
import { NotificationTimedEvent } from '../model/notificationTimedEvent';
import { NotificationTimedEventCreateRequest } from '../model/notificationTimedEventCreateRequest';
import { NotificationTimedEventEditRequest } from '../model/notificationTimedEventEditRequest';
import { Person } from '../model/person';
import { PersonAddress } from '../model/personAddress';
import { PersonAddressCreateRequest } from '../model/personAddressCreateRequest';
import { PersonAddressEditRequest } from '../model/personAddressEditRequest';
import { PersonAlias } from '../model/personAlias';
import { PersonAliasRequest } from '../model/personAliasRequest';
import { PersonComment } from '../model/personComment';
import { PersonCommentRequest } from '../model/personCommentRequest';
import { PersonCustomerProgram } from '../model/personCustomerProgram';
import { PersonCustomerProgramCreateRequest } from '../model/personCustomerProgramCreateRequest';
import { PersonCustomerProgramEditRequest } from '../model/personCustomerProgramEditRequest';
import { PersonEditRequest } from '../model/personEditRequest';
import { PersonEmail } from '../model/personEmail';
import { PersonEmailCreateRequest } from '../model/personEmailCreateRequest';
import { PersonEmailEditRequest } from '../model/personEmailEditRequest';
import { PersonInformation } from '../model/personInformation';
import { PersonInformationCreateRequest } from '../model/personInformationCreateRequest';
import { PersonInformationEditRequest } from '../model/personInformationEditRequest';
import { PersonPhoneNumber } from '../model/personPhoneNumber';
import { PersonPhoneNumberRequest } from '../model/personPhoneNumberRequest';
import { PersonPreference } from '../model/personPreference';
import { PersonPreferenceCreateRequest } from '../model/personPreferenceCreateRequest';
import { PersonPreferenceEditRequest } from '../model/personPreferenceEditRequest';
import { PersonStoredPayment } from '../model/personStoredPayment';
import { PersonStoredPaymentRequest } from '../model/personStoredPaymentRequest';
import { PersonStoredPaymentUpdateRequest } from '../model/personStoredPaymentUpdateRequest';
import { PersonTravelDocument } from '../model/personTravelDocument';
import { PersonTravelDocumentRequest } from '../model/personTravelDocumentRequest';
import { Transaction } from '../model/transaction';
import { TravelDocumentEditRequestv2 } from '../model/travelDocumentEditRequestv2';
import { TravelNotification } from '../model/travelNotification';
import { TravelNotificationCreateRequest } from '../model/travelNotificationCreateRequest';
import { TravelNotificationEditRequest } from '../model/travelNotificationEditRequest';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class UserpersonService {
    private basePath: string = 'https://localhost';

    constructor(@inject("IApiHttpClient") private httpClient: IHttpClient,
        @inject("IAPIConfiguration") private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * Retrieves the currently logged in person&#39;s account collection transactions.
     * 
     * @param accountCollectionKey The account collection key.
     * @param startTime The starting date and time of the date range to search in.
     * @param sortByNewest Optional filter to sort results by newest.
     * @param endTime The end date and time of the date range to search in.
     * @param pageSize Used to specify the number of records to return.
     * @param pageIndex Represents the index of the requested paged item.
     
     */
    public apiNskV1UserPersonAccountCollectionByAccountCollectionKeyTransactionsGet(accountCollectionKey: string, startTime: Date, sortByNewest: boolean, endTime?: Date, pageSize?: number, pageIndex?: number, observe?: 'body', headers?: Headers): Observable<Array<Transaction>>;
    public apiNskV1UserPersonAccountCollectionByAccountCollectionKeyTransactionsGet(accountCollectionKey: string, startTime: Date, sortByNewest: boolean, endTime?: Date, pageSize?: number, pageIndex?: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<Transaction>>>;
    public apiNskV1UserPersonAccountCollectionByAccountCollectionKeyTransactionsGet(accountCollectionKey: string, startTime: Date, sortByNewest: boolean, endTime?: Date, pageSize?: number, pageIndex?: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!accountCollectionKey){
            throw new Error('Required parameter accountCollectionKey was null or undefined when calling apiNskV1UserPersonAccountCollectionByAccountCollectionKeyTransactionsGet.');
        }

        if (!startTime){
            throw new Error('Required parameter startTime was null or undefined when calling apiNskV1UserPersonAccountCollectionByAccountCollectionKeyTransactionsGet.');
        }

        if (!sortByNewest){
            throw new Error('Required parameter sortByNewest was null or undefined when calling apiNskV1UserPersonAccountCollectionByAccountCollectionKeyTransactionsGet.');
        }

        let queryParameters: string[] = [];
        if (startTime !== undefined) {
           queryParameters.push("startTime="+encodeURIComponent(<any>startTime.toISOString()));
        }
        if (endTime !== undefined) {
           queryParameters.push("endTime="+encodeURIComponent(<any>endTime.toISOString()));
        }
        if (sortByNewest !== undefined) {
            queryParameters.push("sortByNewest="+encodeURIComponent(String(sortByNewest)));
        }
        if (pageSize !== undefined) {
            queryParameters.push("pageSize="+encodeURIComponent(String(pageSize)));
        }
        if (pageIndex !== undefined) {
            queryParameters.push("pageIndex="+encodeURIComponent(String(pageIndex)));
        }


        const response: Observable<HttpResponse<Array<Transaction>>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/user/person/account/collection/${encodeURIComponent(String(accountCollectionKey))}/transactions?${queryParameters.join('&')}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<Transaction>>(httpResponse.response));
        }
        return response;
    }


    /**
     * Retrieves the currently logged in person&#39;s account and collections.
     * 
     
     */
    public apiNskV1UserPersonAccountGet(observe?: 'body', headers?: Headers): Observable<Account>;
    public apiNskV1UserPersonAccountGet(observe?: 'response', headers?: Headers): Observable<HttpResponse<Account>>;
    public apiNskV1UserPersonAccountGet(observe: any = 'body', headers: Headers = {}): Observable<any> {

        const response: Observable<HttpResponse<Account>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/user/person/account`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Account>(httpResponse.response));
        }
        return response;
    }


    /**
     * Retrieves all transactions for all collections for the currently logged in person.
     * 
     * @param startTime The starting date and time of the date range to search in.
     * @param sortByNewest Optional filter to sort results by newest.
     * @param endTime The end date and time of the date range to search in.
     * @param pageSize Used to specify the number of records to return.
     * @param pageIndex Represents the index of the requested paged item.
     
     */
    public apiNskV1UserPersonAccountTransactionsGet(startTime: Date, sortByNewest: boolean, endTime?: Date, pageSize?: number, pageIndex?: number, observe?: 'body', headers?: Headers): Observable<Array<Transaction>>;
    public apiNskV1UserPersonAccountTransactionsGet(startTime: Date, sortByNewest: boolean, endTime?: Date, pageSize?: number, pageIndex?: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<Transaction>>>;
    public apiNskV1UserPersonAccountTransactionsGet(startTime: Date, sortByNewest: boolean, endTime?: Date, pageSize?: number, pageIndex?: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!startTime){
            throw new Error('Required parameter startTime was null or undefined when calling apiNskV1UserPersonAccountTransactionsGet.');
        }

        if (!sortByNewest){
            throw new Error('Required parameter sortByNewest was null or undefined when calling apiNskV1UserPersonAccountTransactionsGet.');
        }

        let queryParameters: string[] = [];
        if (startTime !== undefined) {
           queryParameters.push("startTime="+encodeURIComponent(<any>startTime.toISOString()));
        }
        if (endTime !== undefined) {
           queryParameters.push("endTime="+encodeURIComponent(<any>endTime.toISOString()));
        }
        if (sortByNewest !== undefined) {
            queryParameters.push("sortByNewest="+encodeURIComponent(String(sortByNewest)));
        }
        if (pageSize !== undefined) {
            queryParameters.push("pageSize="+encodeURIComponent(String(pageSize)));
        }
        if (pageIndex !== undefined) {
            queryParameters.push("pageIndex="+encodeURIComponent(String(pageIndex)));
        }


        const response: Observable<HttpResponse<Array<Transaction>>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/user/person/account/transactions?${queryParameters.join('&')}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<Transaction>>(httpResponse.response));
        }
        return response;
    }


    /**
     * Deletes a specific address on the logged in users person.
     * 
     * @param personAddressKey The unique person address key.
     
     */
    public apiNskV1UserPersonAddressesByPersonAddressKeyDelete(personAddressKey: string, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UserPersonAddressesByPersonAddressKeyDelete(personAddressKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UserPersonAddressesByPersonAddressKeyDelete(personAddressKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personAddressKey){
            throw new Error('Required parameter personAddressKey was null or undefined when calling apiNskV1UserPersonAddressesByPersonAddressKeyDelete.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.delete(`${this.basePath}/api/nsk/v1/user/person/addresses/${encodeURIComponent(String(personAddressKey))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets a specific address from the logged in users person.
     * 
     * @param personAddressKey The unique person address key.
     
     */
    public apiNskV1UserPersonAddressesByPersonAddressKeyGet(personAddressKey: string, observe?: 'body', headers?: Headers): Observable<PersonAddress>;
    public apiNskV1UserPersonAddressesByPersonAddressKeyGet(personAddressKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<PersonAddress>>;
    public apiNskV1UserPersonAddressesByPersonAddressKeyGet(personAddressKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personAddressKey){
            throw new Error('Required parameter personAddressKey was null or undefined when calling apiNskV1UserPersonAddressesByPersonAddressKeyGet.');
        }


        const response: Observable<HttpResponse<PersonAddress>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/user/person/addresses/${encodeURIComponent(String(personAddressKey))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <PersonAddress>(httpResponse.response));
        }
        return response;
    }


    /**
     * Patches a specific address on the logged in users person.
     * 
     * @param personAddressKey The unique person address key.
     * @param request The patched address.
     
     */
    public apiNskV1UserPersonAddressesByPersonAddressKeyPatch(personAddressKey: string, request?: DeltaMapperPersonAddressEditRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UserPersonAddressesByPersonAddressKeyPatch(personAddressKey: string, request?: DeltaMapperPersonAddressEditRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UserPersonAddressesByPersonAddressKeyPatch(personAddressKey: string, request?: DeltaMapperPersonAddressEditRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personAddressKey){
            throw new Error('Required parameter personAddressKey was null or undefined when calling apiNskV1UserPersonAddressesByPersonAddressKeyPatch.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.patch(`${this.basePath}/api/nsk/v1/user/person/addresses/${encodeURIComponent(String(personAddressKey))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Updates a specific address on the logged in users person.
     * 
     * @param personAddressKey The unique person address key.
     * @param request The modified address.
     
     */
    public apiNskV1UserPersonAddressesByPersonAddressKeyPut(personAddressKey: string, request?: PersonAddressEditRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UserPersonAddressesByPersonAddressKeyPut(personAddressKey: string, request?: PersonAddressEditRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UserPersonAddressesByPersonAddressKeyPut(personAddressKey: string, request?: PersonAddressEditRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personAddressKey){
            throw new Error('Required parameter personAddressKey was null or undefined when calling apiNskV1UserPersonAddressesByPersonAddressKeyPut.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.put(`${this.basePath}/api/nsk/v1/user/person/addresses/${encodeURIComponent(String(personAddressKey))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets all addresses from the logged in users person.
     * 
     
     */
    public apiNskV1UserPersonAddressesGet(observe?: 'body', headers?: Headers): Observable<Array<PersonAddress>>;
    public apiNskV1UserPersonAddressesGet(observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<PersonAddress>>>;
    public apiNskV1UserPersonAddressesGet(observe: any = 'body', headers: Headers = {}): Observable<any> {

        const response: Observable<HttpResponse<Array<PersonAddress>>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/user/person/addresses`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<PersonAddress>>(httpResponse.response));
        }
        return response;
    }


    /**
     * Creates a new address on the logged in users person.
     * 
     * @param request The new address.
     
     */
    public apiNskV1UserPersonAddressesPost(request?: PersonAddressCreateRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UserPersonAddressesPost(request?: PersonAddressCreateRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UserPersonAddressesPost(request?: PersonAddressCreateRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {

        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.post(`${this.basePath}/api/nsk/v1/user/person/addresses`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Deletes a specific alias on the logged in users person.
     * 
     * @param personAliasKey The unique person alias key.
     
     */
    public apiNskV1UserPersonAliasesByPersonAliasKeyDelete(personAliasKey: string, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UserPersonAliasesByPersonAliasKeyDelete(personAliasKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UserPersonAliasesByPersonAliasKeyDelete(personAliasKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personAliasKey){
            throw new Error('Required parameter personAliasKey was null or undefined when calling apiNskV1UserPersonAliasesByPersonAliasKeyDelete.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.delete(`${this.basePath}/api/nsk/v1/user/person/aliases/${encodeURIComponent(String(personAliasKey))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets a specific alias from the logged in users person.
     * 
     * @param personAliasKey The unique person alias key.
     
     */
    public apiNskV1UserPersonAliasesByPersonAliasKeyGet(personAliasKey: string, observe?: 'body', headers?: Headers): Observable<PersonAlias>;
    public apiNskV1UserPersonAliasesByPersonAliasKeyGet(personAliasKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<PersonAlias>>;
    public apiNskV1UserPersonAliasesByPersonAliasKeyGet(personAliasKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personAliasKey){
            throw new Error('Required parameter personAliasKey was null or undefined when calling apiNskV1UserPersonAliasesByPersonAliasKeyGet.');
        }


        const response: Observable<HttpResponse<PersonAlias>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/user/person/aliases/${encodeURIComponent(String(personAliasKey))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <PersonAlias>(httpResponse.response));
        }
        return response;
    }


    /**
     * Patches a specific alias on the logged in users person.
     * 
     * @param personAliasKey The unique person alias key.
     * @param request The patched alias.
     
     */
    public apiNskV1UserPersonAliasesByPersonAliasKeyPatch(personAliasKey: string, request?: DeltaMapperPersonAliasRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UserPersonAliasesByPersonAliasKeyPatch(personAliasKey: string, request?: DeltaMapperPersonAliasRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UserPersonAliasesByPersonAliasKeyPatch(personAliasKey: string, request?: DeltaMapperPersonAliasRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personAliasKey){
            throw new Error('Required parameter personAliasKey was null or undefined when calling apiNskV1UserPersonAliasesByPersonAliasKeyPatch.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.patch(`${this.basePath}/api/nsk/v1/user/person/aliases/${encodeURIComponent(String(personAliasKey))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Updates a specific alias on the logged in users person.
     * 
     * @param personAliasKey The unique person alias key.
     * @param request The modified alias.
     
     */
    public apiNskV1UserPersonAliasesByPersonAliasKeyPut(personAliasKey: string, request?: PersonAliasRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UserPersonAliasesByPersonAliasKeyPut(personAliasKey: string, request?: PersonAliasRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UserPersonAliasesByPersonAliasKeyPut(personAliasKey: string, request?: PersonAliasRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personAliasKey){
            throw new Error('Required parameter personAliasKey was null or undefined when calling apiNskV1UserPersonAliasesByPersonAliasKeyPut.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.put(`${this.basePath}/api/nsk/v1/user/person/aliases/${encodeURIComponent(String(personAliasKey))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets all aliases from the logged in users person.
     * 
     
     */
    public apiNskV1UserPersonAliasesGet(observe?: 'body', headers?: Headers): Observable<Array<PersonAlias>>;
    public apiNskV1UserPersonAliasesGet(observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<PersonAlias>>>;
    public apiNskV1UserPersonAliasesGet(observe: any = 'body', headers: Headers = {}): Observable<any> {

        const response: Observable<HttpResponse<Array<PersonAlias>>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/user/person/aliases`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<PersonAlias>>(httpResponse.response));
        }
        return response;
    }


    /**
     * Creates a new alias on the logged in users person.
     * 
     * @param request The new alias.
     
     */
    public apiNskV1UserPersonAliasesPost(request?: PersonAliasRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UserPersonAliasesPost(request?: PersonAliasRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UserPersonAliasesPost(request?: PersonAliasRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {

        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.post(`${this.basePath}/api/nsk/v1/user/person/aliases`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Deletes a specific comment on the logged in users person.
     * 
     * @param personCommentKey The unique person comment key.
     
     */
    public apiNskV1UserPersonCommentsByPersonCommentKeyDelete(personCommentKey: string, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UserPersonCommentsByPersonCommentKeyDelete(personCommentKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UserPersonCommentsByPersonCommentKeyDelete(personCommentKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personCommentKey){
            throw new Error('Required parameter personCommentKey was null or undefined when calling apiNskV1UserPersonCommentsByPersonCommentKeyDelete.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.delete(`${this.basePath}/api/nsk/v1/user/person/comments/${encodeURIComponent(String(personCommentKey))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets a specific comment from the logged in users person.
     * 
     * @param personCommentKey The unique person comment key.
     
     */
    public apiNskV1UserPersonCommentsByPersonCommentKeyGet(personCommentKey: string, observe?: 'body', headers?: Headers): Observable<PersonComment>;
    public apiNskV1UserPersonCommentsByPersonCommentKeyGet(personCommentKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<PersonComment>>;
    public apiNskV1UserPersonCommentsByPersonCommentKeyGet(personCommentKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personCommentKey){
            throw new Error('Required parameter personCommentKey was null or undefined when calling apiNskV1UserPersonCommentsByPersonCommentKeyGet.');
        }


        const response: Observable<HttpResponse<PersonComment>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/user/person/comments/${encodeURIComponent(String(personCommentKey))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <PersonComment>(httpResponse.response));
        }
        return response;
    }


    /**
     * Patches a specific comment on the logged in users person.
     * 
     * @param personCommentKey The unique person comment key.
     * @param request The patched comment.
     
     */
    public apiNskV1UserPersonCommentsByPersonCommentKeyPatch(personCommentKey: string, request?: DeltaMapperPersonCommentRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UserPersonCommentsByPersonCommentKeyPatch(personCommentKey: string, request?: DeltaMapperPersonCommentRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UserPersonCommentsByPersonCommentKeyPatch(personCommentKey: string, request?: DeltaMapperPersonCommentRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personCommentKey){
            throw new Error('Required parameter personCommentKey was null or undefined when calling apiNskV1UserPersonCommentsByPersonCommentKeyPatch.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.patch(`${this.basePath}/api/nsk/v1/user/person/comments/${encodeURIComponent(String(personCommentKey))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Updates a specific comment on the logged in users person.
     * 
     * @param personCommentKey The unique person comment key.
     * @param request The modified comment.
     
     */
    public apiNskV1UserPersonCommentsByPersonCommentKeyPut(personCommentKey: string, request?: PersonCommentRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UserPersonCommentsByPersonCommentKeyPut(personCommentKey: string, request?: PersonCommentRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UserPersonCommentsByPersonCommentKeyPut(personCommentKey: string, request?: PersonCommentRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personCommentKey){
            throw new Error('Required parameter personCommentKey was null or undefined when calling apiNskV1UserPersonCommentsByPersonCommentKeyPut.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.put(`${this.basePath}/api/nsk/v1/user/person/comments/${encodeURIComponent(String(personCommentKey))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets all comments from the logged in users person.
     * 
     
     */
    public apiNskV1UserPersonCommentsGet(observe?: 'body', headers?: Headers): Observable<Array<PersonComment>>;
    public apiNskV1UserPersonCommentsGet(observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<PersonComment>>>;
    public apiNskV1UserPersonCommentsGet(observe: any = 'body', headers: Headers = {}): Observable<any> {

        const response: Observable<HttpResponse<Array<PersonComment>>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/user/person/comments`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<PersonComment>>(httpResponse.response));
        }
        return response;
    }


    /**
     * Creates a new comment on the logged in users person.
     * 
     * @param request The new comment.
     
     */
    public apiNskV1UserPersonCommentsPost(request?: PersonCommentRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UserPersonCommentsPost(request?: PersonCommentRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UserPersonCommentsPost(request?: PersonCommentRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {

        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.post(`${this.basePath}/api/nsk/v1/user/person/comments`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Deletes a specific email address on the logged in user&#39;s person.
     * 
     * @param personEmailAddressKey The unique person email address key.
     
     */
    public apiNskV1UserPersonEmailsByPersonEmailAddressKeyDelete(personEmailAddressKey: string, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UserPersonEmailsByPersonEmailAddressKeyDelete(personEmailAddressKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UserPersonEmailsByPersonEmailAddressKeyDelete(personEmailAddressKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personEmailAddressKey){
            throw new Error('Required parameter personEmailAddressKey was null or undefined when calling apiNskV1UserPersonEmailsByPersonEmailAddressKeyDelete.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.delete(`${this.basePath}/api/nsk/v1/user/person/emails/${encodeURIComponent(String(personEmailAddressKey))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets a specific email address from the logged in user&#39;s person.
     * 
     * @param personEmailAddressKey The unique person email address key.
     
     */
    public apiNskV1UserPersonEmailsByPersonEmailAddressKeyGet(personEmailAddressKey: string, observe?: 'body', headers?: Headers): Observable<PersonEmail>;
    public apiNskV1UserPersonEmailsByPersonEmailAddressKeyGet(personEmailAddressKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<PersonEmail>>;
    public apiNskV1UserPersonEmailsByPersonEmailAddressKeyGet(personEmailAddressKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personEmailAddressKey){
            throw new Error('Required parameter personEmailAddressKey was null or undefined when calling apiNskV1UserPersonEmailsByPersonEmailAddressKeyGet.');
        }


        const response: Observable<HttpResponse<PersonEmail>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/user/person/emails/${encodeURIComponent(String(personEmailAddressKey))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <PersonEmail>(httpResponse.response));
        }
        return response;
    }


    /**
     * Patches a specific email address on the logged in user&#39;s person.
     * 
     * @param personEmailAddressKey The unique person email address key.
     * @param request The patched email address.
     
     */
    public apiNskV1UserPersonEmailsByPersonEmailAddressKeyPatch(personEmailAddressKey: string, request?: DeltaMapperPersonEmailEditRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UserPersonEmailsByPersonEmailAddressKeyPatch(personEmailAddressKey: string, request?: DeltaMapperPersonEmailEditRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UserPersonEmailsByPersonEmailAddressKeyPatch(personEmailAddressKey: string, request?: DeltaMapperPersonEmailEditRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personEmailAddressKey){
            throw new Error('Required parameter personEmailAddressKey was null or undefined when calling apiNskV1UserPersonEmailsByPersonEmailAddressKeyPatch.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.patch(`${this.basePath}/api/nsk/v1/user/person/emails/${encodeURIComponent(String(personEmailAddressKey))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Updates a specific email address on the logged in user&#39;s person.
     * 
     * @param personEmailAddressKey The unique person email address key.
     * @param request The modified email address.
     
     */
    public apiNskV1UserPersonEmailsByPersonEmailAddressKeyPut(personEmailAddressKey: string, request?: PersonEmailEditRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UserPersonEmailsByPersonEmailAddressKeyPut(personEmailAddressKey: string, request?: PersonEmailEditRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UserPersonEmailsByPersonEmailAddressKeyPut(personEmailAddressKey: string, request?: PersonEmailEditRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personEmailAddressKey){
            throw new Error('Required parameter personEmailAddressKey was null or undefined when calling apiNskV1UserPersonEmailsByPersonEmailAddressKeyPut.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.put(`${this.basePath}/api/nsk/v1/user/person/emails/${encodeURIComponent(String(personEmailAddressKey))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets all email addresses from the logged in user&#39;s person.
     * 
     
     */
    public apiNskV1UserPersonEmailsGet(observe?: 'body', headers?: Headers): Observable<Array<PersonEmail>>;
    public apiNskV1UserPersonEmailsGet(observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<PersonEmail>>>;
    public apiNskV1UserPersonEmailsGet(observe: any = 'body', headers: Headers = {}): Observable<any> {

        const response: Observable<HttpResponse<Array<PersonEmail>>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/user/person/emails`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<PersonEmail>>(httpResponse.response));
        }
        return response;
    }


    /**
     * Creates a new email address on the logged in user&#39;s person.
     * 
     * @param request The new email address.
     
     */
    public apiNskV1UserPersonEmailsPost(request?: PersonEmailCreateRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UserPersonEmailsPost(request?: PersonEmailCreateRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UserPersonEmailsPost(request?: PersonEmailCreateRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {

        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.post(`${this.basePath}/api/nsk/v1/user/person/emails`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Retrieves the current logged in person.
     * 
     
     */
    public apiNskV1UserPersonGet(observe?: 'body', headers?: Headers): Observable<Person>;
    public apiNskV1UserPersonGet(observe?: 'response', headers?: Headers): Observable<HttpResponse<Person>>;
    public apiNskV1UserPersonGet(observe: any = 'body', headers: Headers = {}): Observable<any> {

        const response: Observable<HttpResponse<Person>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/user/person`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Person>(httpResponse.response));
        }
        return response;
    }


    /**
     * Deletes a specific information on the logged in user&#39;s person.
     * 
     * @param personInformationKey The unique person information key.
     
     */
    public apiNskV1UserPersonInformationByPersonInformationKeyDelete(personInformationKey: string, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UserPersonInformationByPersonInformationKeyDelete(personInformationKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UserPersonInformationByPersonInformationKeyDelete(personInformationKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personInformationKey){
            throw new Error('Required parameter personInformationKey was null or undefined when calling apiNskV1UserPersonInformationByPersonInformationKeyDelete.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.delete(`${this.basePath}/api/nsk/v1/user/person/information/${encodeURIComponent(String(personInformationKey))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets a specific information from the logged in user&#39;s person.
     * 
     * @param personInformationKey The unique person information key.
     
     */
    public apiNskV1UserPersonInformationByPersonInformationKeyGet(personInformationKey: string, observe?: 'body', headers?: Headers): Observable<PersonInformation>;
    public apiNskV1UserPersonInformationByPersonInformationKeyGet(personInformationKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<PersonInformation>>;
    public apiNskV1UserPersonInformationByPersonInformationKeyGet(personInformationKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personInformationKey){
            throw new Error('Required parameter personInformationKey was null or undefined when calling apiNskV1UserPersonInformationByPersonInformationKeyGet.');
        }


        const response: Observable<HttpResponse<PersonInformation>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/user/person/information/${encodeURIComponent(String(personInformationKey))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <PersonInformation>(httpResponse.response));
        }
        return response;
    }


    /**
     * Patches a specific information on the logged in user&#39;s person.
     * 
     * @param personInformationKey The unique person information key.
     * @param request The patched information.
     
     */
    public apiNskV1UserPersonInformationByPersonInformationKeyPatch(personInformationKey: string, request?: DeltaMapperPersonInformationEditRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UserPersonInformationByPersonInformationKeyPatch(personInformationKey: string, request?: DeltaMapperPersonInformationEditRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UserPersonInformationByPersonInformationKeyPatch(personInformationKey: string, request?: DeltaMapperPersonInformationEditRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personInformationKey){
            throw new Error('Required parameter personInformationKey was null or undefined when calling apiNskV1UserPersonInformationByPersonInformationKeyPatch.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.patch(`${this.basePath}/api/nsk/v1/user/person/information/${encodeURIComponent(String(personInformationKey))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Updates a specific information on the logged in user&#39;s person.
     * 
     * @param personInformationKey The unique person information key.
     * @param request The modified information.
     
     */
    public apiNskV1UserPersonInformationByPersonInformationKeyPut(personInformationKey: string, request?: PersonInformationEditRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UserPersonInformationByPersonInformationKeyPut(personInformationKey: string, request?: PersonInformationEditRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UserPersonInformationByPersonInformationKeyPut(personInformationKey: string, request?: PersonInformationEditRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personInformationKey){
            throw new Error('Required parameter personInformationKey was null or undefined when calling apiNskV1UserPersonInformationByPersonInformationKeyPut.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.put(`${this.basePath}/api/nsk/v1/user/person/information/${encodeURIComponent(String(personInformationKey))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets all information from the logged in user&#39;s person.
     * 
     
     */
    public apiNskV1UserPersonInformationGet(observe?: 'body', headers?: Headers): Observable<Array<PersonInformation>>;
    public apiNskV1UserPersonInformationGet(observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<PersonInformation>>>;
    public apiNskV1UserPersonInformationGet(observe: any = 'body', headers: Headers = {}): Observable<any> {

        const response: Observable<HttpResponse<Array<PersonInformation>>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/user/person/information`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<PersonInformation>>(httpResponse.response));
        }
        return response;
    }


    /**
     * Creates a new information on the logged in user&#39;s person.
     * 
     * @param request The new information.
     
     */
    public apiNskV1UserPersonInformationPost(request?: PersonInformationCreateRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UserPersonInformationPost(request?: PersonInformationCreateRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UserPersonInformationPost(request?: PersonInformationCreateRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {

        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.post(`${this.basePath}/api/nsk/v1/user/person/information`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Patches the current logged in person records basic information.
     * 
     * @param request The person patch request.
     
     */
    public apiNskV1UserPersonPatch(request?: DeltaMapperPersonEditRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UserPersonPatch(request?: DeltaMapperPersonEditRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UserPersonPatch(request?: DeltaMapperPersonEditRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {

        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.patch(`${this.basePath}/api/nsk/v1/user/person`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Deletes a specific phone number on the logged in users person.
     * 
     * @param personPhoneNumberKey The unique person phone number key.
     
     */
    public apiNskV1UserPersonPhoneNumbersByPersonPhoneNumberKeyDelete(personPhoneNumberKey: string, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UserPersonPhoneNumbersByPersonPhoneNumberKeyDelete(personPhoneNumberKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UserPersonPhoneNumbersByPersonPhoneNumberKeyDelete(personPhoneNumberKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personPhoneNumberKey){
            throw new Error('Required parameter personPhoneNumberKey was null or undefined when calling apiNskV1UserPersonPhoneNumbersByPersonPhoneNumberKeyDelete.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.delete(`${this.basePath}/api/nsk/v1/user/person/phoneNumbers/${encodeURIComponent(String(personPhoneNumberKey))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets a specific phone number from the logged in users person.
     * 
     * @param personPhoneNumberKey The unique person phone number key.
     
     */
    public apiNskV1UserPersonPhoneNumbersByPersonPhoneNumberKeyGet(personPhoneNumberKey: string, observe?: 'body', headers?: Headers): Observable<PersonPhoneNumber>;
    public apiNskV1UserPersonPhoneNumbersByPersonPhoneNumberKeyGet(personPhoneNumberKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<PersonPhoneNumber>>;
    public apiNskV1UserPersonPhoneNumbersByPersonPhoneNumberKeyGet(personPhoneNumberKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personPhoneNumberKey){
            throw new Error('Required parameter personPhoneNumberKey was null or undefined when calling apiNskV1UserPersonPhoneNumbersByPersonPhoneNumberKeyGet.');
        }


        const response: Observable<HttpResponse<PersonPhoneNumber>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/user/person/phoneNumbers/${encodeURIComponent(String(personPhoneNumberKey))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <PersonPhoneNumber>(httpResponse.response));
        }
        return response;
    }


    /**
     * Patches a specific phone number on the logged in users person.
     * 
     * @param personPhoneNumberKey The unique person phone number key.
     * @param request The patched phone number.
     
     */
    public apiNskV1UserPersonPhoneNumbersByPersonPhoneNumberKeyPatch(personPhoneNumberKey: string, request?: DeltaMapperPersonPhoneNumberRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UserPersonPhoneNumbersByPersonPhoneNumberKeyPatch(personPhoneNumberKey: string, request?: DeltaMapperPersonPhoneNumberRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UserPersonPhoneNumbersByPersonPhoneNumberKeyPatch(personPhoneNumberKey: string, request?: DeltaMapperPersonPhoneNumberRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personPhoneNumberKey){
            throw new Error('Required parameter personPhoneNumberKey was null or undefined when calling apiNskV1UserPersonPhoneNumbersByPersonPhoneNumberKeyPatch.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.patch(`${this.basePath}/api/nsk/v1/user/person/phoneNumbers/${encodeURIComponent(String(personPhoneNumberKey))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Updates a specific phone number on the logged in users person.
     * 
     * @param personPhoneNumberKey The unique person phone number key.
     * @param request The modified phone number.
     
     */
    public apiNskV1UserPersonPhoneNumbersByPersonPhoneNumberKeyPut(personPhoneNumberKey: string, request?: PersonPhoneNumberRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UserPersonPhoneNumbersByPersonPhoneNumberKeyPut(personPhoneNumberKey: string, request?: PersonPhoneNumberRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UserPersonPhoneNumbersByPersonPhoneNumberKeyPut(personPhoneNumberKey: string, request?: PersonPhoneNumberRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personPhoneNumberKey){
            throw new Error('Required parameter personPhoneNumberKey was null or undefined when calling apiNskV1UserPersonPhoneNumbersByPersonPhoneNumberKeyPut.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.put(`${this.basePath}/api/nsk/v1/user/person/phoneNumbers/${encodeURIComponent(String(personPhoneNumberKey))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets all phone numbers from the logged in users person.
     * 
     
     */
    public apiNskV1UserPersonPhoneNumbersGet(observe?: 'body', headers?: Headers): Observable<Array<PersonPhoneNumber>>;
    public apiNskV1UserPersonPhoneNumbersGet(observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<PersonPhoneNumber>>>;
    public apiNskV1UserPersonPhoneNumbersGet(observe: any = 'body', headers: Headers = {}): Observable<any> {

        const response: Observable<HttpResponse<Array<PersonPhoneNumber>>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/user/person/phoneNumbers`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<PersonPhoneNumber>>(httpResponse.response));
        }
        return response;
    }


    /**
     * Creates a new phone number on the logged in users person.
     * 
     * @param request The new phone number.
     
     */
    public apiNskV1UserPersonPhoneNumbersPost(request?: PersonPhoneNumberRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UserPersonPhoneNumbersPost(request?: PersonPhoneNumberRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UserPersonPhoneNumbersPost(request?: PersonPhoneNumberRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {

        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.post(`${this.basePath}/api/nsk/v1/user/person/phoneNumbers`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Deletes a specific preference on the logged in users person.
     * 
     * @param personPreferenceKey The unique person preference key.
     
     */
    public apiNskV1UserPersonPreferencesByPersonPreferenceKeyDelete(personPreferenceKey: string, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UserPersonPreferencesByPersonPreferenceKeyDelete(personPreferenceKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UserPersonPreferencesByPersonPreferenceKeyDelete(personPreferenceKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personPreferenceKey){
            throw new Error('Required parameter personPreferenceKey was null or undefined when calling apiNskV1UserPersonPreferencesByPersonPreferenceKeyDelete.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.delete(`${this.basePath}/api/nsk/v1/user/person/preferences/${encodeURIComponent(String(personPreferenceKey))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets a specific preference from the logged in users person.
     * 
     * @param personPreferenceKey The unique person preference key.
     
     */
    public apiNskV1UserPersonPreferencesByPersonPreferenceKeyGet(personPreferenceKey: string, observe?: 'body', headers?: Headers): Observable<PersonPreference>;
    public apiNskV1UserPersonPreferencesByPersonPreferenceKeyGet(personPreferenceKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<PersonPreference>>;
    public apiNskV1UserPersonPreferencesByPersonPreferenceKeyGet(personPreferenceKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personPreferenceKey){
            throw new Error('Required parameter personPreferenceKey was null or undefined when calling apiNskV1UserPersonPreferencesByPersonPreferenceKeyGet.');
        }


        const response: Observable<HttpResponse<PersonPreference>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/user/person/preferences/${encodeURIComponent(String(personPreferenceKey))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <PersonPreference>(httpResponse.response));
        }
        return response;
    }


    /**
     * Patches a specific preference on the logged in users person.
     * 
     * @param personPreferenceKey The unique person preference key.
     * @param request The patched preference.
     
     */
    public apiNskV1UserPersonPreferencesByPersonPreferenceKeyPatch(personPreferenceKey: string, request?: DeltaMapperPersonPreferenceEditRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UserPersonPreferencesByPersonPreferenceKeyPatch(personPreferenceKey: string, request?: DeltaMapperPersonPreferenceEditRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UserPersonPreferencesByPersonPreferenceKeyPatch(personPreferenceKey: string, request?: DeltaMapperPersonPreferenceEditRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personPreferenceKey){
            throw new Error('Required parameter personPreferenceKey was null or undefined when calling apiNskV1UserPersonPreferencesByPersonPreferenceKeyPatch.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.patch(`${this.basePath}/api/nsk/v1/user/person/preferences/${encodeURIComponent(String(personPreferenceKey))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Updates a specific preference on the logged in users person.
     * 
     * @param personPreferenceKey The unique person preference key.
     * @param request The modified preference.
     
     */
    public apiNskV1UserPersonPreferencesByPersonPreferenceKeyPut(personPreferenceKey: string, request?: PersonPreferenceEditRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UserPersonPreferencesByPersonPreferenceKeyPut(personPreferenceKey: string, request?: PersonPreferenceEditRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UserPersonPreferencesByPersonPreferenceKeyPut(personPreferenceKey: string, request?: PersonPreferenceEditRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personPreferenceKey){
            throw new Error('Required parameter personPreferenceKey was null or undefined when calling apiNskV1UserPersonPreferencesByPersonPreferenceKeyPut.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.put(`${this.basePath}/api/nsk/v1/user/person/preferences/${encodeURIComponent(String(personPreferenceKey))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets all preferences from the logged in users person.
     * 
     
     */
    public apiNskV1UserPersonPreferencesGet(observe?: 'body', headers?: Headers): Observable<Array<PersonPreference>>;
    public apiNskV1UserPersonPreferencesGet(observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<PersonPreference>>>;
    public apiNskV1UserPersonPreferencesGet(observe: any = 'body', headers: Headers = {}): Observable<any> {

        const response: Observable<HttpResponse<Array<PersonPreference>>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/user/person/preferences`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<PersonPreference>>(httpResponse.response));
        }
        return response;
    }


    /**
     * Creates a new preference on the logged in users person.
     * 
     * @param request The new preference.
     
     */
    public apiNskV1UserPersonPreferencesPost(request?: PersonPreferenceCreateRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UserPersonPreferencesPost(request?: PersonPreferenceCreateRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UserPersonPreferencesPost(request?: PersonPreferenceCreateRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {

        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.post(`${this.basePath}/api/nsk/v1/user/person/preferences`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Deletes a specific program on the logged in users person.
     * 
     * @param personProgramKey The unique person address key.
     
     */
    public apiNskV1UserPersonProgramsByPersonProgramKeyDelete(personProgramKey: string, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UserPersonProgramsByPersonProgramKeyDelete(personProgramKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UserPersonProgramsByPersonProgramKeyDelete(personProgramKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personProgramKey){
            throw new Error('Required parameter personProgramKey was null or undefined when calling apiNskV1UserPersonProgramsByPersonProgramKeyDelete.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.delete(`${this.basePath}/api/nsk/v1/user/person/programs/${encodeURIComponent(String(personProgramKey))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets a specific program from the logged in users person.
     * 
     * @param personProgramKey The unique person program key.
     
     */
    public apiNskV1UserPersonProgramsByPersonProgramKeyGet(personProgramKey: string, observe?: 'body', headers?: Headers): Observable<PersonCustomerProgram>;
    public apiNskV1UserPersonProgramsByPersonProgramKeyGet(personProgramKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<PersonCustomerProgram>>;
    public apiNskV1UserPersonProgramsByPersonProgramKeyGet(personProgramKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personProgramKey){
            throw new Error('Required parameter personProgramKey was null or undefined when calling apiNskV1UserPersonProgramsByPersonProgramKeyGet.');
        }


        const response: Observable<HttpResponse<PersonCustomerProgram>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/user/person/programs/${encodeURIComponent(String(personProgramKey))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <PersonCustomerProgram>(httpResponse.response));
        }
        return response;
    }


    /**
     * Patches a specific program on the logged in users person.
     * 
     * @param personProgramKey The unique person program key.
     * @param request The patched program.
     
     */
    public apiNskV1UserPersonProgramsByPersonProgramKeyPatch(personProgramKey: string, request?: DeltaMapperPersonCustomerProgramEditRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UserPersonProgramsByPersonProgramKeyPatch(personProgramKey: string, request?: DeltaMapperPersonCustomerProgramEditRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UserPersonProgramsByPersonProgramKeyPatch(personProgramKey: string, request?: DeltaMapperPersonCustomerProgramEditRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personProgramKey){
            throw new Error('Required parameter personProgramKey was null or undefined when calling apiNskV1UserPersonProgramsByPersonProgramKeyPatch.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.patch(`${this.basePath}/api/nsk/v1/user/person/programs/${encodeURIComponent(String(personProgramKey))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Updates a specific program on the logged in users person.
     * 
     * @param personProgramKey The unique person program key.
     * @param request The modified program.
     
     */
    public apiNskV1UserPersonProgramsByPersonProgramKeyPut(personProgramKey: string, request?: PersonCustomerProgramEditRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UserPersonProgramsByPersonProgramKeyPut(personProgramKey: string, request?: PersonCustomerProgramEditRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UserPersonProgramsByPersonProgramKeyPut(personProgramKey: string, request?: PersonCustomerProgramEditRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personProgramKey){
            throw new Error('Required parameter personProgramKey was null or undefined when calling apiNskV1UserPersonProgramsByPersonProgramKeyPut.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.put(`${this.basePath}/api/nsk/v1/user/person/programs/${encodeURIComponent(String(personProgramKey))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets all programs from the logged in users person.
     * 
     
     */
    public apiNskV1UserPersonProgramsGet(observe?: 'body', headers?: Headers): Observable<Array<PersonCustomerProgram>>;
    public apiNskV1UserPersonProgramsGet(observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<PersonCustomerProgram>>>;
    public apiNskV1UserPersonProgramsGet(observe: any = 'body', headers: Headers = {}): Observable<any> {

        const response: Observable<HttpResponse<Array<PersonCustomerProgram>>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/user/person/programs`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<PersonCustomerProgram>>(httpResponse.response));
        }
        return response;
    }


    /**
     * Creates a new program on the logged in users person.
     * 
     * @param request The new program.
     
     */
    public apiNskV1UserPersonProgramsPost(request?: PersonCustomerProgramCreateRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UserPersonProgramsPost(request?: PersonCustomerProgramCreateRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UserPersonProgramsPost(request?: PersonCustomerProgramCreateRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {

        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.post(`${this.basePath}/api/nsk/v1/user/person/programs`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Updates the current logged in person record basic information.
     * 
     * @param request The person edit request.
     
     */
    public apiNskV1UserPersonPut(request?: PersonEditRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UserPersonPut(request?: PersonEditRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UserPersonPut(request?: PersonEditRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {

        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.put(`${this.basePath}/api/nsk/v1/user/person`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Deletes a specific stored payment on the logged in users person.
     * 
     * @param personStoredPaymentKey The unique person stored payment key.
     
     */
    public apiNskV1UserPersonStoredPaymentsByPersonStoredPaymentKeyDelete(personStoredPaymentKey: string, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UserPersonStoredPaymentsByPersonStoredPaymentKeyDelete(personStoredPaymentKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UserPersonStoredPaymentsByPersonStoredPaymentKeyDelete(personStoredPaymentKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personStoredPaymentKey){
            throw new Error('Required parameter personStoredPaymentKey was null or undefined when calling apiNskV1UserPersonStoredPaymentsByPersonStoredPaymentKeyDelete.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.delete(`${this.basePath}/api/nsk/v1/user/person/storedPayments/${encodeURIComponent(String(personStoredPaymentKey))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets a specific stored payment from the logged in users person.
     * 
     * @param personStoredPaymentKey The unique person stored payment key.
     
     */
    public apiNskV1UserPersonStoredPaymentsByPersonStoredPaymentKeyGet(personStoredPaymentKey: string, observe?: 'body', headers?: Headers): Observable<PersonStoredPayment>;
    public apiNskV1UserPersonStoredPaymentsByPersonStoredPaymentKeyGet(personStoredPaymentKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<PersonStoredPayment>>;
    public apiNskV1UserPersonStoredPaymentsByPersonStoredPaymentKeyGet(personStoredPaymentKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personStoredPaymentKey){
            throw new Error('Required parameter personStoredPaymentKey was null or undefined when calling apiNskV1UserPersonStoredPaymentsByPersonStoredPaymentKeyGet.');
        }


        const response: Observable<HttpResponse<PersonStoredPayment>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/user/person/storedPayments/${encodeURIComponent(String(personStoredPaymentKey))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <PersonStoredPayment>(httpResponse.response));
        }
        return response;
    }


    /**
     * Patches a specific stored payment on the logged in users person.
     * 
     * @param personStoredPaymentKey The unique person stored payment key.
     * @param request The patched stored payment.
     
     */
    public apiNskV1UserPersonStoredPaymentsByPersonStoredPaymentKeyPatch(personStoredPaymentKey: string, request?: DeltaMapperPersonStoredPaymentUpdateRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UserPersonStoredPaymentsByPersonStoredPaymentKeyPatch(personStoredPaymentKey: string, request?: DeltaMapperPersonStoredPaymentUpdateRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UserPersonStoredPaymentsByPersonStoredPaymentKeyPatch(personStoredPaymentKey: string, request?: DeltaMapperPersonStoredPaymentUpdateRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personStoredPaymentKey){
            throw new Error('Required parameter personStoredPaymentKey was null or undefined when calling apiNskV1UserPersonStoredPaymentsByPersonStoredPaymentKeyPatch.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.patch(`${this.basePath}/api/nsk/v1/user/person/storedPayments/${encodeURIComponent(String(personStoredPaymentKey))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Updates a specific stored payment on the logged in users person.
     * 
     * @param personStoredPaymentKey The unique person stored payment key.
     * @param request The modified stored payment.
     
     */
    public apiNskV1UserPersonStoredPaymentsByPersonStoredPaymentKeyPut(personStoredPaymentKey: string, request?: PersonStoredPaymentUpdateRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UserPersonStoredPaymentsByPersonStoredPaymentKeyPut(personStoredPaymentKey: string, request?: PersonStoredPaymentUpdateRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UserPersonStoredPaymentsByPersonStoredPaymentKeyPut(personStoredPaymentKey: string, request?: PersonStoredPaymentUpdateRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personStoredPaymentKey){
            throw new Error('Required parameter personStoredPaymentKey was null or undefined when calling apiNskV1UserPersonStoredPaymentsByPersonStoredPaymentKeyPut.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.put(`${this.basePath}/api/nsk/v1/user/person/storedPayments/${encodeURIComponent(String(personStoredPaymentKey))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets all stored payments from the logged in users person.
     * 
     
     */
    public apiNskV1UserPersonStoredPaymentsGet(observe?: 'body', headers?: Headers): Observable<Array<PersonStoredPayment>>;
    public apiNskV1UserPersonStoredPaymentsGet(observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<PersonStoredPayment>>>;
    public apiNskV1UserPersonStoredPaymentsGet(observe: any = 'body', headers: Headers = {}): Observable<any> {

        const response: Observable<HttpResponse<Array<PersonStoredPayment>>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/user/person/storedPayments`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<PersonStoredPayment>>(httpResponse.response));
        }
        return response;
    }


    /**
     * Creates a new stored payment on the logged in users person.
     * 
     * @param request The new stored payment.
     
     */
    public apiNskV1UserPersonStoredPaymentsPost(request?: PersonStoredPaymentRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UserPersonStoredPaymentsPost(request?: PersonStoredPaymentRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UserPersonStoredPaymentsPost(request?: PersonStoredPaymentRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {

        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.post(`${this.basePath}/api/nsk/v1/user/person/storedPayments`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Deletes a specific travel document on the logged in users person.
     * 
     * @param personTravelDocumentKey The unique person travel document key.
     
     */
    public apiNskV1UserPersonTravelDocumentsByPersonTravelDocumentKeyDelete(personTravelDocumentKey: string, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UserPersonTravelDocumentsByPersonTravelDocumentKeyDelete(personTravelDocumentKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UserPersonTravelDocumentsByPersonTravelDocumentKeyDelete(personTravelDocumentKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personTravelDocumentKey){
            throw new Error('Required parameter personTravelDocumentKey was null or undefined when calling apiNskV1UserPersonTravelDocumentsByPersonTravelDocumentKeyDelete.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.delete(`${this.basePath}/api/nsk/v1/user/person/travelDocuments/${encodeURIComponent(String(personTravelDocumentKey))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets a specific travel document from the logged in users person.
     * 
     * @param personTravelDocumentKey The unique person travel document key.
     
     */
    public apiNskV1UserPersonTravelDocumentsByPersonTravelDocumentKeyGet(personTravelDocumentKey: string, observe?: 'body', headers?: Headers): Observable<PersonTravelDocument>;
    public apiNskV1UserPersonTravelDocumentsByPersonTravelDocumentKeyGet(personTravelDocumentKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<PersonTravelDocument>>;
    public apiNskV1UserPersonTravelDocumentsByPersonTravelDocumentKeyGet(personTravelDocumentKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personTravelDocumentKey){
            throw new Error('Required parameter personTravelDocumentKey was null or undefined when calling apiNskV1UserPersonTravelDocumentsByPersonTravelDocumentKeyGet.');
        }


        const response: Observable<HttpResponse<PersonTravelDocument>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/user/person/travelDocuments/${encodeURIComponent(String(personTravelDocumentKey))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <PersonTravelDocument>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets all travel documents from the logged in users person.
     * 
     
     */
    public apiNskV1UserPersonTravelDocumentsGet(observe?: 'body', headers?: Headers): Observable<Array<PersonTravelDocument>>;
    public apiNskV1UserPersonTravelDocumentsGet(observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<PersonTravelDocument>>>;
    public apiNskV1UserPersonTravelDocumentsGet(observe: any = 'body', headers: Headers = {}): Observable<any> {

        const response: Observable<HttpResponse<Array<PersonTravelDocument>>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/user/person/travelDocuments`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<PersonTravelDocument>>(httpResponse.response));
        }
        return response;
    }


    /**
     * Creates a new travel document on the logged in users person.
     * 
     * @param request The new travel document.
     
     */
    public apiNskV1UserPersonTravelDocumentsPost(request?: PersonTravelDocumentRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UserPersonTravelDocumentsPost(request?: PersonTravelDocumentRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UserPersonTravelDocumentsPost(request?: PersonTravelDocumentRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {

        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.post(`${this.basePath}/api/nsk/v1/user/person/travelDocuments`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Deletes a person travel notification for the logged in user&#39;s person.
     * 
     * @param travelNotificationKey The travel notification key.
     
     */
    public apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyDelete(travelNotificationKey: string, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyDelete(travelNotificationKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyDelete(travelNotificationKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyDelete.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.delete(`${this.basePath}/api/nsk/v1/user/person/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Deletes a notification event from a person travel notification for the logged in user&#39;s person.
     * 
     * @param travelNotificationKey The travel notification key.
     * @param eventType The notification event type.
     
     */
    public apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyEventsByEventTypeDelete(travelNotificationKey: string, eventType: 'DepartureDelay' | 'ArrivalDelay' | 'ScheduleChange' | 'CheckIn', observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyEventsByEventTypeDelete(travelNotificationKey: string, eventType: 'DepartureDelay' | 'ArrivalDelay' | 'ScheduleChange' | 'CheckIn', observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyEventsByEventTypeDelete(travelNotificationKey: string, eventType: 'DepartureDelay' | 'ArrivalDelay' | 'ScheduleChange' | 'CheckIn', observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyEventsByEventTypeDelete.');
        }

        if (!eventType){
            throw new Error('Required parameter eventType was null or undefined when calling apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyEventsByEventTypeDelete.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.delete(`${this.basePath}/api/nsk/v1/user/person/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}/events/${encodeURIComponent(String(eventType))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets a notification event for a person travel notification for the logged in user&#39;s person.
     * 
     * @param travelNotificationKey The travel notification key.
     * @param eventType The event type.
     
     */
    public apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyEventsByEventTypeGet(travelNotificationKey: string, eventType: 'DepartureDelay' | 'ArrivalDelay' | 'ScheduleChange' | 'CheckIn', observe?: 'body', headers?: Headers): Observable<NotificationEvent>;
    public apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyEventsByEventTypeGet(travelNotificationKey: string, eventType: 'DepartureDelay' | 'ArrivalDelay' | 'ScheduleChange' | 'CheckIn', observe?: 'response', headers?: Headers): Observable<HttpResponse<NotificationEvent>>;
    public apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyEventsByEventTypeGet(travelNotificationKey: string, eventType: 'DepartureDelay' | 'ArrivalDelay' | 'ScheduleChange' | 'CheckIn', observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyEventsByEventTypeGet.');
        }

        if (!eventType){
            throw new Error('Required parameter eventType was null or undefined when calling apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyEventsByEventTypeGet.');
        }


        const response: Observable<HttpResponse<NotificationEvent>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/user/person/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}/events/${encodeURIComponent(String(eventType))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <NotificationEvent>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets notification events for a person travel notification for the logged in user&#39;s person.
     * 
     * @param travelNotificationKey The travel notification key.
     
     */
    public apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyEventsGet(travelNotificationKey: string, observe?: 'body', headers?: Headers): Observable<Array<NotificationEvent>>;
    public apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyEventsGet(travelNotificationKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<NotificationEvent>>>;
    public apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyEventsGet(travelNotificationKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyEventsGet.');
        }


        const response: Observable<HttpResponse<Array<NotificationEvent>>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/user/person/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}/events`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<NotificationEvent>>(httpResponse.response));
        }
        return response;
    }


    /**
     * Creates a notification event for a person travel notification for the logged in user&#39;s person.
     * 
     * @param travelNotificationKey The travel notification key.
     * @param request The notification event create request.
     
     */
    public apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyEventsPost(travelNotificationKey: string, request?: NotificationEventCreateRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyEventsPost(travelNotificationKey: string, request?: NotificationEventCreateRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyEventsPost(travelNotificationKey: string, request?: NotificationEventCreateRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyEventsPost.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.post(`${this.basePath}/api/nsk/v1/user/person/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}/events`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets a person travel notification for the logged in user&#39;s person.
     * 
     * @param travelNotificationKey The travel notification key.
     
     */
    public apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyGet(travelNotificationKey: string, observe?: 'body', headers?: Headers): Observable<TravelNotification>;
    public apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyGet(travelNotificationKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<TravelNotification>>;
    public apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyGet(travelNotificationKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyGet.');
        }


        const response: Observable<HttpResponse<TravelNotification>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/user/person/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <TravelNotification>(httpResponse.response));
        }
        return response;
    }


    /**
     * Patches a person travel notification for the logged in user&#39;s person.
     * 
     * @param travelNotificationKey The travel notification key.
     * @param request The delta mapper travel notification edit request.
     
     */
    public apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyPatch(travelNotificationKey: string, request?: DeltaMapperTravelNotificationEditRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyPatch(travelNotificationKey: string, request?: DeltaMapperTravelNotificationEditRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyPatch(travelNotificationKey: string, request?: DeltaMapperTravelNotificationEditRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyPatch.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.patch(`${this.basePath}/api/nsk/v1/user/person/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Updates a person travel notification for the logged in user&#39;s person.
     * 
     * @param travelNotificationKey The travel notification key.
     * @param request The travel notification edit request.
     
     */
    public apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyPut(travelNotificationKey: string, request?: TravelNotificationEditRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyPut(travelNotificationKey: string, request?: TravelNotificationEditRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyPut(travelNotificationKey: string, request?: TravelNotificationEditRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyPut.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.put(`${this.basePath}/api/nsk/v1/user/person/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Deletes a notification timed event from a person travel notification for the logged in user&#39;s person.
     * 
     * @param travelNotificationKey The travel notification key.
     * @param timedEventType The notification timed event type.
     
     */
    public apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeDelete(travelNotificationKey: string, timedEventType: 'Departure' | 'Arrival', observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeDelete(travelNotificationKey: string, timedEventType: 'Departure' | 'Arrival', observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeDelete(travelNotificationKey: string, timedEventType: 'Departure' | 'Arrival', observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeDelete.');
        }

        if (!timedEventType){
            throw new Error('Required parameter timedEventType was null or undefined when calling apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeDelete.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.delete(`${this.basePath}/api/nsk/v1/user/person/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}/timedEvents/${encodeURIComponent(String(timedEventType))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets a notification timed event for a person travel notification for the logged in user&#39;s person.
     * 
     * @param travelNotificationKey The travel notification key.
     * @param timedEventType The timed event type.
     
     */
    public apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeGet(travelNotificationKey: string, timedEventType: 'Departure' | 'Arrival', observe?: 'body', headers?: Headers): Observable<NotificationTimedEvent>;
    public apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeGet(travelNotificationKey: string, timedEventType: 'Departure' | 'Arrival', observe?: 'response', headers?: Headers): Observable<HttpResponse<NotificationTimedEvent>>;
    public apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeGet(travelNotificationKey: string, timedEventType: 'Departure' | 'Arrival', observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeGet.');
        }

        if (!timedEventType){
            throw new Error('Required parameter timedEventType was null or undefined when calling apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeGet.');
        }


        const response: Observable<HttpResponse<NotificationTimedEvent>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/user/person/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}/timedEvents/${encodeURIComponent(String(timedEventType))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <NotificationTimedEvent>(httpResponse.response));
        }
        return response;
    }


    /**
     * Updates a notification timed event for a person travel notification for the logged in user&#39;s person.
     * 
     * @param travelNotificationKey The travel notification key.
     * @param timedEventType The notification timed event type.
     * @param request The updated notification timed event request.
     
     */
    public apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypePut(travelNotificationKey: string, timedEventType: 'Departure' | 'Arrival', request?: NotificationTimedEventEditRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypePut(travelNotificationKey: string, timedEventType: 'Departure' | 'Arrival', request?: NotificationTimedEventEditRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypePut(travelNotificationKey: string, timedEventType: 'Departure' | 'Arrival', request?: NotificationTimedEventEditRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypePut.');
        }

        if (!timedEventType){
            throw new Error('Required parameter timedEventType was null or undefined when calling apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypePut.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.put(`${this.basePath}/api/nsk/v1/user/person/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}/timedEvents/${encodeURIComponent(String(timedEventType))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets notification timed events for a person travel notification for the logged in user&#39;s person.
     * 
     * @param travelNotificationKey The travel notification key.
     
     */
    public apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyTimedEventsGet(travelNotificationKey: string, observe?: 'body', headers?: Headers): Observable<Array<NotificationTimedEvent>>;
    public apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyTimedEventsGet(travelNotificationKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<NotificationTimedEvent>>>;
    public apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyTimedEventsGet(travelNotificationKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyTimedEventsGet.');
        }


        const response: Observable<HttpResponse<Array<NotificationTimedEvent>>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/user/person/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}/timedEvents`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<NotificationTimedEvent>>(httpResponse.response));
        }
        return response;
    }


    /**
     * Creates a notification timed event for a person travel notification for the logged in user&#39;s person.
     * 
     * @param travelNotificationKey The travel notification key.
     * @param request The notification timed even create request.
     
     */
    public apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyTimedEventsPost(travelNotificationKey: string, request?: NotificationTimedEventCreateRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyTimedEventsPost(travelNotificationKey: string, request?: NotificationTimedEventCreateRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyTimedEventsPost(travelNotificationKey: string, request?: NotificationTimedEventCreateRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyTimedEventsPost.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.post(`${this.basePath}/api/nsk/v1/user/person/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}/timedEvents`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets person travel notifications for the logged in user&#39;s person.
     * 
     
     */
    public apiNskV1UserPersonTravelNotificationsGet(observe?: 'body', headers?: Headers): Observable<Array<TravelNotification>>;
    public apiNskV1UserPersonTravelNotificationsGet(observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<TravelNotification>>>;
    public apiNskV1UserPersonTravelNotificationsGet(observe: any = 'body', headers: Headers = {}): Observable<any> {

        const response: Observable<HttpResponse<Array<TravelNotification>>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/user/person/travelNotifications`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<TravelNotification>>(httpResponse.response));
        }
        return response;
    }


    /**
     * Creates a person travel notification for the logged in user&#39;s person.
     * 
     * @param request The travel notification create request.
     
     */
    public apiNskV1UserPersonTravelNotificationsPost(request?: TravelNotificationCreateRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1UserPersonTravelNotificationsPost(request?: TravelNotificationCreateRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1UserPersonTravelNotificationsPost(request?: TravelNotificationCreateRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {

        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.post(`${this.basePath}/api/nsk/v1/user/person/travelNotifications`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Patches a specific travel document on the logged in users person.
     * 
     * @param personTravelDocumentKey The unique person travel document key.
     * @param request The patched travel document.
     
     */
    public apiNskV2UserPersonTravelDocumentsByPersonTravelDocumentKeyPatch(personTravelDocumentKey: string, request?: DeltaMapperTravelDocumentEditRequestv2, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV2UserPersonTravelDocumentsByPersonTravelDocumentKeyPatch(personTravelDocumentKey: string, request?: DeltaMapperTravelDocumentEditRequestv2, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV2UserPersonTravelDocumentsByPersonTravelDocumentKeyPatch(personTravelDocumentKey: string, request?: DeltaMapperTravelDocumentEditRequestv2, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personTravelDocumentKey){
            throw new Error('Required parameter personTravelDocumentKey was null or undefined when calling apiNskV2UserPersonTravelDocumentsByPersonTravelDocumentKeyPatch.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.patch(`${this.basePath}/api/nsk/v2/user/person/travelDocuments/${encodeURIComponent(String(personTravelDocumentKey))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Updates a specific travel document on the logged in users person.
     * 
     * @param personTravelDocumentKey The unique person travel document key.
     * @param request The modified travel document.
     
     */
    public apiNskV2UserPersonTravelDocumentsByPersonTravelDocumentKeyPut(personTravelDocumentKey: string, request?: TravelDocumentEditRequestv2, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV2UserPersonTravelDocumentsByPersonTravelDocumentKeyPut(personTravelDocumentKey: string, request?: TravelDocumentEditRequestv2, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV2UserPersonTravelDocumentsByPersonTravelDocumentKeyPut(personTravelDocumentKey: string, request?: TravelDocumentEditRequestv2, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personTravelDocumentKey){
            throw new Error('Required parameter personTravelDocumentKey was null or undefined when calling apiNskV2UserPersonTravelDocumentsByPersonTravelDocumentKeyPut.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.put(`${this.basePath}/api/nsk/v2/user/person/travelDocuments/${encodeURIComponent(String(personTravelDocumentKey))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }

}
