/**
 * API - Current Routes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: trunk
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from "rxjs/Observable";
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import IHttpClient from "../IHttpClient";
import { inject, injectable } from "inversify";
import { IAPIConfiguration } from "../IAPIConfiguration";
import { Headers } from "../Headers";
import HttpResponse from "../HttpResponse";

import * as Models from '../models';
import { Dictionary } from '../models';
import * as Enums from '../enums';
import { getClient, Request } from '../helper';

import { Account } from '../model/account';
import { DeltaMapperPersonAddressEditRequest } from '../model/deltaMapperPersonAddressEditRequest';
import { DeltaMapperPersonAliasRequest } from '../model/deltaMapperPersonAliasRequest';
import { DeltaMapperPersonCommentRequest } from '../model/deltaMapperPersonCommentRequest';
import { DeltaMapperPersonCustomerProgramEditRequest } from '../model/deltaMapperPersonCustomerProgramEditRequest';
import { DeltaMapperPersonEditRequest } from '../model/deltaMapperPersonEditRequest';
import { DeltaMapperPersonEmailEditRequest } from '../model/deltaMapperPersonEmailEditRequest';
import { DeltaMapperPersonInformationEditRequest } from '../model/deltaMapperPersonInformationEditRequest';
import { DeltaMapperPersonPhoneNumberRequest } from '../model/deltaMapperPersonPhoneNumberRequest';
import { DeltaMapperPersonPreferenceEditRequest } from '../model/deltaMapperPersonPreferenceEditRequest';
import { DeltaMapperPersonStoredPaymentUpdateRequest } from '../model/deltaMapperPersonStoredPaymentUpdateRequest';
import { DeltaMapperTravelDocumentEditRequestv2 } from '../model/deltaMapperTravelDocumentEditRequestv2';
import { DeltaMapperTravelNotificationEditRequest } from '../model/deltaMapperTravelNotificationEditRequest';
import { IJsonResponse } from '../model/iJsonResponse';
import { NotificationEvent } from '../model/notificationEvent';
import { NotificationEventCreateRequest } from '../model/notificationEventCreateRequest';
import { NotificationTimedEvent } from '../model/notificationTimedEvent';
import { NotificationTimedEventCreateRequest } from '../model/notificationTimedEventCreateRequest';
import { NotificationTimedEventEditRequest } from '../model/notificationTimedEventEditRequest';
import { Person } from '../model/person';
import { PersonAddress } from '../model/personAddress';
import { PersonAddressCreateRequest } from '../model/personAddressCreateRequest';
import { PersonAddressEditRequest } from '../model/personAddressEditRequest';
import { PersonAlias } from '../model/personAlias';
import { PersonAliasRequest } from '../model/personAliasRequest';
import { PersonComment } from '../model/personComment';
import { PersonCommentRequest } from '../model/personCommentRequest';
import { PersonCustomerProgram } from '../model/personCustomerProgram';
import { PersonCustomerProgramCreateRequest } from '../model/personCustomerProgramCreateRequest';
import { PersonCustomerProgramEditRequest } from '../model/personCustomerProgramEditRequest';
import { PersonEditRequest } from '../model/personEditRequest';
import { PersonEmail } from '../model/personEmail';
import { PersonEmailCreateRequest } from '../model/personEmailCreateRequest';
import { PersonEmailEditRequest } from '../model/personEmailEditRequest';
import { PersonInformation } from '../model/personInformation';
import { PersonInformationCreateRequest } from '../model/personInformationCreateRequest';
import { PersonInformationEditRequest } from '../model/personInformationEditRequest';
import { PersonPhoneNumber } from '../model/personPhoneNumber';
import { PersonPhoneNumberRequest } from '../model/personPhoneNumberRequest';
import { PersonPreference } from '../model/personPreference';
import { PersonPreferenceCreateRequest } from '../model/personPreferenceCreateRequest';
import { PersonPreferenceEditRequest } from '../model/personPreferenceEditRequest';
import { PersonStoredPayment } from '../model/personStoredPayment';
import { PersonStoredPaymentRequest } from '../model/personStoredPaymentRequest';
import { PersonStoredPaymentUpdateRequest } from '../model/personStoredPaymentUpdateRequest';
import { PersonTravelDocument } from '../model/personTravelDocument';
import { PersonTravelDocumentRequest } from '../model/personTravelDocumentRequest';
import { Transaction } from '../model/transaction';
import { TravelDocumentEditRequestv2 } from '../model/travelDocumentEditRequestv2';
import { TravelNotification } from '../model/travelNotification';
import { TravelNotificationCreateRequest } from '../model/travelNotificationCreateRequest';
import { TravelNotificationEditRequest } from '../model/travelNotificationEditRequest';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class UserpersonService {

    constructor(@inject(HTTP_CLIENT) protected client: ApiHttpClient) {}

    /**
     * Retrieves the currently logged in person&#39;s account collection transactions.
     * 
     * @param accountCollectionKey The account collection key.
     * @param startTime The starting date and time of the date range to search in.
     * @param sortByNewest Optional filter to sort results by newest.
     * @param endTime The end date and time of the date range to search in.
     * @param pageSize Used to specify the number of records to return.
     * @param pageIndex Represents the index of the requested paged item.
     
     */
    public apiNskV1UserPersonAccountCollectionByAccountCollectionKeyTransactionsGet = (accountCollectionKey: string, startTime: Date, sortByNewest: boolean, endTime?: Date, pageSize?: number, pageIndex?: number, ) => {
        if (!accountCollectionKey){
            throw new Error('Required parameter accountCollectionKey was null or undefined when calling apiNskV1UserPersonAccountCollectionByAccountCollectionKeyTransactionsGet.');
        }

        if (!startTime){
            throw new Error('Required parameter startTime was null or undefined when calling apiNskV1UserPersonAccountCollectionByAccountCollectionKeyTransactionsGet.');
        }

        if (!sortByNewest){
            throw new Error('Required parameter sortByNewest was null or undefined when calling apiNskV1UserPersonAccountCollectionByAccountCollectionKeyTransactionsGet.');
        }

        let queryParameters: string[] = [];
        if (startTime !== undefined) {
           queryParameters.push("startTime="+encodeURIComponent(<any>startTime.toISOString()));
        }
        if (endTime !== undefined) {
           queryParameters.push("endTime="+encodeURIComponent(<any>endTime.toISOString()));
        }
        if (sortByNewest !== undefined) {
            queryParameters.push("sortByNewest="+encodeURIComponent(String(sortByNewest)));
        }
        if (pageSize !== undefined) {
            queryParameters.push("pageSize="+encodeURIComponent(String(pageSize)));
        }
        if (pageIndex !== undefined) {
            queryParameters.push("pageIndex="+encodeURIComponent(String(pageIndex)));
        }


            const requestObj: Request<{
                accountCollectionKey: string, startTime: Date, sortByNewest: boolean, endTime?: Date, pageSize?: number, pageIndex?: number, 
            }> = {
                url: '/api/nsk/v1/user/person/account/collection/${encodeURIComponent(String(accountCollectionKey))}/transactions',
                method: 'get',
                data: {
                    accountCollectionKey,startTime,sortByNewest,endTime,pageSize,pageIndex,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the currently logged in person&#39;s account and collections.
     * 
     
     */
    public apiNskV1UserPersonAccountGet = () => {

            const requestObj: Request<{
                
            }> = {
                url: '/api/nsk/v1/user/person/account',
                method: 'get',
                data: {
                    
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves all transactions for all collections for the currently logged in person.
     * 
     * @param startTime The starting date and time of the date range to search in.
     * @param sortByNewest Optional filter to sort results by newest.
     * @param endTime The end date and time of the date range to search in.
     * @param pageSize Used to specify the number of records to return.
     * @param pageIndex Represents the index of the requested paged item.
     
     */
    public apiNskV1UserPersonAccountTransactionsGet = (startTime: Date, sortByNewest: boolean, endTime?: Date, pageSize?: number, pageIndex?: number, ) => {
        if (!startTime){
            throw new Error('Required parameter startTime was null or undefined when calling apiNskV1UserPersonAccountTransactionsGet.');
        }

        if (!sortByNewest){
            throw new Error('Required parameter sortByNewest was null or undefined when calling apiNskV1UserPersonAccountTransactionsGet.');
        }

        let queryParameters: string[] = [];
        if (startTime !== undefined) {
           queryParameters.push("startTime="+encodeURIComponent(<any>startTime.toISOString()));
        }
        if (endTime !== undefined) {
           queryParameters.push("endTime="+encodeURIComponent(<any>endTime.toISOString()));
        }
        if (sortByNewest !== undefined) {
            queryParameters.push("sortByNewest="+encodeURIComponent(String(sortByNewest)));
        }
        if (pageSize !== undefined) {
            queryParameters.push("pageSize="+encodeURIComponent(String(pageSize)));
        }
        if (pageIndex !== undefined) {
            queryParameters.push("pageIndex="+encodeURIComponent(String(pageIndex)));
        }


            const requestObj: Request<{
                startTime: Date, sortByNewest: boolean, endTime?: Date, pageSize?: number, pageIndex?: number, 
            }> = {
                url: '/api/nsk/v1/user/person/account/transactions',
                method: 'get',
                data: {
                    startTime,sortByNewest,endTime,pageSize,pageIndex,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Deletes a specific address on the logged in users person.
     * 
     * @param personAddressKey The unique person address key.
     
     */
    public apiNskV1UserPersonAddressesByPersonAddressKeyDelete = (personAddressKey: string, ) => {
        if (!personAddressKey){
            throw new Error('Required parameter personAddressKey was null or undefined when calling apiNskV1UserPersonAddressesByPersonAddressKeyDelete.');
        }


            const requestObj: Request<{
                personAddressKey: string, 
            }> = {
                url: '/api/nsk/v1/user/person/addresses/${encodeURIComponent(String(personAddressKey))}',
                method: 'delete',
                data: {
                    personAddressKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets a specific address from the logged in users person.
     * 
     * @param personAddressKey The unique person address key.
     
     */
    public apiNskV1UserPersonAddressesByPersonAddressKeyGet = (personAddressKey: string, ) => {
        if (!personAddressKey){
            throw new Error('Required parameter personAddressKey was null or undefined when calling apiNskV1UserPersonAddressesByPersonAddressKeyGet.');
        }


            const requestObj: Request<{
                personAddressKey: string, 
            }> = {
                url: '/api/nsk/v1/user/person/addresses/${encodeURIComponent(String(personAddressKey))}',
                method: 'get',
                data: {
                    personAddressKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Patches a specific address on the logged in users person.
     * 
     * @param personAddressKey The unique person address key.
     * @param request The patched address.
     
     */
    public apiNskV1UserPersonAddressesByPersonAddressKeyPatch = (personAddressKey: string, request?: DeltaMapperPersonAddressEditRequest, ) => {
        if (!personAddressKey){
            throw new Error('Required parameter personAddressKey was null or undefined when calling apiNskV1UserPersonAddressesByPersonAddressKeyPatch.');
        }


            const requestObj: Request<{
                personAddressKey: string, request?: DeltaMapperPersonAddressEditRequest, 
            }> = {
                url: '/api/nsk/v1/user/person/addresses/${encodeURIComponent(String(personAddressKey))}',
                method: 'patch',
                data: {
                    personAddressKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Updates a specific address on the logged in users person.
     * 
     * @param personAddressKey The unique person address key.
     * @param request The modified address.
     
     */
    public apiNskV1UserPersonAddressesByPersonAddressKeyPut = (personAddressKey: string, request?: PersonAddressEditRequest, ) => {
        if (!personAddressKey){
            throw new Error('Required parameter personAddressKey was null or undefined when calling apiNskV1UserPersonAddressesByPersonAddressKeyPut.');
        }


            const requestObj: Request<{
                personAddressKey: string, request?: PersonAddressEditRequest, 
            }> = {
                url: '/api/nsk/v1/user/person/addresses/${encodeURIComponent(String(personAddressKey))}',
                method: 'put',
                data: {
                    personAddressKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets all addresses from the logged in users person.
     * 
     
     */
    public apiNskV1UserPersonAddressesGet = () => {

            const requestObj: Request<{
                
            }> = {
                url: '/api/nsk/v1/user/person/addresses',
                method: 'get',
                data: {
                    
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Creates a new address on the logged in users person.
     * 
     * @param request The new address.
     
     */
    public apiNskV1UserPersonAddressesPost = (request?: PersonAddressCreateRequest, ) => {

            const requestObj: Request<{
                request?: PersonAddressCreateRequest, 
            }> = {
                url: '/api/nsk/v1/user/person/addresses',
                method: 'post',
                data: {
                    request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Deletes a specific alias on the logged in users person.
     * 
     * @param personAliasKey The unique person alias key.
     
     */
    public apiNskV1UserPersonAliasesByPersonAliasKeyDelete = (personAliasKey: string, ) => {
        if (!personAliasKey){
            throw new Error('Required parameter personAliasKey was null or undefined when calling apiNskV1UserPersonAliasesByPersonAliasKeyDelete.');
        }


            const requestObj: Request<{
                personAliasKey: string, 
            }> = {
                url: '/api/nsk/v1/user/person/aliases/${encodeURIComponent(String(personAliasKey))}',
                method: 'delete',
                data: {
                    personAliasKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets a specific alias from the logged in users person.
     * 
     * @param personAliasKey The unique person alias key.
     
     */
    public apiNskV1UserPersonAliasesByPersonAliasKeyGet = (personAliasKey: string, ) => {
        if (!personAliasKey){
            throw new Error('Required parameter personAliasKey was null or undefined when calling apiNskV1UserPersonAliasesByPersonAliasKeyGet.');
        }


            const requestObj: Request<{
                personAliasKey: string, 
            }> = {
                url: '/api/nsk/v1/user/person/aliases/${encodeURIComponent(String(personAliasKey))}',
                method: 'get',
                data: {
                    personAliasKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Patches a specific alias on the logged in users person.
     * 
     * @param personAliasKey The unique person alias key.
     * @param request The patched alias.
     
     */
    public apiNskV1UserPersonAliasesByPersonAliasKeyPatch = (personAliasKey: string, request?: DeltaMapperPersonAliasRequest, ) => {
        if (!personAliasKey){
            throw new Error('Required parameter personAliasKey was null or undefined when calling apiNskV1UserPersonAliasesByPersonAliasKeyPatch.');
        }


            const requestObj: Request<{
                personAliasKey: string, request?: DeltaMapperPersonAliasRequest, 
            }> = {
                url: '/api/nsk/v1/user/person/aliases/${encodeURIComponent(String(personAliasKey))}',
                method: 'patch',
                data: {
                    personAliasKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Updates a specific alias on the logged in users person.
     * 
     * @param personAliasKey The unique person alias key.
     * @param request The modified alias.
     
     */
    public apiNskV1UserPersonAliasesByPersonAliasKeyPut = (personAliasKey: string, request?: PersonAliasRequest, ) => {
        if (!personAliasKey){
            throw new Error('Required parameter personAliasKey was null or undefined when calling apiNskV1UserPersonAliasesByPersonAliasKeyPut.');
        }


            const requestObj: Request<{
                personAliasKey: string, request?: PersonAliasRequest, 
            }> = {
                url: '/api/nsk/v1/user/person/aliases/${encodeURIComponent(String(personAliasKey))}',
                method: 'put',
                data: {
                    personAliasKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets all aliases from the logged in users person.
     * 
     
     */
    public apiNskV1UserPersonAliasesGet = () => {

            const requestObj: Request<{
                
            }> = {
                url: '/api/nsk/v1/user/person/aliases',
                method: 'get',
                data: {
                    
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Creates a new alias on the logged in users person.
     * 
     * @param request The new alias.
     
     */
    public apiNskV1UserPersonAliasesPost = (request?: PersonAliasRequest, ) => {

            const requestObj: Request<{
                request?: PersonAliasRequest, 
            }> = {
                url: '/api/nsk/v1/user/person/aliases',
                method: 'post',
                data: {
                    request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Deletes a specific comment on the logged in users person.
     * 
     * @param personCommentKey The unique person comment key.
     
     */
    public apiNskV1UserPersonCommentsByPersonCommentKeyDelete = (personCommentKey: string, ) => {
        if (!personCommentKey){
            throw new Error('Required parameter personCommentKey was null or undefined when calling apiNskV1UserPersonCommentsByPersonCommentKeyDelete.');
        }


            const requestObj: Request<{
                personCommentKey: string, 
            }> = {
                url: '/api/nsk/v1/user/person/comments/${encodeURIComponent(String(personCommentKey))}',
                method: 'delete',
                data: {
                    personCommentKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets a specific comment from the logged in users person.
     * 
     * @param personCommentKey The unique person comment key.
     
     */
    public apiNskV1UserPersonCommentsByPersonCommentKeyGet = (personCommentKey: string, ) => {
        if (!personCommentKey){
            throw new Error('Required parameter personCommentKey was null or undefined when calling apiNskV1UserPersonCommentsByPersonCommentKeyGet.');
        }


            const requestObj: Request<{
                personCommentKey: string, 
            }> = {
                url: '/api/nsk/v1/user/person/comments/${encodeURIComponent(String(personCommentKey))}',
                method: 'get',
                data: {
                    personCommentKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Patches a specific comment on the logged in users person.
     * 
     * @param personCommentKey The unique person comment key.
     * @param request The patched comment.
     
     */
    public apiNskV1UserPersonCommentsByPersonCommentKeyPatch = (personCommentKey: string, request?: DeltaMapperPersonCommentRequest, ) => {
        if (!personCommentKey){
            throw new Error('Required parameter personCommentKey was null or undefined when calling apiNskV1UserPersonCommentsByPersonCommentKeyPatch.');
        }


            const requestObj: Request<{
                personCommentKey: string, request?: DeltaMapperPersonCommentRequest, 
            }> = {
                url: '/api/nsk/v1/user/person/comments/${encodeURIComponent(String(personCommentKey))}',
                method: 'patch',
                data: {
                    personCommentKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Updates a specific comment on the logged in users person.
     * 
     * @param personCommentKey The unique person comment key.
     * @param request The modified comment.
     
     */
    public apiNskV1UserPersonCommentsByPersonCommentKeyPut = (personCommentKey: string, request?: PersonCommentRequest, ) => {
        if (!personCommentKey){
            throw new Error('Required parameter personCommentKey was null or undefined when calling apiNskV1UserPersonCommentsByPersonCommentKeyPut.');
        }


            const requestObj: Request<{
                personCommentKey: string, request?: PersonCommentRequest, 
            }> = {
                url: '/api/nsk/v1/user/person/comments/${encodeURIComponent(String(personCommentKey))}',
                method: 'put',
                data: {
                    personCommentKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets all comments from the logged in users person.
     * 
     
     */
    public apiNskV1UserPersonCommentsGet = () => {

            const requestObj: Request<{
                
            }> = {
                url: '/api/nsk/v1/user/person/comments',
                method: 'get',
                data: {
                    
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Creates a new comment on the logged in users person.
     * 
     * @param request The new comment.
     
     */
    public apiNskV1UserPersonCommentsPost = (request?: PersonCommentRequest, ) => {

            const requestObj: Request<{
                request?: PersonCommentRequest, 
            }> = {
                url: '/api/nsk/v1/user/person/comments',
                method: 'post',
                data: {
                    request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Deletes a specific email address on the logged in user&#39;s person.
     * 
     * @param personEmailAddressKey The unique person email address key.
     
     */
    public apiNskV1UserPersonEmailsByPersonEmailAddressKeyDelete = (personEmailAddressKey: string, ) => {
        if (!personEmailAddressKey){
            throw new Error('Required parameter personEmailAddressKey was null or undefined when calling apiNskV1UserPersonEmailsByPersonEmailAddressKeyDelete.');
        }


            const requestObj: Request<{
                personEmailAddressKey: string, 
            }> = {
                url: '/api/nsk/v1/user/person/emails/${encodeURIComponent(String(personEmailAddressKey))}',
                method: 'delete',
                data: {
                    personEmailAddressKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets a specific email address from the logged in user&#39;s person.
     * 
     * @param personEmailAddressKey The unique person email address key.
     
     */
    public apiNskV1UserPersonEmailsByPersonEmailAddressKeyGet = (personEmailAddressKey: string, ) => {
        if (!personEmailAddressKey){
            throw new Error('Required parameter personEmailAddressKey was null or undefined when calling apiNskV1UserPersonEmailsByPersonEmailAddressKeyGet.');
        }


            const requestObj: Request<{
                personEmailAddressKey: string, 
            }> = {
                url: '/api/nsk/v1/user/person/emails/${encodeURIComponent(String(personEmailAddressKey))}',
                method: 'get',
                data: {
                    personEmailAddressKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Patches a specific email address on the logged in user&#39;s person.
     * 
     * @param personEmailAddressKey The unique person email address key.
     * @param request The patched email address.
     
     */
    public apiNskV1UserPersonEmailsByPersonEmailAddressKeyPatch = (personEmailAddressKey: string, request?: DeltaMapperPersonEmailEditRequest, ) => {
        if (!personEmailAddressKey){
            throw new Error('Required parameter personEmailAddressKey was null or undefined when calling apiNskV1UserPersonEmailsByPersonEmailAddressKeyPatch.');
        }


            const requestObj: Request<{
                personEmailAddressKey: string, request?: DeltaMapperPersonEmailEditRequest, 
            }> = {
                url: '/api/nsk/v1/user/person/emails/${encodeURIComponent(String(personEmailAddressKey))}',
                method: 'patch',
                data: {
                    personEmailAddressKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Updates a specific email address on the logged in user&#39;s person.
     * 
     * @param personEmailAddressKey The unique person email address key.
     * @param request The modified email address.
     
     */
    public apiNskV1UserPersonEmailsByPersonEmailAddressKeyPut = (personEmailAddressKey: string, request?: PersonEmailEditRequest, ) => {
        if (!personEmailAddressKey){
            throw new Error('Required parameter personEmailAddressKey was null or undefined when calling apiNskV1UserPersonEmailsByPersonEmailAddressKeyPut.');
        }


            const requestObj: Request<{
                personEmailAddressKey: string, request?: PersonEmailEditRequest, 
            }> = {
                url: '/api/nsk/v1/user/person/emails/${encodeURIComponent(String(personEmailAddressKey))}',
                method: 'put',
                data: {
                    personEmailAddressKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets all email addresses from the logged in user&#39;s person.
     * 
     
     */
    public apiNskV1UserPersonEmailsGet = () => {

            const requestObj: Request<{
                
            }> = {
                url: '/api/nsk/v1/user/person/emails',
                method: 'get',
                data: {
                    
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Creates a new email address on the logged in user&#39;s person.
     * 
     * @param request The new email address.
     
     */
    public apiNskV1UserPersonEmailsPost = (request?: PersonEmailCreateRequest, ) => {

            const requestObj: Request<{
                request?: PersonEmailCreateRequest, 
            }> = {
                url: '/api/nsk/v1/user/person/emails',
                method: 'post',
                data: {
                    request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the current logged in person.
     * 
     
     */
    public apiNskV1UserPersonGet = () => {

            const requestObj: Request<{
                
            }> = {
                url: '/api/nsk/v1/user/person',
                method: 'get',
                data: {
                    
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Deletes a specific information on the logged in user&#39;s person.
     * 
     * @param personInformationKey The unique person information key.
     
     */
    public apiNskV1UserPersonInformationByPersonInformationKeyDelete = (personInformationKey: string, ) => {
        if (!personInformationKey){
            throw new Error('Required parameter personInformationKey was null or undefined when calling apiNskV1UserPersonInformationByPersonInformationKeyDelete.');
        }


            const requestObj: Request<{
                personInformationKey: string, 
            }> = {
                url: '/api/nsk/v1/user/person/information/${encodeURIComponent(String(personInformationKey))}',
                method: 'delete',
                data: {
                    personInformationKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets a specific information from the logged in user&#39;s person.
     * 
     * @param personInformationKey The unique person information key.
     
     */
    public apiNskV1UserPersonInformationByPersonInformationKeyGet = (personInformationKey: string, ) => {
        if (!personInformationKey){
            throw new Error('Required parameter personInformationKey was null or undefined when calling apiNskV1UserPersonInformationByPersonInformationKeyGet.');
        }


            const requestObj: Request<{
                personInformationKey: string, 
            }> = {
                url: '/api/nsk/v1/user/person/information/${encodeURIComponent(String(personInformationKey))}',
                method: 'get',
                data: {
                    personInformationKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Patches a specific information on the logged in user&#39;s person.
     * 
     * @param personInformationKey The unique person information key.
     * @param request The patched information.
     
     */
    public apiNskV1UserPersonInformationByPersonInformationKeyPatch = (personInformationKey: string, request?: DeltaMapperPersonInformationEditRequest, ) => {
        if (!personInformationKey){
            throw new Error('Required parameter personInformationKey was null or undefined when calling apiNskV1UserPersonInformationByPersonInformationKeyPatch.');
        }


            const requestObj: Request<{
                personInformationKey: string, request?: DeltaMapperPersonInformationEditRequest, 
            }> = {
                url: '/api/nsk/v1/user/person/information/${encodeURIComponent(String(personInformationKey))}',
                method: 'patch',
                data: {
                    personInformationKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Updates a specific information on the logged in user&#39;s person.
     * 
     * @param personInformationKey The unique person information key.
     * @param request The modified information.
     
     */
    public apiNskV1UserPersonInformationByPersonInformationKeyPut = (personInformationKey: string, request?: PersonInformationEditRequest, ) => {
        if (!personInformationKey){
            throw new Error('Required parameter personInformationKey was null or undefined when calling apiNskV1UserPersonInformationByPersonInformationKeyPut.');
        }


            const requestObj: Request<{
                personInformationKey: string, request?: PersonInformationEditRequest, 
            }> = {
                url: '/api/nsk/v1/user/person/information/${encodeURIComponent(String(personInformationKey))}',
                method: 'put',
                data: {
                    personInformationKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets all information from the logged in user&#39;s person.
     * 
     
     */
    public apiNskV1UserPersonInformationGet = () => {

            const requestObj: Request<{
                
            }> = {
                url: '/api/nsk/v1/user/person/information',
                method: 'get',
                data: {
                    
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Creates a new information on the logged in user&#39;s person.
     * 
     * @param request The new information.
     
     */
    public apiNskV1UserPersonInformationPost = (request?: PersonInformationCreateRequest, ) => {

            const requestObj: Request<{
                request?: PersonInformationCreateRequest, 
            }> = {
                url: '/api/nsk/v1/user/person/information',
                method: 'post',
                data: {
                    request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Patches the current logged in person records basic information.
     * 
     * @param request The person patch request.
     
     */
    public apiNskV1UserPersonPatch = (request?: DeltaMapperPersonEditRequest, ) => {

            const requestObj: Request<{
                request?: DeltaMapperPersonEditRequest, 
            }> = {
                url: '/api/nsk/v1/user/person',
                method: 'patch',
                data: {
                    request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Deletes a specific phone number on the logged in users person.
     * 
     * @param personPhoneNumberKey The unique person phone number key.
     
     */
    public apiNskV1UserPersonPhoneNumbersByPersonPhoneNumberKeyDelete = (personPhoneNumberKey: string, ) => {
        if (!personPhoneNumberKey){
            throw new Error('Required parameter personPhoneNumberKey was null or undefined when calling apiNskV1UserPersonPhoneNumbersByPersonPhoneNumberKeyDelete.');
        }


            const requestObj: Request<{
                personPhoneNumberKey: string, 
            }> = {
                url: '/api/nsk/v1/user/person/phoneNumbers/${encodeURIComponent(String(personPhoneNumberKey))}',
                method: 'delete',
                data: {
                    personPhoneNumberKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets a specific phone number from the logged in users person.
     * 
     * @param personPhoneNumberKey The unique person phone number key.
     
     */
    public apiNskV1UserPersonPhoneNumbersByPersonPhoneNumberKeyGet = (personPhoneNumberKey: string, ) => {
        if (!personPhoneNumberKey){
            throw new Error('Required parameter personPhoneNumberKey was null or undefined when calling apiNskV1UserPersonPhoneNumbersByPersonPhoneNumberKeyGet.');
        }


            const requestObj: Request<{
                personPhoneNumberKey: string, 
            }> = {
                url: '/api/nsk/v1/user/person/phoneNumbers/${encodeURIComponent(String(personPhoneNumberKey))}',
                method: 'get',
                data: {
                    personPhoneNumberKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Patches a specific phone number on the logged in users person.
     * 
     * @param personPhoneNumberKey The unique person phone number key.
     * @param request The patched phone number.
     
     */
    public apiNskV1UserPersonPhoneNumbersByPersonPhoneNumberKeyPatch = (personPhoneNumberKey: string, request?: DeltaMapperPersonPhoneNumberRequest, ) => {
        if (!personPhoneNumberKey){
            throw new Error('Required parameter personPhoneNumberKey was null or undefined when calling apiNskV1UserPersonPhoneNumbersByPersonPhoneNumberKeyPatch.');
        }


            const requestObj: Request<{
                personPhoneNumberKey: string, request?: DeltaMapperPersonPhoneNumberRequest, 
            }> = {
                url: '/api/nsk/v1/user/person/phoneNumbers/${encodeURIComponent(String(personPhoneNumberKey))}',
                method: 'patch',
                data: {
                    personPhoneNumberKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Updates a specific phone number on the logged in users person.
     * 
     * @param personPhoneNumberKey The unique person phone number key.
     * @param request The modified phone number.
     
     */
    public apiNskV1UserPersonPhoneNumbersByPersonPhoneNumberKeyPut = (personPhoneNumberKey: string, request?: PersonPhoneNumberRequest, ) => {
        if (!personPhoneNumberKey){
            throw new Error('Required parameter personPhoneNumberKey was null or undefined when calling apiNskV1UserPersonPhoneNumbersByPersonPhoneNumberKeyPut.');
        }


            const requestObj: Request<{
                personPhoneNumberKey: string, request?: PersonPhoneNumberRequest, 
            }> = {
                url: '/api/nsk/v1/user/person/phoneNumbers/${encodeURIComponent(String(personPhoneNumberKey))}',
                method: 'put',
                data: {
                    personPhoneNumberKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets all phone numbers from the logged in users person.
     * 
     
     */
    public apiNskV1UserPersonPhoneNumbersGet = () => {

            const requestObj: Request<{
                
            }> = {
                url: '/api/nsk/v1/user/person/phoneNumbers',
                method: 'get',
                data: {
                    
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Creates a new phone number on the logged in users person.
     * 
     * @param request The new phone number.
     
     */
    public apiNskV1UserPersonPhoneNumbersPost = (request?: PersonPhoneNumberRequest, ) => {

            const requestObj: Request<{
                request?: PersonPhoneNumberRequest, 
            }> = {
                url: '/api/nsk/v1/user/person/phoneNumbers',
                method: 'post',
                data: {
                    request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Deletes a specific preference on the logged in users person.
     * 
     * @param personPreferenceKey The unique person preference key.
     
     */
    public apiNskV1UserPersonPreferencesByPersonPreferenceKeyDelete = (personPreferenceKey: string, ) => {
        if (!personPreferenceKey){
            throw new Error('Required parameter personPreferenceKey was null or undefined when calling apiNskV1UserPersonPreferencesByPersonPreferenceKeyDelete.');
        }


            const requestObj: Request<{
                personPreferenceKey: string, 
            }> = {
                url: '/api/nsk/v1/user/person/preferences/${encodeURIComponent(String(personPreferenceKey))}',
                method: 'delete',
                data: {
                    personPreferenceKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets a specific preference from the logged in users person.
     * 
     * @param personPreferenceKey The unique person preference key.
     
     */
    public apiNskV1UserPersonPreferencesByPersonPreferenceKeyGet = (personPreferenceKey: string, ) => {
        if (!personPreferenceKey){
            throw new Error('Required parameter personPreferenceKey was null or undefined when calling apiNskV1UserPersonPreferencesByPersonPreferenceKeyGet.');
        }


            const requestObj: Request<{
                personPreferenceKey: string, 
            }> = {
                url: '/api/nsk/v1/user/person/preferences/${encodeURIComponent(String(personPreferenceKey))}',
                method: 'get',
                data: {
                    personPreferenceKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Patches a specific preference on the logged in users person.
     * 
     * @param personPreferenceKey The unique person preference key.
     * @param request The patched preference.
     
     */
    public apiNskV1UserPersonPreferencesByPersonPreferenceKeyPatch = (personPreferenceKey: string, request?: DeltaMapperPersonPreferenceEditRequest, ) => {
        if (!personPreferenceKey){
            throw new Error('Required parameter personPreferenceKey was null or undefined when calling apiNskV1UserPersonPreferencesByPersonPreferenceKeyPatch.');
        }


            const requestObj: Request<{
                personPreferenceKey: string, request?: DeltaMapperPersonPreferenceEditRequest, 
            }> = {
                url: '/api/nsk/v1/user/person/preferences/${encodeURIComponent(String(personPreferenceKey))}',
                method: 'patch',
                data: {
                    personPreferenceKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Updates a specific preference on the logged in users person.
     * 
     * @param personPreferenceKey The unique person preference key.
     * @param request The modified preference.
     
     */
    public apiNskV1UserPersonPreferencesByPersonPreferenceKeyPut = (personPreferenceKey: string, request?: PersonPreferenceEditRequest, ) => {
        if (!personPreferenceKey){
            throw new Error('Required parameter personPreferenceKey was null or undefined when calling apiNskV1UserPersonPreferencesByPersonPreferenceKeyPut.');
        }


            const requestObj: Request<{
                personPreferenceKey: string, request?: PersonPreferenceEditRequest, 
            }> = {
                url: '/api/nsk/v1/user/person/preferences/${encodeURIComponent(String(personPreferenceKey))}',
                method: 'put',
                data: {
                    personPreferenceKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets all preferences from the logged in users person.
     * 
     
     */
    public apiNskV1UserPersonPreferencesGet = () => {

            const requestObj: Request<{
                
            }> = {
                url: '/api/nsk/v1/user/person/preferences',
                method: 'get',
                data: {
                    
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Creates a new preference on the logged in users person.
     * 
     * @param request The new preference.
     
     */
    public apiNskV1UserPersonPreferencesPost = (request?: PersonPreferenceCreateRequest, ) => {

            const requestObj: Request<{
                request?: PersonPreferenceCreateRequest, 
            }> = {
                url: '/api/nsk/v1/user/person/preferences',
                method: 'post',
                data: {
                    request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Deletes a specific program on the logged in users person.
     * 
     * @param personProgramKey The unique person address key.
     
     */
    public apiNskV1UserPersonProgramsByPersonProgramKeyDelete = (personProgramKey: string, ) => {
        if (!personProgramKey){
            throw new Error('Required parameter personProgramKey was null or undefined when calling apiNskV1UserPersonProgramsByPersonProgramKeyDelete.');
        }


            const requestObj: Request<{
                personProgramKey: string, 
            }> = {
                url: '/api/nsk/v1/user/person/programs/${encodeURIComponent(String(personProgramKey))}',
                method: 'delete',
                data: {
                    personProgramKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets a specific program from the logged in users person.
     * 
     * @param personProgramKey The unique person program key.
     
     */
    public apiNskV1UserPersonProgramsByPersonProgramKeyGet = (personProgramKey: string, ) => {
        if (!personProgramKey){
            throw new Error('Required parameter personProgramKey was null or undefined when calling apiNskV1UserPersonProgramsByPersonProgramKeyGet.');
        }


            const requestObj: Request<{
                personProgramKey: string, 
            }> = {
                url: '/api/nsk/v1/user/person/programs/${encodeURIComponent(String(personProgramKey))}',
                method: 'get',
                data: {
                    personProgramKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Patches a specific program on the logged in users person.
     * 
     * @param personProgramKey The unique person program key.
     * @param request The patched program.
     
     */
    public apiNskV1UserPersonProgramsByPersonProgramKeyPatch = (personProgramKey: string, request?: DeltaMapperPersonCustomerProgramEditRequest, ) => {
        if (!personProgramKey){
            throw new Error('Required parameter personProgramKey was null or undefined when calling apiNskV1UserPersonProgramsByPersonProgramKeyPatch.');
        }


            const requestObj: Request<{
                personProgramKey: string, request?: DeltaMapperPersonCustomerProgramEditRequest, 
            }> = {
                url: '/api/nsk/v1/user/person/programs/${encodeURIComponent(String(personProgramKey))}',
                method: 'patch',
                data: {
                    personProgramKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Updates a specific program on the logged in users person.
     * 
     * @param personProgramKey The unique person program key.
     * @param request The modified program.
     
     */
    public apiNskV1UserPersonProgramsByPersonProgramKeyPut = (personProgramKey: string, request?: PersonCustomerProgramEditRequest, ) => {
        if (!personProgramKey){
            throw new Error('Required parameter personProgramKey was null or undefined when calling apiNskV1UserPersonProgramsByPersonProgramKeyPut.');
        }


            const requestObj: Request<{
                personProgramKey: string, request?: PersonCustomerProgramEditRequest, 
            }> = {
                url: '/api/nsk/v1/user/person/programs/${encodeURIComponent(String(personProgramKey))}',
                method: 'put',
                data: {
                    personProgramKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets all programs from the logged in users person.
     * 
     
     */
    public apiNskV1UserPersonProgramsGet = () => {

            const requestObj: Request<{
                
            }> = {
                url: '/api/nsk/v1/user/person/programs',
                method: 'get',
                data: {
                    
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Creates a new program on the logged in users person.
     * 
     * @param request The new program.
     
     */
    public apiNskV1UserPersonProgramsPost = (request?: PersonCustomerProgramCreateRequest, ) => {

            const requestObj: Request<{
                request?: PersonCustomerProgramCreateRequest, 
            }> = {
                url: '/api/nsk/v1/user/person/programs',
                method: 'post',
                data: {
                    request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Updates the current logged in person record basic information.
     * 
     * @param request The person edit request.
     
     */
    public apiNskV1UserPersonPut = (request?: PersonEditRequest, ) => {

            const requestObj: Request<{
                request?: PersonEditRequest, 
            }> = {
                url: '/api/nsk/v1/user/person',
                method: 'put',
                data: {
                    request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Deletes a specific stored payment on the logged in users person.
     * 
     * @param personStoredPaymentKey The unique person stored payment key.
     
     */
    public apiNskV1UserPersonStoredPaymentsByPersonStoredPaymentKeyDelete = (personStoredPaymentKey: string, ) => {
        if (!personStoredPaymentKey){
            throw new Error('Required parameter personStoredPaymentKey was null or undefined when calling apiNskV1UserPersonStoredPaymentsByPersonStoredPaymentKeyDelete.');
        }


            const requestObj: Request<{
                personStoredPaymentKey: string, 
            }> = {
                url: '/api/nsk/v1/user/person/storedPayments/${encodeURIComponent(String(personStoredPaymentKey))}',
                method: 'delete',
                data: {
                    personStoredPaymentKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets a specific stored payment from the logged in users person.
     * 
     * @param personStoredPaymentKey The unique person stored payment key.
     
     */
    public apiNskV1UserPersonStoredPaymentsByPersonStoredPaymentKeyGet = (personStoredPaymentKey: string, ) => {
        if (!personStoredPaymentKey){
            throw new Error('Required parameter personStoredPaymentKey was null or undefined when calling apiNskV1UserPersonStoredPaymentsByPersonStoredPaymentKeyGet.');
        }


            const requestObj: Request<{
                personStoredPaymentKey: string, 
            }> = {
                url: '/api/nsk/v1/user/person/storedPayments/${encodeURIComponent(String(personStoredPaymentKey))}',
                method: 'get',
                data: {
                    personStoredPaymentKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Patches a specific stored payment on the logged in users person.
     * 
     * @param personStoredPaymentKey The unique person stored payment key.
     * @param request The patched stored payment.
     
     */
    public apiNskV1UserPersonStoredPaymentsByPersonStoredPaymentKeyPatch = (personStoredPaymentKey: string, request?: DeltaMapperPersonStoredPaymentUpdateRequest, ) => {
        if (!personStoredPaymentKey){
            throw new Error('Required parameter personStoredPaymentKey was null or undefined when calling apiNskV1UserPersonStoredPaymentsByPersonStoredPaymentKeyPatch.');
        }


            const requestObj: Request<{
                personStoredPaymentKey: string, request?: DeltaMapperPersonStoredPaymentUpdateRequest, 
            }> = {
                url: '/api/nsk/v1/user/person/storedPayments/${encodeURIComponent(String(personStoredPaymentKey))}',
                method: 'patch',
                data: {
                    personStoredPaymentKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Updates a specific stored payment on the logged in users person.
     * 
     * @param personStoredPaymentKey The unique person stored payment key.
     * @param request The modified stored payment.
     
     */
    public apiNskV1UserPersonStoredPaymentsByPersonStoredPaymentKeyPut = (personStoredPaymentKey: string, request?: PersonStoredPaymentUpdateRequest, ) => {
        if (!personStoredPaymentKey){
            throw new Error('Required parameter personStoredPaymentKey was null or undefined when calling apiNskV1UserPersonStoredPaymentsByPersonStoredPaymentKeyPut.');
        }


            const requestObj: Request<{
                personStoredPaymentKey: string, request?: PersonStoredPaymentUpdateRequest, 
            }> = {
                url: '/api/nsk/v1/user/person/storedPayments/${encodeURIComponent(String(personStoredPaymentKey))}',
                method: 'put',
                data: {
                    personStoredPaymentKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets all stored payments from the logged in users person.
     * 
     
     */
    public apiNskV1UserPersonStoredPaymentsGet = () => {

            const requestObj: Request<{
                
            }> = {
                url: '/api/nsk/v1/user/person/storedPayments',
                method: 'get',
                data: {
                    
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Creates a new stored payment on the logged in users person.
     * 
     * @param request The new stored payment.
     
     */
    public apiNskV1UserPersonStoredPaymentsPost = (request?: PersonStoredPaymentRequest, ) => {

            const requestObj: Request<{
                request?: PersonStoredPaymentRequest, 
            }> = {
                url: '/api/nsk/v1/user/person/storedPayments',
                method: 'post',
                data: {
                    request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Deletes a specific travel document on the logged in users person.
     * 
     * @param personTravelDocumentKey The unique person travel document key.
     
     */
    public apiNskV1UserPersonTravelDocumentsByPersonTravelDocumentKeyDelete = (personTravelDocumentKey: string, ) => {
        if (!personTravelDocumentKey){
            throw new Error('Required parameter personTravelDocumentKey was null or undefined when calling apiNskV1UserPersonTravelDocumentsByPersonTravelDocumentKeyDelete.');
        }


            const requestObj: Request<{
                personTravelDocumentKey: string, 
            }> = {
                url: '/api/nsk/v1/user/person/travelDocuments/${encodeURIComponent(String(personTravelDocumentKey))}',
                method: 'delete',
                data: {
                    personTravelDocumentKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets a specific travel document from the logged in users person.
     * 
     * @param personTravelDocumentKey The unique person travel document key.
     
     */
    public apiNskV1UserPersonTravelDocumentsByPersonTravelDocumentKeyGet = (personTravelDocumentKey: string, ) => {
        if (!personTravelDocumentKey){
            throw new Error('Required parameter personTravelDocumentKey was null or undefined when calling apiNskV1UserPersonTravelDocumentsByPersonTravelDocumentKeyGet.');
        }


            const requestObj: Request<{
                personTravelDocumentKey: string, 
            }> = {
                url: '/api/nsk/v1/user/person/travelDocuments/${encodeURIComponent(String(personTravelDocumentKey))}',
                method: 'get',
                data: {
                    personTravelDocumentKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets all travel documents from the logged in users person.
     * 
     
     */
    public apiNskV1UserPersonTravelDocumentsGet = () => {

            const requestObj: Request<{
                
            }> = {
                url: '/api/nsk/v1/user/person/travelDocuments',
                method: 'get',
                data: {
                    
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Creates a new travel document on the logged in users person.
     * 
     * @param request The new travel document.
     
     */
    public apiNskV1UserPersonTravelDocumentsPost = (request?: PersonTravelDocumentRequest, ) => {

            const requestObj: Request<{
                request?: PersonTravelDocumentRequest, 
            }> = {
                url: '/api/nsk/v1/user/person/travelDocuments',
                method: 'post',
                data: {
                    request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Deletes a person travel notification for the logged in user&#39;s person.
     * 
     * @param travelNotificationKey The travel notification key.
     
     */
    public apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyDelete = (travelNotificationKey: string, ) => {
        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyDelete.');
        }


            const requestObj: Request<{
                travelNotificationKey: string, 
            }> = {
                url: '/api/nsk/v1/user/person/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}',
                method: 'delete',
                data: {
                    travelNotificationKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Deletes a notification event from a person travel notification for the logged in user&#39;s person.
     * 
     * @param travelNotificationKey The travel notification key.
     * @param eventType The notification event type.
     
     */
    public apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyEventsByEventTypeDelete = (travelNotificationKey: string, eventType: 'DepartureDelay' | 'ArrivalDelay' | 'ScheduleChange' | 'CheckIn', ) => {
        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyEventsByEventTypeDelete.');
        }

        if (!eventType){
            throw new Error('Required parameter eventType was null or undefined when calling apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyEventsByEventTypeDelete.');
        }


            const requestObj: Request<{
                travelNotificationKey: string, eventType: 'DepartureDelay' | 'ArrivalDelay' | 'ScheduleChange' | 'CheckIn', 
            }> = {
                url: '/api/nsk/v1/user/person/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}/events/${encodeURIComponent(String(eventType))}',
                method: 'delete',
                data: {
                    travelNotificationKey,eventType,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets a notification event for a person travel notification for the logged in user&#39;s person.
     * 
     * @param travelNotificationKey The travel notification key.
     * @param eventType The event type.
     
     */
    public apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyEventsByEventTypeGet = (travelNotificationKey: string, eventType: 'DepartureDelay' | 'ArrivalDelay' | 'ScheduleChange' | 'CheckIn', ) => {
        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyEventsByEventTypeGet.');
        }

        if (!eventType){
            throw new Error('Required parameter eventType was null or undefined when calling apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyEventsByEventTypeGet.');
        }


            const requestObj: Request<{
                travelNotificationKey: string, eventType: 'DepartureDelay' | 'ArrivalDelay' | 'ScheduleChange' | 'CheckIn', 
            }> = {
                url: '/api/nsk/v1/user/person/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}/events/${encodeURIComponent(String(eventType))}',
                method: 'get',
                data: {
                    travelNotificationKey,eventType,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets notification events for a person travel notification for the logged in user&#39;s person.
     * 
     * @param travelNotificationKey The travel notification key.
     
     */
    public apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyEventsGet = (travelNotificationKey: string, ) => {
        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyEventsGet.');
        }


            const requestObj: Request<{
                travelNotificationKey: string, 
            }> = {
                url: '/api/nsk/v1/user/person/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}/events',
                method: 'get',
                data: {
                    travelNotificationKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Creates a notification event for a person travel notification for the logged in user&#39;s person.
     * 
     * @param travelNotificationKey The travel notification key.
     * @param request The notification event create request.
     
     */
    public apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyEventsPost = (travelNotificationKey: string, request?: NotificationEventCreateRequest, ) => {
        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyEventsPost.');
        }


            const requestObj: Request<{
                travelNotificationKey: string, request?: NotificationEventCreateRequest, 
            }> = {
                url: '/api/nsk/v1/user/person/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}/events',
                method: 'post',
                data: {
                    travelNotificationKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets a person travel notification for the logged in user&#39;s person.
     * 
     * @param travelNotificationKey The travel notification key.
     
     */
    public apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyGet = (travelNotificationKey: string, ) => {
        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyGet.');
        }


            const requestObj: Request<{
                travelNotificationKey: string, 
            }> = {
                url: '/api/nsk/v1/user/person/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}',
                method: 'get',
                data: {
                    travelNotificationKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Patches a person travel notification for the logged in user&#39;s person.
     * 
     * @param travelNotificationKey The travel notification key.
     * @param request The delta mapper travel notification edit request.
     
     */
    public apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyPatch = (travelNotificationKey: string, request?: DeltaMapperTravelNotificationEditRequest, ) => {
        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyPatch.');
        }


            const requestObj: Request<{
                travelNotificationKey: string, request?: DeltaMapperTravelNotificationEditRequest, 
            }> = {
                url: '/api/nsk/v1/user/person/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}',
                method: 'patch',
                data: {
                    travelNotificationKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Updates a person travel notification for the logged in user&#39;s person.
     * 
     * @param travelNotificationKey The travel notification key.
     * @param request The travel notification edit request.
     
     */
    public apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyPut = (travelNotificationKey: string, request?: TravelNotificationEditRequest, ) => {
        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyPut.');
        }


            const requestObj: Request<{
                travelNotificationKey: string, request?: TravelNotificationEditRequest, 
            }> = {
                url: '/api/nsk/v1/user/person/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}',
                method: 'put',
                data: {
                    travelNotificationKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Deletes a notification timed event from a person travel notification for the logged in user&#39;s person.
     * 
     * @param travelNotificationKey The travel notification key.
     * @param timedEventType The notification timed event type.
     
     */
    public apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeDelete = (travelNotificationKey: string, timedEventType: 'Departure' | 'Arrival', ) => {
        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeDelete.');
        }

        if (!timedEventType){
            throw new Error('Required parameter timedEventType was null or undefined when calling apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeDelete.');
        }


            const requestObj: Request<{
                travelNotificationKey: string, timedEventType: 'Departure' | 'Arrival', 
            }> = {
                url: '/api/nsk/v1/user/person/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}/timedEvents/${encodeURIComponent(String(timedEventType))}',
                method: 'delete',
                data: {
                    travelNotificationKey,timedEventType,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets a notification timed event for a person travel notification for the logged in user&#39;s person.
     * 
     * @param travelNotificationKey The travel notification key.
     * @param timedEventType The timed event type.
     
     */
    public apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeGet = (travelNotificationKey: string, timedEventType: 'Departure' | 'Arrival', ) => {
        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeGet.');
        }

        if (!timedEventType){
            throw new Error('Required parameter timedEventType was null or undefined when calling apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeGet.');
        }


            const requestObj: Request<{
                travelNotificationKey: string, timedEventType: 'Departure' | 'Arrival', 
            }> = {
                url: '/api/nsk/v1/user/person/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}/timedEvents/${encodeURIComponent(String(timedEventType))}',
                method: 'get',
                data: {
                    travelNotificationKey,timedEventType,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Updates a notification timed event for a person travel notification for the logged in user&#39;s person.
     * 
     * @param travelNotificationKey The travel notification key.
     * @param timedEventType The notification timed event type.
     * @param request The updated notification timed event request.
     
     */
    public apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypePut = (travelNotificationKey: string, timedEventType: 'Departure' | 'Arrival', request?: NotificationTimedEventEditRequest, ) => {
        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypePut.');
        }

        if (!timedEventType){
            throw new Error('Required parameter timedEventType was null or undefined when calling apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypePut.');
        }


            const requestObj: Request<{
                travelNotificationKey: string, timedEventType: 'Departure' | 'Arrival', request?: NotificationTimedEventEditRequest, 
            }> = {
                url: '/api/nsk/v1/user/person/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}/timedEvents/${encodeURIComponent(String(timedEventType))}',
                method: 'put',
                data: {
                    travelNotificationKey,timedEventType,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets notification timed events for a person travel notification for the logged in user&#39;s person.
     * 
     * @param travelNotificationKey The travel notification key.
     
     */
    public apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyTimedEventsGet = (travelNotificationKey: string, ) => {
        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyTimedEventsGet.');
        }


            const requestObj: Request<{
                travelNotificationKey: string, 
            }> = {
                url: '/api/nsk/v1/user/person/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}/timedEvents',
                method: 'get',
                data: {
                    travelNotificationKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Creates a notification timed event for a person travel notification for the logged in user&#39;s person.
     * 
     * @param travelNotificationKey The travel notification key.
     * @param request The notification timed even create request.
     
     */
    public apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyTimedEventsPost = (travelNotificationKey: string, request?: NotificationTimedEventCreateRequest, ) => {
        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyTimedEventsPost.');
        }


            const requestObj: Request<{
                travelNotificationKey: string, request?: NotificationTimedEventCreateRequest, 
            }> = {
                url: '/api/nsk/v1/user/person/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}/timedEvents',
                method: 'post',
                data: {
                    travelNotificationKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets person travel notifications for the logged in user&#39;s person.
     * 
     
     */
    public apiNskV1UserPersonTravelNotificationsGet = () => {

            const requestObj: Request<{
                
            }> = {
                url: '/api/nsk/v1/user/person/travelNotifications',
                method: 'get',
                data: {
                    
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Creates a person travel notification for the logged in user&#39;s person.
     * 
     * @param request The travel notification create request.
     
     */
    public apiNskV1UserPersonTravelNotificationsPost = (request?: TravelNotificationCreateRequest, ) => {

            const requestObj: Request<{
                request?: TravelNotificationCreateRequest, 
            }> = {
                url: '/api/nsk/v1/user/person/travelNotifications',
                method: 'post',
                data: {
                    request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Patches a specific travel document on the logged in users person.
     * 
     * @param personTravelDocumentKey The unique person travel document key.
     * @param request The patched travel document.
     
     */
    public apiNskV2UserPersonTravelDocumentsByPersonTravelDocumentKeyPatch = (personTravelDocumentKey: string, request?: DeltaMapperTravelDocumentEditRequestv2, ) => {
        if (!personTravelDocumentKey){
            throw new Error('Required parameter personTravelDocumentKey was null or undefined when calling apiNskV2UserPersonTravelDocumentsByPersonTravelDocumentKeyPatch.');
        }


            const requestObj: Request<{
                personTravelDocumentKey: string, request?: DeltaMapperTravelDocumentEditRequestv2, 
            }> = {
                url: '/api/nsk/v2/user/person/travelDocuments/${encodeURIComponent(String(personTravelDocumentKey))}',
                method: 'patch',
                data: {
                    personTravelDocumentKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Updates a specific travel document on the logged in users person.
     * 
     * @param personTravelDocumentKey The unique person travel document key.
     * @param request The modified travel document.
     
     */
    public apiNskV2UserPersonTravelDocumentsByPersonTravelDocumentKeyPut = (personTravelDocumentKey: string, request?: TravelDocumentEditRequestv2, ) => {
        if (!personTravelDocumentKey){
            throw new Error('Required parameter personTravelDocumentKey was null or undefined when calling apiNskV2UserPersonTravelDocumentsByPersonTravelDocumentKeyPut.');
        }


            const requestObj: Request<{
                personTravelDocumentKey: string, request?: TravelDocumentEditRequestv2, 
            }> = {
                url: '/api/nsk/v2/user/person/travelDocuments/${encodeURIComponent(String(personTravelDocumentKey))}',
                method: 'put',
                data: {
                    personTravelDocumentKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }

}
