/**
 * API - Current Routes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: trunk
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from "rxjs/Observable";
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import IHttpClient from "../IHttpClient";
import { inject, injectable } from "inversify";
import { IAPIConfiguration } from "../IAPIConfiguration";
import { Headers } from "../Headers";
import HttpResponse from "../HttpResponse";

import * as Models from '../models';
import { Dictionary } from '../models';
import * as Enums from '../enums';
import { getClient, Request } from '../helper';

import { Availability } from '../model/availability';
import { AvailabilityFlyAheadRequest } from '../model/availabilityFlyAheadRequest';
import { AvailabilityMoveRequest } from '../model/availabilityMoveRequest';
import { AvailabilityRebookRequest } from '../model/availabilityRebookRequest';
import { Booking } from '../model/booking';
import { BookingSellRequest } from '../model/bookingSellRequest';
import { IJsonResponse } from '../model/iJsonResponse';
import { MoveRequest } from '../model/moveRequest';
import { ScheduleDetail } from '../model/scheduleDetail';
import { Trip } from '../model/trip';
import { TripDetails } from '../model/tripDetails';
import { TripDowngradeRequest } from '../model/tripDowngradeRequest';
import { TripInformationQuery } from '../model/tripInformationQuery';
import { TripInformationResponse } from '../model/tripInformationResponse';
import { TripSellRequest } from '../model/tripSellRequest';
import { TripStatusv2 } from '../model/tripStatusv2';
import { TripUpgradeBaseRequest } from '../model/tripUpgradeBaseRequest';
import { TripUpgradeRequest } from '../model/tripUpgradeRequest';
import { UpgradeSegment } from '../model/upgradeSegment';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class TripService {

    constructor(@inject(HTTP_CLIENT) protected client: ApiHttpClient) {}

    /**
     * Downgrades the current booking in state segments.
     * 
     * @param request The trip downgrade request.
     
     */
    public apiNskV1TripDowngradePost = (request?: TripDowngradeRequest, ) => {

            const requestObj: Request<{
                request?: TripDowngradeRequest, 
            }> = {
                url: '/api/nsk/v1/trip/downgrade',
                method: 'post',
                data: {
                    request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Simple fly ahead search request covers the bare minimum search  by journey. AvailabilitySettings configure the rest.
     * 
     * @param journeyKey The journey key.
     
     */
    public apiNskV1TripFlyAheadAvailabilityByJourneyKeyGet = (journeyKey: string, ) => {
        if (!journeyKey){
            throw new Error('Required parameter journeyKey was null or undefined when calling apiNskV1TripFlyAheadAvailabilityByJourneyKeyGet.');
        }


            const requestObj: Request<{
                journeyKey: string, 
            }> = {
                url: '/api/nsk/v1/trip/flyAhead/availability/${encodeURIComponent(String(journeyKey))}',
                method: 'get',
                data: {
                    journeyKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Full fly ahead availability search request.
     * This request allows for total control over  the configuration. If a property is not set, the default settings (AvailabilitySettings) is used in its place.  Note, this is a post request even though it is only getting information. This is due to the complicated data needed  in the post data.
     * @param request The availability move request.
     
     */
    public apiNskV1TripFlyAheadAvailabilityPost = (request?: AvailabilityFlyAheadRequest, ) => {

            const requestObj: Request<{
                request?: AvailabilityFlyAheadRequest, 
            }> = {
                url: '/api/nsk/v1/trip/flyAhead/availability',
                method: 'post',
                data: {
                    request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves cabin and various details for the specified leg key.
     * The additional trip details include the leg cross references,   the cabin details (nest counts), and the checkin-lid.
     * @param legKey The encoded leg key.
     
     */
    public apiNskV1TripInfoByLegKeyDetailsGet = (legKey: string, ) => {
        if (!legKey){
            throw new Error('Required parameter legKey was null or undefined when calling apiNskV1TripInfoByLegKeyDetailsGet.');
        }


            const requestObj: Request<{
                legKey: string, 
            }> = {
                url: '/api/nsk/v1/trip/info/${encodeURIComponent(String(legKey))}/details',
                method: 'get',
                data: {
                    legKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets the search results for the trip information, based on the search criteria.
     * 
     * @param request The trip information request.
     
     */
    public apiNskV1TripInfoPost = (request?: TripInformationQuery, ) => {

            const requestObj: Request<{
                request?: TripInformationQuery, 
            }> = {
                url: '/api/nsk/v1/trip/info',
                method: 'post',
                data: {
                    request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Performs a simplified search for trip information based upon minimal, required data for  the search criteria.
     * 
     * @param beginDate The starting date of the trip information search.
     * @param numberOfJourneys When set to null, there will be no limit to the number of journeys to be returned.
     * @param origin The departure station.
     * @param destination The arrival station.
     * @param endDate The end date of the trip information search.
     * @param startTimeInterval The starting time of the trip information search.
     * @param endTimeInterval The end time of the trip information search.
     * @param identifier The transportation identifier, such as a flight number.
     * @param carrierCode The carrier code.
     * @param flightType The flight type.
     
     */
    public apiNskV1TripInfoSimpleGet = (beginDate: Date, numberOfJourneys?: number, origin?: string, destination?: string, endDate?: Date, startTimeInterval?: string, endTimeInterval?: string, identifier?: string, carrierCode?: string, flightType?: 'All' | 'NonStop' | 'Through' | 'Direct' | 'Connect', ) => {
        if (!beginDate){
            throw new Error('Required parameter beginDate was null or undefined when calling apiNskV1TripInfoSimpleGet.');
        }

        let queryParameters: string[] = [];
        if (numberOfJourneys !== undefined) {
            queryParameters.push("numberOfJourneys="+encodeURIComponent(String(numberOfJourneys)));
        }
        if (origin !== undefined) {
            queryParameters.push("origin="+encodeURIComponent(String(origin)));
        }
        if (destination !== undefined) {
            queryParameters.push("destination="+encodeURIComponent(String(destination)));
        }
        if (endDate !== undefined) {
           queryParameters.push("endDate="+encodeURIComponent(<any>endDate.toISOString()));
        }
        if (startTimeInterval !== undefined) {
            queryParameters.push("startTimeInterval="+encodeURIComponent(String(startTimeInterval)));
        }
        if (endTimeInterval !== undefined) {
            queryParameters.push("endTimeInterval="+encodeURIComponent(String(endTimeInterval)));
        }
        if (beginDate !== undefined) {
           queryParameters.push("beginDate="+encodeURIComponent(<any>beginDate.toISOString()));
        }
        if (identifier !== undefined) {
            queryParameters.push("identifier="+encodeURIComponent(String(identifier)));
        }
        if (carrierCode !== undefined) {
            queryParameters.push("carrierCode="+encodeURIComponent(String(carrierCode)));
        }
        if (flightType !== undefined) {
            queryParameters.push("flightType="+encodeURIComponent(String(flightType)));
        }


            const requestObj: Request<{
                beginDate: Date, numberOfJourneys?: number, origin?: string, destination?: string, endDate?: Date, startTimeInterval?: string, endTimeInterval?: string, identifier?: string, carrierCode?: string, flightType?: 'All' | 'NonStop' | 'Through' | 'Direct' | 'Connect', 
            }> = {
                url: '/api/nsk/v1/trip/info/simple',
                method: 'get',
                data: {
                    beginDate,numberOfJourneys,origin,destination,endDate,startTimeInterval,endTimeInterval,identifier,carrierCode,flightType,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Self-service search for move availability.
     * 
     
     */
    public apiNskV1TripMoveAvailabilitySelfServiceGet = () => {

            const requestObj: Request<{
                
            }> = {
                url: '/api/nsk/v1/trip/move/availability/selfService',
                method: 'get',
                data: {
                    
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Moves a journey on the booking in state.
     * 
     * @param request Move request.
     
     */
    public apiNskV1TripMovePost = (request?: MoveRequest, ) => {

            const requestObj: Request<{
                request?: MoveRequest, 
            }> = {
                url: '/api/nsk/v1/trip/move',
                method: 'post',
                data: {
                    request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the schedule of flights for a market.
     * 
     * @param origin The origin station code.
     * @param destination The destination station code.
     * @param beginDate The begin date to search for.
     * @param endDate The end date to search for.
     * @param type The flight type filter.
     
     */
    public apiNskV1TripScheduleGet = (origin: string, destination: string, beginDate: Date, endDate: Date, type?: 'None' | 'NonStop' | 'Through' | 'Direct' | 'Connect' | 'All', ) => {
        if (!origin){
            throw new Error('Required parameter origin was null or undefined when calling apiNskV1TripScheduleGet.');
        }

        if (!destination){
            throw new Error('Required parameter destination was null or undefined when calling apiNskV1TripScheduleGet.');
        }

        if (!beginDate){
            throw new Error('Required parameter beginDate was null or undefined when calling apiNskV1TripScheduleGet.');
        }

        if (!endDate){
            throw new Error('Required parameter endDate was null or undefined when calling apiNskV1TripScheduleGet.');
        }

        let queryParameters: string[] = [];
        if (origin !== undefined) {
            queryParameters.push("origin="+encodeURIComponent(String(origin)));
        }
        if (destination !== undefined) {
            queryParameters.push("destination="+encodeURIComponent(String(destination)));
        }
        if (beginDate !== undefined) {
           queryParameters.push("beginDate="+encodeURIComponent(<any>beginDate.toISOString()));
        }
        if (endDate !== undefined) {
           queryParameters.push("endDate="+encodeURIComponent(<any>endDate.toISOString()));
        }
        if (type !== undefined) {
            queryParameters.push("type="+encodeURIComponent(String(type)));
        }


            const requestObj: Request<{
                origin: string, destination: string, beginDate: Date, endDate: Date, type?: 'None' | 'NonStop' | 'Through' | 'Direct' | 'Connect' | 'All', 
            }> = {
                url: '/api/nsk/v1/trip/schedule',
                method: 'get',
                data: {
                    origin,destination,beginDate,endDate,type,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Upgrades the current booking for the single key.
     * 
     * @param upgradeKey The upgrade key.
     * @param request The trip upgrade request.
     
     */
    public apiNskV1TripUpgradeByUpgradeKeyPost = (upgradeKey: string, request?: TripUpgradeBaseRequest, ) => {
        if (!upgradeKey){
            throw new Error('Required parameter upgradeKey was null or undefined when calling apiNskV1TripUpgradeByUpgradeKeyPost.');
        }


            const requestObj: Request<{
                upgradeKey: string, request?: TripUpgradeBaseRequest, 
            }> = {
                url: '/api/nsk/v1/trip/upgrade/${encodeURIComponent(String(upgradeKey))}',
                method: 'post',
                data: {
                    upgradeKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets the list of upgrade options for the booking in state.
     * 
     
     */
    public apiNskV1TripUpgradeGet = () => {

            const requestObj: Request<{
                
            }> = {
                url: '/api/nsk/v1/trip/upgrade',
                method: 'get',
                data: {
                    
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Upgrades the current booking in state segments.
     * 
     * @param request The trip upgrade request.
     
     */
    public apiNskV1TripUpgradePost = (request?: TripUpgradeRequest, ) => {

            const requestObj: Request<{
                request?: TripUpgradeRequest, 
            }> = {
                url: '/api/nsk/v1/trip/upgrade',
                method: 'post',
                data: {
                    request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the trip status data for the specified leg key.
     * 
     * @param legKey The encoded leg key.
     
     */
    public apiNskV2TripInfoByLegKeyStatusGet = (legKey: string, ) => {
        if (!legKey){
            throw new Error('Required parameter legKey was null or undefined when calling apiNskV2TripInfoByLegKeyStatusGet.');
        }


            const requestObj: Request<{
                legKey: string, 
            }> = {
                url: '/api/nsk/v2/trip/info/${encodeURIComponent(String(legKey))}/status',
                method: 'get',
                data: {
                    legKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Searches for availability with the simple move request. The simple search request covers the bare minimum search  criteria and lets default settings (AvailabilitySettings) configure the rest.
     * 
     * @param journeyKey The journey key.
     * @param passengerMoveType The passenger move type.
     * @param beginDate The departure date.
     * @param origin The origin station code.
     * @param destination The destination station code.
     
     */
    public apiNskV2TripMoveAvailabilityByJourneyKeyGet = (journeyKey: string, passengerMoveType: 'None' | 'Irop' | 'Diversion' | 'FlightClose' | 'FlyAhead' | 'SplitJourney' | 'SelfServiceRebooking', beginDate?: Date, origin?: string, destination?: string, ) => {
        if (!journeyKey){
            throw new Error('Required parameter journeyKey was null or undefined when calling apiNskV2TripMoveAvailabilityByJourneyKeyGet.');
        }

        if (!passengerMoveType){
            throw new Error('Required parameter passengerMoveType was null or undefined when calling apiNskV2TripMoveAvailabilityByJourneyKeyGet.');
        }

        let queryParameters: string[] = [];
        if (beginDate !== undefined) {
           queryParameters.push("beginDate="+encodeURIComponent(<any>beginDate.toISOString()));
        }
        if (origin !== undefined) {
            queryParameters.push("origin="+encodeURIComponent(String(origin)));
        }
        if (destination !== undefined) {
            queryParameters.push("destination="+encodeURIComponent(String(destination)));
        }
        if (passengerMoveType !== undefined) {
            queryParameters.push("passengerMoveType="+encodeURIComponent(String(passengerMoveType)));
        }


            const requestObj: Request<{
                journeyKey: string, passengerMoveType: 'None' | 'Irop' | 'Diversion' | 'FlightClose' | 'FlyAhead' | 'SplitJourney' | 'SelfServiceRebooking', beginDate?: Date, origin?: string, destination?: string, 
            }> = {
                url: '/api/nsk/v2/trip/move/availability/${encodeURIComponent(String(journeyKey))}',
                method: 'get',
                data: {
                    journeyKey,passengerMoveType,beginDate,origin,destination,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Searches for move availability with the full availability search request. This request will allow for total control  over  the configuration. If a property is not set, the default settings (AvailabilitySettings) is used in its place.
     * Note, this is a post request even though it is only getting information. This is due to the complicated data needed  in the post data.
     * @param request The availability move request.
     
     */
    public apiNskV2TripMoveAvailabilityPost = (request?: AvailabilityMoveRequest, ) => {

            const requestObj: Request<{
                request?: AvailabilityMoveRequest, 
            }> = {
                url: '/api/nsk/v2/trip/move/availability',
                method: 'post',
                data: {
                    request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Rebook search with the current booking defaults.
     * Requires a booking in state.   Although this endpoint behaves like a GET, POST is used to reduce the limitations resulting from URL length issues.
     * @param request The rebook request.
     
     */
    public apiNskV3TripRebookAvailabilityPost = (request?: AvailabilityRebookRequest, ) => {

            const requestObj: Request<{
                request?: AvailabilityRebookRequest, 
            }> = {
                url: '/api/nsk/v3/trip/rebook/availability',
                method: 'post',
                data: {
                    request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Simple rebook search with the current booking defaults.
     * Requires a booking in state.
     * @param origin The origin station code.
     * @param destination The destination station code.
     * @param beginDate The departure date.
     * @param endDate The return date if this is a round trip request.
     * @param loyaltyFilter The loyalty fare filter.
     
     */
    public apiNskV3TripRebookAvailabilitySimpleGet = (origin: string, destination: string, beginDate: Date, endDate?: Date, loyaltyFilter?: 'MonetaryOnly' | 'PointsOnly' | 'PointsAndMonetary' | 'PreserveCurrent', ) => {
        if (!origin){
            throw new Error('Required parameter origin was null or undefined when calling apiNskV3TripRebookAvailabilitySimpleGet.');
        }

        if (!destination){
            throw new Error('Required parameter destination was null or undefined when calling apiNskV3TripRebookAvailabilitySimpleGet.');
        }

        if (!beginDate){
            throw new Error('Required parameter beginDate was null or undefined when calling apiNskV3TripRebookAvailabilitySimpleGet.');
        }

        let queryParameters: string[] = [];
        if (origin !== undefined) {
            queryParameters.push("origin="+encodeURIComponent(String(origin)));
        }
        if (destination !== undefined) {
            queryParameters.push("destination="+encodeURIComponent(String(destination)));
        }
        if (beginDate !== undefined) {
           queryParameters.push("beginDate="+encodeURIComponent(<any>beginDate.toISOString()));
        }
        if (endDate !== undefined) {
           queryParameters.push("endDate="+encodeURIComponent(<any>endDate.toISOString()));
        }
        if (loyaltyFilter !== undefined) {
            queryParameters.push("loyaltyFilter="+encodeURIComponent(String(loyaltyFilter)));
        }


            const requestObj: Request<{
                origin: string, destination: string, beginDate: Date, endDate?: Date, loyaltyFilter?: 'MonetaryOnly' | 'PointsOnly' | 'PointsAndMonetary' | 'PreserveCurrent', 
            }> = {
                url: '/api/nsk/v3/trip/rebook/availability/simple',
                method: 'get',
                data: {
                    origin,destination,beginDate,endDate,loyaltyFilter,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Creates a new booking with the provided journeys, contacts, passengers, and SSRs.
     * 
     * @param request The booking sell request.
     
     */
    public apiNskV4TripPost = (request?: BookingSellRequest, ) => {

            const requestObj: Request<{
                request?: BookingSellRequest, 
            }> = {
                url: '/api/nsk/v4/trip',
                method: 'post',
                data: {
                    request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Sells the list of journeys and creates a booking if it doesn&#39;t already exist.
     * 
     * @param request The trip sell request.
     
     */
    public apiNskV4TripSellPost = (request?: TripSellRequest, ) => {

            const requestObj: Request<{
                request?: TripSellRequest, 
            }> = {
                url: '/api/nsk/v4/trip/sell',
                method: 'post',
                data: {
                    request,
                }
            };
            return this.client.makeRequest(requestObj);
    }

}
