/**
 * API - Current Routes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: trunk
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from "rxjs/Observable";
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import IHttpClient from "../IHttpClient";
import { inject, injectable } from "inversify";
import { IAPIConfiguration } from "../IAPIConfiguration";
import { Headers } from "../Headers";
import HttpResponse from "../HttpResponse";

import * as Models from '../models';
import { Dictionary } from '../models';
import * as Enums from '../enums';
import { getClient, Request } from '../helper';

import { IJsonResponse } from '../model/iJsonResponse';
import { PassengerSsr } from '../model/passengerSsr';
import { PassengerSsrKey } from '../model/passengerSsrKey';
import { ResellSsrRequest } from '../model/resellSsrRequest';
import { SingleSsrByKeyRequestv2 } from '../model/singleSsrByKeyRequestv2';
import { SsrAvailability } from '../model/ssrAvailability';
import { SsrAvailabilityRequestv2 } from '../model/ssrAvailabilityRequestv2';
import { SsrByKeysRequestv2 } from '../model/ssrByKeysRequestv2';
import { SsrsRequest } from '../model/ssrsRequest';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class BookingssrsService {

    constructor(@inject(HTTP_CLIENT) protected client: ApiHttpClient) {}

    /**
     * Deletes by the SSR passenger key provided by metadata.
     * Requires a booking in state.
     * @param ssrKey Unique Ssr passenger identifier.
     
     */
    public apiNskV1BookingSsrsBySsrKeyDelete = (ssrKey: string, ) => {
        if (!ssrKey){
            throw new Error('Required parameter ssrKey was null or undefined when calling apiNskV1BookingSsrsBySsrKeyDelete.');
        }


            const requestObj: Request<{
                ssrKey: string, 
            }> = {
                url: '/api/nsk/v1/booking/ssrs/${encodeURIComponent(String(ssrKey))}',
                method: 'delete',
                data: {
                    ssrKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the current SSR by key.
     * Requires a booking in state.
     * @param ssrKey 
     
     */
    public apiNskV1BookingSsrsBySsrKeyGet = (ssrKey: string, ) => {
        if (!ssrKey){
            throw new Error('Required parameter ssrKey was null or undefined when calling apiNskV1BookingSsrsBySsrKeyGet.');
        }


            const requestObj: Request<{
                ssrKey: string, 
            }> = {
                url: '/api/nsk/v1/booking/ssrs/${encodeURIComponent(String(ssrKey))}',
                method: 'get',
                data: {
                    ssrKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Modify the ssr note.
     * Requires a booking in state.
     * @param ssrKey Unique Ssr key identifier.
     * @param note The updated note.
     
     */
    public apiNskV1BookingSsrsBySsrKeyPut = (ssrKey: string, note?: string, ) => {
        if (!ssrKey){
            throw new Error('Required parameter ssrKey was null or undefined when calling apiNskV1BookingSsrsBySsrKeyPut.');
        }


            const requestObj: Request<{
                ssrKey: string, note?: string, 
            }> = {
                url: '/api/nsk/v1/booking/ssrs/${encodeURIComponent(String(ssrKey))}',
                method: 'put',
                data: {
                    ssrKey,note,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the current SSRs added to the booking in state.
     * Requires a booking in state.
     
     */
    public apiNskV1BookingSsrsGet = () => {

            const requestObj: Request<{
                
            }> = {
                url: '/api/nsk/v1/booking/ssrs',
                method: 'get',
                data: {
                    
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Deletes the SSR by the request criteria.
     * Requires a booking in state.   This is an alternate way of deleting an SSR. Deleting by ID is recommended (see /api/booking/ssrs).  This method is useful if the UI is not querying availability and not using dynamic SSR information.
     * @param request Unique Ssr passenger information.
     
     */
    public apiNskV1BookingSsrsManualDelete = (request?: PassengerSsrKey, ) => {

            const requestObj: Request<{
                request?: PassengerSsrKey, 
            }> = {
                url: '/api/nsk/v1/booking/ssrs/manual',
                method: 'delete',
                data: {
                    request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Adds SSRs to the booking in state.
     * Adding an SSR by journey automatically adds the SSR to every segment.  Requires a booking in state.  This is an alternate way of creating an SSR. Creating by ID is recommended (see /api/booking/ssrs).  This method is useful if the UI is not querying availability and not using dynamic SSR information.
     * @param request 
     
     */
    public apiNskV1BookingSsrsManualPost = (request?: SsrsRequest, ) => {

            const requestObj: Request<{
                request?: SsrsRequest, 
            }> = {
                url: '/api/nsk/v1/booking/ssrs/manual',
                method: 'post',
                data: {
                    request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Resells any cancelled ssrs to the provided journey on the booking.
     * 
     * @param request The resell ssr request.
     
     */
    public apiNskV1BookingSsrsResellPost = (request?: ResellSsrRequest, ) => {

            const requestObj: Request<{
                request?: ResellSsrRequest, 
            }> = {
                url: '/api/nsk/v1/booking/ssrs/resell',
                method: 'post',
                data: {
                    request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Get the ssr&#39;s available to add to the booking in state.
     * Requires a booking in state.  By default, all ssr availability for the booking is returned.
     * @param request Optional request filter.
     
     */
    public apiNskV2BookingSsrsAvailabilityPost = (request?: SsrAvailabilityRequestv2, ) => {

            const requestObj: Request<{
                request?: SsrAvailabilityRequestv2, 
            }> = {
                url: '/api/nsk/v2/booking/ssrs/availability',
                method: 'post',
                data: {
                    request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Add an SSR to the booking in state.
     * Adding an SSR by journey automatically adds the SSR to every segment.  Requires a booking in state.
     * @param ssrKey The SSR key to add.
     * @param request The single SSR by key request.
     
     */
    public apiNskV2BookingSsrsBySsrKeyPost = (ssrKey: string, request?: SingleSsrByKeyRequestv2, ) => {
        if (!ssrKey){
            throw new Error('Required parameter ssrKey was null or undefined when calling apiNskV2BookingSsrsBySsrKeyPost.');
        }


            const requestObj: Request<{
                ssrKey: string, request?: SingleSsrByKeyRequestv2, 
            }> = {
                url: '/api/nsk/v2/booking/ssrs/${encodeURIComponent(String(ssrKey))}',
                method: 'post',
                data: {
                    ssrKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Adds SSRs to the booking in state.
     * Adding an SSR by journey automatically adds the SSR to every segment.  Requires a booking in state.
     * @param request The SSR by keys request.
     
     */
    public apiNskV2BookingSsrsPost = (request?: SsrByKeysRequestv2, ) => {

            const requestObj: Request<{
                request?: SsrByKeysRequestv2, 
            }> = {
                url: '/api/nsk/v2/booking/ssrs',
                method: 'post',
                data: {
                    request,
                }
            };
            return this.client.makeRequest(requestObj);
    }

}
