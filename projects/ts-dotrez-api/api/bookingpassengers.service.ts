/**
 * API - Current Routes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: trunk
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from "rxjs/Observable";
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import IHttpClient from "../IHttpClient";
import { inject, injectable } from "inversify";
import { IAPIConfiguration } from "../IAPIConfiguration";
import { Headers } from "../Headers";
import HttpResponse from "../HttpResponse";

import * as Models from '../models';
import { Dictionary } from '../models';
import * as Enums from '../enums';
import { getClient, Request } from '../helper';

import { AddSeatRequest } from '../model/addSeatRequest';
import { DeltaMapperInfant } from '../model/deltaMapperInfant';
import { DeltaMapperPassengerAddressEditRequest } from '../model/deltaMapperPassengerAddressEditRequest';
import { DeltaMapperPassengerBase } from '../model/deltaMapperPassengerBase';
import { DeltaMapperTravelDocumentEditRequest } from '../model/deltaMapperTravelDocumentEditRequest';
import { DeltaMapperTravelNotificationEditRequest } from '../model/deltaMapperTravelNotificationEditRequest';
import { IJsonResponse } from '../model/iJsonResponse';
import { Infant } from '../model/infant';
import { InlineResponse2005 } from '../model/inlineResponse2005';
import { InlineResponse2006 } from '../model/inlineResponse2006';
import { InlineResponse2007 } from '../model/inlineResponse2007';
import { NotificationEvent } from '../model/notificationEvent';
import { NotificationEventCreateRequest } from '../model/notificationEventCreateRequest';
import { NotificationTimedEvent } from '../model/notificationTimedEvent';
import { NotificationTimedEventCreateRequest } from '../model/notificationTimedEventCreateRequest';
import { NotificationTimedEventEditRequest } from '../model/notificationTimedEventEditRequest';
import { Passenger } from '../model/passenger';
import { PassengerAddress } from '../model/passengerAddress';
import { PassengerAddressCreateRequest } from '../model/passengerAddressCreateRequest';
import { PassengerAddressEditRequest } from '../model/passengerAddressEditRequest';
import { PassengerBag } from '../model/passengerBag';
import { PassengerBase } from '../model/passengerBase';
import { PassengerInfant } from '../model/passengerInfant';
import { PassengerInfantCreateRequest } from '../model/passengerInfantCreateRequest';
import { PassengerKeyResponse } from '../model/passengerKeyResponse';
import { PassengerPriceBreakdown } from '../model/passengerPriceBreakdown';
import { PassengerSeat } from '../model/passengerSeat';
import { PassengerTravelDocument } from '../model/passengerTravelDocument';
import { PassengerTypeCodeEditRequest } from '../model/passengerTypeCodeEditRequest';
import { TravelDocumentCreateRequest } from '../model/travelDocumentCreateRequest';
import { TravelDocumentEditRequest } from '../model/travelDocumentEditRequest';
import { TravelNotification } from '../model/travelNotification';
import { TravelNotificationCreateRequest } from '../model/travelNotificationCreateRequest';
import { TravelNotificationEditRequest } from '../model/travelNotificationEditRequest';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class BookingpassengersService {

    constructor(@inject(HTTP_CLIENT) protected client: ApiHttpClient) {}

    /**
     * Gets all the passenger price breakdown by passenger type.
     * 
     
     */
    public apiNskV1BookingPassengersBreakdownByTypeGet = () => {

            const requestObj: Request<{
                
            }> = {
                url: '/api/nsk/v1/booking/passengers/breakdown/byType',
                method: 'get',
                data: {
                    
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets all the passenger price breakdowns.
     * 
     
     */
    public apiNskV1BookingPassengersBreakdownGet = () => {

            const requestObj: Request<{
                
            }> = {
                url: '/api/nsk/v1/booking/passengers/breakdown',
                method: 'get',
                data: {
                    
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Deletes a passenger travel notification for a specific passenger on the booking in state.
     * 
     * @param passengerAlternateKey The passenger alternate key. This key will be null until the booking is committed.
     * @param travelNotificationKey The travel notification key.
     
     */
    public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyDelete = (passengerAlternateKey: string, travelNotificationKey: string, ) => {
        if (!passengerAlternateKey){
            throw new Error('Required parameter passengerAlternateKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyDelete.');
        }

        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyDelete.');
        }


            const requestObj: Request<{
                passengerAlternateKey: string, travelNotificationKey: string, 
            }> = {
                url: '/api/nsk/v1/booking/passengers/${encodeURIComponent(String(passengerAlternateKey))}/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}',
                method: 'delete',
                data: {
                    passengerAlternateKey,travelNotificationKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Deletes a notification event from a specific passenger travel notification on the booking in state.
     * 
     * @param passengerAlternateKey The passenger alternate key. This key will be null until the booking is committed.
     * @param travelNotificationKey The travel notification key.
     * @param eventType The notification event type.
     
     */
    public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyEventsByEventTypeDelete = (passengerAlternateKey: string, travelNotificationKey: string, eventType: 'DepartureDelay' | 'ArrivalDelay' | 'ScheduleChange' | 'CheckIn', ) => {
        if (!passengerAlternateKey){
            throw new Error('Required parameter passengerAlternateKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyEventsByEventTypeDelete.');
        }

        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyEventsByEventTypeDelete.');
        }

        if (!eventType){
            throw new Error('Required parameter eventType was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyEventsByEventTypeDelete.');
        }


            const requestObj: Request<{
                passengerAlternateKey: string, travelNotificationKey: string, eventType: 'DepartureDelay' | 'ArrivalDelay' | 'ScheduleChange' | 'CheckIn', 
            }> = {
                url: '/api/nsk/v1/booking/passengers/${encodeURIComponent(String(passengerAlternateKey))}/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}/events/${encodeURIComponent(String(eventType))}',
                method: 'delete',
                data: {
                    passengerAlternateKey,travelNotificationKey,eventType,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Get a notification event for a specific passenger travel notification on the booking in state.
     * 
     * @param passengerAlternateKey The passenger alternate key. This key will be null until the booking is committed.
     * @param travelNotificationKey The travel notification key.
     * @param eventType The event type.
     
     */
    public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyEventsByEventTypeGet = (passengerAlternateKey: string, travelNotificationKey: string, eventType: 'DepartureDelay' | 'ArrivalDelay' | 'ScheduleChange' | 'CheckIn', ) => {
        if (!passengerAlternateKey){
            throw new Error('Required parameter passengerAlternateKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyEventsByEventTypeGet.');
        }

        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyEventsByEventTypeGet.');
        }

        if (!eventType){
            throw new Error('Required parameter eventType was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyEventsByEventTypeGet.');
        }


            const requestObj: Request<{
                passengerAlternateKey: string, travelNotificationKey: string, eventType: 'DepartureDelay' | 'ArrivalDelay' | 'ScheduleChange' | 'CheckIn', 
            }> = {
                url: '/api/nsk/v1/booking/passengers/${encodeURIComponent(String(passengerAlternateKey))}/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}/events/${encodeURIComponent(String(eventType))}',
                method: 'get',
                data: {
                    passengerAlternateKey,travelNotificationKey,eventType,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets notification events for a specific passenger travel notification on the booking in state.
     * 
     * @param passengerAlternateKey The passenger alternate key. This key will be null until the booking is committed.
     * @param travelNotificationKey The travel notification key.
     
     */
    public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyEventsGet = (passengerAlternateKey: string, travelNotificationKey: string, ) => {
        if (!passengerAlternateKey){
            throw new Error('Required parameter passengerAlternateKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyEventsGet.');
        }

        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyEventsGet.');
        }


            const requestObj: Request<{
                passengerAlternateKey: string, travelNotificationKey: string, 
            }> = {
                url: '/api/nsk/v1/booking/passengers/${encodeURIComponent(String(passengerAlternateKey))}/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}/events',
                method: 'get',
                data: {
                    passengerAlternateKey,travelNotificationKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Adds a notification event to a specific passenger travel notification on the booking in state.
     * 
     * @param passengerAlternateKey The passenger alternate key. This key will be null until the booking is committed.
     * @param travelNotificationKey The travel notification key.
     * @param request The notification event create request.
     
     */
    public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyEventsPost = (passengerAlternateKey: string, travelNotificationKey: string, request?: NotificationEventCreateRequest, ) => {
        if (!passengerAlternateKey){
            throw new Error('Required parameter passengerAlternateKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyEventsPost.');
        }

        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyEventsPost.');
        }


            const requestObj: Request<{
                passengerAlternateKey: string, travelNotificationKey: string, request?: NotificationEventCreateRequest, 
            }> = {
                url: '/api/nsk/v1/booking/passengers/${encodeURIComponent(String(passengerAlternateKey))}/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}/events',
                method: 'post',
                data: {
                    passengerAlternateKey,travelNotificationKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets a passenger travel notification for a specific passenger on the booking in state.
     * 
     * @param passengerAlternateKey The passenger alternate key. This key will be null until the booking is committed.
     * @param travelNotificationKey The travel notification key.
     
     */
    public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyGet = (passengerAlternateKey: string, travelNotificationKey: string, ) => {
        if (!passengerAlternateKey){
            throw new Error('Required parameter passengerAlternateKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyGet.');
        }

        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyGet.');
        }


            const requestObj: Request<{
                passengerAlternateKey: string, travelNotificationKey: string, 
            }> = {
                url: '/api/nsk/v1/booking/passengers/${encodeURIComponent(String(passengerAlternateKey))}/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}',
                method: 'get',
                data: {
                    passengerAlternateKey,travelNotificationKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Patches a passenger travel notification for a specific passenger on the booking in state.
     * 
     * @param passengerAlternateKey The passenger alternate key. This key will be null until the booking is committed.
     * @param travelNotificationKey The travel notification key.
     * @param request The delta mapper travel notification edit request.
     
     */
    public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyPatch = (passengerAlternateKey: string, travelNotificationKey: string, request?: DeltaMapperTravelNotificationEditRequest, ) => {
        if (!passengerAlternateKey){
            throw new Error('Required parameter passengerAlternateKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyPatch.');
        }

        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyPatch.');
        }


            const requestObj: Request<{
                passengerAlternateKey: string, travelNotificationKey: string, request?: DeltaMapperTravelNotificationEditRequest, 
            }> = {
                url: '/api/nsk/v1/booking/passengers/${encodeURIComponent(String(passengerAlternateKey))}/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}',
                method: 'patch',
                data: {
                    passengerAlternateKey,travelNotificationKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Updates a passenger travel notification for a specific passenger on the booking in state.
     * 
     * @param passengerAlternateKey The passenger alternate key. This key will be null until the booking is committed.
     * @param travelNotificationKey The travel notification key.
     * @param request The travel notification edit request.
     
     */
    public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyPut = (passengerAlternateKey: string, travelNotificationKey: string, request?: TravelNotificationEditRequest, ) => {
        if (!passengerAlternateKey){
            throw new Error('Required parameter passengerAlternateKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyPut.');
        }

        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyPut.');
        }


            const requestObj: Request<{
                passengerAlternateKey: string, travelNotificationKey: string, request?: TravelNotificationEditRequest, 
            }> = {
                url: '/api/nsk/v1/booking/passengers/${encodeURIComponent(String(passengerAlternateKey))}/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}',
                method: 'put',
                data: {
                    passengerAlternateKey,travelNotificationKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Deletes a notification timed event from a specific passenger travel notification on the booking in state.
     * 
     * @param passengerAlternateKey The passenger alternate key. This key will be null until the booking is committed.
     * @param travelNotificationKey The travel notification key.
     * @param timedEventType The notification timed event type.
     
     */
    public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeDelete = (passengerAlternateKey: string, travelNotificationKey: string, timedEventType: 'Departure' | 'Arrival', ) => {
        if (!passengerAlternateKey){
            throw new Error('Required parameter passengerAlternateKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeDelete.');
        }

        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeDelete.');
        }

        if (!timedEventType){
            throw new Error('Required parameter timedEventType was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeDelete.');
        }


            const requestObj: Request<{
                passengerAlternateKey: string, travelNotificationKey: string, timedEventType: 'Departure' | 'Arrival', 
            }> = {
                url: '/api/nsk/v1/booking/passengers/${encodeURIComponent(String(passengerAlternateKey))}/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}/timedEvents/${encodeURIComponent(String(timedEventType))}',
                method: 'delete',
                data: {
                    passengerAlternateKey,travelNotificationKey,timedEventType,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Get a notification timed event for a specific passenger travel notification on the booking in state.
     * 
     * @param passengerAlternateKey The passenger alternate key. This key will be null until the booking is committed.
     * @param travelNotificationKey The travel notification key.
     * @param timedEventType The timed event type.
     
     */
    public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeGet = (passengerAlternateKey: string, travelNotificationKey: string, timedEventType: 'Departure' | 'Arrival', ) => {
        if (!passengerAlternateKey){
            throw new Error('Required parameter passengerAlternateKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeGet.');
        }

        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeGet.');
        }

        if (!timedEventType){
            throw new Error('Required parameter timedEventType was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeGet.');
        }


            const requestObj: Request<{
                passengerAlternateKey: string, travelNotificationKey: string, timedEventType: 'Departure' | 'Arrival', 
            }> = {
                url: '/api/nsk/v1/booking/passengers/${encodeURIComponent(String(passengerAlternateKey))}/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}/timedEvents/${encodeURIComponent(String(timedEventType))}',
                method: 'get',
                data: {
                    passengerAlternateKey,travelNotificationKey,timedEventType,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Updates a notification timed event for a specific passenger travel notification on the booking in state.
     * 
     * @param passengerAlternateKey The passenger alternate key. This key will be null until the booking is committed.
     * @param travelNotificationKey The travel notification key.
     * @param timedEventType The notification timed event type.
     * @param request The updated notification timed event request.
     
     */
    public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypePut = (passengerAlternateKey: string, travelNotificationKey: string, timedEventType: 'Departure' | 'Arrival', request?: NotificationTimedEventEditRequest, ) => {
        if (!passengerAlternateKey){
            throw new Error('Required parameter passengerAlternateKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypePut.');
        }

        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypePut.');
        }

        if (!timedEventType){
            throw new Error('Required parameter timedEventType was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypePut.');
        }


            const requestObj: Request<{
                passengerAlternateKey: string, travelNotificationKey: string, timedEventType: 'Departure' | 'Arrival', request?: NotificationTimedEventEditRequest, 
            }> = {
                url: '/api/nsk/v1/booking/passengers/${encodeURIComponent(String(passengerAlternateKey))}/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}/timedEvents/${encodeURIComponent(String(timedEventType))}',
                method: 'put',
                data: {
                    passengerAlternateKey,travelNotificationKey,timedEventType,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets notification timed events for a specific passenger travel notification on the booking in state.
     * 
     * @param passengerAlternateKey The passenger alternate key. This key will be null until the booking is committed.
     * @param travelNotificationKey The travel notification key.
     
     */
    public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyTimedEventsGet = (passengerAlternateKey: string, travelNotificationKey: string, ) => {
        if (!passengerAlternateKey){
            throw new Error('Required parameter passengerAlternateKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyTimedEventsGet.');
        }

        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyTimedEventsGet.');
        }


            const requestObj: Request<{
                passengerAlternateKey: string, travelNotificationKey: string, 
            }> = {
                url: '/api/nsk/v1/booking/passengers/${encodeURIComponent(String(passengerAlternateKey))}/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}/timedEvents',
                method: 'get',
                data: {
                    passengerAlternateKey,travelNotificationKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Adds a notification timed event to a specific passenger travel notification on the booking in state.
     * 
     * @param passengerAlternateKey The passenger alternate key. This key will be null until the booking is committed.
     * @param travelNotificationKey The travel notification key.
     * @param request The notification timed even create request.
     
     */
    public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyTimedEventsPost = (passengerAlternateKey: string, travelNotificationKey: string, request?: NotificationTimedEventCreateRequest, ) => {
        if (!passengerAlternateKey){
            throw new Error('Required parameter passengerAlternateKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyTimedEventsPost.');
        }

        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyTimedEventsPost.');
        }


            const requestObj: Request<{
                passengerAlternateKey: string, travelNotificationKey: string, request?: NotificationTimedEventCreateRequest, 
            }> = {
                url: '/api/nsk/v1/booking/passengers/${encodeURIComponent(String(passengerAlternateKey))}/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}/timedEvents',
                method: 'post',
                data: {
                    passengerAlternateKey,travelNotificationKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets passenger travel notifications for a specific passenger on the booking in state.
     * 
     * @param passengerAlternateKey The passenger alternate key. This key will be null until the booking is committed.
     
     */
    public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsGet = (passengerAlternateKey: string, ) => {
        if (!passengerAlternateKey){
            throw new Error('Required parameter passengerAlternateKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsGet.');
        }


            const requestObj: Request<{
                passengerAlternateKey: string, 
            }> = {
                url: '/api/nsk/v1/booking/passengers/${encodeURIComponent(String(passengerAlternateKey))}/travelNotifications',
                method: 'get',
                data: {
                    passengerAlternateKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Creates a passenger travel notification for a specific passenger on the booking in state.
     * 
     * @param passengerAlternateKey The passenger alternate key. This key will be null until the booking is committed.
     * @param request The passenger travel notification create request.
     
     */
    public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsPost = (passengerAlternateKey: string, request?: TravelNotificationCreateRequest, ) => {
        if (!passengerAlternateKey){
            throw new Error('Required parameter passengerAlternateKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsPost.');
        }


            const requestObj: Request<{
                passengerAlternateKey: string, request?: TravelNotificationCreateRequest, 
            }> = {
                url: '/api/nsk/v1/booking/passengers/${encodeURIComponent(String(passengerAlternateKey))}/travelNotifications',
                method: 'post',
                data: {
                    passengerAlternateKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets a specific address from a specific passenger.
     * 
     * @param passengerKey The unique passenger key.
     * @param addressKey The unique address key.
     
     */
    public apiNskV1BookingPassengersByPassengerKeyAddressesByAddressKeyGet = (passengerKey: string, addressKey: string, ) => {
        if (!passengerKey){
            throw new Error('Required parameter passengerKey was null or undefined when calling apiNskV1BookingPassengersByPassengerKeyAddressesByAddressKeyGet.');
        }

        if (!addressKey){
            throw new Error('Required parameter addressKey was null or undefined when calling apiNskV1BookingPassengersByPassengerKeyAddressesByAddressKeyGet.');
        }


            const requestObj: Request<{
                passengerKey: string, addressKey: string, 
            }> = {
                url: '/api/nsk/v1/booking/passengers/${encodeURIComponent(String(passengerKey))}/addresses/${encodeURIComponent(String(addressKey))}',
                method: 'get',
                data: {
                    passengerKey,addressKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets the collection of addresses from a specific passenger.
     * 
     * @param passengerKey The unique passenger key.
     
     */
    public apiNskV1BookingPassengersByPassengerKeyAddressesGet = (passengerKey: string, ) => {
        if (!passengerKey){
            throw new Error('Required parameter passengerKey was null or undefined when calling apiNskV1BookingPassengersByPassengerKeyAddressesGet.');
        }


            const requestObj: Request<{
                passengerKey: string, 
            }> = {
                url: '/api/nsk/v1/booking/passengers/${encodeURIComponent(String(passengerKey))}/addresses',
                method: 'get',
                data: {
                    passengerKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieve a single bag from a specific passenger.
     * 
     * @param passengerKey The passenger key for the passenger to retrieve from.
     * @param baggageKey The bag key for the bag to retrieve.
     
     */
    public apiNskV1BookingPassengersByPassengerKeyBaggageByBaggageKeyGet = (passengerKey: string, baggageKey: string, ) => {
        if (!passengerKey){
            throw new Error('Required parameter passengerKey was null or undefined when calling apiNskV1BookingPassengersByPassengerKeyBaggageByBaggageKeyGet.');
        }

        if (!baggageKey){
            throw new Error('Required parameter baggageKey was null or undefined when calling apiNskV1BookingPassengersByPassengerKeyBaggageByBaggageKeyGet.');
        }


            const requestObj: Request<{
                passengerKey: string, baggageKey: string, 
            }> = {
                url: '/api/nsk/v1/booking/passengers/${encodeURIComponent(String(passengerKey))}/baggage/${encodeURIComponent(String(baggageKey))}',
                method: 'get',
                data: {
                    passengerKey,baggageKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets all the baggage for a specified passenger.
     * 
     * @param passengerKey The unique identifier for the passenger to get baggage for.
     
     */
    public apiNskV1BookingPassengersByPassengerKeyBaggageGet = (passengerKey: string, ) => {
        if (!passengerKey){
            throw new Error('Required parameter passengerKey was null or undefined when calling apiNskV1BookingPassengersByPassengerKeyBaggageGet.');
        }


            const requestObj: Request<{
                passengerKey: string, 
            }> = {
                url: '/api/nsk/v1/booking/passengers/${encodeURIComponent(String(passengerKey))}/baggage',
                method: 'get',
                data: {
                    passengerKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets a specific passenger price breakdown by passenger key.
     * 
     * @param passengerKey The specific passenger key.
     
     */
    public apiNskV1BookingPassengersByPassengerKeyBreakdownGet = (passengerKey: string, ) => {
        if (!passengerKey){
            throw new Error('Required parameter passengerKey was null or undefined when calling apiNskV1BookingPassengersByPassengerKeyBreakdownGet.');
        }


            const requestObj: Request<{
                passengerKey: string, 
            }> = {
                url: '/api/nsk/v1/booking/passengers/${encodeURIComponent(String(passengerKey))}/breakdown',
                method: 'get',
                data: {
                    passengerKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets a specific passenger&#39;s specific travel document.
     * 
     * @param passengerKey The unique passenger key.
     * @param travelDocumentKey The unique travel document key.
     
     */
    public apiNskV1BookingPassengersByPassengerKeyDocumentsByTravelDocumentKeyGet = (passengerKey: string, travelDocumentKey: string, ) => {
        if (!passengerKey){
            throw new Error('Required parameter passengerKey was null or undefined when calling apiNskV1BookingPassengersByPassengerKeyDocumentsByTravelDocumentKeyGet.');
        }

        if (!travelDocumentKey){
            throw new Error('Required parameter travelDocumentKey was null or undefined when calling apiNskV1BookingPassengersByPassengerKeyDocumentsByTravelDocumentKeyGet.');
        }


            const requestObj: Request<{
                passengerKey: string, travelDocumentKey: string, 
            }> = {
                url: '/api/nsk/v1/booking/passengers/${encodeURIComponent(String(passengerKey))}/documents/${encodeURIComponent(String(travelDocumentKey))}',
                method: 'get',
                data: {
                    passengerKey,travelDocumentKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets a specific passenger&#39;s collection of travel documents.
     * 
     * @param passengerKey The unique passenger key.
     
     */
    public apiNskV1BookingPassengersByPassengerKeyDocumentsGet = (passengerKey: string, ) => {
        if (!passengerKey){
            throw new Error('Required parameter passengerKey was null or undefined when calling apiNskV1BookingPassengersByPassengerKeyDocumentsGet.');
        }


            const requestObj: Request<{
                passengerKey: string, 
            }> = {
                url: '/api/nsk/v1/booking/passengers/${encodeURIComponent(String(passengerKey))}/documents',
                method: 'get',
                data: {
                    passengerKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets a specific passenger on the booking.
     * 
     * @param passengerKey The unique passenger key.
     
     */
    public apiNskV1BookingPassengersByPassengerKeyGet = (passengerKey: string, ) => {
        if (!passengerKey){
            throw new Error('Required parameter passengerKey was null or undefined when calling apiNskV1BookingPassengersByPassengerKeyGet.');
        }


            const requestObj: Request<{
                passengerKey: string, 
            }> = {
                url: '/api/nsk/v1/booking/passengers/${encodeURIComponent(String(passengerKey))}',
                method: 'get',
                data: {
                    passengerKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets a specific passenger infant&#39;s specific travel document.
     * 
     * @param passengerKey The unique passenger key.
     * @param travelDocumentKey The unique travel document key.
     
     */
    public apiNskV1BookingPassengersByPassengerKeyInfantDocumentsByTravelDocumentKeyGet = (passengerKey: string, travelDocumentKey: string, ) => {
        if (!passengerKey){
            throw new Error('Required parameter passengerKey was null or undefined when calling apiNskV1BookingPassengersByPassengerKeyInfantDocumentsByTravelDocumentKeyGet.');
        }

        if (!travelDocumentKey){
            throw new Error('Required parameter travelDocumentKey was null or undefined when calling apiNskV1BookingPassengersByPassengerKeyInfantDocumentsByTravelDocumentKeyGet.');
        }


            const requestObj: Request<{
                passengerKey: string, travelDocumentKey: string, 
            }> = {
                url: '/api/nsk/v1/booking/passengers/${encodeURIComponent(String(passengerKey))}/infant/documents/${encodeURIComponent(String(travelDocumentKey))}',
                method: 'get',
                data: {
                    passengerKey,travelDocumentKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets a specific passenger infant&#39;s collection of travel documents.
     * 
     * @param passengerKey The unique passenger key.
     
     */
    public apiNskV1BookingPassengersByPassengerKeyInfantDocumentsGet = (passengerKey: string, ) => {
        if (!passengerKey){
            throw new Error('Required parameter passengerKey was null or undefined when calling apiNskV1BookingPassengersByPassengerKeyInfantDocumentsGet.');
        }


            const requestObj: Request<{
                passengerKey: string, 
            }> = {
                url: '/api/nsk/v1/booking/passengers/${encodeURIComponent(String(passengerKey))}/infant/documents',
                method: 'get',
                data: {
                    passengerKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets a specific passenger&#39;s infant.
     * 
     * @param passengerKey The unique passenger key.
     
     */
    public apiNskV1BookingPassengersByPassengerKeyInfantGet = (passengerKey: string, ) => {
        if (!passengerKey){
            throw new Error('Required parameter passengerKey was null or undefined when calling apiNskV1BookingPassengersByPassengerKeyInfantGet.');
        }


            const requestObj: Request<{
                passengerKey: string, 
            }> = {
                url: '/api/nsk/v1/booking/passengers/${encodeURIComponent(String(passengerKey))}/infant',
                method: 'get',
                data: {
                    passengerKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Patches a specific passenger to the given passenger type.
     * NOTE: The date of birth doesn&#39;t need to be updated if the passenger&#39;s current date of birth still falls within the  new passenger type&#39;s age restriction.  This could also cause a repricing on the booking.  In addition, changing the passenger type will change the passenger key as well.
     * @param passengerKey The unique passenger key.
     * @param request The passenger type request containing the new passenger type.
     
     */
    public apiNskV1BookingPassengersByPassengerKeyPassengerTypeCodePatch = (passengerKey: string, request?: PassengerTypeCodeEditRequest, ) => {
        if (!passengerKey){
            throw new Error('Required parameter passengerKey was null or undefined when calling apiNskV1BookingPassengersByPassengerKeyPassengerTypeCodePatch.');
        }


            const requestObj: Request<{
                passengerKey: string, request?: PassengerTypeCodeEditRequest, 
            }> = {
                url: '/api/nsk/v1/booking/passengers/${encodeURIComponent(String(passengerKey))}/passengerTypeCode',
                method: 'patch',
                data: {
                    passengerKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Deletes a seat assignment from a specific passenger on the booking in state.
     * 
     * @param passengerKey 
     * @param unitKey The unique unit key.
     * @param waiveFee The flag indicating to waive the seat fees if permissions permit.
     * @param ignoreSeatSsrs Flag indicating whether to ignore seat SSR&#39;s.
     
     */
    public apiNskV1BookingPassengersByPassengerKeySeatsByUnitKeyDelete = (passengerKey: string, unitKey: string, waiveFee?: boolean, ignoreSeatSsrs?: boolean, ) => {
        if (!passengerKey){
            throw new Error('Required parameter passengerKey was null or undefined when calling apiNskV1BookingPassengersByPassengerKeySeatsByUnitKeyDelete.');
        }

        if (!unitKey){
            throw new Error('Required parameter unitKey was null or undefined when calling apiNskV1BookingPassengersByPassengerKeySeatsByUnitKeyDelete.');
        }

        let queryParameters: string[] = [];
        if (waiveFee !== undefined) {
            queryParameters.push("waiveFee="+encodeURIComponent(String(waiveFee)));
        }
        if (ignoreSeatSsrs !== undefined) {
            queryParameters.push("ignoreSeatSsrs="+encodeURIComponent(String(ignoreSeatSsrs)));
        }


            const requestObj: Request<{
                passengerKey: string, unitKey: string, waiveFee?: boolean, ignoreSeatSsrs?: boolean, 
            }> = {
                url: '/api/nsk/v1/booking/passengers/${encodeURIComponent(String(passengerKey))}/seats/${encodeURIComponent(String(unitKey))}',
                method: 'delete',
                data: {
                    passengerKey,unitKey,waiveFee,ignoreSeatSsrs,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets the collection of passengers on the booking.
     * 
     
     */
    public apiNskV1BookingPassengersGet = () => {

            const requestObj: Request<{
                
            }> = {
                url: '/api/nsk/v1/booking/passengers',
                method: 'get',
                data: {
                    
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Deletes a specific address on a specific passenger.
     * 
     * @param passengerKey The unique passenger key.
     * @param addressKey The unique addres key.
     
     */
    public apiNskV2BookingPassengersByPassengerKeyAddressesByAddressKeyDelete = (passengerKey: string, addressKey: string, ) => {
        if (!passengerKey){
            throw new Error('Required parameter passengerKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeyAddressesByAddressKeyDelete.');
        }

        if (!addressKey){
            throw new Error('Required parameter addressKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeyAddressesByAddressKeyDelete.');
        }


            const requestObj: Request<{
                passengerKey: string, addressKey: string, 
            }> = {
                url: '/api/nsk/v2/booking/passengers/${encodeURIComponent(String(passengerKey))}/addresses/${encodeURIComponent(String(addressKey))}',
                method: 'delete',
                data: {
                    passengerKey,addressKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Patches a specific address on a specific passenger.
     * 
     * @param passengerKey The unique passenger key.
     * @param addressKey The unique addres key.
     * @param request The patched address.
     
     */
    public apiNskV2BookingPassengersByPassengerKeyAddressesByAddressKeyPatch = (passengerKey: string, addressKey: string, request?: DeltaMapperPassengerAddressEditRequest, ) => {
        if (!passengerKey){
            throw new Error('Required parameter passengerKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeyAddressesByAddressKeyPatch.');
        }

        if (!addressKey){
            throw new Error('Required parameter addressKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeyAddressesByAddressKeyPatch.');
        }


            const requestObj: Request<{
                passengerKey: string, addressKey: string, request?: DeltaMapperPassengerAddressEditRequest, 
            }> = {
                url: '/api/nsk/v2/booking/passengers/${encodeURIComponent(String(passengerKey))}/addresses/${encodeURIComponent(String(addressKey))}',
                method: 'patch',
                data: {
                    passengerKey,addressKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Updates a specific address on a specific passenger.
     * 
     * @param passengerKey The unique passenger key.
     * @param addressKey The unique address key.
     * @param request The modified address.
     
     */
    public apiNskV2BookingPassengersByPassengerKeyAddressesByAddressKeyPut = (passengerKey: string, addressKey: string, request?: PassengerAddressEditRequest, ) => {
        if (!passengerKey){
            throw new Error('Required parameter passengerKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeyAddressesByAddressKeyPut.');
        }

        if (!addressKey){
            throw new Error('Required parameter addressKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeyAddressesByAddressKeyPut.');
        }


            const requestObj: Request<{
                passengerKey: string, addressKey: string, request?: PassengerAddressEditRequest, 
            }> = {
                url: '/api/nsk/v2/booking/passengers/${encodeURIComponent(String(passengerKey))}/addresses/${encodeURIComponent(String(addressKey))}',
                method: 'put',
                data: {
                    passengerKey,addressKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Creates a new address for a specific passenger.
     * 
     * @param passengerKey The unique passenger key.
     * @param request The new address request.
     
     */
    public apiNskV2BookingPassengersByPassengerKeyAddressesPost = (passengerKey: string, request?: PassengerAddressCreateRequest, ) => {
        if (!passengerKey){
            throw new Error('Required parameter passengerKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeyAddressesPost.');
        }


            const requestObj: Request<{
                passengerKey: string, request?: PassengerAddressCreateRequest, 
            }> = {
                url: '/api/nsk/v2/booking/passengers/${encodeURIComponent(String(passengerKey))}/addresses',
                method: 'post',
                data: {
                    passengerKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Deletes a specific passenger&#39;s specific travel document.
     * 
     * @param passengerKey The unique passenger key.
     * @param travelDocumentKey The unique travel document key.
     
     */
    public apiNskV2BookingPassengersByPassengerKeyDocumentsByTravelDocumentKeyDelete = (passengerKey: string, travelDocumentKey: string, ) => {
        if (!passengerKey){
            throw new Error('Required parameter passengerKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeyDocumentsByTravelDocumentKeyDelete.');
        }

        if (!travelDocumentKey){
            throw new Error('Required parameter travelDocumentKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeyDocumentsByTravelDocumentKeyDelete.');
        }


            const requestObj: Request<{
                passengerKey: string, travelDocumentKey: string, 
            }> = {
                url: '/api/nsk/v2/booking/passengers/${encodeURIComponent(String(passengerKey))}/documents/${encodeURIComponent(String(travelDocumentKey))}',
                method: 'delete',
                data: {
                    passengerKey,travelDocumentKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Patches a specific passenger&#39;s travel document.
     * 
     * @param passengerKey The unique passenger key.
     * @param travelDocumentKey The unique travel document key.
     * @param request The patched travel document.
     
     */
    public apiNskV2BookingPassengersByPassengerKeyDocumentsByTravelDocumentKeyPatch = (passengerKey: string, travelDocumentKey: string, request?: DeltaMapperTravelDocumentEditRequest, ) => {
        if (!passengerKey){
            throw new Error('Required parameter passengerKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeyDocumentsByTravelDocumentKeyPatch.');
        }

        if (!travelDocumentKey){
            throw new Error('Required parameter travelDocumentKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeyDocumentsByTravelDocumentKeyPatch.');
        }


            const requestObj: Request<{
                passengerKey: string, travelDocumentKey: string, request?: DeltaMapperTravelDocumentEditRequest, 
            }> = {
                url: '/api/nsk/v2/booking/passengers/${encodeURIComponent(String(passengerKey))}/documents/${encodeURIComponent(String(travelDocumentKey))}',
                method: 'patch',
                data: {
                    passengerKey,travelDocumentKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Updates a specific passenger&#39;s travel document.
     * 
     * @param passengerKey The unique passenger key.
     * @param travelDocumentKey The unique travel document key.
     * @param request The modified travel document.
     
     */
    public apiNskV2BookingPassengersByPassengerKeyDocumentsByTravelDocumentKeyPut = (passengerKey: string, travelDocumentKey: string, request?: TravelDocumentEditRequest, ) => {
        if (!passengerKey){
            throw new Error('Required parameter passengerKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeyDocumentsByTravelDocumentKeyPut.');
        }

        if (!travelDocumentKey){
            throw new Error('Required parameter travelDocumentKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeyDocumentsByTravelDocumentKeyPut.');
        }


            const requestObj: Request<{
                passengerKey: string, travelDocumentKey: string, request?: TravelDocumentEditRequest, 
            }> = {
                url: '/api/nsk/v2/booking/passengers/${encodeURIComponent(String(passengerKey))}/documents/${encodeURIComponent(String(travelDocumentKey))}',
                method: 'put',
                data: {
                    passengerKey,travelDocumentKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Create a new travel document for a specific passenger.
     * 
     * @param passengerKey The unique passenger key.
     * @param request The new travel document.
     
     */
    public apiNskV2BookingPassengersByPassengerKeyDocumentsPost = (passengerKey: string, request?: TravelDocumentCreateRequest, ) => {
        if (!passengerKey){
            throw new Error('Required parameter passengerKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeyDocumentsPost.');
        }


            const requestObj: Request<{
                passengerKey: string, request?: TravelDocumentCreateRequest, 
            }> = {
                url: '/api/nsk/v2/booking/passengers/${encodeURIComponent(String(passengerKey))}/documents',
                method: 'post',
                data: {
                    passengerKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Deletes a infant from a specific passenger.
     * 
     * @param passengerKey The unique passenger key.
     
     */
    public apiNskV2BookingPassengersByPassengerKeyInfantDelete = (passengerKey: string, ) => {
        if (!passengerKey){
            throw new Error('Required parameter passengerKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeyInfantDelete.');
        }


            const requestObj: Request<{
                passengerKey: string, 
            }> = {
                url: '/api/nsk/v2/booking/passengers/${encodeURIComponent(String(passengerKey))}/infant',
                method: 'delete',
                data: {
                    passengerKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Deletes a specific passenger infant specific travel document.
     * 
     * @param passengerKey The unique passenger key.
     * @param travelDocumentKey The unique travel document key.
     
     */
    public apiNskV2BookingPassengersByPassengerKeyInfantDocumentsByTravelDocumentKeyDelete = (passengerKey: string, travelDocumentKey: string, ) => {
        if (!passengerKey){
            throw new Error('Required parameter passengerKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeyInfantDocumentsByTravelDocumentKeyDelete.');
        }

        if (!travelDocumentKey){
            throw new Error('Required parameter travelDocumentKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeyInfantDocumentsByTravelDocumentKeyDelete.');
        }


            const requestObj: Request<{
                passengerKey: string, travelDocumentKey: string, 
            }> = {
                url: '/api/nsk/v2/booking/passengers/${encodeURIComponent(String(passengerKey))}/infant/documents/${encodeURIComponent(String(travelDocumentKey))}',
                method: 'delete',
                data: {
                    passengerKey,travelDocumentKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Patches a specific passenger infant travel document.
     * 
     * @param passengerKey The unique passenger key.
     * @param travelDocumentKey The unique travel document key.
     * @param request The patched travel document.
     
     */
    public apiNskV2BookingPassengersByPassengerKeyInfantDocumentsByTravelDocumentKeyPatch = (passengerKey: string, travelDocumentKey: string, request?: DeltaMapperTravelDocumentEditRequest, ) => {
        if (!passengerKey){
            throw new Error('Required parameter passengerKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeyInfantDocumentsByTravelDocumentKeyPatch.');
        }

        if (!travelDocumentKey){
            throw new Error('Required parameter travelDocumentKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeyInfantDocumentsByTravelDocumentKeyPatch.');
        }


            const requestObj: Request<{
                passengerKey: string, travelDocumentKey: string, request?: DeltaMapperTravelDocumentEditRequest, 
            }> = {
                url: '/api/nsk/v2/booking/passengers/${encodeURIComponent(String(passengerKey))}/infant/documents/${encodeURIComponent(String(travelDocumentKey))}',
                method: 'patch',
                data: {
                    passengerKey,travelDocumentKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Updates a specific passenger infant travel document.
     * 
     * @param passengerKey The unique passenger key.
     * @param travelDocumentKey The unique travel document key.
     * @param request The modified travel document.
     
     */
    public apiNskV2BookingPassengersByPassengerKeyInfantDocumentsByTravelDocumentKeyPut = (passengerKey: string, travelDocumentKey: string, request?: TravelDocumentEditRequest, ) => {
        if (!passengerKey){
            throw new Error('Required parameter passengerKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeyInfantDocumentsByTravelDocumentKeyPut.');
        }

        if (!travelDocumentKey){
            throw new Error('Required parameter travelDocumentKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeyInfantDocumentsByTravelDocumentKeyPut.');
        }


            const requestObj: Request<{
                passengerKey: string, travelDocumentKey: string, request?: TravelDocumentEditRequest, 
            }> = {
                url: '/api/nsk/v2/booking/passengers/${encodeURIComponent(String(passengerKey))}/infant/documents/${encodeURIComponent(String(travelDocumentKey))}',
                method: 'put',
                data: {
                    passengerKey,travelDocumentKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Create a new travel document for a specific passenger infant.
     * 
     * @param passengerKey The unique passenger key.
     * @param request The new travel document.
     
     */
    public apiNskV2BookingPassengersByPassengerKeyInfantDocumentsPost = (passengerKey: string, request?: TravelDocumentCreateRequest, ) => {
        if (!passengerKey){
            throw new Error('Required parameter passengerKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeyInfantDocumentsPost.');
        }


            const requestObj: Request<{
                passengerKey: string, request?: TravelDocumentCreateRequest, 
            }> = {
                url: '/api/nsk/v2/booking/passengers/${encodeURIComponent(String(passengerKey))}/infant/documents',
                method: 'post',
                data: {
                    passengerKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Patches a infant on a specific passenger.
     * 
     * @param passengerKey The unique passenger key.
     * @param request The patched infant.
     
     */
    public apiNskV2BookingPassengersByPassengerKeyInfantPatch = (passengerKey: string, request?: DeltaMapperInfant, ) => {
        if (!passengerKey){
            throw new Error('Required parameter passengerKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeyInfantPatch.');
        }


            const requestObj: Request<{
                passengerKey: string, request?: DeltaMapperInfant, 
            }> = {
                url: '/api/nsk/v2/booking/passengers/${encodeURIComponent(String(passengerKey))}/infant',
                method: 'patch',
                data: {
                    passengerKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets passenger seat by key.
     * 
     * @param passengerKey Unique passenger key.
     * @param unitKey Unique unit key.
     
     */
    public apiNskV2BookingPassengersByPassengerKeySeatsByUnitKeyGet = (passengerKey: string, unitKey: string, ) => {
        if (!passengerKey){
            throw new Error('Required parameter passengerKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeySeatsByUnitKeyGet.');
        }

        if (!unitKey){
            throw new Error('Required parameter unitKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeySeatsByUnitKeyGet.');
        }


            const requestObj: Request<{
                passengerKey: string, unitKey: string, 
            }> = {
                url: '/api/nsk/v2/booking/passengers/${encodeURIComponent(String(passengerKey))}/seats/${encodeURIComponent(String(unitKey))}',
                method: 'get',
                data: {
                    passengerKey,unitKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Adds a seat assignment to a specific passenger on the booking in state.
     * This endpoint actively checks whether the passenger has a seat. If the passenger does  have a seat, it will delete the current seat the passenger occupies and add the requested  one. This may result in slightly slower response times.
     * @param passengerKey The passenger key.
     * @param unitKey The unit key.
     * @param request The add seat request.
     
     */
    public apiNskV2BookingPassengersByPassengerKeySeatsByUnitKeyPost = (passengerKey: string, unitKey: string, request?: AddSeatRequest, ) => {
        if (!passengerKey){
            throw new Error('Required parameter passengerKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeySeatsByUnitKeyPost.');
        }

        if (!unitKey){
            throw new Error('Required parameter unitKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeySeatsByUnitKeyPost.');
        }


            const requestObj: Request<{
                passengerKey: string, unitKey: string, request?: AddSeatRequest, 
            }> = {
                url: '/api/nsk/v2/booking/passengers/${encodeURIComponent(String(passengerKey))}/seats/${encodeURIComponent(String(unitKey))}',
                method: 'post',
                data: {
                    passengerKey,unitKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets all seats associated with a passenger.
     * 
     * @param passengerKey Passengers to get seats for.
     
     */
    public apiNskV2BookingPassengersByPassengerKeySeatsGet = (passengerKey: string, ) => {
        if (!passengerKey){
            throw new Error('Required parameter passengerKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeySeatsGet.');
        }


            const requestObj: Request<{
                passengerKey: string, 
            }> = {
                url: '/api/nsk/v2/booking/passengers/${encodeURIComponent(String(passengerKey))}/seats',
                method: 'get',
                data: {
                    passengerKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Creates an infant on a specific passenger.
     * 
     * @param passengerKey The unique passenger key.
     * @param request The new infant.
     
     */
    public apiNskV3BookingPassengersByPassengerKeyInfantPost = (passengerKey: string, request?: PassengerInfantCreateRequest, ) => {
        if (!passengerKey){
            throw new Error('Required parameter passengerKey was null or undefined when calling apiNskV3BookingPassengersByPassengerKeyInfantPost.');
        }


            const requestObj: Request<{
                passengerKey: string, request?: PassengerInfantCreateRequest, 
            }> = {
                url: '/api/nsk/v3/booking/passengers/${encodeURIComponent(String(passengerKey))}/infant',
                method: 'post',
                data: {
                    passengerKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Updates an infant on a specific passenger.
     * 
     * @param passengerKey The unique passenger key
     * @param request The modified infant.
     
     */
    public apiNskV3BookingPassengersByPassengerKeyInfantPut = (passengerKey: string, request?: Infant, ) => {
        if (!passengerKey){
            throw new Error('Required parameter passengerKey was null or undefined when calling apiNskV3BookingPassengersByPassengerKeyInfantPut.');
        }


            const requestObj: Request<{
                passengerKey: string, request?: Infant, 
            }> = {
                url: '/api/nsk/v3/booking/passengers/${encodeURIComponent(String(passengerKey))}/infant',
                method: 'put',
                data: {
                    passengerKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Patches a specific passenger on the booking.
     * 
     * @param passengerKey The unique passenger key.
     * @param waiveNameChangeFees Waive the name change fee.
     * @param request The patched passenger request.
     
     */
    public apiNskV3BookingPassengersByPassengerKeyPatch = (passengerKey: string, waiveNameChangeFees?: boolean, request?: DeltaMapperPassengerBase, ) => {
        if (!passengerKey){
            throw new Error('Required parameter passengerKey was null or undefined when calling apiNskV3BookingPassengersByPassengerKeyPatch.');
        }

        let queryParameters: string[] = [];
        if (waiveNameChangeFees !== undefined) {
            queryParameters.push("waiveNameChangeFees="+encodeURIComponent(String(waiveNameChangeFees)));
        }


            const requestObj: Request<{
                passengerKey: string, waiveNameChangeFees?: boolean, request?: DeltaMapperPassengerBase, 
            }> = {
                url: '/api/nsk/v3/booking/passengers/${encodeURIComponent(String(passengerKey))}',
                method: 'patch',
                data: {
                    passengerKey,waiveNameChangeFees,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Updates a specific passenger on the booking.
     * 
     * @param passengerKey The unique passenger key.
     * @param waiveNameChangeFees Waive the name change fees.
     * @param request The modified passenger request.
     
     */
    public apiNskV3BookingPassengersByPassengerKeyPut = (passengerKey: string, waiveNameChangeFees?: boolean, request?: PassengerBase, ) => {
        if (!passengerKey){
            throw new Error('Required parameter passengerKey was null or undefined when calling apiNskV3BookingPassengersByPassengerKeyPut.');
        }

        let queryParameters: string[] = [];
        if (waiveNameChangeFees !== undefined) {
            queryParameters.push("waiveNameChangeFees="+encodeURIComponent(String(waiveNameChangeFees)));
        }


            const requestObj: Request<{
                passengerKey: string, waiveNameChangeFees?: boolean, request?: PassengerBase, 
            }> = {
                url: '/api/nsk/v3/booking/passengers/${encodeURIComponent(String(passengerKey))}',
                method: 'put',
                data: {
                    passengerKey,waiveNameChangeFees,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }

}
