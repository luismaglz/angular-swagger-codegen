/**
 * API - Current Routes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: trunk
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from "rxjs/Observable";
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import IHttpClient from "../IHttpClient";
import { inject, injectable } from "inversify";
import { IAPIConfiguration } from "../IAPIConfiguration";
import { Headers } from "../Headers";
import HttpResponse from "../HttpResponse";

import * as Models from '../models';
import { Dictionary } from '../models';
import * as Enums from '../enums';
import { getClient, Request } from '../helper';

import { IJsonResponse } from '../model/iJsonResponse';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class RedisService {

    constructor(@inject(HTTP_CLIENT) protected client: ApiHttpClient) {}

    /**
     * 
     * 
     * @param name 
     
     */
    public apiV1RedisByNameDelete = (name: string, ) => {
        if (!name){
            throw new Error('Required parameter name was null or undefined when calling apiV1RedisByNameDelete.');
        }


            const requestObj: Request<{
                name: string, 
            }> = {
                url: '/api/v1/redis/${encodeURIComponent(String(name))}',
                method: 'delete',
                data: {
                    name,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * 
     * 
     
     */
    public apiV1RedisDelete = () => {

            const requestObj: Request<{
                
            }> = {
                url: '/api/v1/redis',
                method: 'delete',
                data: {
                    
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * 
     * 
     
     */
    public apiV1RedisGet = () => {

            const requestObj: Request<{
                
            }> = {
                url: '/api/v1/redis',
                method: 'get',
                data: {
                    
                }
            };
            return this.client.makeRequest(requestObj);
    }

}
