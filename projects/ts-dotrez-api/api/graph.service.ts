/**
 * API - Current Routes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: trunk
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from "rxjs/Observable";
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import IHttpClient from "../IHttpClient";
import { inject, injectable } from "inversify";
import { IAPIConfiguration } from "../IAPIConfiguration";
import { Headers } from "../Headers";
import HttpResponse from "../HttpResponse";

import * as Models from '../models';
import { Dictionary } from '../models';
import * as Enums from '../enums';
import { getClient, Request } from '../helper';

import { GraphQlQuery } from '../model/graphQlQuery';
import { GraphQlQueryv2 } from '../model/graphQlQueryv2';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class GraphService {

    constructor(@inject(HTTP_CLIENT) protected client: ApiHttpClient) {}

    /**
     * Invokes a graph query configured in utilities.
     * When a graph query is configured on the server under Resource Management it allows your payload sizes to be even smaller.
     * @param queryName The query name matching your resource management configuration.
     * @param cachedResults True to return cached results.
     * @param variables The json matching your json variables in your graph query.
     
     */
    public apiNskV1GraphByQueryNamePost = (queryName: string, cachedResults: boolean, variables?: any, ) => {
        if (!queryName){
            throw new Error('Required parameter queryName was null or undefined when calling apiNskV1GraphByQueryNamePost.');
        }

        if (!cachedResults){
            throw new Error('Required parameter cachedResults was null or undefined when calling apiNskV1GraphByQueryNamePost.');
        }

        let queryParameters: string[] = [];
        if (cachedResults !== undefined) {
            queryParameters.push("cachedResults="+encodeURIComponent(String(cachedResults)));
        }


            const requestObj: Request<{
                queryName: string, cachedResults: boolean, variables?: any, 
            }> = {
                url: '/api/nsk/v1/graph/${encodeURIComponent(String(queryName))}',
                method: 'post',
                data: {
                    queryName,cachedResults,variables,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * 
     * 
     * @param query 
     
     */
    public apiV1GraphPost = (query?: GraphQlQuery, ) => {

            const requestObj: Request<{
                query?: GraphQlQuery, 
            }> = {
                url: '/api/v1/graph',
                method: 'post',
                data: {
                    query,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * 
     * 
     * @param queryName 
     * @param query 
     
     */
    public apiV2GraphByQueryNamePost = (queryName: string, query?: GraphQlQueryv2, ) => {
        if (!queryName){
            throw new Error('Required parameter queryName was null or undefined when calling apiV2GraphByQueryNamePost.');
        }


            const requestObj: Request<{
                queryName: string, query?: GraphQlQueryv2, 
            }> = {
                url: '/api/v2/graph/${encodeURIComponent(String(queryName))}',
                method: 'post',
                data: {
                    queryName,query,
                }
            };
            return this.client.makeRequest(requestObj);
    }

}
