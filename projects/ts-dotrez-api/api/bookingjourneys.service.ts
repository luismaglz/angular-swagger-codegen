/**
 * API - Current Routes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: trunk
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from "rxjs/Observable";
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import IHttpClient from "../IHttpClient";
import { inject, injectable } from "inversify";
import { IAPIConfiguration } from "../IAPIConfiguration";
import { Headers } from "../Headers";
import HttpResponse from "../HttpResponse";

import * as Models from '../models';
import { Dictionary } from '../models';
import * as Enums from '../enums';
import { getClient, Request } from '../helper';

import { BundleSellRequest } from '../model/bundleSellRequest';
import { CancelJourneyRequest } from '../model/cancelJourneyRequest';
import { IJsonResponse } from '../model/iJsonResponse';
import { Journey } from '../model/journey';
import { PassengerBag } from '../model/passengerBag';
import { PassengerBagRequest } from '../model/passengerBagRequest';
import { TravelDocumentRequirements } from '../model/travelDocumentRequirements';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class BookingjourneysService {

    constructor(@inject(HTTP_CLIENT) protected client: ApiHttpClient) {}

    /**
     * Sells a service bundle for one or more passengers on a journey.
     * 
     * @param journeyKey The journey key.
     * @param request The bundle sell request.
     
     */
    public apiNskV1BookingJourneysByJourneyKeyBundlesPost = (journeyKey: string, request?: BundleSellRequest, ) => {
        if (!journeyKey){
            throw new Error('Required parameter journeyKey was null or undefined when calling apiNskV1BookingJourneysByJourneyKeyBundlesPost.');
        }


            const requestObj: Request<{
                journeyKey: string, request?: BundleSellRequest, 
            }> = {
                url: '/api/nsk/v1/booking/journeys/${encodeURIComponent(String(journeyKey))}/bundles',
                method: 'post',
                data: {
                    journeyKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Cancels the specific journey from the booking in state.
     * 
     * @param journeyKey The journey key to be canceled.
     * @param request The cancel journey request options.
     
     */
    public apiNskV1BookingJourneysByJourneyKeyDelete = (journeyKey: string, request?: CancelJourneyRequest, ) => {
        if (!journeyKey){
            throw new Error('Required parameter journeyKey was null or undefined when calling apiNskV1BookingJourneysByJourneyKeyDelete.');
        }


            const requestObj: Request<{
                journeyKey: string, request?: CancelJourneyRequest, 
            }> = {
                url: '/api/nsk/v1/booking/journeys/${encodeURIComponent(String(journeyKey))}',
                method: 'delete',
                data: {
                    journeyKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets a single journey by the key.
     * 
     * @param journeyKey 
     
     */
    public apiNskV1BookingJourneysByJourneyKeyGet = (journeyKey: string, ) => {
        if (!journeyKey){
            throw new Error('Required parameter journeyKey was null or undefined when calling apiNskV1BookingJourneysByJourneyKeyGet.');
        }


            const requestObj: Request<{
                journeyKey: string, 
            }> = {
                url: '/api/nsk/v1/booking/journeys/${encodeURIComponent(String(journeyKey))}',
                method: 'get',
                data: {
                    journeyKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets the passenger or associated infant&#39;s destination address requirements for a specific journey for the booking in-state.
     * This endpoint will determine if the passenger or the associated infant requires a destination address for the  given journey.                This does not determine if the passenger already has a qualifying address, only if the destination address  is required.
     * @param journeyKey The journey key to check requirements for.
     * @param passengerKey The passenger key to check requirements for.
     
     */
    public apiNskV1BookingJourneysByJourneyKeyPassengersByPassengerKeyAddressRequirementsGet = (journeyKey: string, passengerKey: string, ) => {
        if (!journeyKey){
            throw new Error('Required parameter journeyKey was null or undefined when calling apiNskV1BookingJourneysByJourneyKeyPassengersByPassengerKeyAddressRequirementsGet.');
        }

        if (!passengerKey){
            throw new Error('Required parameter passengerKey was null or undefined when calling apiNskV1BookingJourneysByJourneyKeyPassengersByPassengerKeyAddressRequirementsGet.');
        }


            const requestObj: Request<{
                journeyKey: string, passengerKey: string, 
            }> = {
                url: '/api/nsk/v1/booking/journeys/${encodeURIComponent(String(journeyKey))}/passengers/${encodeURIComponent(String(passengerKey))}/address/requirements',
                method: 'get',
                data: {
                    journeyKey,passengerKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Removes baggage from the booking.
     * 
     * @param journeyKey The unique identifier for the journey to remove from.
     * @param passengerKey The specific passenger key.
     * @param baggageKey Unique identifier for the bag to remove.
     
     */
    public apiNskV1BookingJourneysByJourneyKeyPassengersByPassengerKeyBaggageByBaggageKeyDelete = (journeyKey: string, passengerKey: string, baggageKey: string, ) => {
        if (!journeyKey){
            throw new Error('Required parameter journeyKey was null or undefined when calling apiNskV1BookingJourneysByJourneyKeyPassengersByPassengerKeyBaggageByBaggageKeyDelete.');
        }

        if (!passengerKey){
            throw new Error('Required parameter passengerKey was null or undefined when calling apiNskV1BookingJourneysByJourneyKeyPassengersByPassengerKeyBaggageByBaggageKeyDelete.');
        }

        if (!baggageKey){
            throw new Error('Required parameter baggageKey was null or undefined when calling apiNskV1BookingJourneysByJourneyKeyPassengersByPassengerKeyBaggageByBaggageKeyDelete.');
        }


            const requestObj: Request<{
                journeyKey: string, passengerKey: string, baggageKey: string, 
            }> = {
                url: '/api/nsk/v1/booking/journeys/${encodeURIComponent(String(journeyKey))}/passengers/${encodeURIComponent(String(passengerKey))}/baggage/${encodeURIComponent(String(baggageKey))}',
                method: 'delete',
                data: {
                    journeyKey,passengerKey,baggageKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets a single bag from a passenger on a journey.
     * 
     * @param journeyKey The journey key for the journey to retrieve from.
     * @param passengerKey The passenger key for the passenger to retrieve from.
     * @param baggageKey The bag key for the bag to retrieve.
     
     */
    public apiNskV1BookingJourneysByJourneyKeyPassengersByPassengerKeyBaggageByBaggageKeyGet = (journeyKey: string, passengerKey: string, baggageKey: string, ) => {
        if (!journeyKey){
            throw new Error('Required parameter journeyKey was null or undefined when calling apiNskV1BookingJourneysByJourneyKeyPassengersByPassengerKeyBaggageByBaggageKeyGet.');
        }

        if (!passengerKey){
            throw new Error('Required parameter passengerKey was null or undefined when calling apiNskV1BookingJourneysByJourneyKeyPassengersByPassengerKeyBaggageByBaggageKeyGet.');
        }

        if (!baggageKey){
            throw new Error('Required parameter baggageKey was null or undefined when calling apiNskV1BookingJourneysByJourneyKeyPassengersByPassengerKeyBaggageByBaggageKeyGet.');
        }


            const requestObj: Request<{
                journeyKey: string, passengerKey: string, baggageKey: string, 
            }> = {
                url: '/api/nsk/v1/booking/journeys/${encodeURIComponent(String(journeyKey))}/passengers/${encodeURIComponent(String(passengerKey))}/baggage/${encodeURIComponent(String(baggageKey))}',
                method: 'get',
                data: {
                    journeyKey,passengerKey,baggageKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets all baggage for a passenger on a specific journey.
     * 
     * @param journeyKey The journey key for the journey to retrieve from.
     * @param passengerKey The passenger key for the passenger to retrieve from.
     
     */
    public apiNskV1BookingJourneysByJourneyKeyPassengersByPassengerKeyBaggageGet = (journeyKey: string, passengerKey: string, ) => {
        if (!journeyKey){
            throw new Error('Required parameter journeyKey was null or undefined when calling apiNskV1BookingJourneysByJourneyKeyPassengersByPassengerKeyBaggageGet.');
        }

        if (!passengerKey){
            throw new Error('Required parameter passengerKey was null or undefined when calling apiNskV1BookingJourneysByJourneyKeyPassengersByPassengerKeyBaggageGet.');
        }


            const requestObj: Request<{
                journeyKey: string, passengerKey: string, 
            }> = {
                url: '/api/nsk/v1/booking/journeys/${encodeURIComponent(String(journeyKey))}/passengers/${encodeURIComponent(String(passengerKey))}/baggage',
                method: 'get',
                data: {
                    journeyKey,passengerKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Adds baggage to the booking.
     * 
     * @param journeyKey The unique identifier for the journey to remove from.
     * @param passengerKey The specific passenger key.
     * @param request A request to add bags to the given passenger.
     
     */
    public apiNskV1BookingJourneysByJourneyKeyPassengersByPassengerKeyBaggagePost = (journeyKey: string, passengerKey: string, request?: PassengerBagRequest, ) => {
        if (!journeyKey){
            throw new Error('Required parameter journeyKey was null or undefined when calling apiNskV1BookingJourneysByJourneyKeyPassengersByPassengerKeyBaggagePost.');
        }

        if (!passengerKey){
            throw new Error('Required parameter passengerKey was null or undefined when calling apiNskV1BookingJourneysByJourneyKeyPassengersByPassengerKeyBaggagePost.');
        }


            const requestObj: Request<{
                journeyKey: string, passengerKey: string, request?: PassengerBagRequest, 
            }> = {
                url: '/api/nsk/v1/booking/journeys/${encodeURIComponent(String(journeyKey))}/passengers/${encodeURIComponent(String(passengerKey))}/baggage',
                method: 'post',
                data: {
                    journeyKey,passengerKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets the travel document requirements for a specific journey for the booking in-state.
     * This endpoint will return a response containing a collection of travel document type codes that could fulfill  a travel document requirement.  If the \&quot;AtLeastOneDocumentRequired\&quot; value is true, then one or more documents  in the list are required.  However, it does not mean that every document in the list is required.  If  \&quot;AtLeastOneDocumentRequired\&quot; is false, then the list of document type codes represents a list of acceptable  travel documents, but nothing is required.                This endpoint does not determine if any passengers already have required travel documents.
     * @param journeyKey The journey key to get required travel documents for.
     
     */
    public apiNskV1BookingJourneysByJourneyKeyTravelDocumentRequirementsGet = (journeyKey: string, ) => {
        if (!journeyKey){
            throw new Error('Required parameter journeyKey was null or undefined when calling apiNskV1BookingJourneysByJourneyKeyTravelDocumentRequirementsGet.');
        }


            const requestObj: Request<{
                journeyKey: string, 
            }> = {
                url: '/api/nsk/v1/booking/journeys/${encodeURIComponent(String(journeyKey))}/travelDocument/requirements',
                method: 'get',
                data: {
                    journeyKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Cancels all the journeys on the current booking in state.
     * 
     
     */
    public apiNskV1BookingJourneysDelete = () => {

            const requestObj: Request<{
                
            }> = {
                url: '/api/nsk/v1/booking/journeys',
                method: 'delete',
                data: {
                    
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets the collection of journeys on the booking in state.
     * 
     
     */
    public apiNskV1BookingJourneysGet = () => {

            const requestObj: Request<{
                
            }> = {
                url: '/api/nsk/v1/booking/journeys',
                method: 'get',
                data: {
                    
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets the passenger or associated infant&#39;s destination address requirements for all journeys for the booking in-state.
     * This endpoint will determine if the passenger or the associated infant requires a destination address.  If a  destination address is required for the passenger or associated infant for any journey, then this will return  true.                 This does not determine if the passenger already has a qualifying address, only if the destination address  is required.
     * @param passengerKey The passenger key to check requirements for.
     
     */
    public apiNskV1BookingJourneysPassengersByPassengerKeyAddressRequirementsGet = (passengerKey: string, ) => {
        if (!passengerKey){
            throw new Error('Required parameter passengerKey was null or undefined when calling apiNskV1BookingJourneysPassengersByPassengerKeyAddressRequirementsGet.');
        }


            const requestObj: Request<{
                passengerKey: string, 
            }> = {
                url: '/api/nsk/v1/booking/journeys/passengers/${encodeURIComponent(String(passengerKey))}/address/requirements',
                method: 'get',
                data: {
                    passengerKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets the travel document requirements for all journeys for the booking in-state.
     * This endpoint will return a response containing a collection of travel document type codes that could fulfill  a travel document requirement.  If the \&quot;AtLeastOneDocumentRequired\&quot; value is true, then one or more documents  in the list are required.  However, it does not mean that every document in the list is required.  If  \&quot;AtLeastOneDocumentRequired\&quot; is false, then the list of document type codes represents a list of acceptable  travel documents, but nothing is required.                This endpoint does not determine if any passengers already have required travel documents.
     
     */
    public apiNskV1BookingJourneysTravelDocumentRequirementsGet = () => {

            const requestObj: Request<{
                
            }> = {
                url: '/api/nsk/v1/booking/journeys/travelDocument/requirements',
                method: 'get',
                data: {
                    
                }
            };
            return this.client.makeRequest(requestObj);
    }

}
