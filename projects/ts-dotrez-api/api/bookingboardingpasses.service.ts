/**
 * API - Current Routes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: trunk
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from "rxjs/Observable";
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import IHttpClient from "../IHttpClient";
import { inject, injectable } from "inversify";
import { IAPIConfiguration } from "../IAPIConfiguration";
import { Headers } from "../Headers";
import HttpResponse from "../HttpResponse";

import * as Models from '../models';
import { Dictionary } from '../models';
import * as Enums from '../enums';
import { getClient, Request } from '../helper';

import { BoardingPassFilterRequest } from '../model/boardingPassFilterRequest';
import { BoardingPassPassengerFilterRequest } from '../model/boardingPassPassengerFilterRequest';
import { BoardingPassesCollectionv2 } from '../model/boardingPassesCollectionv2';
import { BoardingPassesM2D } from '../model/boardingPassesM2D';
import { BoardingPassesS2D } from '../model/boardingPassesS2D';
import { IJsonResponse } from '../model/iJsonResponse';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class BookingboardingpassesService {

    constructor(@inject(HTTP_CLIENT) protected client: ApiHttpClient) {}

    /**
     * Retrieves the specific journeys boarding passes using the M2D barcode type. This endpoint will only give a single  barcode back even if the journey contains multiple segments. Note that if the journey has only one segment the M2D  barcode will look just like the S2D barcode.
     * 
     * @param journeyKey The specific journey to get boarding passes for.
     * @param request The boarding pass passenger filter request.
     
     */
    public apiNskV1BookingBoardingpassesM2dJourneyByJourneyKeyPost = (journeyKey: string, request?: BoardingPassPassengerFilterRequest, ) => {
        if (!journeyKey){
            throw new Error('Required parameter journeyKey was null or undefined when calling apiNskV1BookingBoardingpassesM2dJourneyByJourneyKeyPost.');
        }


            const requestObj: Request<{
                journeyKey: string, request?: BoardingPassPassengerFilterRequest, 
            }> = {
                url: '/api/nsk/v1/booking/boardingpasses/m2d/journey/${encodeURIComponent(String(journeyKey))}',
                method: 'post',
                data: {
                    journeyKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the specific journeys boarding passes for each segment using the S2D barcode type. This endpoint will  provide a single barcode for each segment.
     * 
     * @param journeyKey The specific journey to get boarding passes for.
     * @param request The boarding pass passenger filter request.
     
     */
    public apiNskV1BookingBoardingpassesS2dJourneyByJourneyKeyPost = (journeyKey: string, request?: BoardingPassPassengerFilterRequest, ) => {
        if (!journeyKey){
            throw new Error('Required parameter journeyKey was null or undefined when calling apiNskV1BookingBoardingpassesS2dJourneyByJourneyKeyPost.');
        }


            const requestObj: Request<{
                journeyKey: string, request?: BoardingPassPassengerFilterRequest, 
            }> = {
                url: '/api/nsk/v1/booking/boardingpasses/s2d/journey/${encodeURIComponent(String(journeyKey))}',
                method: 'post',
                data: {
                    journeyKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the version of the boarding passes based on a specific journey.
     * 
     * @param journeyKey The journey to retrieve boarding passes for.
     * @param request The passenger/segment filter request.
     
     */
    public apiNskV3BookingBoardingpassesJourneyByJourneyKeyPost = (journeyKey: string, request?: BoardingPassFilterRequest, ) => {
        if (!journeyKey){
            throw new Error('Required parameter journeyKey was null or undefined when calling apiNskV3BookingBoardingpassesJourneyByJourneyKeyPost.');
        }


            const requestObj: Request<{
                journeyKey: string, request?: BoardingPassFilterRequest, 
            }> = {
                url: '/api/nsk/v3/booking/boardingpasses/journey/${encodeURIComponent(String(journeyKey))}',
                method: 'post',
                data: {
                    journeyKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the version of the boarding passes based on a specific segment.
     * 
     * @param segmentKey The segment to retrieve boarding passes for.
     * @param request The passenger filter request
     
     */
    public apiNskV3BookingBoardingpassesSegmentBySegmentKeyPost = (segmentKey: string, request?: BoardingPassPassengerFilterRequest, ) => {
        if (!segmentKey){
            throw new Error('Required parameter segmentKey was null or undefined when calling apiNskV3BookingBoardingpassesSegmentBySegmentKeyPost.');
        }


            const requestObj: Request<{
                segmentKey: string, request?: BoardingPassPassengerFilterRequest, 
            }> = {
                url: '/api/nsk/v3/booking/boardingpasses/segment/${encodeURIComponent(String(segmentKey))}',
                method: 'post',
                data: {
                    segmentKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }

}
