/**
 * API - Current Routes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: trunk
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from "rxjs/Observable";
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import IHttpClient from "../IHttpClient";
import { inject, injectable } from "inversify";
import { IAPIConfiguration } from "../IAPIConfiguration";
import { Headers } from "../Headers";
import HttpResponse from "../HttpResponse";

import * as Models from '../models';
import { Dictionary } from '../models';
import * as Enums from '../enums';
import { getClient, Request } from '../helper';

import { IJsonResponse } from '../model/iJsonResponse';
import { Voucher } from '../model/voucher';
import { VoucherConfiguration } from '../model/voucherConfiguration';
import { VoucherItem } from '../model/voucherItem';
import { VoucherUpdateRequest } from '../model/voucherUpdateRequest';
import { VouchersSummaryResponse } from '../model/vouchersSummaryResponse';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class VouchersService {

    constructor(@inject(HTTP_CLIENT) protected client: ApiHttpClient) {}

    /**
     * Searches for vouchers issued within the given date range.
     * 
     * @param beginDate The starting date.
     * @param pageSize The number of items to return.
     * @param lastPageKey The key returned previously to get the next page of items.
     * @param endDate The ending date.
     
     */
    public apiNskV1VouchersByDateGet = (beginDate: Date, pageSize?: number, lastPageKey?: string, endDate?: Date, ) => {
        if (!beginDate){
            throw new Error('Required parameter beginDate was null or undefined when calling apiNskV1VouchersByDateGet.');
        }

        let queryParameters: string[] = [];
        if (pageSize !== undefined) {
            queryParameters.push("pageSize="+encodeURIComponent(String(pageSize)));
        }
        if (lastPageKey !== undefined) {
            queryParameters.push("lastPageKey="+encodeURIComponent(String(lastPageKey)));
        }
        if (beginDate !== undefined) {
           queryParameters.push("beginDate="+encodeURIComponent(<any>beginDate.toISOString()));
        }
        if (endDate !== undefined) {
           queryParameters.push("endDate="+encodeURIComponent(<any>endDate.toISOString()));
        }


            const requestObj: Request<{
                beginDate: Date, pageSize?: number, lastPageKey?: string, endDate?: Date, 
            }> = {
                url: '/api/nsk/v1/vouchers/byDate',
                method: 'get',
                data: {
                    beginDate,pageSize,lastPageKey,endDate,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets vouchers associated with a voucher issuance.
     * 
     * @param voucherIssuanceKey The voucher issuance key.
     
     */
    public apiNskV1VouchersByIssuanceByVoucherIssuanceKeyGet = (voucherIssuanceKey: string, ) => {
        if (!voucherIssuanceKey){
            throw new Error('Required parameter voucherIssuanceKey was null or undefined when calling apiNskV1VouchersByIssuanceByVoucherIssuanceKeyGet.');
        }


            const requestObj: Request<{
                voucherIssuanceKey: string, 
            }> = {
                url: '/api/nsk/v1/vouchers/byIssuance/${encodeURIComponent(String(voucherIssuanceKey))}',
                method: 'get',
                data: {
                    voucherIssuanceKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets a collection of vouchers based on the market information.
     * 
     * @param destination Gets or sets the leg arrival station.
     * @param origin Gets or sets the leg departure station.
     * @param departureDate The departure date.
     * @param identifier The unique transportation identifier.
     * @param carrierCode The carrier code.
     * @param opSuffix The op suffix.
     
     */
    public apiNskV1VouchersByMarketGet = (destination: string, origin: string, departureDate: Date, identifier: string, carrierCode: string, opSuffix?: string, ) => {
        if (!destination){
            throw new Error('Required parameter destination was null or undefined when calling apiNskV1VouchersByMarketGet.');
        }

        if (!origin){
            throw new Error('Required parameter origin was null or undefined when calling apiNskV1VouchersByMarketGet.');
        }

        if (!departureDate){
            throw new Error('Required parameter departureDate was null or undefined when calling apiNskV1VouchersByMarketGet.');
        }

        if (!identifier){
            throw new Error('Required parameter identifier was null or undefined when calling apiNskV1VouchersByMarketGet.');
        }

        if (!carrierCode){
            throw new Error('Required parameter carrierCode was null or undefined when calling apiNskV1VouchersByMarketGet.');
        }

        let queryParameters: string[] = [];
        if (destination !== undefined) {
            queryParameters.push("destination="+encodeURIComponent(String(destination)));
        }
        if (origin !== undefined) {
            queryParameters.push("origin="+encodeURIComponent(String(origin)));
        }
        if (departureDate !== undefined) {
           queryParameters.push("departureDate="+encodeURIComponent(<any>departureDate.toISOString()));
        }
        if (identifier !== undefined) {
            queryParameters.push("identifier="+encodeURIComponent(String(identifier)));
        }
        if (carrierCode !== undefined) {
            queryParameters.push("carrierCode="+encodeURIComponent(String(carrierCode)));
        }
        if (opSuffix !== undefined) {
            queryParameters.push("opSuffix="+encodeURIComponent(String(opSuffix)));
        }


            const requestObj: Request<{
                destination: string, origin: string, departureDate: Date, identifier: string, carrierCode: string, opSuffix?: string, 
            }> = {
                url: '/api/nsk/v1/vouchers/byMarket',
                method: 'get',
                data: {
                    destination,origin,departureDate,identifier,carrierCode,opSuffix,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets a specific voucher based upon the voucher key.
     * 
     * @param voucherKey The voucher key.
     
     */
    public apiNskV1VouchersByVoucherKeyGet = (voucherKey: string, ) => {
        if (!voucherKey){
            throw new Error('Required parameter voucherKey was null or undefined when calling apiNskV1VouchersByVoucherKeyGet.');
        }


            const requestObj: Request<{
                voucherKey: string, 
            }> = {
                url: '/api/nsk/v1/vouchers/${encodeURIComponent(String(voucherKey))}',
                method: 'get',
                data: {
                    voucherKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Changes the voucher status.
     * 
     * @param voucherKey The voucher key.
     * @param request The voucher update request.
     
     */
    public apiNskV1VouchersByVoucherKeyPut = (voucherKey: string, request?: VoucherUpdateRequest, ) => {
        if (!voucherKey){
            throw new Error('Required parameter voucherKey was null or undefined when calling apiNskV1VouchersByVoucherKeyPut.');
        }


            const requestObj: Request<{
                voucherKey: string, request?: VoucherUpdateRequest, 
            }> = {
                url: '/api/nsk/v1/vouchers/${encodeURIComponent(String(voucherKey))}',
                method: 'put',
                data: {
                    voucherKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets a specific voucher configuration based on the configuration code.
     * 
     * @param configurationCode The code of the voucher configuration to retrieve.
     
     */
    public apiNskV1VouchersConfigurationByConfigurationCodeGet = (configurationCode: string, ) => {
        if (!configurationCode){
            throw new Error('Required parameter configurationCode was null or undefined when calling apiNskV1VouchersConfigurationByConfigurationCodeGet.');
        }


            const requestObj: Request<{
                configurationCode: string, 
            }> = {
                url: '/api/nsk/v1/vouchers/configuration/${encodeURIComponent(String(configurationCode))}',
                method: 'get',
                data: {
                    configurationCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets all available voucher configurations.
     * 
     
     */
    public apiNskV1VouchersConfigurationGet = () => {

            const requestObj: Request<{
                
            }> = {
                url: '/api/nsk/v1/vouchers/configuration',
                method: 'get',
                data: {
                    
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets vouchers based upon data in the request.
     * 
     * @param customerNameFirstName The first name associated with the voucher.
     * @param customerNameLastName The last name associated with the voucher.
     * @param activeOnly The flag to indicate if only active items should be returned.
     * @param recordLocator The record locator associated with the voucher.
     * @param customerNumber The customer number associated with the voucher.
     * @param cultureCode The culture code of the paged request.
     
     */
    public apiNskV1VouchersGet = (customerNameFirstName: string, customerNameLastName: string, activeOnly: boolean, recordLocator?: string, customerNumber?: string, cultureCode?: string, ) => {
        if (!customerNameFirstName){
            throw new Error('Required parameter customerNameFirstName was null or undefined when calling apiNskV1VouchersGet.');
        }

        if (!customerNameLastName){
            throw new Error('Required parameter customerNameLastName was null or undefined when calling apiNskV1VouchersGet.');
        }

        if (!activeOnly){
            throw new Error('Required parameter activeOnly was null or undefined when calling apiNskV1VouchersGet.');
        }

        let queryParameters: string[] = [];
        if (recordLocator !== undefined) {
            queryParameters.push("recordLocator="+encodeURIComponent(String(recordLocator)));
        }
        if (customerNameFirstName !== undefined) {
            queryParameters.push("customerNameFirstName="+encodeURIComponent(String(customerNameFirstName)));
        }
        if (customerNameLastName !== undefined) {
            queryParameters.push("customerNameLastName="+encodeURIComponent(String(customerNameLastName)));
        }
        if (customerNumber !== undefined) {
            queryParameters.push("customerNumber="+encodeURIComponent(String(customerNumber)));
        }
        if (activeOnly !== undefined) {
            queryParameters.push("activeOnly="+encodeURIComponent(String(activeOnly)));
        }
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }


            const requestObj: Request<{
                customerNameFirstName: string, customerNameLastName: string, activeOnly: boolean, recordLocator?: string, customerNumber?: string, cultureCode?: string, 
            }> = {
                url: '/api/nsk/v1/vouchers',
                method: 'get',
                data: {
                    customerNameFirstName,customerNameLastName,activeOnly,recordLocator,customerNumber,cultureCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }

}
