/**
 * API - Current Routes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: trunk
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from "rxjs/Observable";
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import IHttpClient from "../IHttpClient";
import { inject, injectable } from "inversify";
import { IAPIConfiguration } from "../IAPIConfiguration";
import { Headers } from "../Headers";
import HttpResponse from "../HttpResponse";

import { BookingQueueItemBase } from '../model/bookingQueueItemBase';
import { DeleteBookingQueueItemBaseRequest } from '../model/deleteBookingQueueItemBaseRequest';
import { DequeueTravelSummary } from '../model/dequeueTravelSummary';
import { IJsonResponse } from '../model/iJsonResponse';
import { MoveBookingQueueItemBase } from '../model/moveBookingQueueItemBase';
import { QueueResults } from '../model/queueResults';
import { TravelQueueItemRequest } from '../model/travelQueueItemRequest';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class QueuesService {
    private basePath: string = 'https://localhost';

    constructor(@inject("IApiHttpClient") private httpClient: IHttpClient,
        @inject("IAPIConfiguration") private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * Removes booking queue items from the specified queue.
     * 
     * @param bookingQueueCode 
     * @param bookingQueueItemKey 
     * @param request 
     
     */
    public apiNskV1QueuesBookingsByBookingQueueCodeItemsByBookingQueueItemKeyDelete(bookingQueueCode: string, bookingQueueItemKey: string, request?: DeleteBookingQueueItemBaseRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1QueuesBookingsByBookingQueueCodeItemsByBookingQueueItemKeyDelete(bookingQueueCode: string, bookingQueueItemKey: string, request?: DeleteBookingQueueItemBaseRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1QueuesBookingsByBookingQueueCodeItemsByBookingQueueItemKeyDelete(bookingQueueCode: string, bookingQueueItemKey: string, request?: DeleteBookingQueueItemBaseRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!bookingQueueCode){
            throw new Error('Required parameter bookingQueueCode was null or undefined when calling apiNskV1QueuesBookingsByBookingQueueCodeItemsByBookingQueueItemKeyDelete.');
        }

        if (!bookingQueueItemKey){
            throw new Error('Required parameter bookingQueueItemKey was null or undefined when calling apiNskV1QueuesBookingsByBookingQueueCodeItemsByBookingQueueItemKeyDelete.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.delete(`${this.basePath}/api/nsk/v1/queues/bookings/${encodeURIComponent(String(bookingQueueCode))}/items/${encodeURIComponent(String(bookingQueueItemKey))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Moves to a different queue.
     * The booking queue proxy and service model do not currently support getting the queue code  the item was moved to. Therefore, it is not possible at this time to provide a link to  access the item on a different queue or a configurable response containing the queue object.  Additionally, the proxy and service model do not allow for getting a particular item within a  queue.
     * @param bookingQueueCode 
     * @param bookingQueueItemKey 
     * @param request 
     
     */
    public apiNskV1QueuesBookingsByBookingQueueCodeItemsByBookingQueueItemKeyPut(bookingQueueCode: string, bookingQueueItemKey: string, request?: MoveBookingQueueItemBase, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1QueuesBookingsByBookingQueueCodeItemsByBookingQueueItemKeyPut(bookingQueueCode: string, bookingQueueItemKey: string, request?: MoveBookingQueueItemBase, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1QueuesBookingsByBookingQueueCodeItemsByBookingQueueItemKeyPut(bookingQueueCode: string, bookingQueueItemKey: string, request?: MoveBookingQueueItemBase, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!bookingQueueCode){
            throw new Error('Required parameter bookingQueueCode was null or undefined when calling apiNskV1QueuesBookingsByBookingQueueCodeItemsByBookingQueueItemKeyPut.');
        }

        if (!bookingQueueItemKey){
            throw new Error('Required parameter bookingQueueItemKey was null or undefined when calling apiNskV1QueuesBookingsByBookingQueueCodeItemsByBookingQueueItemKeyPut.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.put(`${this.basePath}/api/nsk/v1/queues/bookings/${encodeURIComponent(String(bookingQueueCode))}/items/${encodeURIComponent(String(bookingQueueItemKey))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Pops the next item in the travel queue.
     * This will delete the item from the queue.  This action requires a session token.
     * @param travelQueueCode Travel queue code to get next item from.
     * @param subQueueCode Sub queue code.
     
     */
    public apiNskV1QueuesTravelByTravelQueueCodeNextGet(travelQueueCode: string, subQueueCode?: string, observe?: 'body', headers?: Headers): Observable<DequeueTravelSummary>;
    public apiNskV1QueuesTravelByTravelQueueCodeNextGet(travelQueueCode: string, subQueueCode?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<DequeueTravelSummary>>;
    public apiNskV1QueuesTravelByTravelQueueCodeNextGet(travelQueueCode: string, subQueueCode?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!travelQueueCode){
            throw new Error('Required parameter travelQueueCode was null or undefined when calling apiNskV1QueuesTravelByTravelQueueCodeNextGet.');
        }

        let queryParameters: string[] = [];
        if (subQueueCode !== undefined) {
            queryParameters.push("subQueueCode="+encodeURIComponent(String(subQueueCode)));
        }


        const response: Observable<HttpResponse<DequeueTravelSummary>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/queues/travel/${encodeURIComponent(String(travelQueueCode))}/next?${queryParameters.join('&')}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <DequeueTravelSummary>(httpResponse.response));
        }
        return response;
    }


    /**
     * Creates a new travel queue entry.
     * This action requires a session token.
     * @param item 
     
     */
    public apiNskV1QueuesTravelPost(item?: TravelQueueItemRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1QueuesTravelPost(item?: TravelQueueItemRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1QueuesTravelPost(item?: TravelQueueItemRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {

        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.post(`${this.basePath}/api/nsk/v1/queues/travel`, item , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets the next item in the booking queue.
     * This will not delete the item from the queue.  This action requires a session token.
     * @param bookingQueueCode booking queue code to get next item from.
     * @param subQueueCode The optional sub queue code.
     * @param startDate Begin priority date.
     * @param endDate End priority date.
     * @param password The Password needed to access the queue.  Required if queue  is set to password-protected in Sky Manager.
     
     */
    public apiNskV2QueuesBookingsByBookingQueueCodeNextGet(bookingQueueCode: string, subQueueCode?: string, startDate?: Date, endDate?: Date, password?: string, observe?: 'body', headers?: Headers): Observable<Array<BookingQueueItemBase>>;
    public apiNskV2QueuesBookingsByBookingQueueCodeNextGet(bookingQueueCode: string, subQueueCode?: string, startDate?: Date, endDate?: Date, password?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<BookingQueueItemBase>>>;
    public apiNskV2QueuesBookingsByBookingQueueCodeNextGet(bookingQueueCode: string, subQueueCode?: string, startDate?: Date, endDate?: Date, password?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!bookingQueueCode){
            throw new Error('Required parameter bookingQueueCode was null or undefined when calling apiNskV2QueuesBookingsByBookingQueueCodeNextGet.');
        }

        let queryParameters: string[] = [];
        if (subQueueCode !== undefined) {
            queryParameters.push("subQueueCode="+encodeURIComponent(String(subQueueCode)));
        }
        if (startDate !== undefined) {
           queryParameters.push("startDate="+encodeURIComponent(<any>startDate.toISOString()));
        }
        if (endDate !== undefined) {
           queryParameters.push("endDate="+encodeURIComponent(<any>endDate.toISOString()));
        }
        if (password !== undefined) {
            queryParameters.push("password="+encodeURIComponent(String(password)));
        }


        const response: Observable<HttpResponse<Array<BookingQueueItemBase>>> = this.httpClient.get(`${this.basePath}/api/nsk/v2/queues/bookings/${encodeURIComponent(String(bookingQueueCode))}/next?${queryParameters.join('&')}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<BookingQueueItemBase>>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets the list of queues available.
     * This action requires a session token.
     * @param queueName Queue name.
     * @param queueCode Queue code.
     * @param queueCategoryCode Queue category code.
     * @param pageSize The default page size.
     * @param lastPageIndex Used to specify the index of the last set of records retrieved  when paging is performed. This is optional.
     
     */
    public apiNskV2QueuesBookingsGet(queueName?: string, queueCode?: string, queueCategoryCode?: string, pageSize?: number, lastPageIndex?: number, observe?: 'body', headers?: Headers): Observable<QueueResults>;
    public apiNskV2QueuesBookingsGet(queueName?: string, queueCode?: string, queueCategoryCode?: string, pageSize?: number, lastPageIndex?: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<QueueResults>>;
    public apiNskV2QueuesBookingsGet(queueName?: string, queueCode?: string, queueCategoryCode?: string, pageSize?: number, lastPageIndex?: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        let queryParameters: string[] = [];
        if (queueName !== undefined) {
            queryParameters.push("queueName="+encodeURIComponent(String(queueName)));
        }
        if (queueCode !== undefined) {
            queryParameters.push("queueCode="+encodeURIComponent(String(queueCode)));
        }
        if (queueCategoryCode !== undefined) {
            queryParameters.push("queueCategoryCode="+encodeURIComponent(String(queueCategoryCode)));
        }
        if (pageSize !== undefined) {
            queryParameters.push("pageSize="+encodeURIComponent(String(pageSize)));
        }
        if (lastPageIndex !== undefined) {
            queryParameters.push("lastPageIndex="+encodeURIComponent(String(lastPageIndex)));
        }


        const response: Observable<HttpResponse<QueueResults>> = this.httpClient.get(`${this.basePath}/api/nsk/v2/queues/bookings?${queryParameters.join('&')}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <QueueResults>(httpResponse.response));
        }
        return response;
    }

}
