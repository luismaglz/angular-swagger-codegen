/**
 * API - Current Routes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: trunk
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from "rxjs/Observable";
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import IHttpClient from "../IHttpClient";
import { inject, injectable } from "inversify";
import { IAPIConfiguration } from "../IAPIConfiguration";
import { Headers } from "../Headers";
import HttpResponse from "../HttpResponse";

import * as Models from '../models';
import { Dictionary } from '../models';
import * as Enums from '../enums';
import { getClient, Request } from '../helper';

import { BookingQueueItemBase } from '../model/bookingQueueItemBase';
import { DeleteBookingQueueItemBaseRequest } from '../model/deleteBookingQueueItemBaseRequest';
import { DequeueTravelSummary } from '../model/dequeueTravelSummary';
import { IJsonResponse } from '../model/iJsonResponse';
import { MoveBookingQueueItemBase } from '../model/moveBookingQueueItemBase';
import { QueueResults } from '../model/queueResults';
import { TravelQueueItemRequest } from '../model/travelQueueItemRequest';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class QueuesService {

    constructor(@inject(HTTP_CLIENT) protected client: ApiHttpClient) {}

    /**
     * Removes booking queue items from the specified queue.
     * 
     * @param bookingQueueCode 
     * @param bookingQueueItemKey 
     * @param request 
     
     */
    public apiNskV1QueuesBookingsByBookingQueueCodeItemsByBookingQueueItemKeyDelete = (bookingQueueCode: string, bookingQueueItemKey: string, request?: DeleteBookingQueueItemBaseRequest, ) => {
        if (!bookingQueueCode){
            throw new Error('Required parameter bookingQueueCode was null or undefined when calling apiNskV1QueuesBookingsByBookingQueueCodeItemsByBookingQueueItemKeyDelete.');
        }

        if (!bookingQueueItemKey){
            throw new Error('Required parameter bookingQueueItemKey was null or undefined when calling apiNskV1QueuesBookingsByBookingQueueCodeItemsByBookingQueueItemKeyDelete.');
        }


            const requestObj: Request<{
                bookingQueueCode: string, bookingQueueItemKey: string, request?: DeleteBookingQueueItemBaseRequest, 
            }> = {
                url: '/api/nsk/v1/queues/bookings/${encodeURIComponent(String(bookingQueueCode))}/items/${encodeURIComponent(String(bookingQueueItemKey))}',
                method: 'delete',
                data: {
                    bookingQueueCode,bookingQueueItemKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Moves to a different queue.
     * The booking queue proxy and service model do not currently support getting the queue code  the item was moved to. Therefore, it is not possible at this time to provide a link to  access the item on a different queue or a configurable response containing the queue object.  Additionally, the proxy and service model do not allow for getting a particular item within a  queue.
     * @param bookingQueueCode 
     * @param bookingQueueItemKey 
     * @param request 
     
     */
    public apiNskV1QueuesBookingsByBookingQueueCodeItemsByBookingQueueItemKeyPut = (bookingQueueCode: string, bookingQueueItemKey: string, request?: MoveBookingQueueItemBase, ) => {
        if (!bookingQueueCode){
            throw new Error('Required parameter bookingQueueCode was null or undefined when calling apiNskV1QueuesBookingsByBookingQueueCodeItemsByBookingQueueItemKeyPut.');
        }

        if (!bookingQueueItemKey){
            throw new Error('Required parameter bookingQueueItemKey was null or undefined when calling apiNskV1QueuesBookingsByBookingQueueCodeItemsByBookingQueueItemKeyPut.');
        }


            const requestObj: Request<{
                bookingQueueCode: string, bookingQueueItemKey: string, request?: MoveBookingQueueItemBase, 
            }> = {
                url: '/api/nsk/v1/queues/bookings/${encodeURIComponent(String(bookingQueueCode))}/items/${encodeURIComponent(String(bookingQueueItemKey))}',
                method: 'put',
                data: {
                    bookingQueueCode,bookingQueueItemKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Pops the next item in the travel queue.
     * This will delete the item from the queue.  This action requires a session token.
     * @param travelQueueCode Travel queue code to get next item from.
     * @param subQueueCode Sub queue code.
     
     */
    public apiNskV1QueuesTravelByTravelQueueCodeNextGet = (travelQueueCode: string, subQueueCode?: string, ) => {
        if (!travelQueueCode){
            throw new Error('Required parameter travelQueueCode was null or undefined when calling apiNskV1QueuesTravelByTravelQueueCodeNextGet.');
        }

        let queryParameters: string[] = [];
        if (subQueueCode !== undefined) {
            queryParameters.push("subQueueCode="+encodeURIComponent(String(subQueueCode)));
        }


            const requestObj: Request<{
                travelQueueCode: string, subQueueCode?: string, 
            }> = {
                url: '/api/nsk/v1/queues/travel/${encodeURIComponent(String(travelQueueCode))}/next',
                method: 'get',
                data: {
                    travelQueueCode,subQueueCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Creates a new travel queue entry.
     * This action requires a session token.
     * @param item 
     
     */
    public apiNskV1QueuesTravelPost = (item?: TravelQueueItemRequest, ) => {

            const requestObj: Request<{
                item?: TravelQueueItemRequest, 
            }> = {
                url: '/api/nsk/v1/queues/travel',
                method: 'post',
                data: {
                    item,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets the next item in the booking queue.
     * This will not delete the item from the queue.  This action requires a session token.
     * @param bookingQueueCode booking queue code to get next item from.
     * @param subQueueCode The optional sub queue code.
     * @param startDate Begin priority date.
     * @param endDate End priority date.
     * @param password The Password needed to access the queue.  Required if queue  is set to password-protected in Sky Manager.
     
     */
    public apiNskV2QueuesBookingsByBookingQueueCodeNextGet = (bookingQueueCode: string, subQueueCode?: string, startDate?: Date, endDate?: Date, password?: string, ) => {
        if (!bookingQueueCode){
            throw new Error('Required parameter bookingQueueCode was null or undefined when calling apiNskV2QueuesBookingsByBookingQueueCodeNextGet.');
        }

        let queryParameters: string[] = [];
        if (subQueueCode !== undefined) {
            queryParameters.push("subQueueCode="+encodeURIComponent(String(subQueueCode)));
        }
        if (startDate !== undefined) {
           queryParameters.push("startDate="+encodeURIComponent(<any>startDate.toISOString()));
        }
        if (endDate !== undefined) {
           queryParameters.push("endDate="+encodeURIComponent(<any>endDate.toISOString()));
        }
        if (password !== undefined) {
            queryParameters.push("password="+encodeURIComponent(String(password)));
        }


            const requestObj: Request<{
                bookingQueueCode: string, subQueueCode?: string, startDate?: Date, endDate?: Date, password?: string, 
            }> = {
                url: '/api/nsk/v2/queues/bookings/${encodeURIComponent(String(bookingQueueCode))}/next',
                method: 'get',
                data: {
                    bookingQueueCode,subQueueCode,startDate,endDate,password,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets the list of queues available.
     * This action requires a session token.
     * @param queueName Queue name.
     * @param queueCode Queue code.
     * @param queueCategoryCode Queue category code.
     * @param pageSize The default page size.
     * @param lastPageIndex Used to specify the index of the last set of records retrieved  when paging is performed. This is optional.
     
     */
    public apiNskV2QueuesBookingsGet = (queueName?: string, queueCode?: string, queueCategoryCode?: string, pageSize?: number, lastPageIndex?: number, ) => {
        let queryParameters: string[] = [];
        if (queueName !== undefined) {
            queryParameters.push("queueName="+encodeURIComponent(String(queueName)));
        }
        if (queueCode !== undefined) {
            queryParameters.push("queueCode="+encodeURIComponent(String(queueCode)));
        }
        if (queueCategoryCode !== undefined) {
            queryParameters.push("queueCategoryCode="+encodeURIComponent(String(queueCategoryCode)));
        }
        if (pageSize !== undefined) {
            queryParameters.push("pageSize="+encodeURIComponent(String(pageSize)));
        }
        if (lastPageIndex !== undefined) {
            queryParameters.push("lastPageIndex="+encodeURIComponent(String(lastPageIndex)));
        }


            const requestObj: Request<{
                queueName?: string, queueCode?: string, queueCategoryCode?: string, pageSize?: number, lastPageIndex?: number, 
            }> = {
                url: '/api/nsk/v2/queues/bookings',
                method: 'get',
                data: {
                    queueName,queueCode,queueCategoryCode,pageSize,lastPageIndex,
                }
            };
            return this.client.makeRequest(requestObj);
    }

}
