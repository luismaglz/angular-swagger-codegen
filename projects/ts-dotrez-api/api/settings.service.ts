/**
 * API - Current Routes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: trunk
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from "rxjs/Observable";
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import IHttpClient from "../IHttpClient";
import { inject, injectable } from "inversify";
import { IAPIConfiguration } from "../IAPIConfiguration";
import { Headers } from "../Headers";
import HttpResponse from "../HttpResponse";

import * as Models from '../models';
import { Dictionary } from '../models';
import * as Enums from '../enums';
import { getClient, Request } from '../helper';

import { AgencyCreationSettings } from '../model/agencyCreationSettings';
import { BookingPaymentSettingsv2 } from '../model/bookingPaymentSettingsv2';
import { CheckInSettings } from '../model/checkInSettings';
import { CodesSettings } from '../model/codesSettings';
import { ContactSettings } from '../model/contactSettings';
import { CustomerAccountSettings } from '../model/customerAccountSettings';
import { CustomerCreationSettings } from '../model/customerCreationSettings';
import { FeeSettings } from '../model/feeSettings';
import { FlightSearchSettings } from '../model/flightSearchSettings';
import { GeneralSettings } from '../model/generalSettings';
import { IJsonResponse } from '../model/iJsonResponse';
import { ItinerarySettings } from '../model/itinerarySettings';
import { LogonSettings } from '../model/logonSettings';
import { PassengerSettings } from '../model/passengerSettings';
import { PaymentSettings } from '../model/paymentSettings';
import { PremiumServicesSettingsv2 } from '../model/premiumServicesSettingsv2';
import { ReserveFlightsSettings } from '../model/reserveFlightsSettings';
import { SessionSettings } from '../model/sessionSettings';
import { SkySpeedSettingsv2 } from '../model/skySpeedSettingsv2';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class SettingsService {

    constructor(@inject(HTTP_CLIENT) protected client: ApiHttpClient) {}

    /**
     * Get the checkin settings.
     * 
     * @param eTag The cache eTag for this request.
     * @param roleCode Gets or sets the role code for this request.
     
     */
    public apiNskV1SettingsBookingCheckinGet = (eTag?: string, roleCode?: string, ) => {
        let queryParameters: string[] = [];
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }
        if (roleCode !== undefined) {
            queryParameters.push("roleCode="+encodeURIComponent(String(roleCode)));
        }


            const requestObj: Request<{
                eTag?: string, roleCode?: string, 
            }> = {
                url: '/api/nsk/v1/settings/booking/checkin',
                method: 'get',
                data: {
                    eTag,roleCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Get the contact settings.
     * 
     * @param eTag The cache eTag for this request.
     * @param roleCode Gets or sets the role code for this request.
     
     */
    public apiNskV1SettingsBookingContactGet = (eTag?: string, roleCode?: string, ) => {
        let queryParameters: string[] = [];
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }
        if (roleCode !== undefined) {
            queryParameters.push("roleCode="+encodeURIComponent(String(roleCode)));
        }


            const requestObj: Request<{
                eTag?: string, roleCode?: string, 
            }> = {
                url: '/api/nsk/v1/settings/booking/contact',
                method: 'get',
                data: {
                    eTag,roleCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Get the custom account settings.
     * 
     * @param eTag The cache eTag for this request.
     * @param roleCode Gets or sets the role code for this request.
     
     */
    public apiNskV1SettingsBookingCustomerAccountGet = (eTag?: string, roleCode?: string, ) => {
        let queryParameters: string[] = [];
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }
        if (roleCode !== undefined) {
            queryParameters.push("roleCode="+encodeURIComponent(String(roleCode)));
        }


            const requestObj: Request<{
                eTag?: string, roleCode?: string, 
            }> = {
                url: '/api/nsk/v1/settings/booking/customerAccount',
                method: 'get',
                data: {
                    eTag,roleCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Get the fee settings.
     * 
     * @param eTag The cache eTag for this request.
     * @param roleCode Gets or sets the role code for this request.
     
     */
    public apiNskV1SettingsBookingFeeGet = (eTag?: string, roleCode?: string, ) => {
        let queryParameters: string[] = [];
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }
        if (roleCode !== undefined) {
            queryParameters.push("roleCode="+encodeURIComponent(String(roleCode)));
        }


            const requestObj: Request<{
                eTag?: string, roleCode?: string, 
            }> = {
                url: '/api/nsk/v1/settings/booking/fee',
                method: 'get',
                data: {
                    eTag,roleCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Get the flight search settings.
     * 
     * @param eTag The cache eTag for this request.
     * @param roleCode Gets or sets the role code for this request.
     
     */
    public apiNskV1SettingsBookingFlightSearchGet = (eTag?: string, roleCode?: string, ) => {
        let queryParameters: string[] = [];
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }
        if (roleCode !== undefined) {
            queryParameters.push("roleCode="+encodeURIComponent(String(roleCode)));
        }


            const requestObj: Request<{
                eTag?: string, roleCode?: string, 
            }> = {
                url: '/api/nsk/v1/settings/booking/flightSearch',
                method: 'get',
                data: {
                    eTag,roleCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Get the general settings.
     * 
     * @param eTag The cache eTag for this request.
     * @param roleCode Gets or sets the role code for this request.
     
     */
    public apiNskV1SettingsBookingGet = (eTag?: string, roleCode?: string, ) => {
        let queryParameters: string[] = [];
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }
        if (roleCode !== undefined) {
            queryParameters.push("roleCode="+encodeURIComponent(String(roleCode)));
        }


            const requestObj: Request<{
                eTag?: string, roleCode?: string, 
            }> = {
                url: '/api/nsk/v1/settings/booking',
                method: 'get',
                data: {
                    eTag,roleCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Get the passenger settings.
     * 
     * @param eTag The cache eTag for this request.
     * @param roleCode Gets or sets the role code for this request.
     
     */
    public apiNskV1SettingsBookingPassengerGet = (eTag?: string, roleCode?: string, ) => {
        let queryParameters: string[] = [];
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }
        if (roleCode !== undefined) {
            queryParameters.push("roleCode="+encodeURIComponent(String(roleCode)));
        }


            const requestObj: Request<{
                eTag?: string, roleCode?: string, 
            }> = {
                url: '/api/nsk/v1/settings/booking/passenger',
                method: 'get',
                data: {
                    eTag,roleCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Get the reserve flight settings.
     * 
     * @param eTag The cache eTag for this request.
     * @param roleCode Gets or sets the role code for this request.
     
     */
    public apiNskV1SettingsBookingReserveFlightsGet = (eTag?: string, roleCode?: string, ) => {
        let queryParameters: string[] = [];
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }
        if (roleCode !== undefined) {
            queryParameters.push("roleCode="+encodeURIComponent(String(roleCode)));
        }


            const requestObj: Request<{
                eTag?: string, roleCode?: string, 
            }> = {
                url: '/api/nsk/v1/settings/booking/reserveFlights',
                method: 'get',
                data: {
                    eTag,roleCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the logon settings.
     * 
     * @param eTag The cache eTag for this request.
     * @param roleCode Gets or sets the role code for this request.
     
     */
    public apiNskV1SettingsGeneralApplicationLogonGet = (eTag?: string, roleCode?: string, ) => {
        let queryParameters: string[] = [];
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }
        if (roleCode !== undefined) {
            queryParameters.push("roleCode="+encodeURIComponent(String(roleCode)));
        }


            const requestObj: Request<{
                eTag?: string, roleCode?: string, 
            }> = {
                url: '/api/nsk/v1/settings/general/applicationLogon',
                method: 'get',
                data: {
                    eTag,roleCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the codes settings.
     * 
     * @param eTag The cache eTag for this request.
     * @param roleCode Gets or sets the role code for this request.
     
     */
    public apiNskV1SettingsGeneralCodesGet = (eTag?: string, roleCode?: string, ) => {
        let queryParameters: string[] = [];
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }
        if (roleCode !== undefined) {
            queryParameters.push("roleCode="+encodeURIComponent(String(roleCode)));
        }


            const requestObj: Request<{
                eTag?: string, roleCode?: string, 
            }> = {
                url: '/api/nsk/v1/settings/general/codes',
                method: 'get',
                data: {
                    eTag,roleCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the session settings.
     * 
     * @param eTag The cache eTag for this request.
     * @param roleCode Gets or sets the role code for this request.
     
     */
    public apiNskV1SettingsGeneralSessionGet = (eTag?: string, roleCode?: string, ) => {
        let queryParameters: string[] = [];
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }
        if (roleCode !== undefined) {
            queryParameters.push("roleCode="+encodeURIComponent(String(roleCode)));
        }


            const requestObj: Request<{
                eTag?: string, roleCode?: string, 
            }> = {
                url: '/api/nsk/v1/settings/general/session',
                method: 'get',
                data: {
                    eTag,roleCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the itinerary settings.
     * 
     * @param eTag 
     
     */
    public apiNskV1SettingsItineraryGet = (eTag?: string, ) => {
        let queryParameters: string[] = [];
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }


            const requestObj: Request<{
                eTag?: string, 
            }> = {
                url: '/api/nsk/v1/settings/itinerary',
                method: 'get',
                data: {
                    eTag,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Get the non role based payment settings.
     * 
     * @param eTag 
     
     */
    public apiNskV1SettingsPaymentGet = (eTag?: string, ) => {
        let queryParameters: string[] = [];
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }


            const requestObj: Request<{
                eTag?: string, 
            }> = {
                url: '/api/nsk/v1/settings/payment',
                method: 'get',
                data: {
                    eTag,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the agency creation settings.
     * 
     * @param eTag The unique etag ID.
     
     */
    public apiNskV1SettingsUserAgencyCreationGet = (eTag?: string, ) => {
        let queryParameters: string[] = [];
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }


            const requestObj: Request<{
                eTag?: string, 
            }> = {
                url: '/api/nsk/v1/settings/user/agencyCreation',
                method: 'get',
                data: {
                    eTag,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the customer creation settings.
     * 
     * @param eTag The unique etag ID.
     
     */
    public apiNskV1SettingsUserCustomerCreationGet = (eTag?: string, ) => {
        let queryParameters: string[] = [];
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }


            const requestObj: Request<{
                eTag?: string, 
            }> = {
                url: '/api/nsk/v1/settings/user/customerCreation',
                method: 'get',
                data: {
                    eTag,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Get the role based booking payment settings.
     * 
     * @param eTag The cache eTag for this request.
     * @param roleCode Gets or sets the role code for this request.
     
     */
    public apiNskV2SettingsBookingPaymentGet = (eTag?: string, roleCode?: string, ) => {
        let queryParameters: string[] = [];
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }
        if (roleCode !== undefined) {
            queryParameters.push("roleCode="+encodeURIComponent(String(roleCode)));
        }


            const requestObj: Request<{
                eTag?: string, roleCode?: string, 
            }> = {
                url: '/api/nsk/v2/settings/booking/payment',
                method: 'get',
                data: {
                    eTag,roleCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the premium services settings.
     * 
     * @param eTag The unique etag ID.
     
     */
    public apiNskV2SettingsPremiumServicesGet = (eTag?: string, ) => {
        let queryParameters: string[] = [];
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }


            const requestObj: Request<{
                eTag?: string, 
            }> = {
                url: '/api/nsk/v2/settings/premiumServices',
                method: 'get',
                data: {
                    eTag,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the SkySpeed settings.
     * 
     * @param eTag The cache eTag for this request.
     * @param roleCode Gets or sets the role code for this request.
     
     */
    public apiNskV2SettingsSkySpeedGet = (eTag?: string, roleCode?: string, ) => {
        let queryParameters: string[] = [];
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }
        if (roleCode !== undefined) {
            queryParameters.push("roleCode="+encodeURIComponent(String(roleCode)));
        }


            const requestObj: Request<{
                eTag?: string, roleCode?: string, 
            }> = {
                url: '/api/nsk/v2/settings/skySpeed',
                method: 'get',
                data: {
                    eTag,roleCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }

}
