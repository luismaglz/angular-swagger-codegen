/**
 * API - Current Routes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: trunk
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from "rxjs/Observable";
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import IHttpClient from "../IHttpClient";
import { inject, injectable } from "inversify";
import { IAPIConfiguration } from "../IAPIConfiguration";
import { Headers } from "../Headers";
import HttpResponse from "../HttpResponse";

import * as Models from '../models';
import { Dictionary } from '../models';
import * as Enums from '../enums';
import { getClient, Request } from '../helper';

import { Account } from '../model/account';
import { AccountCollectionRequest } from '../model/accountCollectionRequest';
import { Booking } from '../model/booking';
import { BookingCommentRequest } from '../model/bookingCommentRequest';
import { BookingMessageHistory } from '../model/bookingMessageHistory';
import { BookingNotificationHistory } from '../model/bookingNotificationHistory';
import { BookingQueueHistory } from '../model/bookingQueueHistory';
import { BookingQueueHistoryRequest } from '../model/bookingQueueHistoryRequest';
import { BookingQueueRequest } from '../model/bookingQueueRequest';
import { BookingSearchResult } from '../model/bookingSearchResult';
import { CheckinPassengersRequest } from '../model/checkinPassengersRequest';
import { CheckinPassengersRequestv3 } from '../model/checkinPassengersRequestv3';
import { CheckinRequirements } from '../model/checkinRequirements';
import { CreateAccountRequest } from '../model/createAccountRequest';
import { FareOverrideRequest } from '../model/fareOverrideRequest';
import { HistoryResponse } from '../model/historyResponse';
import { IJsonResponse } from '../model/iJsonResponse';
import { InlineResponse2003 } from '../model/inlineResponse2003';
import { ItineraryQuote } from '../model/itineraryQuote';
import { ItineraryQuoteRequest } from '../model/itineraryQuoteRequest';
import { SeatAssignmentHistoryResponse } from '../model/seatAssignmentHistoryResponse';
import { SegmentChangeHistoryResponse } from '../model/segmentChangeHistoryResponse';
import { Transaction } from '../model/transaction';
import { TransactionRequest } from '../model/transactionRequest';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class BookingsService {

    constructor(@inject(HTTP_CLIENT) protected client: ApiHttpClient) {}

    /**
     * Gets a flight move history stateless.
     * 
     * @param bookingKey The booking key.
     * @param lastPageKey The key of the last booking history item returned.
     * @param pageSize The page size for the response.
     
     */
    public apiNskV1BookingsByBookingKeyHistoryFlightMoveGet = (bookingKey: string, lastPageKey?: string, pageSize?: number, ) => {
        if (!bookingKey){
            throw new Error('Required parameter bookingKey was null or undefined when calling apiNskV1BookingsByBookingKeyHistoryFlightMoveGet.');
        }

        let queryParameters: string[] = [];
        if (lastPageKey !== undefined) {
            queryParameters.push("lastPageKey="+encodeURIComponent(String(lastPageKey)));
        }
        if (pageSize !== undefined) {
            queryParameters.push("pageSize="+encodeURIComponent(String(pageSize)));
        }


            const requestObj: Request<{
                bookingKey: string, lastPageKey?: string, pageSize?: number, 
            }> = {
                url: '/api/nsk/v1/bookings/${encodeURIComponent(String(bookingKey))}/history/flightMove',
                method: 'get',
                data: {
                    bookingKey,lastPageKey,pageSize,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets a itinerary history stateless.
     * 
     * @param bookingKey The booking key.
     * @param event The event that triggered the history entry.
     * @param lastPageKey The key of the last booking history item returned.
     * @param pageSize The page size for the response.
     
     */
    public apiNskV1BookingsByBookingKeyHistoryGet = (bookingKey: string, event?: 'Unknown' | 'ConvertedHistory' | 'FlightTimeChange' | 'FlightDesignatorChange' | 'AssignedSeat' | 'RemoveSeat' | 'AddedFlight' | 'DeletedFlight' | 'DeletedPassenger' | 'NameChange' | 'GroupNameChange' | 'CancelledTicketing' | 'ScheduleChange' | 'AddedPayment' | 'ServiceFee' | 'QueuedPnr' | 'UnqueuedPnr' | 'DeletedComment' | 'Divided' | 'CheckedIn' | 'CheckedOut' | 'FareOverride' | 'AddedBaggage' | 'ChangedBaggageWeight' | 'CheckedBaggage' | 'RemovedBaggage' | 'BoardedPassenger' | 'UnboardedPassenger' | 'ManualAuthorization' | 'ManualDecline' | 'UndoCancel' | 'ItinerarySent' | 'ContactChange' | 'SsrAdded' | 'FlightMoved' | 'VerifiedDocument' | 'RemovedVerifiedDocument' | 'Promotion' | 'BookingComment' | 'CancelledSchedule' | 'CancelServiceFee' | 'OverrideServiceFee' | 'AddedRecordLocator' | 'DeletedRecordLocator' | 'UpgradeClassOfService' | 'DowngradeClassOfService' | 'StandbyPriorityChange' | 'AssignedTicketNumber' | 'DeletedTicketNumber' | 'ConfirmSegmentStatusCodeChange' | 'CodeshareFlightChanged' | 'PdsCancel' | 'PdsPending' | 'PdsConfirm' | 'PdsFinalized' | 'PdsDeclined' | 'PdsException' | 'PdsCancelRefused' | 'PdsCancelUnsuccessful' | 'Apps' | 'InhibitedOverride' | 'PrintedBagTag' | 'SelfPrintedBagTag' | 'PrintedBoardingPass' | 'AddCustomerId' | 'DeleteCustomerId' | 'HoldCreated' | 'HoldRemoved' | 'HoldChanged' | 'OverrideCoupon' | 'PdsSynchronized' | 'PdsItemremoved' | 'Reprice' | 'ChannelOverride' | 'EmdCreated' | 'EmdRemoved' | 'EmdChanged' | 'ServiceBundle' | 'PublishedFareOverride' | 'FareClassRealignment', lastPageKey?: string, pageSize?: number, ) => {
        if (!bookingKey){
            throw new Error('Required parameter bookingKey was null or undefined when calling apiNskV1BookingsByBookingKeyHistoryGet.');
        }

        let queryParameters: string[] = [];
        if (event !== undefined) {
            queryParameters.push("event="+encodeURIComponent(String(event)));
        }
        if (lastPageKey !== undefined) {
            queryParameters.push("lastPageKey="+encodeURIComponent(String(lastPageKey)));
        }
        if (pageSize !== undefined) {
            queryParameters.push("pageSize="+encodeURIComponent(String(pageSize)));
        }


            const requestObj: Request<{
                bookingKey: string, event?: 'Unknown' | 'ConvertedHistory' | 'FlightTimeChange' | 'FlightDesignatorChange' | 'AssignedSeat' | 'RemoveSeat' | 'AddedFlight' | 'DeletedFlight' | 'DeletedPassenger' | 'NameChange' | 'GroupNameChange' | 'CancelledTicketing' | 'ScheduleChange' | 'AddedPayment' | 'ServiceFee' | 'QueuedPnr' | 'UnqueuedPnr' | 'DeletedComment' | 'Divided' | 'CheckedIn' | 'CheckedOut' | 'FareOverride' | 'AddedBaggage' | 'ChangedBaggageWeight' | 'CheckedBaggage' | 'RemovedBaggage' | 'BoardedPassenger' | 'UnboardedPassenger' | 'ManualAuthorization' | 'ManualDecline' | 'UndoCancel' | 'ItinerarySent' | 'ContactChange' | 'SsrAdded' | 'FlightMoved' | 'VerifiedDocument' | 'RemovedVerifiedDocument' | 'Promotion' | 'BookingComment' | 'CancelledSchedule' | 'CancelServiceFee' | 'OverrideServiceFee' | 'AddedRecordLocator' | 'DeletedRecordLocator' | 'UpgradeClassOfService' | 'DowngradeClassOfService' | 'StandbyPriorityChange' | 'AssignedTicketNumber' | 'DeletedTicketNumber' | 'ConfirmSegmentStatusCodeChange' | 'CodeshareFlightChanged' | 'PdsCancel' | 'PdsPending' | 'PdsConfirm' | 'PdsFinalized' | 'PdsDeclined' | 'PdsException' | 'PdsCancelRefused' | 'PdsCancelUnsuccessful' | 'Apps' | 'InhibitedOverride' | 'PrintedBagTag' | 'SelfPrintedBagTag' | 'PrintedBoardingPass' | 'AddCustomerId' | 'DeleteCustomerId' | 'HoldCreated' | 'HoldRemoved' | 'HoldChanged' | 'OverrideCoupon' | 'PdsSynchronized' | 'PdsItemremoved' | 'Reprice' | 'ChannelOverride' | 'EmdCreated' | 'EmdRemoved' | 'EmdChanged' | 'ServiceBundle' | 'PublishedFareOverride' | 'FareClassRealignment', lastPageKey?: string, pageSize?: number, 
            }> = {
                url: '/api/nsk/v1/bookings/${encodeURIComponent(String(bookingKey))}/history',
                method: 'get',
                data: {
                    bookingKey,event,lastPageKey,pageSize,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets a booking&#39;s message history, stateless.
     * 
     * @param bookingKey The booking key.
     
     */
    public apiNskV1BookingsByBookingKeyHistoryMessageGet = (bookingKey: string, ) => {
        if (!bookingKey){
            throw new Error('Required parameter bookingKey was null or undefined when calling apiNskV1BookingsByBookingKeyHistoryMessageGet.');
        }


            const requestObj: Request<{
                bookingKey: string, 
            }> = {
                url: '/api/nsk/v1/bookings/${encodeURIComponent(String(bookingKey))}/history/message',
                method: 'get',
                data: {
                    bookingKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets the booking notification history, stateless.
     * 
     * @param bookingKey The booking key.
     
     */
    public apiNskV1BookingsByBookingKeyHistoryNotificationGet = (bookingKey: string, ) => {
        if (!bookingKey){
            throw new Error('Required parameter bookingKey was null or undefined when calling apiNskV1BookingsByBookingKeyHistoryNotificationGet.');
        }


            const requestObj: Request<{
                bookingKey: string, 
            }> = {
                url: '/api/nsk/v1/bookings/${encodeURIComponent(String(bookingKey))}/history/notification',
                method: 'get',
                data: {
                    bookingKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets a seat assignment history stateless.
     * 
     * @param bookingKey The booking key.
     * @param event The event that triggered the seat assignment history entry.
     * @param lastPageKey The key of the last booking history item returned.
     * @param pageSize The page size for the response.
     
     */
    public apiNskV1BookingsByBookingKeyHistorySeatAssignmentGet = (bookingKey: string, event: 'AssignedSeat' | 'RemoveSeat', lastPageKey?: string, pageSize?: number, ) => {
        if (!bookingKey){
            throw new Error('Required parameter bookingKey was null or undefined when calling apiNskV1BookingsByBookingKeyHistorySeatAssignmentGet.');
        }

        if (!event){
            throw new Error('Required parameter event was null or undefined when calling apiNskV1BookingsByBookingKeyHistorySeatAssignmentGet.');
        }

        let queryParameters: string[] = [];
        if (event !== undefined) {
            queryParameters.push("event="+encodeURIComponent(String(event)));
        }
        if (lastPageKey !== undefined) {
            queryParameters.push("lastPageKey="+encodeURIComponent(String(lastPageKey)));
        }
        if (pageSize !== undefined) {
            queryParameters.push("pageSize="+encodeURIComponent(String(pageSize)));
        }


            const requestObj: Request<{
                bookingKey: string, event: 'AssignedSeat' | 'RemoveSeat', lastPageKey?: string, pageSize?: number, 
            }> = {
                url: '/api/nsk/v1/bookings/${encodeURIComponent(String(bookingKey))}/history/seatAssignment',
                method: 'get',
                data: {
                    bookingKey,event,lastPageKey,pageSize,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets a segment change history stateless.
     * 
     * @param bookingKey The booking key.
     * @param event The event that triggered the seat assignment history entry.
     * @param lastPageKey The key of the last booking history item returned.
     * @param pageSize The page size for the response.
     
     */
    public apiNskV1BookingsByBookingKeyHistorySegmentChangeGet = (bookingKey: string, event: 'AddedFlight' | 'DeletedFlight', lastPageKey?: string, pageSize?: number, ) => {
        if (!bookingKey){
            throw new Error('Required parameter bookingKey was null or undefined when calling apiNskV1BookingsByBookingKeyHistorySegmentChangeGet.');
        }

        if (!event){
            throw new Error('Required parameter event was null or undefined when calling apiNskV1BookingsByBookingKeyHistorySegmentChangeGet.');
        }

        let queryParameters: string[] = [];
        if (event !== undefined) {
            queryParameters.push("event="+encodeURIComponent(String(event)));
        }
        if (lastPageKey !== undefined) {
            queryParameters.push("lastPageKey="+encodeURIComponent(String(lastPageKey)));
        }
        if (pageSize !== undefined) {
            queryParameters.push("pageSize="+encodeURIComponent(String(pageSize)));
        }


            const requestObj: Request<{
                bookingKey: string, event: 'AddedFlight' | 'DeletedFlight', lastPageKey?: string, pageSize?: number, 
            }> = {
                url: '/api/nsk/v1/bookings/${encodeURIComponent(String(bookingKey))}/history/segmentChange',
                method: 'get',
                data: {
                    bookingKey,event,lastPageKey,pageSize,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Removes a booking from a booking queue.
     * 
     * @param bookingKey The booking key.
     * @param request The booking request.
     
     */
    public apiNskV1BookingsByBookingKeyQueueDelete = (bookingKey: string, request?: BookingQueueRequest, ) => {
        if (!bookingKey){
            throw new Error('Required parameter bookingKey was null or undefined when calling apiNskV1BookingsByBookingKeyQueueDelete.');
        }


            const requestObj: Request<{
                bookingKey: string, request?: BookingQueueRequest, 
            }> = {
                url: '/api/nsk/v1/bookings/${encodeURIComponent(String(bookingKey))}/queue',
                method: 'delete',
                data: {
                    bookingKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets the booking queue history for a specific booking.
     * 
     * @param bookingKey The booking key.
     * @param request The booking queue history request.
     
     */
    public apiNskV1BookingsByBookingKeyQueueHistoryPost = (bookingKey: string, request?: BookingQueueHistoryRequest, ) => {
        if (!bookingKey){
            throw new Error('Required parameter bookingKey was null or undefined when calling apiNskV1BookingsByBookingKeyQueueHistoryPost.');
        }


            const requestObj: Request<{
                bookingKey: string, request?: BookingQueueHistoryRequest, 
            }> = {
                url: '/api/nsk/v1/bookings/${encodeURIComponent(String(bookingKey))}/queue/history',
                method: 'post',
                data: {
                    bookingKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Adds a booking to a booking queue.
     * 
     * @param bookingKey The booking key.
     * @param request The booking request.
     
     */
    public apiNskV1BookingsByBookingKeyQueuePost = (bookingKey: string, request?: BookingQueueRequest, ) => {
        if (!bookingKey){
            throw new Error('Required parameter bookingKey was null or undefined when calling apiNskV1BookingsByBookingKeyQueuePost.');
        }


            const requestObj: Request<{
                bookingKey: string, request?: BookingQueueRequest, 
            }> = {
                url: '/api/nsk/v1/bookings/${encodeURIComponent(String(bookingKey))}/queue',
                method: 'post',
                data: {
                    bookingKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the booking account collection transactions based on the record  locator, the account collection key, and the request data.
     * 
     * @param recordLocator The record locator.
     * @param accountCollectionKey The account collection key.
     * @param startTime The starting date and time of the date range to search in.
     * @param sortByNewest Optional filter to sort results by newest.
     * @param endTime The end date and time of the date range to search in.
     * @param pageSize Used to specify the number of records to return.
     * @param pageIndex Represents the index of the requested paged item.
     
     */
    public apiNskV1BookingsByRecordLocatorAccountCollectionByAccountCollectionKeyTransactionsGet = (recordLocator: string, accountCollectionKey: string, startTime: Date, sortByNewest: boolean, endTime?: Date, pageSize?: number, pageIndex?: number, ) => {
        if (!recordLocator){
            throw new Error('Required parameter recordLocator was null or undefined when calling apiNskV1BookingsByRecordLocatorAccountCollectionByAccountCollectionKeyTransactionsGet.');
        }

        if (!accountCollectionKey){
            throw new Error('Required parameter accountCollectionKey was null or undefined when calling apiNskV1BookingsByRecordLocatorAccountCollectionByAccountCollectionKeyTransactionsGet.');
        }

        if (!startTime){
            throw new Error('Required parameter startTime was null or undefined when calling apiNskV1BookingsByRecordLocatorAccountCollectionByAccountCollectionKeyTransactionsGet.');
        }

        if (!sortByNewest){
            throw new Error('Required parameter sortByNewest was null or undefined when calling apiNskV1BookingsByRecordLocatorAccountCollectionByAccountCollectionKeyTransactionsGet.');
        }

        let queryParameters: string[] = [];
        if (startTime !== undefined) {
           queryParameters.push("startTime="+encodeURIComponent(<any>startTime.toISOString()));
        }
        if (endTime !== undefined) {
           queryParameters.push("endTime="+encodeURIComponent(<any>endTime.toISOString()));
        }
        if (sortByNewest !== undefined) {
            queryParameters.push("sortByNewest="+encodeURIComponent(String(sortByNewest)));
        }
        if (pageSize !== undefined) {
            queryParameters.push("pageSize="+encodeURIComponent(String(pageSize)));
        }
        if (pageIndex !== undefined) {
            queryParameters.push("pageIndex="+encodeURIComponent(String(pageIndex)));
        }


            const requestObj: Request<{
                recordLocator: string, accountCollectionKey: string, startTime: Date, sortByNewest: boolean, endTime?: Date, pageSize?: number, pageIndex?: number, 
            }> = {
                url: '/api/nsk/v1/bookings/${encodeURIComponent(String(recordLocator))}/account/collection/${encodeURIComponent(String(accountCollectionKey))}/transactions',
                method: 'get',
                data: {
                    recordLocator,accountCollectionKey,startTime,sortByNewest,endTime,pageSize,pageIndex,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Creates a booking account collection transaction based on the record locator,  the account collection key, and data in the request.
     * This endpoint will add a transaction to an existing account collection.  If there are no account collections, or the account collection key does  not match an existing collection, the request will fail.                To add a new credit, see /api/nsk/v1/bookings/{recordLocator}/account/collection.
     * @param recordLocator The record locator.
     * @param accountCollectionKey The account collection key.
     * @param request The create transaction requests.
     
     */
    public apiNskV1BookingsByRecordLocatorAccountCollectionByAccountCollectionKeyTransactionsPost = (recordLocator: string, accountCollectionKey: string, request?: TransactionRequest, ) => {
        if (!recordLocator){
            throw new Error('Required parameter recordLocator was null or undefined when calling apiNskV1BookingsByRecordLocatorAccountCollectionByAccountCollectionKeyTransactionsPost.');
        }

        if (!accountCollectionKey){
            throw new Error('Required parameter accountCollectionKey was null or undefined when calling apiNskV1BookingsByRecordLocatorAccountCollectionByAccountCollectionKeyTransactionsPost.');
        }


            const requestObj: Request<{
                recordLocator: string, accountCollectionKey: string, request?: TransactionRequest, 
            }> = {
                url: '/api/nsk/v1/bookings/${encodeURIComponent(String(recordLocator))}/account/collection/${encodeURIComponent(String(accountCollectionKey))}/transactions',
                method: 'post',
                data: {
                    recordLocator,accountCollectionKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Creates a booking account collection and transaction based on the record  locator and data in the request.
     * This endpoint will create a new account collection and a transaction if no collection exists or   no matching collection is found.  An account collection is unique based on the transaction code  and the expiration date.  If a matching collection is found, a transaction for that collection  is generated and the account collection will be updated.  See /api/nsk/v1/resources/accountTransactionCodes for a list of available account transaction codes.
     * @param recordLocator The record locator.
     * @param request The create account collection request.
     
     */
    public apiNskV1BookingsByRecordLocatorAccountCollectionPost = (recordLocator: string, request?: AccountCollectionRequest, ) => {
        if (!recordLocator){
            throw new Error('Required parameter recordLocator was null or undefined when calling apiNskV1BookingsByRecordLocatorAccountCollectionPost.');
        }


            const requestObj: Request<{
                recordLocator: string, request?: AccountCollectionRequest, 
            }> = {
                url: '/api/nsk/v1/bookings/${encodeURIComponent(String(recordLocator))}/account/collection',
                method: 'post',
                data: {
                    recordLocator,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the booking account and collections based on the record locator.
     * 
     * @param recordLocator The record locator.
     
     */
    public apiNskV1BookingsByRecordLocatorAccountGet = (recordLocator: string, ) => {
        if (!recordLocator){
            throw new Error('Required parameter recordLocator was null or undefined when calling apiNskV1BookingsByRecordLocatorAccountGet.');
        }


            const requestObj: Request<{
                recordLocator: string, 
            }> = {
                url: '/api/nsk/v1/bookings/${encodeURIComponent(String(recordLocator))}/account',
                method: 'get',
                data: {
                    recordLocator,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Creates the booking account based on the record locator and  data in the request.
     * 
     * @param recordLocator The record locator.
     * @param request The create account request.
     
     */
    public apiNskV1BookingsByRecordLocatorAccountPost = (recordLocator: string, request?: CreateAccountRequest, ) => {
        if (!recordLocator){
            throw new Error('Required parameter recordLocator was null or undefined when calling apiNskV1BookingsByRecordLocatorAccountPost.');
        }


            const requestObj: Request<{
                recordLocator: string, request?: CreateAccountRequest, 
            }> = {
                url: '/api/nsk/v1/bookings/${encodeURIComponent(String(recordLocator))}/account',
                method: 'post',
                data: {
                    recordLocator,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Updates the booking account status.
     * 
     * @param recordLocator The record locator.
     * @param status The allowed account status.
     
     */
    public apiNskV1BookingsByRecordLocatorAccountStatusPut = (recordLocator: string, status: 'Open' | 'Closed' | 'AgencyInactive' | 'Unknown', ) => {
        if (!recordLocator){
            throw new Error('Required parameter recordLocator was null or undefined when calling apiNskV1BookingsByRecordLocatorAccountStatusPut.');
        }

        if (!status){
            throw new Error('Required parameter status was null or undefined when calling apiNskV1BookingsByRecordLocatorAccountStatusPut.');
        }

        let queryParameters: string[] = [];
        if (status !== undefined) {
            queryParameters.push("status="+encodeURIComponent(String(status)));
        }


            const requestObj: Request<{
                recordLocator: string, status: 'Open' | 'Closed' | 'AgencyInactive' | 'Unknown', 
            }> = {
                url: '/api/nsk/v1/bookings/${encodeURIComponent(String(recordLocator))}/account/status',
                method: 'put',
                data: {
                    recordLocator,status,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves all of the transactions for all of the collections for the booking.
     * 
     * @param recordLocator 
     * @param startTime The starting date and time of the date range to search in.
     * @param sortByNewest Optional filter to sort results by newest.
     * @param endTime The end date and time of the date range to search in.
     * @param pageSize Used to specify the number of records to return.
     * @param pageIndex Represents the index of the requested paged item.
     
     */
    public apiNskV1BookingsByRecordLocatorAccountTransactionsGet = (recordLocator: string, startTime: Date, sortByNewest: boolean, endTime?: Date, pageSize?: number, pageIndex?: number, ) => {
        if (!recordLocator){
            throw new Error('Required parameter recordLocator was null or undefined when calling apiNskV1BookingsByRecordLocatorAccountTransactionsGet.');
        }

        if (!startTime){
            throw new Error('Required parameter startTime was null or undefined when calling apiNskV1BookingsByRecordLocatorAccountTransactionsGet.');
        }

        if (!sortByNewest){
            throw new Error('Required parameter sortByNewest was null or undefined when calling apiNskV1BookingsByRecordLocatorAccountTransactionsGet.');
        }

        let queryParameters: string[] = [];
        if (startTime !== undefined) {
           queryParameters.push("startTime="+encodeURIComponent(<any>startTime.toISOString()));
        }
        if (endTime !== undefined) {
           queryParameters.push("endTime="+encodeURIComponent(<any>endTime.toISOString()));
        }
        if (sortByNewest !== undefined) {
            queryParameters.push("sortByNewest="+encodeURIComponent(String(sortByNewest)));
        }
        if (pageSize !== undefined) {
            queryParameters.push("pageSize="+encodeURIComponent(String(pageSize)));
        }
        if (pageIndex !== undefined) {
            queryParameters.push("pageIndex="+encodeURIComponent(String(pageIndex)));
        }


            const requestObj: Request<{
                recordLocator: string, startTime: Date, sortByNewest: boolean, endTime?: Date, pageSize?: number, pageIndex?: number, 
            }> = {
                url: '/api/nsk/v1/bookings/${encodeURIComponent(String(recordLocator))}/account/transactions',
                method: 'get',
                data: {
                    recordLocator,startTime,sortByNewest,endTime,pageSize,pageIndex,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Adds a comment to a booking not in state.
     * 
     * @param recordLocator The record locator.
     * @param comments The comments to add.
     
     */
    public apiNskV1BookingsByRecordLocatorCommentsPost = (recordLocator: string, comments?: Array<BookingCommentRequest>, ) => {
        if (!recordLocator){
            throw new Error('Required parameter recordLocator was null or undefined when calling apiNskV1BookingsByRecordLocatorCommentsPost.');
        }


            const requestObj: Request<{
                recordLocator: string, comments?: Array<BookingCommentRequest>, 
            }> = {
                url: '/api/nsk/v1/bookings/${encodeURIComponent(String(recordLocator))}/comments',
                method: 'post',
                data: {
                    recordLocator,comments,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Sends itinerary notification via email.
     * This method will always send itinerary notifications via email,   regardless of the chosen distributionOption on the contact.
     * @param recordLocator The record locator.
     
     */
    public apiNskV1BookingsByRecordLocatorEmailPost = (recordLocator: string, ) => {
        if (!recordLocator){
            throw new Error('Required parameter recordLocator was null or undefined when calling apiNskV1BookingsByRecordLocatorEmailPost.');
        }


            const requestObj: Request<{
                recordLocator: string, 
            }> = {
                url: '/api/nsk/v1/bookings/${encodeURIComponent(String(recordLocator))}/email',
                method: 'post',
                data: {
                    recordLocator,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Replaces an existing fare price with an amount specified.
     * 
     * @param recordLocator The booking key.
     * @param journeyKey The journeyKey.
     * @param request The fare override request.
     
     */
    public apiNskV1BookingsByRecordLocatorFareOverrideJourneyByJourneyKeyPost = (recordLocator: string, journeyKey: string, request?: FareOverrideRequest, ) => {
        if (!recordLocator){
            throw new Error('Required parameter recordLocator was null or undefined when calling apiNskV1BookingsByRecordLocatorFareOverrideJourneyByJourneyKeyPost.');
        }

        if (!journeyKey){
            throw new Error('Required parameter journeyKey was null or undefined when calling apiNskV1BookingsByRecordLocatorFareOverrideJourneyByJourneyKeyPost.');
        }


            const requestObj: Request<{
                recordLocator: string, journeyKey: string, request?: FareOverrideRequest, 
            }> = {
                url: '/api/nsk/v1/bookings/${encodeURIComponent(String(recordLocator))}/fareOverride/journey/${encodeURIComponent(String(journeyKey))}',
                method: 'post',
                data: {
                    recordLocator,journeyKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves a booking itinerary stateless.
     * 
     * @param recordLocator The record locator.
     
     */
    public apiNskV1BookingsByRecordLocatorGet = (recordLocator: string, ) => {
        if (!recordLocator){
            throw new Error('Required parameter recordLocator was null or undefined when calling apiNskV1BookingsByRecordLocatorGet.');
        }


            const requestObj: Request<{
                recordLocator: string, 
            }> = {
                url: '/api/nsk/v1/bookings/${encodeURIComponent(String(recordLocator))}',
                method: 'get',
                data: {
                    recordLocator,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Removes the checkin status of passengers for a specific journey stateless.
     * 
     * @param recordLocator The booking record locator to look up the journey.
     * @param journeyKey The journey key.
     * @param request The checkin passengers request.
     
     */
    public apiNskV1BookingsCheckinByRecordLocatorJourneyByJourneyKeyDelete = (recordLocator: string, journeyKey: string, request?: CheckinPassengersRequest, ) => {
        if (!recordLocator){
            throw new Error('Required parameter recordLocator was null or undefined when calling apiNskV1BookingsCheckinByRecordLocatorJourneyByJourneyKeyDelete.');
        }

        if (!journeyKey){
            throw new Error('Required parameter journeyKey was null or undefined when calling apiNskV1BookingsCheckinByRecordLocatorJourneyByJourneyKeyDelete.');
        }


            const requestObj: Request<{
                recordLocator: string, journeyKey: string, request?: CheckinPassengersRequest, 
            }> = {
                url: '/api/nsk/v1/bookings/checkin/${encodeURIComponent(String(recordLocator))}/journey/${encodeURIComponent(String(journeyKey))}',
                method: 'delete',
                data: {
                    recordLocator,journeyKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets the checkin pre-validation requirements for a specific journey.
     * 
     * @param recordLocator The record locator of the booking.
     * @param journeyKey The journey key to be pre validate checkin with.
     
     */
    public apiNskV1BookingsCheckinByRecordLocatorJourneyByJourneyKeyRequirementsGet = (recordLocator: string, journeyKey: string, ) => {
        if (!recordLocator){
            throw new Error('Required parameter recordLocator was null or undefined when calling apiNskV1BookingsCheckinByRecordLocatorJourneyByJourneyKeyRequirementsGet.');
        }

        if (!journeyKey){
            throw new Error('Required parameter journeyKey was null or undefined when calling apiNskV1BookingsCheckinByRecordLocatorJourneyByJourneyKeyRequirementsGet.');
        }


            const requestObj: Request<{
                recordLocator: string, journeyKey: string, 
            }> = {
                url: '/api/nsk/v1/bookings/checkin/${encodeURIComponent(String(recordLocator))}/journey/${encodeURIComponent(String(journeyKey))}/requirements',
                method: 'get',
                data: {
                    recordLocator,journeyKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets the passengers lift status stateless for a specific journey based on the record locator.
     * 
     * @param recordLocator The record locator in reference to the journey.
     * @param journeyKey The journey key in reference.
     
     */
    public apiNskV1BookingsCheckinByRecordLocatorJourneyByJourneyKeyStatusGet = (recordLocator: string, journeyKey: string, ) => {
        if (!recordLocator){
            throw new Error('Required parameter recordLocator was null or undefined when calling apiNskV1BookingsCheckinByRecordLocatorJourneyByJourneyKeyStatusGet.');
        }

        if (!journeyKey){
            throw new Error('Required parameter journeyKey was null or undefined when calling apiNskV1BookingsCheckinByRecordLocatorJourneyByJourneyKeyStatusGet.');
        }


            const requestObj: Request<{
                recordLocator: string, journeyKey: string, 
            }> = {
                url: '/api/nsk/v1/bookings/checkin/${encodeURIComponent(String(recordLocator))}/journey/${encodeURIComponent(String(journeyKey))}/status',
                method: 'get',
                data: {
                    recordLocator,journeyKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Removes the checkin status of passengers for a specific journey&#39;s segment stateless.
     * 
     * @param recordLocator The booking record locator to look up the journeys segment.
     * @param segmentKey The segment key.
     * @param request The checkin passengers request.
     
     */
    public apiNskV1BookingsCheckinByRecordLocatorSegmentBySegmentKeyDelete = (recordLocator: string, segmentKey: string, request?: CheckinPassengersRequest, ) => {
        if (!recordLocator){
            throw new Error('Required parameter recordLocator was null or undefined when calling apiNskV1BookingsCheckinByRecordLocatorSegmentBySegmentKeyDelete.');
        }

        if (!segmentKey){
            throw new Error('Required parameter segmentKey was null or undefined when calling apiNskV1BookingsCheckinByRecordLocatorSegmentBySegmentKeyDelete.');
        }


            const requestObj: Request<{
                recordLocator: string, segmentKey: string, request?: CheckinPassengersRequest, 
            }> = {
                url: '/api/nsk/v1/bookings/checkin/${encodeURIComponent(String(recordLocator))}/segment/${encodeURIComponent(String(segmentKey))}',
                method: 'delete',
                data: {
                    recordLocator,segmentKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets the checkin pre-validation requirements for a specific bookings journeys segment.
     * 
     * @param recordLocator The record locator of the booking.
     * @param segmentKey The segment key to pre validate checkin with.
     
     */
    public apiNskV1BookingsCheckinByRecordLocatorSegmentBySegmentKeyRequirementsGet = (recordLocator: string, segmentKey: string, ) => {
        if (!recordLocator){
            throw new Error('Required parameter recordLocator was null or undefined when calling apiNskV1BookingsCheckinByRecordLocatorSegmentBySegmentKeyRequirementsGet.');
        }

        if (!segmentKey){
            throw new Error('Required parameter segmentKey was null or undefined when calling apiNskV1BookingsCheckinByRecordLocatorSegmentBySegmentKeyRequirementsGet.');
        }


            const requestObj: Request<{
                recordLocator: string, segmentKey: string, 
            }> = {
                url: '/api/nsk/v1/bookings/checkin/${encodeURIComponent(String(recordLocator))}/segment/${encodeURIComponent(String(segmentKey))}/requirements',
                method: 'get',
                data: {
                    recordLocator,segmentKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets the passengers lift status stateless for a specific segment based on the record locator.
     * 
     * @param recordLocator The record locator in reference to the journey.
     * @param segmentKey The segment key in reference.
     
     */
    public apiNskV1BookingsCheckinByRecordLocatorSegmentBySegmentKeyStatusGet = (recordLocator: string, segmentKey: string, ) => {
        if (!recordLocator){
            throw new Error('Required parameter recordLocator was null or undefined when calling apiNskV1BookingsCheckinByRecordLocatorSegmentBySegmentKeyStatusGet.');
        }

        if (!segmentKey){
            throw new Error('Required parameter segmentKey was null or undefined when calling apiNskV1BookingsCheckinByRecordLocatorSegmentBySegmentKeyStatusGet.');
        }


            const requestObj: Request<{
                recordLocator: string, segmentKey: string, 
            }> = {
                url: '/api/nsk/v1/bookings/checkin/${encodeURIComponent(String(recordLocator))}/segment/${encodeURIComponent(String(segmentKey))}/status',
                method: 'get',
                data: {
                    recordLocator,segmentKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Find booking by agency.
     * 
     * @param organizationCode OrganizationCode represents the organization associated with the agent who created  the booking.
     * @param firstName The first name of a passenger.
     * @param lastName The last name of a passenger.
     * @param phoneticSearch Whether or not to do a phonetic search of the last name.
     * @param filtersPageSize The number of items to return for the request.
     * @param filtersLastIndex The last booking index (used for paging).
     * @param filtersFlightNumber Filter by the flight number.
     * @param filtersDepartureDate The first journeys departure date.
     * @param filtersDestination Filter by the destination code.
     * @param filtersOrigin Filter by the departure code.
     * @param filtersSourceOrganization Filter by the organization associated with the booking. For example the  travel agency associated with this booking.
     * @param filtersOrganizationGroupCode Filter by the organization group code to find.
     * @param filtersSearchArchive Whether or not to search the booking archive.
     
     */
    public apiNskV1BookingsSearchByAgencyGet = (organizationCode: string, firstName?: string, lastName?: string, phoneticSearch?: boolean, filtersPageSize?: number, filtersLastIndex?: number, filtersFlightNumber?: string, filtersDepartureDate?: Date, filtersDestination?: string, filtersOrigin?: string, filtersSourceOrganization?: string, filtersOrganizationGroupCode?: string, filtersSearchArchive?: boolean, ) => {
        if (!organizationCode){
            throw new Error('Required parameter organizationCode was null or undefined when calling apiNskV1BookingsSearchByAgencyGet.');
        }

        let queryParameters: string[] = [];
        if (organizationCode !== undefined) {
            queryParameters.push("organizationCode="+encodeURIComponent(String(organizationCode)));
        }
        if (firstName !== undefined) {
            queryParameters.push("firstName="+encodeURIComponent(String(firstName)));
        }
        if (lastName !== undefined) {
            queryParameters.push("lastName="+encodeURIComponent(String(lastName)));
        }
        if (phoneticSearch !== undefined) {
            queryParameters.push("phoneticSearch="+encodeURIComponent(String(phoneticSearch)));
        }
        if (filtersPageSize !== undefined) {
            queryParameters.push("filtersPageSize="+encodeURIComponent(String(filtersPageSize)));
        }
        if (filtersLastIndex !== undefined) {
            queryParameters.push("filtersLastIndex="+encodeURIComponent(String(filtersLastIndex)));
        }
        if (filtersFlightNumber !== undefined) {
            queryParameters.push("filtersFlightNumber="+encodeURIComponent(String(filtersFlightNumber)));
        }
        if (filtersDepartureDate !== undefined) {
           queryParameters.push("filtersDepartureDate="+encodeURIComponent(<any>filtersDepartureDate.toISOString()));
        }
        if (filtersDestination !== undefined) {
            queryParameters.push("filtersDestination="+encodeURIComponent(String(filtersDestination)));
        }
        if (filtersOrigin !== undefined) {
            queryParameters.push("filtersOrigin="+encodeURIComponent(String(filtersOrigin)));
        }
        if (filtersSourceOrganization !== undefined) {
            queryParameters.push("filtersSourceOrganization="+encodeURIComponent(String(filtersSourceOrganization)));
        }
        if (filtersOrganizationGroupCode !== undefined) {
            queryParameters.push("filtersOrganizationGroupCode="+encodeURIComponent(String(filtersOrganizationGroupCode)));
        }
        if (filtersSearchArchive !== undefined) {
            queryParameters.push("filtersSearchArchive="+encodeURIComponent(String(filtersSearchArchive)));
        }


            const requestObj: Request<{
                organizationCode: string, firstName?: string, lastName?: string, phoneticSearch?: boolean, filtersPageSize?: number, filtersLastIndex?: number, filtersFlightNumber?: string, filtersDepartureDate?: Date, filtersDestination?: string, filtersOrigin?: string, filtersSourceOrganization?: string, filtersOrganizationGroupCode?: string, filtersSearchArchive?: boolean, 
            }> = {
                url: '/api/nsk/v1/bookings/searchByAgency',
                method: 'get',
                data: {
                    organizationCode,firstName,lastName,phoneticSearch,filtersPageSize,filtersLastIndex,filtersFlightNumber,filtersDepartureDate,filtersDestination,filtersOrigin,filtersSourceOrganization,filtersOrganizationGroupCode,filtersSearchArchive,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Find booking by the agent code.
     * 
     * @param agentCode The agent code (name) that created the booking.
     * @param domainCode The domain code to find.
     * @param firstName The first name of a passenger.
     * @param lastName The last name of a passenger.
     * @param phoneticSearch Whether or not to do a phonetic search.
     * @param filtersPageSize The number of items to return for the request.
     * @param filtersLastIndex The last booking index (used for paging).
     * @param filtersFlightNumber Filter by the flight number.
     * @param filtersDepartureDate The first journeys departure date.
     * @param filtersDestination Filter by the destination code.
     * @param filtersOrigin Filter by the departure code.
     * @param filtersSourceOrganization Filter by the organization associated with the booking. For example the  travel agency associated with this booking.
     * @param filtersOrganizationGroupCode Filter by the organization group code to find.
     * @param filtersSearchArchive Whether or not to search the booking archive.
     
     */
    public apiNskV1BookingsSearchByAgentCodeGet = (agentCode: string, domainCode: string, firstName?: string, lastName?: string, phoneticSearch?: boolean, filtersPageSize?: number, filtersLastIndex?: number, filtersFlightNumber?: string, filtersDepartureDate?: Date, filtersDestination?: string, filtersOrigin?: string, filtersSourceOrganization?: string, filtersOrganizationGroupCode?: string, filtersSearchArchive?: boolean, ) => {
        if (!agentCode){
            throw new Error('Required parameter agentCode was null or undefined when calling apiNskV1BookingsSearchByAgentCodeGet.');
        }

        if (!domainCode){
            throw new Error('Required parameter domainCode was null or undefined when calling apiNskV1BookingsSearchByAgentCodeGet.');
        }

        let queryParameters: string[] = [];
        if (agentCode !== undefined) {
            queryParameters.push("agentCode="+encodeURIComponent(String(agentCode)));
        }
        if (domainCode !== undefined) {
            queryParameters.push("domainCode="+encodeURIComponent(String(domainCode)));
        }
        if (firstName !== undefined) {
            queryParameters.push("firstName="+encodeURIComponent(String(firstName)));
        }
        if (lastName !== undefined) {
            queryParameters.push("lastName="+encodeURIComponent(String(lastName)));
        }
        if (phoneticSearch !== undefined) {
            queryParameters.push("phoneticSearch="+encodeURIComponent(String(phoneticSearch)));
        }
        if (filtersPageSize !== undefined) {
            queryParameters.push("filtersPageSize="+encodeURIComponent(String(filtersPageSize)));
        }
        if (filtersLastIndex !== undefined) {
            queryParameters.push("filtersLastIndex="+encodeURIComponent(String(filtersLastIndex)));
        }
        if (filtersFlightNumber !== undefined) {
            queryParameters.push("filtersFlightNumber="+encodeURIComponent(String(filtersFlightNumber)));
        }
        if (filtersDepartureDate !== undefined) {
           queryParameters.push("filtersDepartureDate="+encodeURIComponent(<any>filtersDepartureDate.toISOString()));
        }
        if (filtersDestination !== undefined) {
            queryParameters.push("filtersDestination="+encodeURIComponent(String(filtersDestination)));
        }
        if (filtersOrigin !== undefined) {
            queryParameters.push("filtersOrigin="+encodeURIComponent(String(filtersOrigin)));
        }
        if (filtersSourceOrganization !== undefined) {
            queryParameters.push("filtersSourceOrganization="+encodeURIComponent(String(filtersSourceOrganization)));
        }
        if (filtersOrganizationGroupCode !== undefined) {
            queryParameters.push("filtersOrganizationGroupCode="+encodeURIComponent(String(filtersOrganizationGroupCode)));
        }
        if (filtersSearchArchive !== undefined) {
            queryParameters.push("filtersSearchArchive="+encodeURIComponent(String(filtersSearchArchive)));
        }


            const requestObj: Request<{
                agentCode: string, domainCode: string, firstName?: string, lastName?: string, phoneticSearch?: boolean, filtersPageSize?: number, filtersLastIndex?: number, filtersFlightNumber?: string, filtersDepartureDate?: Date, filtersDestination?: string, filtersOrigin?: string, filtersSourceOrganization?: string, filtersOrganizationGroupCode?: string, filtersSearchArchive?: boolean, 
            }> = {
                url: '/api/nsk/v1/bookings/searchByAgentCode',
                method: 'get',
                data: {
                    agentCode,domainCode,firstName,lastName,phoneticSearch,filtersPageSize,filtersLastIndex,filtersFlightNumber,filtersDepartureDate,filtersDestination,filtersOrigin,filtersSourceOrganization,filtersOrganizationGroupCode,filtersSearchArchive,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Find booking by agent.
     * 
     * @param agentId The agent identifier.
     * @param firstName The first name of a passenger.
     * @param lastName The last name of a passenger.
     * @param phoneticSearch Whether or not to do a phonetic search.
     * @param filtersPageSize The number of items to return for the request.
     * @param filtersLastIndex The last booking index (used for paging).
     * @param filtersFlightNumber Filter by the flight number.
     * @param filtersDepartureDate The first journeys departure date.
     * @param filtersDestination Filter by the destination code.
     * @param filtersOrigin Filter by the departure code.
     * @param filtersSourceOrganization Filter by the organization associated with the booking. For example the  travel agency associated with this booking.
     * @param filtersOrganizationGroupCode Filter by the organization group code to find.
     * @param filtersSearchArchive Whether or not to search the booking archive.
     
     */
    public apiNskV1BookingsSearchByAgentGet = (agentId: number, firstName?: string, lastName?: string, phoneticSearch?: boolean, filtersPageSize?: number, filtersLastIndex?: number, filtersFlightNumber?: string, filtersDepartureDate?: Date, filtersDestination?: string, filtersOrigin?: string, filtersSourceOrganization?: string, filtersOrganizationGroupCode?: string, filtersSearchArchive?: boolean, ) => {
        if (!agentId){
            throw new Error('Required parameter agentId was null or undefined when calling apiNskV1BookingsSearchByAgentGet.');
        }

        let queryParameters: string[] = [];
        if (agentId !== undefined) {
            queryParameters.push("agentId="+encodeURIComponent(String(agentId)));
        }
        if (firstName !== undefined) {
            queryParameters.push("firstName="+encodeURIComponent(String(firstName)));
        }
        if (lastName !== undefined) {
            queryParameters.push("lastName="+encodeURIComponent(String(lastName)));
        }
        if (phoneticSearch !== undefined) {
            queryParameters.push("phoneticSearch="+encodeURIComponent(String(phoneticSearch)));
        }
        if (filtersPageSize !== undefined) {
            queryParameters.push("filtersPageSize="+encodeURIComponent(String(filtersPageSize)));
        }
        if (filtersLastIndex !== undefined) {
            queryParameters.push("filtersLastIndex="+encodeURIComponent(String(filtersLastIndex)));
        }
        if (filtersFlightNumber !== undefined) {
            queryParameters.push("filtersFlightNumber="+encodeURIComponent(String(filtersFlightNumber)));
        }
        if (filtersDepartureDate !== undefined) {
           queryParameters.push("filtersDepartureDate="+encodeURIComponent(<any>filtersDepartureDate.toISOString()));
        }
        if (filtersDestination !== undefined) {
            queryParameters.push("filtersDestination="+encodeURIComponent(String(filtersDestination)));
        }
        if (filtersOrigin !== undefined) {
            queryParameters.push("filtersOrigin="+encodeURIComponent(String(filtersOrigin)));
        }
        if (filtersSourceOrganization !== undefined) {
            queryParameters.push("filtersSourceOrganization="+encodeURIComponent(String(filtersSourceOrganization)));
        }
        if (filtersOrganizationGroupCode !== undefined) {
            queryParameters.push("filtersOrganizationGroupCode="+encodeURIComponent(String(filtersOrganizationGroupCode)));
        }
        if (filtersSearchArchive !== undefined) {
            queryParameters.push("filtersSearchArchive="+encodeURIComponent(String(filtersSearchArchive)));
        }


            const requestObj: Request<{
                agentId: number, firstName?: string, lastName?: string, phoneticSearch?: boolean, filtersPageSize?: number, filtersLastIndex?: number, filtersFlightNumber?: string, filtersDepartureDate?: Date, filtersDestination?: string, filtersOrigin?: string, filtersSourceOrganization?: string, filtersOrganizationGroupCode?: string, filtersSearchArchive?: boolean, 
            }> = {
                url: '/api/nsk/v1/bookings/searchByAgent',
                method: 'get',
                data: {
                    agentId,firstName,lastName,phoneticSearch,filtersPageSize,filtersLastIndex,filtersFlightNumber,filtersDepartureDate,filtersDestination,filtersOrigin,filtersSourceOrganization,filtersOrganizationGroupCode,filtersSearchArchive,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Find booking by baggage tag.
     * 
     * @param bagTag One of the OS tag number.
     * @param startUtc The OS tag start date.
     * @param endUtc The OS tag end date.
     * @param pageSize The number of items to return for the request.
     * @param lastIndex The last booking index (used for paging).
     * @param searchArchive Whether or not to search the booking archive.
     
     */
    public apiNskV1BookingsSearchByBagTagGet = (bagTag: string, startUtc: Date, endUtc: Date, pageSize?: number, lastIndex?: number, searchArchive?: boolean, ) => {
        if (!bagTag){
            throw new Error('Required parameter bagTag was null or undefined when calling apiNskV1BookingsSearchByBagTagGet.');
        }

        if (!startUtc){
            throw new Error('Required parameter startUtc was null or undefined when calling apiNskV1BookingsSearchByBagTagGet.');
        }

        if (!endUtc){
            throw new Error('Required parameter endUtc was null or undefined when calling apiNskV1BookingsSearchByBagTagGet.');
        }

        let queryParameters: string[] = [];
        if (bagTag !== undefined) {
            queryParameters.push("bagTag="+encodeURIComponent(String(bagTag)));
        }
        if (startUtc !== undefined) {
           queryParameters.push("startUtc="+encodeURIComponent(<any>startUtc.toISOString()));
        }
        if (endUtc !== undefined) {
           queryParameters.push("endUtc="+encodeURIComponent(<any>endUtc.toISOString()));
        }
        if (pageSize !== undefined) {
            queryParameters.push("pageSize="+encodeURIComponent(String(pageSize)));
        }
        if (lastIndex !== undefined) {
            queryParameters.push("lastIndex="+encodeURIComponent(String(lastIndex)));
        }
        if (searchArchive !== undefined) {
            queryParameters.push("searchArchive="+encodeURIComponent(String(searchArchive)));
        }


            const requestObj: Request<{
                bagTag: string, startUtc: Date, endUtc: Date, pageSize?: number, lastIndex?: number, searchArchive?: boolean, 
            }> = {
                url: '/api/nsk/v1/bookings/searchByBagTag',
                method: 'get',
                data: {
                    bagTag,startUtc,endUtc,pageSize,lastIndex,searchArchive,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Find booking by contact customer number.
     * 
     * @param contactCustomerNumber One of the contacts customer number applied.
     * @param agentId The agent identifier.
     * @param organizationCode OrganizationCode represents the organization associated with the agent who created  the booking.
     * @param filtersPageSize The number of items to return for the request.
     * @param filtersLastIndex The last booking index (used for paging).
     * @param filtersFlightNumber Filter by the flight number.
     * @param filtersDepartureDate The first journeys departure date.
     * @param filtersDestination Filter by the destination code.
     * @param filtersOrigin Filter by the departure code.
     * @param filtersSourceOrganization Filter by the organization associated with the booking. For example the  travel agency associated with this booking.
     * @param filtersOrganizationGroupCode Filter by the organization group code to find.
     * @param filtersSearchArchive Whether or not to search the booking archive.
     
     */
    public apiNskV1BookingsSearchByContactCustomerNumberGet = (contactCustomerNumber: string, agentId?: number, organizationCode?: string, filtersPageSize?: number, filtersLastIndex?: number, filtersFlightNumber?: string, filtersDepartureDate?: Date, filtersDestination?: string, filtersOrigin?: string, filtersSourceOrganization?: string, filtersOrganizationGroupCode?: string, filtersSearchArchive?: boolean, ) => {
        if (!contactCustomerNumber){
            throw new Error('Required parameter contactCustomerNumber was null or undefined when calling apiNskV1BookingsSearchByContactCustomerNumberGet.');
        }

        let queryParameters: string[] = [];
        if (contactCustomerNumber !== undefined) {
            queryParameters.push("contactCustomerNumber="+encodeURIComponent(String(contactCustomerNumber)));
        }
        if (agentId !== undefined) {
            queryParameters.push("agentId="+encodeURIComponent(String(agentId)));
        }
        if (organizationCode !== undefined) {
            queryParameters.push("organizationCode="+encodeURIComponent(String(organizationCode)));
        }
        if (filtersPageSize !== undefined) {
            queryParameters.push("filtersPageSize="+encodeURIComponent(String(filtersPageSize)));
        }
        if (filtersLastIndex !== undefined) {
            queryParameters.push("filtersLastIndex="+encodeURIComponent(String(filtersLastIndex)));
        }
        if (filtersFlightNumber !== undefined) {
            queryParameters.push("filtersFlightNumber="+encodeURIComponent(String(filtersFlightNumber)));
        }
        if (filtersDepartureDate !== undefined) {
           queryParameters.push("filtersDepartureDate="+encodeURIComponent(<any>filtersDepartureDate.toISOString()));
        }
        if (filtersDestination !== undefined) {
            queryParameters.push("filtersDestination="+encodeURIComponent(String(filtersDestination)));
        }
        if (filtersOrigin !== undefined) {
            queryParameters.push("filtersOrigin="+encodeURIComponent(String(filtersOrigin)));
        }
        if (filtersSourceOrganization !== undefined) {
            queryParameters.push("filtersSourceOrganization="+encodeURIComponent(String(filtersSourceOrganization)));
        }
        if (filtersOrganizationGroupCode !== undefined) {
            queryParameters.push("filtersOrganizationGroupCode="+encodeURIComponent(String(filtersOrganizationGroupCode)));
        }
        if (filtersSearchArchive !== undefined) {
            queryParameters.push("filtersSearchArchive="+encodeURIComponent(String(filtersSearchArchive)));
        }


            const requestObj: Request<{
                contactCustomerNumber: string, agentId?: number, organizationCode?: string, filtersPageSize?: number, filtersLastIndex?: number, filtersFlightNumber?: string, filtersDepartureDate?: Date, filtersDestination?: string, filtersOrigin?: string, filtersSourceOrganization?: string, filtersOrganizationGroupCode?: string, filtersSearchArchive?: boolean, 
            }> = {
                url: '/api/nsk/v1/bookings/searchByContactCustomerNumber',
                method: 'get',
                data: {
                    contactCustomerNumber,agentId,organizationCode,filtersPageSize,filtersLastIndex,filtersFlightNumber,filtersDepartureDate,filtersDestination,filtersOrigin,filtersSourceOrganization,filtersOrganizationGroupCode,filtersSearchArchive,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Find booking by contact.
     * 
     * @param firstName The first name of a passenger or contact.
     * @param lastName The last name of a passenger or contact.
     * @param recordLocator Record locator being requested.
     * @param phoneNumber One of the applied phone numbers to a passenger or contact.
     * @param emailAddress The email address of a contact.
     * @param sourceOrganization Filter by the organization associated with the booking. For example the  travel agency associated with this booking.
     * @param organizationCode OrganizationCode represents the organization associated with the agent who created  the booking.
     * @param organizationGroupCode Filter by the organization group code to find.
     * @param searchArchive Whether or not to search the booking archive.
     * @param pageSize The number of items to return for the request.
     * @param lastIndex The last booking index (used for paging).
     
     */
    public apiNskV1BookingsSearchByContactGet = (firstName?: string, lastName?: string, recordLocator?: string, phoneNumber?: string, emailAddress?: string, sourceOrganization?: string, organizationCode?: string, organizationGroupCode?: string, searchArchive?: boolean, pageSize?: number, lastIndex?: number, ) => {
        let queryParameters: string[] = [];
        if (firstName !== undefined) {
            queryParameters.push("firstName="+encodeURIComponent(String(firstName)));
        }
        if (lastName !== undefined) {
            queryParameters.push("lastName="+encodeURIComponent(String(lastName)));
        }
        if (recordLocator !== undefined) {
            queryParameters.push("recordLocator="+encodeURIComponent(String(recordLocator)));
        }
        if (phoneNumber !== undefined) {
            queryParameters.push("phoneNumber="+encodeURIComponent(String(phoneNumber)));
        }
        if (emailAddress !== undefined) {
            queryParameters.push("emailAddress="+encodeURIComponent(String(emailAddress)));
        }
        if (sourceOrganization !== undefined) {
            queryParameters.push("sourceOrganization="+encodeURIComponent(String(sourceOrganization)));
        }
        if (organizationCode !== undefined) {
            queryParameters.push("organizationCode="+encodeURIComponent(String(organizationCode)));
        }
        if (organizationGroupCode !== undefined) {
            queryParameters.push("organizationGroupCode="+encodeURIComponent(String(organizationGroupCode)));
        }
        if (searchArchive !== undefined) {
            queryParameters.push("searchArchive="+encodeURIComponent(String(searchArchive)));
        }
        if (pageSize !== undefined) {
            queryParameters.push("pageSize="+encodeURIComponent(String(pageSize)));
        }
        if (lastIndex !== undefined) {
            queryParameters.push("lastIndex="+encodeURIComponent(String(lastIndex)));
        }


            const requestObj: Request<{
                firstName?: string, lastName?: string, recordLocator?: string, phoneNumber?: string, emailAddress?: string, sourceOrganization?: string, organizationCode?: string, organizationGroupCode?: string, searchArchive?: boolean, pageSize?: number, lastIndex?: number, 
            }> = {
                url: '/api/nsk/v1/bookings/searchByContact',
                method: 'get',
                data: {
                    firstName,lastName,recordLocator,phoneNumber,emailAddress,sourceOrganization,organizationCode,organizationGroupCode,searchArchive,pageSize,lastIndex,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Find booking by credit card number.
     * 
     * @param creditCardNumber The digits of one of the credit card number applied.
     * @param agentId The agent identifier.
     * @param organizationCode OrganizationCode represents the organization associated with the agent who created  the booking.
     * @param filtersPageSize The number of items to return for the request.
     * @param filtersLastIndex The last booking index (used for paging).
     * @param filtersFlightNumber Filter by the flight number.
     * @param filtersDepartureDate The first journeys departure date.
     * @param filtersDestination Filter by the destination code.
     * @param filtersOrigin Filter by the departure code.
     * @param filtersSourceOrganization Filter by the organization associated with the booking. For example the  travel agency associated with this booking.
     * @param filtersOrganizationGroupCode Filter by the organization group code to find.
     * @param filtersSearchArchive Whether or not to search the booking archive.
     
     */
    public apiNskV1BookingsSearchByCreditCardGet = (creditCardNumber: string, agentId?: number, organizationCode?: string, filtersPageSize?: number, filtersLastIndex?: number, filtersFlightNumber?: string, filtersDepartureDate?: Date, filtersDestination?: string, filtersOrigin?: string, filtersSourceOrganization?: string, filtersOrganizationGroupCode?: string, filtersSearchArchive?: boolean, ) => {
        if (!creditCardNumber){
            throw new Error('Required parameter creditCardNumber was null or undefined when calling apiNskV1BookingsSearchByCreditCardGet.');
        }

        let queryParameters: string[] = [];
        if (creditCardNumber !== undefined) {
            queryParameters.push("creditCardNumber="+encodeURIComponent(String(creditCardNumber)));
        }
        if (agentId !== undefined) {
            queryParameters.push("agentId="+encodeURIComponent(String(agentId)));
        }
        if (organizationCode !== undefined) {
            queryParameters.push("organizationCode="+encodeURIComponent(String(organizationCode)));
        }
        if (filtersPageSize !== undefined) {
            queryParameters.push("filtersPageSize="+encodeURIComponent(String(filtersPageSize)));
        }
        if (filtersLastIndex !== undefined) {
            queryParameters.push("filtersLastIndex="+encodeURIComponent(String(filtersLastIndex)));
        }
        if (filtersFlightNumber !== undefined) {
            queryParameters.push("filtersFlightNumber="+encodeURIComponent(String(filtersFlightNumber)));
        }
        if (filtersDepartureDate !== undefined) {
           queryParameters.push("filtersDepartureDate="+encodeURIComponent(<any>filtersDepartureDate.toISOString()));
        }
        if (filtersDestination !== undefined) {
            queryParameters.push("filtersDestination="+encodeURIComponent(String(filtersDestination)));
        }
        if (filtersOrigin !== undefined) {
            queryParameters.push("filtersOrigin="+encodeURIComponent(String(filtersOrigin)));
        }
        if (filtersSourceOrganization !== undefined) {
            queryParameters.push("filtersSourceOrganization="+encodeURIComponent(String(filtersSourceOrganization)));
        }
        if (filtersOrganizationGroupCode !== undefined) {
            queryParameters.push("filtersOrganizationGroupCode="+encodeURIComponent(String(filtersOrganizationGroupCode)));
        }
        if (filtersSearchArchive !== undefined) {
            queryParameters.push("filtersSearchArchive="+encodeURIComponent(String(filtersSearchArchive)));
        }


            const requestObj: Request<{
                creditCardNumber: string, agentId?: number, organizationCode?: string, filtersPageSize?: number, filtersLastIndex?: number, filtersFlightNumber?: string, filtersDepartureDate?: Date, filtersDestination?: string, filtersOrigin?: string, filtersSourceOrganization?: string, filtersOrganizationGroupCode?: string, filtersSearchArchive?: boolean, 
            }> = {
                url: '/api/nsk/v1/bookings/searchByCreditCard',
                method: 'get',
                data: {
                    creditCardNumber,agentId,organizationCode,filtersPageSize,filtersLastIndex,filtersFlightNumber,filtersDepartureDate,filtersDestination,filtersOrigin,filtersSourceOrganization,filtersOrganizationGroupCode,filtersSearchArchive,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Find booking by customer number.
     * 
     * @param customerNumber One of the contacts customer number applied.
     * @param agentId The agent identifier.
     * @param organizationCode OrganizationCode represents the organization associated with the agent who created  the booking.
     * @param filtersPageSize The number of items to return for the request.
     * @param filtersLastIndex The last booking index (used for paging).
     * @param filtersFlightNumber Filter by the flight number.
     * @param filtersDepartureDate The first journeys departure date.
     * @param filtersDestination Filter by the destination code.
     * @param filtersOrigin Filter by the departure code.
     * @param filtersSourceOrganization Filter by the organization associated with the booking. For example the  travel agency associated with this booking.
     * @param filtersOrganizationGroupCode Filter by the organization group code to find.
     * @param filtersSearchArchive Whether or not to search the booking archive.
     
     */
    public apiNskV1BookingsSearchByCustomerNumberGet = (customerNumber: string, agentId?: number, organizationCode?: string, filtersPageSize?: number, filtersLastIndex?: number, filtersFlightNumber?: string, filtersDepartureDate?: Date, filtersDestination?: string, filtersOrigin?: string, filtersSourceOrganization?: string, filtersOrganizationGroupCode?: string, filtersSearchArchive?: boolean, ) => {
        if (!customerNumber){
            throw new Error('Required parameter customerNumber was null or undefined when calling apiNskV1BookingsSearchByCustomerNumberGet.');
        }

        let queryParameters: string[] = [];
        if (customerNumber !== undefined) {
            queryParameters.push("customerNumber="+encodeURIComponent(String(customerNumber)));
        }
        if (agentId !== undefined) {
            queryParameters.push("agentId="+encodeURIComponent(String(agentId)));
        }
        if (organizationCode !== undefined) {
            queryParameters.push("organizationCode="+encodeURIComponent(String(organizationCode)));
        }
        if (filtersPageSize !== undefined) {
            queryParameters.push("filtersPageSize="+encodeURIComponent(String(filtersPageSize)));
        }
        if (filtersLastIndex !== undefined) {
            queryParameters.push("filtersLastIndex="+encodeURIComponent(String(filtersLastIndex)));
        }
        if (filtersFlightNumber !== undefined) {
            queryParameters.push("filtersFlightNumber="+encodeURIComponent(String(filtersFlightNumber)));
        }
        if (filtersDepartureDate !== undefined) {
           queryParameters.push("filtersDepartureDate="+encodeURIComponent(<any>filtersDepartureDate.toISOString()));
        }
        if (filtersDestination !== undefined) {
            queryParameters.push("filtersDestination="+encodeURIComponent(String(filtersDestination)));
        }
        if (filtersOrigin !== undefined) {
            queryParameters.push("filtersOrigin="+encodeURIComponent(String(filtersOrigin)));
        }
        if (filtersSourceOrganization !== undefined) {
            queryParameters.push("filtersSourceOrganization="+encodeURIComponent(String(filtersSourceOrganization)));
        }
        if (filtersOrganizationGroupCode !== undefined) {
            queryParameters.push("filtersOrganizationGroupCode="+encodeURIComponent(String(filtersOrganizationGroupCode)));
        }
        if (filtersSearchArchive !== undefined) {
            queryParameters.push("filtersSearchArchive="+encodeURIComponent(String(filtersSearchArchive)));
        }


            const requestObj: Request<{
                customerNumber: string, agentId?: number, organizationCode?: string, filtersPageSize?: number, filtersLastIndex?: number, filtersFlightNumber?: string, filtersDepartureDate?: Date, filtersDestination?: string, filtersOrigin?: string, filtersSourceOrganization?: string, filtersOrganizationGroupCode?: string, filtersSearchArchive?: boolean, 
            }> = {
                url: '/api/nsk/v1/bookings/searchByCustomerNumber',
                method: 'get',
                data: {
                    customerNumber,agentId,organizationCode,filtersPageSize,filtersLastIndex,filtersFlightNumber,filtersDepartureDate,filtersDestination,filtersOrigin,filtersSourceOrganization,filtersOrganizationGroupCode,filtersSearchArchive,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Find booking by date.
     * 
     * @param startDateUtc The booking date start search.
     * @param endDateUtc The booking date end search.
     * @param filtersPageSize The number of items to return for the request.
     * @param filtersLastIndex The last booking index (used for paging).
     * @param filtersFlightNumber Filter by the flight number.
     * @param filtersDepartureDate The first journeys departure date.
     * @param filtersDestination Filter by the destination code.
     * @param filtersOrigin Filter by the departure code.
     * @param filtersSourceOrganization Filter by the organization associated with the booking. For example the  travel agency associated with this booking.
     * @param filtersOrganizationGroupCode Filter by the organization group code to find.
     * @param filtersSearchArchive Whether or not to search the booking archive.
     
     */
    public apiNskV1BookingsSearchByDateGet = (startDateUtc: Date, endDateUtc: Date, filtersPageSize?: number, filtersLastIndex?: number, filtersFlightNumber?: string, filtersDepartureDate?: Date, filtersDestination?: string, filtersOrigin?: string, filtersSourceOrganization?: string, filtersOrganizationGroupCode?: string, filtersSearchArchive?: boolean, ) => {
        if (!startDateUtc){
            throw new Error('Required parameter startDateUtc was null or undefined when calling apiNskV1BookingsSearchByDateGet.');
        }

        if (!endDateUtc){
            throw new Error('Required parameter endDateUtc was null or undefined when calling apiNskV1BookingsSearchByDateGet.');
        }

        let queryParameters: string[] = [];
        if (startDateUtc !== undefined) {
           queryParameters.push("startDateUtc="+encodeURIComponent(<any>startDateUtc.toISOString()));
        }
        if (endDateUtc !== undefined) {
           queryParameters.push("endDateUtc="+encodeURIComponent(<any>endDateUtc.toISOString()));
        }
        if (filtersPageSize !== undefined) {
            queryParameters.push("filtersPageSize="+encodeURIComponent(String(filtersPageSize)));
        }
        if (filtersLastIndex !== undefined) {
            queryParameters.push("filtersLastIndex="+encodeURIComponent(String(filtersLastIndex)));
        }
        if (filtersFlightNumber !== undefined) {
            queryParameters.push("filtersFlightNumber="+encodeURIComponent(String(filtersFlightNumber)));
        }
        if (filtersDepartureDate !== undefined) {
           queryParameters.push("filtersDepartureDate="+encodeURIComponent(<any>filtersDepartureDate.toISOString()));
        }
        if (filtersDestination !== undefined) {
            queryParameters.push("filtersDestination="+encodeURIComponent(String(filtersDestination)));
        }
        if (filtersOrigin !== undefined) {
            queryParameters.push("filtersOrigin="+encodeURIComponent(String(filtersOrigin)));
        }
        if (filtersSourceOrganization !== undefined) {
            queryParameters.push("filtersSourceOrganization="+encodeURIComponent(String(filtersSourceOrganization)));
        }
        if (filtersOrganizationGroupCode !== undefined) {
            queryParameters.push("filtersOrganizationGroupCode="+encodeURIComponent(String(filtersOrganizationGroupCode)));
        }
        if (filtersSearchArchive !== undefined) {
            queryParameters.push("filtersSearchArchive="+encodeURIComponent(String(filtersSearchArchive)));
        }


            const requestObj: Request<{
                startDateUtc: Date, endDateUtc: Date, filtersPageSize?: number, filtersLastIndex?: number, filtersFlightNumber?: string, filtersDepartureDate?: Date, filtersDestination?: string, filtersOrigin?: string, filtersSourceOrganization?: string, filtersOrganizationGroupCode?: string, filtersSearchArchive?: boolean, 
            }> = {
                url: '/api/nsk/v1/bookings/searchByDate',
                method: 'get',
                data: {
                    startDateUtc,endDateUtc,filtersPageSize,filtersLastIndex,filtersFlightNumber,filtersDepartureDate,filtersDestination,filtersOrigin,filtersSourceOrganization,filtersOrganizationGroupCode,filtersSearchArchive,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Find booking by document.
     * 
     * @param documentDocumentNumber One of the passengers applied travel document number.
     * @param documentDocumentTypeCode One of the passengers applied travel document type code.
     * @param filtersPageSize The number of items to return for the request.
     * @param filtersLastIndex The last booking index (used for paging).
     * @param filtersFlightNumber Filter by the flight number.
     * @param filtersDepartureDate The first journeys departure date.
     * @param filtersDestination Filter by the destination code.
     * @param filtersOrigin Filter by the departure code.
     * @param filtersSourceOrganization Filter by the organization associated with the booking. For example the  travel agency associated with this booking.
     * @param filtersOrganizationGroupCode Filter by the organization group code to find.
     * @param filtersSearchArchive Whether or not to search the booking archive.
     
     */
    public apiNskV1BookingsSearchByDocumentGet = (documentDocumentNumber: string, documentDocumentTypeCode: string, filtersPageSize?: number, filtersLastIndex?: number, filtersFlightNumber?: string, filtersDepartureDate?: Date, filtersDestination?: string, filtersOrigin?: string, filtersSourceOrganization?: string, filtersOrganizationGroupCode?: string, filtersSearchArchive?: boolean, ) => {
        if (!documentDocumentNumber){
            throw new Error('Required parameter documentDocumentNumber was null or undefined when calling apiNskV1BookingsSearchByDocumentGet.');
        }

        if (!documentDocumentTypeCode){
            throw new Error('Required parameter documentDocumentTypeCode was null or undefined when calling apiNskV1BookingsSearchByDocumentGet.');
        }

        let queryParameters: string[] = [];
        if (documentDocumentNumber !== undefined) {
            queryParameters.push("documentDocumentNumber="+encodeURIComponent(String(documentDocumentNumber)));
        }
        if (documentDocumentTypeCode !== undefined) {
            queryParameters.push("documentDocumentTypeCode="+encodeURIComponent(String(documentDocumentTypeCode)));
        }
        if (filtersPageSize !== undefined) {
            queryParameters.push("filtersPageSize="+encodeURIComponent(String(filtersPageSize)));
        }
        if (filtersLastIndex !== undefined) {
            queryParameters.push("filtersLastIndex="+encodeURIComponent(String(filtersLastIndex)));
        }
        if (filtersFlightNumber !== undefined) {
            queryParameters.push("filtersFlightNumber="+encodeURIComponent(String(filtersFlightNumber)));
        }
        if (filtersDepartureDate !== undefined) {
           queryParameters.push("filtersDepartureDate="+encodeURIComponent(<any>filtersDepartureDate.toISOString()));
        }
        if (filtersDestination !== undefined) {
            queryParameters.push("filtersDestination="+encodeURIComponent(String(filtersDestination)));
        }
        if (filtersOrigin !== undefined) {
            queryParameters.push("filtersOrigin="+encodeURIComponent(String(filtersOrigin)));
        }
        if (filtersSourceOrganization !== undefined) {
            queryParameters.push("filtersSourceOrganization="+encodeURIComponent(String(filtersSourceOrganization)));
        }
        if (filtersOrganizationGroupCode !== undefined) {
            queryParameters.push("filtersOrganizationGroupCode="+encodeURIComponent(String(filtersOrganizationGroupCode)));
        }
        if (filtersSearchArchive !== undefined) {
            queryParameters.push("filtersSearchArchive="+encodeURIComponent(String(filtersSearchArchive)));
        }


            const requestObj: Request<{
                documentDocumentNumber: string, documentDocumentTypeCode: string, filtersPageSize?: number, filtersLastIndex?: number, filtersFlightNumber?: string, filtersDepartureDate?: Date, filtersDestination?: string, filtersOrigin?: string, filtersSourceOrganization?: string, filtersOrganizationGroupCode?: string, filtersSearchArchive?: boolean, 
            }> = {
                url: '/api/nsk/v1/bookings/searchByDocument',
                method: 'get',
                data: {
                    documentDocumentNumber,documentDocumentTypeCode,filtersPageSize,filtersLastIndex,filtersFlightNumber,filtersDepartureDate,filtersDestination,filtersOrigin,filtersSourceOrganization,filtersOrganizationGroupCode,filtersSearchArchive,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Find booking by email.
     * 
     * @param emailAddress The email address of a contact.
     * @param agentId The agent identifier.
     * @param phoneticSearch Whether or not to do a phonetic search.
     * @param filtersPageSize The number of items to return for the request.
     * @param filtersLastIndex The last booking index (used for paging).
     * @param filtersFlightNumber Filter by the flight number.
     * @param filtersDepartureDate The first journeys departure date.
     * @param filtersDestination Filter by the destination code.
     * @param filtersOrigin Filter by the departure code.
     * @param filtersSourceOrganization Filter by the organization associated with the booking. For example the  travel agency associated with this booking.
     * @param filtersOrganizationGroupCode Filter by the organization group code to find.
     * @param filtersSearchArchive Whether or not to search the booking archive.
     
     */
    public apiNskV1BookingsSearchByEmailGet = (emailAddress: string, agentId?: number, phoneticSearch?: boolean, filtersPageSize?: number, filtersLastIndex?: number, filtersFlightNumber?: string, filtersDepartureDate?: Date, filtersDestination?: string, filtersOrigin?: string, filtersSourceOrganization?: string, filtersOrganizationGroupCode?: string, filtersSearchArchive?: boolean, ) => {
        if (!emailAddress){
            throw new Error('Required parameter emailAddress was null or undefined when calling apiNskV1BookingsSearchByEmailGet.');
        }

        let queryParameters: string[] = [];
        if (emailAddress !== undefined) {
            queryParameters.push("emailAddress="+encodeURIComponent(String(emailAddress)));
        }
        if (agentId !== undefined) {
            queryParameters.push("agentId="+encodeURIComponent(String(agentId)));
        }
        if (phoneticSearch !== undefined) {
            queryParameters.push("phoneticSearch="+encodeURIComponent(String(phoneticSearch)));
        }
        if (filtersPageSize !== undefined) {
            queryParameters.push("filtersPageSize="+encodeURIComponent(String(filtersPageSize)));
        }
        if (filtersLastIndex !== undefined) {
            queryParameters.push("filtersLastIndex="+encodeURIComponent(String(filtersLastIndex)));
        }
        if (filtersFlightNumber !== undefined) {
            queryParameters.push("filtersFlightNumber="+encodeURIComponent(String(filtersFlightNumber)));
        }
        if (filtersDepartureDate !== undefined) {
           queryParameters.push("filtersDepartureDate="+encodeURIComponent(<any>filtersDepartureDate.toISOString()));
        }
        if (filtersDestination !== undefined) {
            queryParameters.push("filtersDestination="+encodeURIComponent(String(filtersDestination)));
        }
        if (filtersOrigin !== undefined) {
            queryParameters.push("filtersOrigin="+encodeURIComponent(String(filtersOrigin)));
        }
        if (filtersSourceOrganization !== undefined) {
            queryParameters.push("filtersSourceOrganization="+encodeURIComponent(String(filtersSourceOrganization)));
        }
        if (filtersOrganizationGroupCode !== undefined) {
            queryParameters.push("filtersOrganizationGroupCode="+encodeURIComponent(String(filtersOrganizationGroupCode)));
        }
        if (filtersSearchArchive !== undefined) {
            queryParameters.push("filtersSearchArchive="+encodeURIComponent(String(filtersSearchArchive)));
        }


            const requestObj: Request<{
                emailAddress: string, agentId?: number, phoneticSearch?: boolean, filtersPageSize?: number, filtersLastIndex?: number, filtersFlightNumber?: string, filtersDepartureDate?: Date, filtersDestination?: string, filtersOrigin?: string, filtersSourceOrganization?: string, filtersOrganizationGroupCode?: string, filtersSearchArchive?: boolean, 
            }> = {
                url: '/api/nsk/v1/bookings/searchByEmail',
                method: 'get',
                data: {
                    emailAddress,agentId,phoneticSearch,filtersPageSize,filtersLastIndex,filtersFlightNumber,filtersDepartureDate,filtersDestination,filtersOrigin,filtersSourceOrganization,filtersOrganizationGroupCode,filtersSearchArchive,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Find booking by last name.
     * 
     * @param lastName The last name of a passenger or contact.
     * @param firstName The first name of a passenger or contact.
     * @param phoneticSearch Whether or not to do a phonetic search.
     * @param filtersPageSize The number of items to return for the request.
     * @param filtersLastIndex The last booking index (used for paging).
     * @param filtersFlightNumber Filter by the flight number.
     * @param filtersDepartureDate The first journeys departure date.
     * @param filtersDestination Filter by the destination code.
     * @param filtersOrigin Filter by the departure code.
     * @param filtersSourceOrganization Filter by the organization associated with the booking. For example the  travel agency associated with this booking.
     * @param filtersOrganizationGroupCode Filter by the organization group code to find.
     * @param filtersSearchArchive Whether or not to search the booking archive.
     
     */
    public apiNskV1BookingsSearchByLastNameGet = (lastName: string, firstName?: string, phoneticSearch?: boolean, filtersPageSize?: number, filtersLastIndex?: number, filtersFlightNumber?: string, filtersDepartureDate?: Date, filtersDestination?: string, filtersOrigin?: string, filtersSourceOrganization?: string, filtersOrganizationGroupCode?: string, filtersSearchArchive?: boolean, ) => {
        if (!lastName){
            throw new Error('Required parameter lastName was null or undefined when calling apiNskV1BookingsSearchByLastNameGet.');
        }

        let queryParameters: string[] = [];
        if (lastName !== undefined) {
            queryParameters.push("lastName="+encodeURIComponent(String(lastName)));
        }
        if (firstName !== undefined) {
            queryParameters.push("firstName="+encodeURIComponent(String(firstName)));
        }
        if (phoneticSearch !== undefined) {
            queryParameters.push("phoneticSearch="+encodeURIComponent(String(phoneticSearch)));
        }
        if (filtersPageSize !== undefined) {
            queryParameters.push("filtersPageSize="+encodeURIComponent(String(filtersPageSize)));
        }
        if (filtersLastIndex !== undefined) {
            queryParameters.push("filtersLastIndex="+encodeURIComponent(String(filtersLastIndex)));
        }
        if (filtersFlightNumber !== undefined) {
            queryParameters.push("filtersFlightNumber="+encodeURIComponent(String(filtersFlightNumber)));
        }
        if (filtersDepartureDate !== undefined) {
           queryParameters.push("filtersDepartureDate="+encodeURIComponent(<any>filtersDepartureDate.toISOString()));
        }
        if (filtersDestination !== undefined) {
            queryParameters.push("filtersDestination="+encodeURIComponent(String(filtersDestination)));
        }
        if (filtersOrigin !== undefined) {
            queryParameters.push("filtersOrigin="+encodeURIComponent(String(filtersOrigin)));
        }
        if (filtersSourceOrganization !== undefined) {
            queryParameters.push("filtersSourceOrganization="+encodeURIComponent(String(filtersSourceOrganization)));
        }
        if (filtersOrganizationGroupCode !== undefined) {
            queryParameters.push("filtersOrganizationGroupCode="+encodeURIComponent(String(filtersOrganizationGroupCode)));
        }
        if (filtersSearchArchive !== undefined) {
            queryParameters.push("filtersSearchArchive="+encodeURIComponent(String(filtersSearchArchive)));
        }


            const requestObj: Request<{
                lastName: string, firstName?: string, phoneticSearch?: boolean, filtersPageSize?: number, filtersLastIndex?: number, filtersFlightNumber?: string, filtersDepartureDate?: Date, filtersDestination?: string, filtersOrigin?: string, filtersSourceOrganization?: string, filtersOrganizationGroupCode?: string, filtersSearchArchive?: boolean, 
            }> = {
                url: '/api/nsk/v1/bookings/searchByLastName',
                method: 'get',
                data: {
                    lastName,firstName,phoneticSearch,filtersPageSize,filtersLastIndex,filtersFlightNumber,filtersDepartureDate,filtersDestination,filtersOrigin,filtersSourceOrganization,filtersOrganizationGroupCode,filtersSearchArchive,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Find booking by phone.
     * 
     * @param phoneNumber One of the applied phone numbers to a passenger or contact.
     * @param agentId The agent identifier.
     * @param organizationCode OrganizationCode represents the organization associated with the agent who created  the booking.
     * @param filtersPageSize The number of items to return for the request.
     * @param filtersLastIndex The last booking index (used for paging).
     * @param filtersFlightNumber Filter by the flight number.
     * @param filtersDepartureDate The first journeys departure date.
     * @param filtersDestination Filter by the destination code.
     * @param filtersOrigin Filter by the departure code.
     * @param filtersSourceOrganization Filter by the organization associated with the booking. For example the  travel agency associated with this booking.
     * @param filtersOrganizationGroupCode Filter by the organization group code to find.
     * @param filtersSearchArchive Whether or not to search the booking archive.
     
     */
    public apiNskV1BookingsSearchByPhoneGet = (phoneNumber: string, agentId?: number, organizationCode?: string, filtersPageSize?: number, filtersLastIndex?: number, filtersFlightNumber?: string, filtersDepartureDate?: Date, filtersDestination?: string, filtersOrigin?: string, filtersSourceOrganization?: string, filtersOrganizationGroupCode?: string, filtersSearchArchive?: boolean, ) => {
        if (!phoneNumber){
            throw new Error('Required parameter phoneNumber was null or undefined when calling apiNskV1BookingsSearchByPhoneGet.');
        }

        let queryParameters: string[] = [];
        if (phoneNumber !== undefined) {
            queryParameters.push("phoneNumber="+encodeURIComponent(String(phoneNumber)));
        }
        if (agentId !== undefined) {
            queryParameters.push("agentId="+encodeURIComponent(String(agentId)));
        }
        if (organizationCode !== undefined) {
            queryParameters.push("organizationCode="+encodeURIComponent(String(organizationCode)));
        }
        if (filtersPageSize !== undefined) {
            queryParameters.push("filtersPageSize="+encodeURIComponent(String(filtersPageSize)));
        }
        if (filtersLastIndex !== undefined) {
            queryParameters.push("filtersLastIndex="+encodeURIComponent(String(filtersLastIndex)));
        }
        if (filtersFlightNumber !== undefined) {
            queryParameters.push("filtersFlightNumber="+encodeURIComponent(String(filtersFlightNumber)));
        }
        if (filtersDepartureDate !== undefined) {
           queryParameters.push("filtersDepartureDate="+encodeURIComponent(<any>filtersDepartureDate.toISOString()));
        }
        if (filtersDestination !== undefined) {
            queryParameters.push("filtersDestination="+encodeURIComponent(String(filtersDestination)));
        }
        if (filtersOrigin !== undefined) {
            queryParameters.push("filtersOrigin="+encodeURIComponent(String(filtersOrigin)));
        }
        if (filtersSourceOrganization !== undefined) {
            queryParameters.push("filtersSourceOrganization="+encodeURIComponent(String(filtersSourceOrganization)));
        }
        if (filtersOrganizationGroupCode !== undefined) {
            queryParameters.push("filtersOrganizationGroupCode="+encodeURIComponent(String(filtersOrganizationGroupCode)));
        }
        if (filtersSearchArchive !== undefined) {
            queryParameters.push("filtersSearchArchive="+encodeURIComponent(String(filtersSearchArchive)));
        }


            const requestObj: Request<{
                phoneNumber: string, agentId?: number, organizationCode?: string, filtersPageSize?: number, filtersLastIndex?: number, filtersFlightNumber?: string, filtersDepartureDate?: Date, filtersDestination?: string, filtersOrigin?: string, filtersSourceOrganization?: string, filtersOrganizationGroupCode?: string, filtersSearchArchive?: boolean, 
            }> = {
                url: '/api/nsk/v1/bookings/searchByPhone',
                method: 'get',
                data: {
                    phoneNumber,agentId,organizationCode,filtersPageSize,filtersLastIndex,filtersFlightNumber,filtersDepartureDate,filtersDestination,filtersOrigin,filtersSourceOrganization,filtersOrganizationGroupCode,filtersSearchArchive,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Find booking by record locator.
     * 
     * @param recordLocator Record locator being requested.
     * @param pageSize The number of items to return for the request.
     * @param lastIndex The last booking index (used for paging).
     * @param sourceOrganization Filter by the organization associated with the booking. For example the  travel agency associated with this booking.
     * @param organizationGroupCode Filter by the organization group code to find.
     * @param searchArchive Whether or not to search the booking archive.
     
     */
    public apiNskV1BookingsSearchByRecordLocatorGet = (recordLocator: string, pageSize?: number, lastIndex?: number, sourceOrganization?: string, organizationGroupCode?: string, searchArchive?: boolean, ) => {
        if (!recordLocator){
            throw new Error('Required parameter recordLocator was null or undefined when calling apiNskV1BookingsSearchByRecordLocatorGet.');
        }

        let queryParameters: string[] = [];
        if (recordLocator !== undefined) {
            queryParameters.push("recordLocator="+encodeURIComponent(String(recordLocator)));
        }
        if (pageSize !== undefined) {
            queryParameters.push("pageSize="+encodeURIComponent(String(pageSize)));
        }
        if (lastIndex !== undefined) {
            queryParameters.push("lastIndex="+encodeURIComponent(String(lastIndex)));
        }
        if (sourceOrganization !== undefined) {
            queryParameters.push("sourceOrganization="+encodeURIComponent(String(sourceOrganization)));
        }
        if (organizationGroupCode !== undefined) {
            queryParameters.push("organizationGroupCode="+encodeURIComponent(String(organizationGroupCode)));
        }
        if (searchArchive !== undefined) {
            queryParameters.push("searchArchive="+encodeURIComponent(String(searchArchive)));
        }


            const requestObj: Request<{
                recordLocator: string, pageSize?: number, lastIndex?: number, sourceOrganization?: string, organizationGroupCode?: string, searchArchive?: boolean, 
            }> = {
                url: '/api/nsk/v1/bookings/searchByRecordLocator',
                method: 'get',
                data: {
                    recordLocator,pageSize,lastIndex,sourceOrganization,organizationGroupCode,searchArchive,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Find booking by a third party record locator.
     * 
     * @param systemCode The system code to find.
     * @param recordLocator Record locator being requested.
     * @param agentId The agent identifier.
     * @param organizationCode OrganizationCode represents the organization associated with the agent who created  the booking.
     * @param pageSize The number of items to return for the request.
     * @param lastIndex The last booking index (used for paging).
     * @param sourceOrganization Filter by the organization associated with the booking. For example the  travel agency associated with this booking.
     * @param organizationGroupCode Filter by the organization group code to find.
     * @param searchArchive Whether or not to search the booking archive.
     
     */
    public apiNskV1BookingsSearchByThirdPartyRecordLocatorGet = (systemCode: string, recordLocator: string, agentId?: number, organizationCode?: string, pageSize?: number, lastIndex?: number, sourceOrganization?: string, organizationGroupCode?: string, searchArchive?: boolean, ) => {
        if (!systemCode){
            throw new Error('Required parameter systemCode was null or undefined when calling apiNskV1BookingsSearchByThirdPartyRecordLocatorGet.');
        }

        if (!recordLocator){
            throw new Error('Required parameter recordLocator was null or undefined when calling apiNskV1BookingsSearchByThirdPartyRecordLocatorGet.');
        }

        let queryParameters: string[] = [];
        if (systemCode !== undefined) {
            queryParameters.push("systemCode="+encodeURIComponent(String(systemCode)));
        }
        if (agentId !== undefined) {
            queryParameters.push("agentId="+encodeURIComponent(String(agentId)));
        }
        if (organizationCode !== undefined) {
            queryParameters.push("organizationCode="+encodeURIComponent(String(organizationCode)));
        }
        if (recordLocator !== undefined) {
            queryParameters.push("recordLocator="+encodeURIComponent(String(recordLocator)));
        }
        if (pageSize !== undefined) {
            queryParameters.push("pageSize="+encodeURIComponent(String(pageSize)));
        }
        if (lastIndex !== undefined) {
            queryParameters.push("lastIndex="+encodeURIComponent(String(lastIndex)));
        }
        if (sourceOrganization !== undefined) {
            queryParameters.push("sourceOrganization="+encodeURIComponent(String(sourceOrganization)));
        }
        if (organizationGroupCode !== undefined) {
            queryParameters.push("organizationGroupCode="+encodeURIComponent(String(organizationGroupCode)));
        }
        if (searchArchive !== undefined) {
            queryParameters.push("searchArchive="+encodeURIComponent(String(searchArchive)));
        }


            const requestObj: Request<{
                systemCode: string, recordLocator: string, agentId?: number, organizationCode?: string, pageSize?: number, lastIndex?: number, sourceOrganization?: string, organizationGroupCode?: string, searchArchive?: boolean, 
            }> = {
                url: '/api/nsk/v1/bookings/searchByThirdPartyRecordLocator',
                method: 'get',
                data: {
                    systemCode,recordLocator,agentId,organizationCode,pageSize,lastIndex,sourceOrganization,organizationGroupCode,searchArchive,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Sends itinerary notification.
     * Itinerary will be sent using the method set on the contact&#39;s distributionOption field.
     * @param recordLocator The record locator of the booking.
     
     */
    public apiNskV2BookingsByRecordLocatorNotificationPost = (recordLocator: string, ) => {
        if (!recordLocator){
            throw new Error('Required parameter recordLocator was null or undefined when calling apiNskV2BookingsByRecordLocatorNotificationPost.');
        }


            const requestObj: Request<{
                recordLocator: string, 
            }> = {
                url: '/api/nsk/v2/bookings/${encodeURIComponent(String(recordLocator))}/notification',
                method: 'post',
                data: {
                    recordLocator,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the booking from the New Skies server based on the retrieve booking request parameters and any configured  booking retrieve strategies. If the booking exists and the search criteria is allowed by one of the configured  booking retrieve strategies, the booking will be returned, but not loaded into the web session.
     * This endpoint will perform validation using a pre-configured booking retrieve strategy.  Custom strategies can  be configured in Utilities, and are configurable based on application name.  To set-up a custom strategy, go to Utilities -&amp;gt; Resource Management.  From the \&quot;Resource Management\&quot; screen, go  to Root -&amp;gt; Web -&amp;gt; dotREZ folder.  Right click on the dotREZ folder and select \&quot;Add Content\&quot;.  On the \&quot;Add Resource\&quot;  screen, set the \&quot;Content Name\&quot; to \&quot;BookingStrategyManagementConfig\&quot;.  Choose \&quot;XML\&quot; as the \&quot;Type\&quot;.  The \&quot;Content Data\&quot;  will be in JSON, and should look like this:  &lt;example&gt;      {      \&quot;strategies\&quot; :      [{      \&quot;applicationName\&quot; : \&quot;dotREZApi\&quot;,      \&quot;allowedStrategies\&quot; : [      \&quot;firstAndLastName\&quot;,      \&quot;email\&quot;      ]      }, {      \&quot;applicationName\&quot; : \&quot;Web\&quot;,      \&quot;allowedStrategies\&quot; : [      \&quot;email\&quot;      ]      }, {      \&quot;applicationName\&quot; : \&quot;\&quot;,      \&quot;allowedStrategies\&quot; : [      \&quot;lastName\&quot;      ]      }]      }  &lt;/example&gt;  The application name can be set when creating a new token.  If no application name is given for a token create  request, the API will use whatever value is defined in the \&quot;dotrez-nsk-common.json\&quot; configuration file under the  \&quot;systemOptions\&quot; -&amp;gt; \&quot;fallbackApplicationName\&quot;.  If no strategies are configured and no \&quot;fallbackApplicationName\&quot; is  configured, the default strategy will be a booking retrieve based on PNR, first name, and last name.  If the same strategy should be used for multiple applications, the last entry in the example above can be set by  setting an empty string as the application name, and then listing the allowed strategies to be used.  Application  specific strategies can still be defined, but if no application specific strategy is found, a list of strategies  associated with the blank application name will be used (if one exists in the configuration file).  The list of strategies currently includes the following options:  &lt;ul&gt;&lt;li&gt;          firstAndLastName      &lt;/li&gt;&lt;li&gt;          email      &lt;/li&gt;&lt;li&gt;          originAndDepartureDate      &lt;/li&gt;&lt;li&gt;          lastName      &lt;/li&gt;&lt;li&gt;          customerNumber      &lt;/li&gt;&lt;/ul&gt;  More strategies may be added in the future.
     * @param recordLocator Record locator being requested.
     * @param emailAddress The email address of a contact.
     * @param origin The origin station code.
     * @param firstName The first name of a passenger or contact.
     * @param lastName The last name of a passenger or contact.
     * @param customerNumber One of the passengers customer numbers applied.
     * @param departureDate The first journeys departure date.
     
     */
    public apiNskV2BookingsGet = (recordLocator: string, emailAddress?: string, origin?: string, firstName?: string, lastName?: string, customerNumber?: string, departureDate?: Date, ) => {
        if (!recordLocator){
            throw new Error('Required parameter recordLocator was null or undefined when calling apiNskV2BookingsGet.');
        }

        let queryParameters: string[] = [];
        if (recordLocator !== undefined) {
            queryParameters.push("recordLocator="+encodeURIComponent(String(recordLocator)));
        }
        if (emailAddress !== undefined) {
            queryParameters.push("emailAddress="+encodeURIComponent(String(emailAddress)));
        }
        if (origin !== undefined) {
            queryParameters.push("origin="+encodeURIComponent(String(origin)));
        }
        if (firstName !== undefined) {
            queryParameters.push("firstName="+encodeURIComponent(String(firstName)));
        }
        if (lastName !== undefined) {
            queryParameters.push("lastName="+encodeURIComponent(String(lastName)));
        }
        if (customerNumber !== undefined) {
            queryParameters.push("customerNumber="+encodeURIComponent(String(customerNumber)));
        }
        if (departureDate !== undefined) {
           queryParameters.push("departureDate="+encodeURIComponent(<any>departureDate.toISOString()));
        }


            const requestObj: Request<{
                recordLocator: string, emailAddress?: string, origin?: string, firstName?: string, lastName?: string, customerNumber?: string, departureDate?: Date, 
            }> = {
                url: '/api/nsk/v2/bookings',
                method: 'get',
                data: {
                    recordLocator,emailAddress,origin,firstName,lastName,customerNumber,departureDate,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves a itinerary quote based on the request.
     * Although this endpoint behaves like a GET, POST is used to reduce the limitations resulting from URL length issues.  Itinerary is a stateless booking and not tied to the logged in user.
     * @param request The itinerary quote request.
     
     */
    public apiNskV2BookingsQuotePost = (request?: ItineraryQuoteRequest, ) => {

            const requestObj: Request<{
                request?: ItineraryQuoteRequest, 
            }> = {
                url: '/api/nsk/v2/bookings/quote',
                method: 'post',
                data: {
                    request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Checks in a collection of passengers to a specific journey stateless.
     * 
     * @param recordLocator The booking record locator to look up the journey.
     * @param journeyKey The journey key of the journey to check into.
     * @param request The checkin passengers request.
     
     */
    public apiNskV3BookingsCheckinByRecordLocatorJourneyByJourneyKeyPost = (recordLocator: string, journeyKey: string, request?: CheckinPassengersRequestv3, ) => {
        if (!recordLocator){
            throw new Error('Required parameter recordLocator was null or undefined when calling apiNskV3BookingsCheckinByRecordLocatorJourneyByJourneyKeyPost.');
        }

        if (!journeyKey){
            throw new Error('Required parameter journeyKey was null or undefined when calling apiNskV3BookingsCheckinByRecordLocatorJourneyByJourneyKeyPost.');
        }


            const requestObj: Request<{
                recordLocator: string, journeyKey: string, request?: CheckinPassengersRequestv3, 
            }> = {
                url: '/api/nsk/v3/bookings/checkin/${encodeURIComponent(String(recordLocator))}/journey/${encodeURIComponent(String(journeyKey))}',
                method: 'post',
                data: {
                    recordLocator,journeyKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Checks in a collection of passengers to a specific journeys segment stateless.
     * 
     * @param recordLocator The booking record locator to look up the journeys segment.
     * @param segmentKey The segment key of the segment to check into.
     * @param request The checkin passengers request.
     
     */
    public apiNskV3BookingsCheckinByRecordLocatorSegmentBySegmentKeyPost = (recordLocator: string, segmentKey: string, request?: CheckinPassengersRequestv3, ) => {
        if (!recordLocator){
            throw new Error('Required parameter recordLocator was null or undefined when calling apiNskV3BookingsCheckinByRecordLocatorSegmentBySegmentKeyPost.');
        }

        if (!segmentKey){
            throw new Error('Required parameter segmentKey was null or undefined when calling apiNskV3BookingsCheckinByRecordLocatorSegmentBySegmentKeyPost.');
        }


            const requestObj: Request<{
                recordLocator: string, segmentKey: string, request?: CheckinPassengersRequestv3, 
            }> = {
                url: '/api/nsk/v3/bookings/checkin/${encodeURIComponent(String(recordLocator))}/segment/${encodeURIComponent(String(segmentKey))}',
                method: 'post',
                data: {
                    recordLocator,segmentKey,request,
                }
            };
            return this.client.makeRequest(requestObj);
    }

}
