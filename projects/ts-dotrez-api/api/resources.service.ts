/**
 * API - Current Routes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: trunk
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from "rxjs/Observable";
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import IHttpClient from "../IHttpClient";
import { inject, injectable } from "inversify";
import { IAPIConfiguration } from "../IAPIConfiguration";
import { Headers } from "../Headers";
import HttpResponse from "../HttpResponse";

import * as Models from '../models';
import { Dictionary } from '../models';
import * as Enums from '../enums';
import { getClient, Request } from '../helper';

import { AccountTransactionCode } from '../model/accountTransactionCode';
import { AddressType } from '../model/addressType';
import { AgentSettingType } from '../model/agentSettingType';
import { Area } from '../model/area';
import { BaggageType } from '../model/baggageType';
import { BundleApplication } from '../model/bundleApplication';
import { BundleConfiguration } from '../model/bundleConfiguration';
import { BundleRule } from '../model/bundleRule';
import { BundleSet } from '../model/bundleSet';
import { BundleSsrConfiguration } from '../model/bundleSsrConfiguration';
import { Carrier } from '../model/carrier';
import { City } from '../model/city';
import { ClassOfService } from '../model/classOfService';
import { CommerceLocation } from '../model/commerceLocation';
import { CommissionRate } from '../model/commissionRate';
import { ContactType } from '../model/contactType';
import { Countryv2 } from '../model/countryv2';
import { Culture } from '../model/culture';
import { Currency } from '../model/currency';
import { CustomerProgram } from '../model/customerProgram';
import { CustomerProgramLevel } from '../model/customerProgramLevel';
import { Delay } from '../model/delay';
import { Department } from '../model/department';
import { DocumentType } from '../model/documentType';
import { Domain } from '../model/domain';
import { DynamicParameter } from '../model/dynamicParameter';
import { EmailType } from '../model/emailType';
import { EnumResource } from '../model/enumResource';
import { ExternalRate } from '../model/externalRate';
import { FareType } from '../model/fareType';
import { Fee } from '../model/fee';
import { FeeDetail } from '../model/feeDetail';
import { HotCardReason } from '../model/hotCardReason';
import { IJsonResponse } from '../model/iJsonResponse';
import { IssuanceReason } from '../model/issuanceReason';
import { Location } from '../model/location';
import { Mac } from '../model/mac';
import { Market } from '../model/market';
import { Marketv2 } from '../model/marketv2';
import { MessageType } from '../model/messageType';
import { ParticipantType } from '../model/participantType';
import { PassengerDiscount } from '../model/passengerDiscount';
import { PassengerType } from '../model/passengerType';
import { PaymentMethod } from '../model/paymentMethod';
import { PersonAttachmentType } from '../model/personAttachmentType';
import { PersonInformationType } from '../model/personInformationType';
import { PhoneType } from '../model/phoneType';
import { ProductClass } from '../model/productClass';
import { PromotionSettingType } from '../model/promotionSettingType';
import { ProvinceState } from '../model/provinceState';
import { QueueCategory } from '../model/queueCategory';
import { ReminderTime } from '../model/reminderTime';
import { ResourceCategoryItem } from '../model/resourceCategoryItem';
import { ResourceContentItem } from '../model/resourceContentItem';
import { ResourceContentResult } from '../model/resourceContentResult';
import { ResourceEntriesCarrier } from '../model/resourceEntriesCarrier';
import { ResourceEntriesCurrencyv2 } from '../model/resourceEntriesCurrencyv2';
import { ResourceEntriesPersonAttachmentType } from '../model/resourceEntriesPersonAttachmentType';
import { ResourceEntriesStationDetail } from '../model/resourceEntriesStationDetail';
import { Role } from '../model/role';
import { RoleSettingType } from '../model/roleSettingType';
import { SettingsCategoryRequest } from '../model/settingsCategoryRequest';
import { ShoppingAttribute } from '../model/shoppingAttribute';
import { ShoppingAttributeGroup } from '../model/shoppingAttributeGroup';
import { SingleSignOnProvider } from '../model/singleSignOnProvider';
import { Source } from '../model/source';
import { Ssr } from '../model/ssr';
import { SsrGroup } from '../model/ssrGroup';
import { SsrNest } from '../model/ssrNest';
import { SsrRestrictionResult } from '../model/ssrRestrictionResult';
import { StandByPriority } from '../model/standByPriority';
import { Station } from '../model/station';
import { StationCategory } from '../model/stationCategory';
import { SubZone } from '../model/subZone';
import { Suffix } from '../model/suffix';
import { TimeZone } from '../model/timeZone';
import { Title } from '../model/title';
import { TravelClass } from '../model/travelClass';
import { Vendor } from '../model/vendor';
import { Vendorv2 } from '../model/vendorv2';
import { Zone } from '../model/zone';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class ResourcesService {

    constructor(@inject(HTTP_CLIENT) protected client: ApiHttpClient) {}

    /**
     * Retrieves the specific account transaction code resource.
     * 
     * @param transactionCode 
     * @param cultureCode 
     
     */
    public apiNskV1ResourcesAccountTransactionCodesByTransactionCodeGet = (transactionCode: string, cultureCode?: string, ) => {
        if (!transactionCode){
            throw new Error('Required parameter transactionCode was null or undefined when calling apiNskV1ResourcesAccountTransactionCodesByTransactionCodeGet.');
        }

        let queryParameters: string[] = [];
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }


            const requestObj: Request<{
                transactionCode: string, cultureCode?: string, 
            }> = {
                url: '/api/nsk/v1/resources/AccountTransactionCodes/${encodeURIComponent(String(transactionCode))}',
                method: 'get',
                data: {
                    transactionCode,cultureCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the collection of account transaction code resources.
     * 
     * @param activeOnly Flag indicating to return just active only or all.
     * @param cultureCode The desired culture code to be returned.
     * @param eTag The cache token for this request. Data will not be returned if etag still matches.
     * @param startIndex The start index value for this request.
     * @param itemCount The item count value for this request.
     
     */
    public apiNskV1ResourcesAccountTransactionCodesGet = (activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, ) => {
        if (!activeOnly){
            throw new Error('Required parameter activeOnly was null or undefined when calling apiNskV1ResourcesAccountTransactionCodesGet.');
        }

        let queryParameters: string[] = [];
        if (activeOnly !== undefined) {
            queryParameters.push("activeOnly="+encodeURIComponent(String(activeOnly)));
        }
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }
        if (startIndex !== undefined) {
            queryParameters.push("startIndex="+encodeURIComponent(String(startIndex)));
        }
        if (itemCount !== undefined) {
            queryParameters.push("itemCount="+encodeURIComponent(String(itemCount)));
        }


            const requestObj: Request<{
                activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, 
            }> = {
                url: '/api/nsk/v1/resources/AccountTransactionCodes',
                method: 'get',
                data: {
                    activeOnly,cultureCode,eTag,startIndex,itemCount,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets the commerce locations.
     * 
     * @param type The type of search performed (Default &#x3D; 0, Insurance &#x3D; 1, Activity &#x3D; 2, Hotel &#x3D; 3, Auto &#x3D; 4).
     * @param eTag The cache eTag for this request.
     * @param vendorCode The specific vendor code.
     * @param cultureCode The specific culture code.
     
     */
    public apiNskV1ResourcesAddOnsLocationsGet = (type: 'Default' | 'Insurance' | 'Activity' | 'Hotel' | 'Car', eTag?: string, vendorCode?: string, cultureCode?: string, ) => {
        if (!type){
            throw new Error('Required parameter type was null or undefined when calling apiNskV1ResourcesAddOnsLocationsGet.');
        }

        let queryParameters: string[] = [];
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }
        if (type !== undefined) {
            queryParameters.push("type="+encodeURIComponent(String(type)));
        }
        if (vendorCode !== undefined) {
            queryParameters.push("vendorCode="+encodeURIComponent(String(vendorCode)));
        }
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }


            const requestObj: Request<{
                type: 'Default' | 'Insurance' | 'Activity' | 'Hotel' | 'Car', eTag?: string, vendorCode?: string, cultureCode?: string, 
            }> = {
                url: '/api/nsk/v1/resources/addOns/locations',
                method: 'get',
                data: {
                    type,eTag,vendorCode,cultureCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets the parameters.
     * 
     * @param type The type of search performed (Default &#x3D; 0, Insurance &#x3D; 1, Activity &#x3D; 2, Hotel &#x3D; 3, Auto &#x3D; 4).
     * @param eTag The cache eTag for this request.
     * @param vendorCode The specific vendor code.
     * @param cultureCode The specific culture code.
     
     */
    public apiNskV1ResourcesAddOnsParametersGet = (type: 'Default' | 'Insurance' | 'Activity' | 'Hotel' | 'Car', eTag?: string, vendorCode?: string, cultureCode?: string, ) => {
        if (!type){
            throw new Error('Required parameter type was null or undefined when calling apiNskV1ResourcesAddOnsParametersGet.');
        }

        let queryParameters: string[] = [];
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }
        if (type !== undefined) {
            queryParameters.push("type="+encodeURIComponent(String(type)));
        }
        if (vendorCode !== undefined) {
            queryParameters.push("vendorCode="+encodeURIComponent(String(vendorCode)));
        }
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }


            const requestObj: Request<{
                type: 'Default' | 'Insurance' | 'Activity' | 'Hotel' | 'Car', eTag?: string, vendorCode?: string, cultureCode?: string, 
            }> = {
                url: '/api/nsk/v1/resources/addOns/parameters',
                method: 'get',
                data: {
                    type,eTag,vendorCode,cultureCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets the participant types.
     * 
     * @param type The type of search performed (Default &#x3D; 0, Insurance &#x3D; 1, Activity &#x3D; 2, Hotel &#x3D; 3, Auto &#x3D; 4).
     * @param eTag The cache eTag for this request.
     * @param vendorCode The specific vendor code.
     * @param cultureCode The specific culture code.
     
     */
    public apiNskV1ResourcesAddOnsParticipanttypesGet = (type: 'Default' | 'Insurance' | 'Activity' | 'Hotel' | 'Car', eTag?: string, vendorCode?: string, cultureCode?: string, ) => {
        if (!type){
            throw new Error('Required parameter type was null or undefined when calling apiNskV1ResourcesAddOnsParticipanttypesGet.');
        }

        let queryParameters: string[] = [];
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }
        if (type !== undefined) {
            queryParameters.push("type="+encodeURIComponent(String(type)));
        }
        if (vendorCode !== undefined) {
            queryParameters.push("vendorCode="+encodeURIComponent(String(vendorCode)));
        }
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }


            const requestObj: Request<{
                type: 'Default' | 'Insurance' | 'Activity' | 'Hotel' | 'Car', eTag?: string, vendorCode?: string, cultureCode?: string, 
            }> = {
                url: '/api/nsk/v1/resources/addOns/participanttypes',
                method: 'get',
                data: {
                    type,eTag,vendorCode,cultureCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets the sources by code.
     * 
     * @param sourceCode 
     * @param cultureCode 
     
     */
    public apiNskV1ResourcesAddOnsSourcesBySourceCodeGet = (sourceCode: string, cultureCode?: string, ) => {
        if (!sourceCode){
            throw new Error('Required parameter sourceCode was null or undefined when calling apiNskV1ResourcesAddOnsSourcesBySourceCodeGet.');
        }

        let queryParameters: string[] = [];
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }


            const requestObj: Request<{
                sourceCode: string, cultureCode?: string, 
            }> = {
                url: '/api/nsk/v1/resources/addOns/sources/${encodeURIComponent(String(sourceCode))}',
                method: 'get',
                data: {
                    sourceCode,cultureCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets the sources.
     * 
     * @param activeOnly Flag indicating to return just active only or all.
     * @param cultureCode The desired culture code to be returned.
     * @param eTag The cache token for this request. Data will not be returned if etag still matches.
     * @param startIndex The start index value for this request.
     * @param itemCount The item count value for this request.
     
     */
    public apiNskV1ResourcesAddOnsSourcesGet = (activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, ) => {
        if (!activeOnly){
            throw new Error('Required parameter activeOnly was null or undefined when calling apiNskV1ResourcesAddOnsSourcesGet.');
        }

        let queryParameters: string[] = [];
        if (activeOnly !== undefined) {
            queryParameters.push("activeOnly="+encodeURIComponent(String(activeOnly)));
        }
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }
        if (startIndex !== undefined) {
            queryParameters.push("startIndex="+encodeURIComponent(String(startIndex)));
        }
        if (itemCount !== undefined) {
            queryParameters.push("itemCount="+encodeURIComponent(String(itemCount)));
        }


            const requestObj: Request<{
                activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, 
            }> = {
                url: '/api/nsk/v1/resources/addOns/sources',
                method: 'get',
                data: {
                    activeOnly,cultureCode,eTag,startIndex,itemCount,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets the travel commerce vendors.
     * 
     * @param type The type of search performed (Default &#x3D; 0, Insurance &#x3D; 1, Activity &#x3D; 2, Hotel &#x3D; 3, Auto &#x3D; 4).
     * @param cultureCode The specific culture code.
     * @param eTag The cache eTag for this request.
     
     */
    public apiNskV1ResourcesAddOnsVendorsGet = (type: 'Default' | 'Insurance' | 'Activity' | 'Hotel' | 'Car', cultureCode?: string, eTag?: string, ) => {
        if (!type){
            throw new Error('Required parameter type was null or undefined when calling apiNskV1ResourcesAddOnsVendorsGet.');
        }

        let queryParameters: string[] = [];
        if (type !== undefined) {
            queryParameters.push("type="+encodeURIComponent(String(type)));
        }
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }


            const requestObj: Request<{
                type: 'Default' | 'Insurance' | 'Activity' | 'Hotel' | 'Car', cultureCode?: string, eTag?: string, 
            }> = {
                url: '/api/nsk/v1/resources/addOns/vendors',
                method: 'get',
                data: {
                    type,cultureCode,eTag,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the specific address type resource.
     * 
     * @param addressTypeCode The unique type code.
     * @param cultureCode The specific culture code.
     
     */
    public apiNskV1ResourcesAddressTypesByAddressTypeCodeGet = (addressTypeCode: string, cultureCode?: string, ) => {
        if (!addressTypeCode){
            throw new Error('Required parameter addressTypeCode was null or undefined when calling apiNskV1ResourcesAddressTypesByAddressTypeCodeGet.');
        }

        let queryParameters: string[] = [];
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }


            const requestObj: Request<{
                addressTypeCode: string, cultureCode?: string, 
            }> = {
                url: '/api/nsk/v1/resources/AddressTypes/${encodeURIComponent(String(addressTypeCode))}',
                method: 'get',
                data: {
                    addressTypeCode,cultureCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the collection of address type resources.
     * 
     * @param activeOnly Flag indicating to return just active only or all.
     * @param cultureCode The desired culture code to be returned.
     * @param eTag The cache token for this request. Data will not be returned if etag still matches.
     * @param startIndex The start index value for this request.
     * @param itemCount The item count value for this request.
     
     */
    public apiNskV1ResourcesAddressTypesGet = (activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, ) => {
        if (!activeOnly){
            throw new Error('Required parameter activeOnly was null or undefined when calling apiNskV1ResourcesAddressTypesGet.');
        }

        let queryParameters: string[] = [];
        if (activeOnly !== undefined) {
            queryParameters.push("activeOnly="+encodeURIComponent(String(activeOnly)));
        }
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }
        if (startIndex !== undefined) {
            queryParameters.push("startIndex="+encodeURIComponent(String(startIndex)));
        }
        if (itemCount !== undefined) {
            queryParameters.push("itemCount="+encodeURIComponent(String(itemCount)));
        }


            const requestObj: Request<{
                activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, 
            }> = {
                url: '/api/nsk/v1/resources/AddressTypes',
                method: 'get',
                data: {
                    activeOnly,cultureCode,eTag,startIndex,itemCount,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the specific agent setting type resource.
     * 
     * @param agentSettingTypeCode The unique agent setting type code.
     * @param cultureCode The specific culture.
     
     */
    public apiNskV1ResourcesAgentSettingTypesByAgentSettingTypeCodeGet = (agentSettingTypeCode: string, cultureCode?: string, ) => {
        if (!agentSettingTypeCode){
            throw new Error('Required parameter agentSettingTypeCode was null or undefined when calling apiNskV1ResourcesAgentSettingTypesByAgentSettingTypeCodeGet.');
        }

        let queryParameters: string[] = [];
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }


            const requestObj: Request<{
                agentSettingTypeCode: string, cultureCode?: string, 
            }> = {
                url: '/api/nsk/v1/resources/AgentSettingTypes/${encodeURIComponent(String(agentSettingTypeCode))}',
                method: 'get',
                data: {
                    agentSettingTypeCode,cultureCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the collection of agent setting type resources.
     * 
     * @param activeOnly Flag indicating to return just active only or all.
     * @param cultureCode The desired culture code to be returned.
     * @param eTag The cache token for this request. Data will not be returned if etag still matches.
     * @param startIndex The start index value for this request.
     * @param itemCount The item count value for this request.
     
     */
    public apiNskV1ResourcesAgentSettingTypesGet = (activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, ) => {
        if (!activeOnly){
            throw new Error('Required parameter activeOnly was null or undefined when calling apiNskV1ResourcesAgentSettingTypesGet.');
        }

        let queryParameters: string[] = [];
        if (activeOnly !== undefined) {
            queryParameters.push("activeOnly="+encodeURIComponent(String(activeOnly)));
        }
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }
        if (startIndex !== undefined) {
            queryParameters.push("startIndex="+encodeURIComponent(String(startIndex)));
        }
        if (itemCount !== undefined) {
            queryParameters.push("itemCount="+encodeURIComponent(String(itemCount)));
        }


            const requestObj: Request<{
                activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, 
            }> = {
                url: '/api/nsk/v1/resources/AgentSettingTypes',
                method: 'get',
                data: {
                    activeOnly,cultureCode,eTag,startIndex,itemCount,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the resource.
     * 
     * @param areaCode The unique area code.
     * @param cultureCode The unique culture code.
     
     */
    public apiNskV1ResourcesAreasByAreaCodeGet = (areaCode: string, cultureCode?: string, ) => {
        if (!areaCode){
            throw new Error('Required parameter areaCode was null or undefined when calling apiNskV1ResourcesAreasByAreaCodeGet.');
        }

        let queryParameters: string[] = [];
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }


            const requestObj: Request<{
                areaCode: string, cultureCode?: string, 
            }> = {
                url: '/api/nsk/v1/resources/Areas/${encodeURIComponent(String(areaCode))}',
                method: 'get',
                data: {
                    areaCode,cultureCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the collection of area resources.
     * 
     * @param activeOnly Flag indicating to return just active only or all.
     * @param cultureCode The desired culture code to be returned.
     * @param eTag The cache token for this request. Data will not be returned if etag still matches.
     * @param startIndex The start index value for this request.
     * @param itemCount The item count value for this request.
     
     */
    public apiNskV1ResourcesAreasGet = (activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, ) => {
        if (!activeOnly){
            throw new Error('Required parameter activeOnly was null or undefined when calling apiNskV1ResourcesAreasGet.');
        }

        let queryParameters: string[] = [];
        if (activeOnly !== undefined) {
            queryParameters.push("activeOnly="+encodeURIComponent(String(activeOnly)));
        }
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }
        if (startIndex !== undefined) {
            queryParameters.push("startIndex="+encodeURIComponent(String(startIndex)));
        }
        if (itemCount !== undefined) {
            queryParameters.push("itemCount="+encodeURIComponent(String(itemCount)));
        }


            const requestObj: Request<{
                activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, 
            }> = {
                url: '/api/nsk/v1/resources/Areas',
                method: 'get',
                data: {
                    activeOnly,cultureCode,eTag,startIndex,itemCount,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the specific baggage type resource.
     * 
     * @param baggageTypeCode The unique baggage type code.
     * @param cultureCode The specific culture code.
     
     */
    public apiNskV1ResourcesBaggageTypesByBaggageTypeCodeGet = (baggageTypeCode: string, cultureCode?: string, ) => {
        if (!baggageTypeCode){
            throw new Error('Required parameter baggageTypeCode was null or undefined when calling apiNskV1ResourcesBaggageTypesByBaggageTypeCodeGet.');
        }

        let queryParameters: string[] = [];
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }


            const requestObj: Request<{
                baggageTypeCode: string, cultureCode?: string, 
            }> = {
                url: '/api/nsk/v1/resources/BaggageTypes/${encodeURIComponent(String(baggageTypeCode))}',
                method: 'get',
                data: {
                    baggageTypeCode,cultureCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the collection of baggage type resources.
     * 
     * @param activeOnly Flag indicating to return just active only or all.
     * @param cultureCode The desired culture code to be returned.
     * @param eTag The cache token for this request. Data will not be returned if etag still matches.
     * @param startIndex The start index value for this request.
     * @param itemCount The item count value for this request.
     
     */
    public apiNskV1ResourcesBaggageTypesGet = (activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, ) => {
        if (!activeOnly){
            throw new Error('Required parameter activeOnly was null or undefined when calling apiNskV1ResourcesBaggageTypesGet.');
        }

        let queryParameters: string[] = [];
        if (activeOnly !== undefined) {
            queryParameters.push("activeOnly="+encodeURIComponent(String(activeOnly)));
        }
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }
        if (startIndex !== undefined) {
            queryParameters.push("startIndex="+encodeURIComponent(String(startIndex)));
        }
        if (itemCount !== undefined) {
            queryParameters.push("itemCount="+encodeURIComponent(String(itemCount)));
        }


            const requestObj: Request<{
                activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, 
            }> = {
                url: '/api/nsk/v1/resources/BaggageTypes',
                method: 'get',
                data: {
                    activeOnly,cultureCode,eTag,startIndex,itemCount,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the collection of bundle application resources.
     * See api/nsk/v1/bundles/application/{bundleApplicationKey}/details to retrieve additional  bundle application details.  The application details consist of three lists: carrier codes,  product classes, and classes of service.
     * @param bundleRuleCode The bundle rule code.
     * @param cultureCode The specific culture code.
     * @param eTag The cache eTag for this request.
     
     */
    public apiNskV1ResourcesBundlesApplicationsGet = (bundleRuleCode: string, cultureCode?: string, eTag?: string, ) => {
        if (!bundleRuleCode){
            throw new Error('Required parameter bundleRuleCode was null or undefined when calling apiNskV1ResourcesBundlesApplicationsGet.');
        }

        let queryParameters: string[] = [];
        if (bundleRuleCode !== undefined) {
            queryParameters.push("bundleRuleCode="+encodeURIComponent(String(bundleRuleCode)));
        }
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }


            const requestObj: Request<{
                bundleRuleCode: string, cultureCode?: string, eTag?: string, 
            }> = {
                url: '/api/nsk/v1/resources/bundles/applications',
                method: 'get',
                data: {
                    bundleRuleCode,cultureCode,eTag,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves a specific bundle configuration based on the bundle code.
     * 
     * @param bundleCode The bundle code.
     * @param cultureCode The culture code.
     
     */
    public apiNskV1ResourcesBundlesByBundleCodeGet = (bundleCode: string, cultureCode?: string, ) => {
        if (!bundleCode){
            throw new Error('Required parameter bundleCode was null or undefined when calling apiNskV1ResourcesBundlesByBundleCodeGet.');
        }

        let queryParameters: string[] = [];
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }


            const requestObj: Request<{
                bundleCode: string, cultureCode?: string, 
            }> = {
                url: '/api/nsk/v1/resources/bundles/${encodeURIComponent(String(bundleCode))}',
                method: 'get',
                data: {
                    bundleCode,cultureCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the collection of bundle configuration resources.
     * 
     * @param activeOnly Flag indicating to return just active only or all.
     * @param cultureCode The desired culture code to be returned.
     * @param eTag The cache token for this request. Data will not be returned if etag still matches.
     * @param startIndex The start index value for this request.
     * @param itemCount The item count value for this request.
     
     */
    public apiNskV1ResourcesBundlesGet = (activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, ) => {
        if (!activeOnly){
            throw new Error('Required parameter activeOnly was null or undefined when calling apiNskV1ResourcesBundlesGet.');
        }

        let queryParameters: string[] = [];
        if (activeOnly !== undefined) {
            queryParameters.push("activeOnly="+encodeURIComponent(String(activeOnly)));
        }
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }
        if (startIndex !== undefined) {
            queryParameters.push("startIndex="+encodeURIComponent(String(startIndex)));
        }
        if (itemCount !== undefined) {
            queryParameters.push("itemCount="+encodeURIComponent(String(itemCount)));
        }


            const requestObj: Request<{
                activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, 
            }> = {
                url: '/api/nsk/v1/resources/bundles',
                method: 'get',
                data: {
                    activeOnly,cultureCode,eTag,startIndex,itemCount,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the collection of bundle rule resources.
     * See api/nsk/v1/bundles/rule/{bundleRuleCode}/details to retrieve a list of bundle   applications associated with a specific bundle rule.  Bundle rules are used to control where and how bundle applications are used.
     * @param eTag The unique etag ID.
     
     */
    public apiNskV1ResourcesBundlesRulesGet = (eTag?: string, ) => {
        let queryParameters: string[] = [];
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }


            const requestObj: Request<{
                eTag?: string, 
            }> = {
                url: '/api/nsk/v1/resources/bundles/rules',
                method: 'get',
                data: {
                    eTag,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the collection of bundle set resources.
     * See api/nsk/v1/bundles/set/{bundleSetCode}/details to retrieve a list of bundle   codes associated with a specific bundle set.
     * @param activeOnly Flag indicating to return just active only or all.
     * @param cultureCode The desired culture code to be returned.
     * @param eTag The cache token for this request. Data will not be returned if etag still matches.
     * @param startIndex The start index value for this request.
     * @param itemCount The item count value for this request.
     
     */
    public apiNskV1ResourcesBundlesSetsGet = (activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, ) => {
        if (!activeOnly){
            throw new Error('Required parameter activeOnly was null or undefined when calling apiNskV1ResourcesBundlesSetsGet.');
        }

        let queryParameters: string[] = [];
        if (activeOnly !== undefined) {
            queryParameters.push("activeOnly="+encodeURIComponent(String(activeOnly)));
        }
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }
        if (startIndex !== undefined) {
            queryParameters.push("startIndex="+encodeURIComponent(String(startIndex)));
        }
        if (itemCount !== undefined) {
            queryParameters.push("itemCount="+encodeURIComponent(String(itemCount)));
        }


            const requestObj: Request<{
                activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, 
            }> = {
                url: '/api/nsk/v1/resources/bundles/sets',
                method: 'get',
                data: {
                    activeOnly,cultureCode,eTag,startIndex,itemCount,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the collection of bundle ssr configurations associated with  the bundle code.
     * 
     * @param bundleCode The bundle code.
     * @param cultureCode The specific culture code.
     * @param eTag The cache eTag for this request.
     
     */
    public apiNskV1ResourcesBundlesSsrsGet = (bundleCode: string, cultureCode?: string, eTag?: string, ) => {
        if (!bundleCode){
            throw new Error('Required parameter bundleCode was null or undefined when calling apiNskV1ResourcesBundlesSsrsGet.');
        }

        let queryParameters: string[] = [];
        if (bundleCode !== undefined) {
            queryParameters.push("bundleCode="+encodeURIComponent(String(bundleCode)));
        }
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }


            const requestObj: Request<{
                bundleCode: string, cultureCode?: string, eTag?: string, 
            }> = {
                url: '/api/nsk/v1/resources/bundles/ssrs',
                method: 'get',
                data: {
                    bundleCode,cultureCode,eTag,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves a single carrier.
     * 
     * @param carrierCode The unique carrier code.
     * @param cultureCode The specific culture code.
     * @param eTag The eTag.
     
     */
    public apiNskV1ResourcesCarriersByCarrierCodeGet = (carrierCode: string, cultureCode?: string, eTag?: string, ) => {
        if (!carrierCode){
            throw new Error('Required parameter carrierCode was null or undefined when calling apiNskV1ResourcesCarriersByCarrierCodeGet.');
        }

        let queryParameters: string[] = [];
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }


            const requestObj: Request<{
                carrierCode: string, cultureCode?: string, eTag?: string, 
            }> = {
                url: '/api/nsk/v1/resources/carriers/${encodeURIComponent(String(carrierCode))}',
                method: 'get',
                data: {
                    carrierCode,cultureCode,eTag,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the collection of carrier resources.
     * 
     * @param activeOnly Flag indicating to return just active only or all.
     * @param cultureCode The desired culture code to be returned.
     * @param eTag The cache token for this request. Data will not be returned if etag still matches.
     * @param startIndex The start index value for this request.
     * @param itemCount The item count value for this request.
     
     */
    public apiNskV1ResourcesCarriersGet = (activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, ) => {
        if (!activeOnly){
            throw new Error('Required parameter activeOnly was null or undefined when calling apiNskV1ResourcesCarriersGet.');
        }

        let queryParameters: string[] = [];
        if (activeOnly !== undefined) {
            queryParameters.push("activeOnly="+encodeURIComponent(String(activeOnly)));
        }
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }
        if (startIndex !== undefined) {
            queryParameters.push("startIndex="+encodeURIComponent(String(startIndex)));
        }
        if (itemCount !== undefined) {
            queryParameters.push("itemCount="+encodeURIComponent(String(itemCount)));
        }


            const requestObj: Request<{
                activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, 
            }> = {
                url: '/api/nsk/v1/resources/carriers',
                method: 'get',
                data: {
                    activeOnly,cultureCode,eTag,startIndex,itemCount,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the specific city resource.
     * 
     * @param cityCode The unique city code.
     * @param cultureCode The specific culture code.
     
     */
    public apiNskV1ResourcesCitiesByCityCodeGet = (cityCode: string, cultureCode?: string, ) => {
        if (!cityCode){
            throw new Error('Required parameter cityCode was null or undefined when calling apiNskV1ResourcesCitiesByCityCodeGet.');
        }

        let queryParameters: string[] = [];
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }


            const requestObj: Request<{
                cityCode: string, cultureCode?: string, 
            }> = {
                url: '/api/nsk/v1/resources/Cities/${encodeURIComponent(String(cityCode))}',
                method: 'get',
                data: {
                    cityCode,cultureCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the collection of city resources.
     * 
     * @param activeOnly Flag indicating to return just active only or all.
     * @param cultureCode The desired culture code to be returned.
     * @param eTag The cache token for this request. Data will not be returned if etag still matches.
     * @param startIndex The start index value for this request.
     * @param itemCount The item count value for this request.
     
     */
    public apiNskV1ResourcesCitiesGet = (activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, ) => {
        if (!activeOnly){
            throw new Error('Required parameter activeOnly was null or undefined when calling apiNskV1ResourcesCitiesGet.');
        }

        let queryParameters: string[] = [];
        if (activeOnly !== undefined) {
            queryParameters.push("activeOnly="+encodeURIComponent(String(activeOnly)));
        }
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }
        if (startIndex !== undefined) {
            queryParameters.push("startIndex="+encodeURIComponent(String(startIndex)));
        }
        if (itemCount !== undefined) {
            queryParameters.push("itemCount="+encodeURIComponent(String(itemCount)));
        }


            const requestObj: Request<{
                activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, 
            }> = {
                url: '/api/nsk/v1/resources/Cities',
                method: 'get',
                data: {
                    activeOnly,cultureCode,eTag,startIndex,itemCount,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the resource.
     * 
     * @param classOfServiceCode The unique class of service code.
     * @param cultureCode The specific culture code.
     
     */
    public apiNskV1ResourcesClassOfServicesByClassOfServiceCodeGet = (classOfServiceCode: string, cultureCode?: string, ) => {
        if (!classOfServiceCode){
            throw new Error('Required parameter classOfServiceCode was null or undefined when calling apiNskV1ResourcesClassOfServicesByClassOfServiceCodeGet.');
        }

        let queryParameters: string[] = [];
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }


            const requestObj: Request<{
                classOfServiceCode: string, cultureCode?: string, 
            }> = {
                url: '/api/nsk/v1/resources/ClassOfServices/${encodeURIComponent(String(classOfServiceCode))}',
                method: 'get',
                data: {
                    classOfServiceCode,cultureCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the collection of class of service resources.
     * 
     * @param activeOnly Flag indicating to return just active only or all.
     * @param cultureCode The desired culture code to be returned.
     * @param eTag The cache token for this request. Data will not be returned if etag still matches.
     * @param startIndex The start index value for this request.
     * @param itemCount The item count value for this request.
     
     */
    public apiNskV1ResourcesClassOfServicesGet = (activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, ) => {
        if (!activeOnly){
            throw new Error('Required parameter activeOnly was null or undefined when calling apiNskV1ResourcesClassOfServicesGet.');
        }

        let queryParameters: string[] = [];
        if (activeOnly !== undefined) {
            queryParameters.push("activeOnly="+encodeURIComponent(String(activeOnly)));
        }
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }
        if (startIndex !== undefined) {
            queryParameters.push("startIndex="+encodeURIComponent(String(startIndex)));
        }
        if (itemCount !== undefined) {
            queryParameters.push("itemCount="+encodeURIComponent(String(itemCount)));
        }


            const requestObj: Request<{
                activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, 
            }> = {
                url: '/api/nsk/v1/resources/ClassOfServices',
                method: 'get',
                data: {
                    activeOnly,cultureCode,eTag,startIndex,itemCount,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the specific commission rate resource.
     * 
     * @param commissionRateCode The unique commission rate code.
     * @param cultureCode The specific culture code.
     
     */
    public apiNskV1ResourcesCommissionRatesByCommissionRateCodeGet = (commissionRateCode: string, cultureCode?: string, ) => {
        if (!commissionRateCode){
            throw new Error('Required parameter commissionRateCode was null or undefined when calling apiNskV1ResourcesCommissionRatesByCommissionRateCodeGet.');
        }

        let queryParameters: string[] = [];
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }


            const requestObj: Request<{
                commissionRateCode: string, cultureCode?: string, 
            }> = {
                url: '/api/nsk/v1/resources/CommissionRates/${encodeURIComponent(String(commissionRateCode))}',
                method: 'get',
                data: {
                    commissionRateCode,cultureCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the collection of commission rate resources.
     * 
     * @param activeOnly Flag indicating to return just active only or all.
     * @param cultureCode The desired culture code to be returned.
     * @param eTag The cache token for this request. Data will not be returned if etag still matches.
     * @param startIndex The start index value for this request.
     * @param itemCount The item count value for this request.
     
     */
    public apiNskV1ResourcesCommissionRatesGet = (activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, ) => {
        if (!activeOnly){
            throw new Error('Required parameter activeOnly was null or undefined when calling apiNskV1ResourcesCommissionRatesGet.');
        }

        let queryParameters: string[] = [];
        if (activeOnly !== undefined) {
            queryParameters.push("activeOnly="+encodeURIComponent(String(activeOnly)));
        }
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }
        if (startIndex !== undefined) {
            queryParameters.push("startIndex="+encodeURIComponent(String(startIndex)));
        }
        if (itemCount !== undefined) {
            queryParameters.push("itemCount="+encodeURIComponent(String(itemCount)));
        }


            const requestObj: Request<{
                activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, 
            }> = {
                url: '/api/nsk/v1/resources/CommissionRates',
                method: 'get',
                data: {
                    activeOnly,cultureCode,eTag,startIndex,itemCount,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the specific contact type resource.
     * 
     * @param contactTypeCode The unique contact type code.
     * @param cultureCode The specific culture code.
     
     */
    public apiNskV1ResourcesContactTypesByContactTypeCodeGet = (contactTypeCode: string, cultureCode?: string, ) => {
        if (!contactTypeCode){
            throw new Error('Required parameter contactTypeCode was null or undefined when calling apiNskV1ResourcesContactTypesByContactTypeCodeGet.');
        }

        let queryParameters: string[] = [];
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }


            const requestObj: Request<{
                contactTypeCode: string, cultureCode?: string, 
            }> = {
                url: '/api/nsk/v1/resources/ContactTypes/${encodeURIComponent(String(contactTypeCode))}',
                method: 'get',
                data: {
                    contactTypeCode,cultureCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the collection of contact type resources.
     * 
     * @param activeOnly Flag indicating to return just active only or all.
     * @param cultureCode The desired culture code to be returned.
     * @param eTag The cache token for this request. Data will not be returned if etag still matches.
     * @param startIndex The start index value for this request.
     * @param itemCount The item count value for this request.
     
     */
    public apiNskV1ResourcesContactTypesGet = (activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, ) => {
        if (!activeOnly){
            throw new Error('Required parameter activeOnly was null or undefined when calling apiNskV1ResourcesContactTypesGet.');
        }

        let queryParameters: string[] = [];
        if (activeOnly !== undefined) {
            queryParameters.push("activeOnly="+encodeURIComponent(String(activeOnly)));
        }
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }
        if (startIndex !== undefined) {
            queryParameters.push("startIndex="+encodeURIComponent(String(startIndex)));
        }
        if (itemCount !== undefined) {
            queryParameters.push("itemCount="+encodeURIComponent(String(itemCount)));
        }


            const requestObj: Request<{
                activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, 
            }> = {
                url: '/api/nsk/v1/resources/ContactTypes',
                method: 'get',
                data: {
                    activeOnly,cultureCode,eTag,startIndex,itemCount,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves resource setting data based on the accept content type.
     * This is a post to easily allow special path characters.  If the data returned is not in HTML format and convertRtfToHtml is set to true,  the content requested was of an incompatible data type.
     * @param contentId The content id.
     * @param convertRtfToHtml The bool to determine whether or not to convert RTF to HTML data.
     * @param eTag ETag for caching.
     
     */
    public apiNskV1ResourcesContentsByContentIdDataGet = (contentId: number, convertRtfToHtml?: boolean, eTag?: string, ) => {
        if (!contentId){
            throw new Error('Required parameter contentId was null or undefined when calling apiNskV1ResourcesContentsByContentIdDataGet.');
        }

        let queryParameters: string[] = [];
        if (convertRtfToHtml !== undefined) {
            queryParameters.push("convertRtfToHtml="+encodeURIComponent(String(convertRtfToHtml)));
        }
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }


            const requestObj: Request<{
                contentId: number, convertRtfToHtml?: boolean, eTag?: string, 
            }> = {
                url: '/api/nsk/v1/resources/contents/${encodeURIComponent(String(contentId))}/data',
                method: 'get',
                data: {
                    contentId,convertRtfToHtml,eTag,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves a resource setting and its related information.
     * This is a post to easily allow special path characters.  See /resources/settings/data to avoid manually parsing the data.
     * @param contentId The content id.
     * @param convertRtfToHtml The bool to determine whether or not to convert RTF to HTML data.
     * @param eTag ETag for caching.
     
     */
    public apiNskV1ResourcesContentsByContentIdGet = (contentId: number, convertRtfToHtml?: boolean, eTag?: string, ) => {
        if (!contentId){
            throw new Error('Required parameter contentId was null or undefined when calling apiNskV1ResourcesContentsByContentIdGet.');
        }

        let queryParameters: string[] = [];
        if (convertRtfToHtml !== undefined) {
            queryParameters.push("convertRtfToHtml="+encodeURIComponent(String(convertRtfToHtml)));
        }
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }


            const requestObj: Request<{
                contentId: number, convertRtfToHtml?: boolean, eTag?: string, 
            }> = {
                url: '/api/nsk/v1/resources/contents/${encodeURIComponent(String(contentId))}',
                method: 'get',
                data: {
                    contentId,convertRtfToHtml,eTag,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Searches the contents based on the search criteria provided.
     * 
     * @param type Specific content type.
     * @param name Name of the content.
     * @param containerId Unique id of the container.
     * @param pageSize The default page size.
     * @param lastContentId Used to specify the last item of the page of the last set of records retrieved  when paging was performed. This is optional.
     
     */
    public apiNskV1ResourcesContentsGet = (type: 'GeneralReference' | 'News' | 'ConsoleHelp' | 'FareRuleReference' | 'ReviewWithCustomer' | 'Notices' | 'Literature' | 'Links' | 'Image' | 'PromotionReference' | 'SubscriptionReference', name?: string, containerId?: number, pageSize?: number, lastContentId?: number, ) => {
        if (!type){
            throw new Error('Required parameter type was null or undefined when calling apiNskV1ResourcesContentsGet.');
        }

        let queryParameters: string[] = [];
        if (name !== undefined) {
            queryParameters.push("name="+encodeURIComponent(String(name)));
        }
        if (type !== undefined) {
            queryParameters.push("type="+encodeURIComponent(String(type)));
        }
        if (containerId !== undefined) {
            queryParameters.push("containerId="+encodeURIComponent(String(containerId)));
        }
        if (pageSize !== undefined) {
            queryParameters.push("pageSize="+encodeURIComponent(String(pageSize)));
        }
        if (lastContentId !== undefined) {
            queryParameters.push("lastContentId="+encodeURIComponent(String(lastContentId)));
        }


            const requestObj: Request<{
                type: 'GeneralReference' | 'News' | 'ConsoleHelp' | 'FareRuleReference' | 'ReviewWithCustomer' | 'Notices' | 'Literature' | 'Links' | 'Image' | 'PromotionReference' | 'SubscriptionReference', name?: string, containerId?: number, pageSize?: number, lastContentId?: number, 
            }> = {
                url: '/api/nsk/v1/resources/contents',
                method: 'get',
                data: {
                    type,name,containerId,pageSize,lastContentId,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the resource.
     * 
     * @param cultureCode The unique culure code.
     * @param forCultureCode The for culture.
     
     */
    public apiNskV1ResourcesCulturesByCultureCodeGet = (cultureCode: string, forCultureCode?: string, ) => {
        if (!cultureCode){
            throw new Error('Required parameter cultureCode was null or undefined when calling apiNskV1ResourcesCulturesByCultureCodeGet.');
        }

        let queryParameters: string[] = [];
        if (forCultureCode !== undefined) {
            queryParameters.push("forCultureCode="+encodeURIComponent(String(forCultureCode)));
        }


            const requestObj: Request<{
                cultureCode: string, forCultureCode?: string, 
            }> = {
                url: '/api/nsk/v1/resources/cultures/${encodeURIComponent(String(cultureCode))}',
                method: 'get',
                data: {
                    cultureCode,forCultureCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the resources.
     * 
     * @param activeOnly Flag indicating to return just active only or all.
     * @param cultureCode The desired culture code to be returned.
     * @param eTag The cache token for this request. Data will not be returned if etag still matches.
     * @param startIndex The start index value for this request.
     * @param itemCount The item count value for this request.
     
     */
    public apiNskV1ResourcesCulturesGet = (activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, ) => {
        if (!activeOnly){
            throw new Error('Required parameter activeOnly was null or undefined when calling apiNskV1ResourcesCulturesGet.');
        }

        let queryParameters: string[] = [];
        if (activeOnly !== undefined) {
            queryParameters.push("activeOnly="+encodeURIComponent(String(activeOnly)));
        }
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }
        if (startIndex !== undefined) {
            queryParameters.push("startIndex="+encodeURIComponent(String(startIndex)));
        }
        if (itemCount !== undefined) {
            queryParameters.push("itemCount="+encodeURIComponent(String(itemCount)));
        }


            const requestObj: Request<{
                activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, 
            }> = {
                url: '/api/nsk/v1/resources/cultures',
                method: 'get',
                data: {
                    activeOnly,cultureCode,eTag,startIndex,itemCount,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the specific customer program resource.
     * 
     * @param programCode The unique program code.
     * @param cultureCode The specific culture code.
     
     */
    public apiNskV1ResourcesCustomerProgramsByProgramCodeGet = (programCode: string, cultureCode?: string, ) => {
        if (!programCode){
            throw new Error('Required parameter programCode was null or undefined when calling apiNskV1ResourcesCustomerProgramsByProgramCodeGet.');
        }

        let queryParameters: string[] = [];
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }


            const requestObj: Request<{
                programCode: string, cultureCode?: string, 
            }> = {
                url: '/api/nsk/v1/resources/CustomerPrograms/${encodeURIComponent(String(programCode))}',
                method: 'get',
                data: {
                    programCode,cultureCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the specific program level.
     * 
     * @param programCode The unique program code.
     * @param programLevelCode The unique program level code.
     * @param cultureCode The culture code.
     
     */
    public apiNskV1ResourcesCustomerProgramsByProgramCodeLevelsByProgramLevelCodeGet = (programCode: string, programLevelCode: string, cultureCode?: string, ) => {
        if (!programCode){
            throw new Error('Required parameter programCode was null or undefined when calling apiNskV1ResourcesCustomerProgramsByProgramCodeLevelsByProgramLevelCodeGet.');
        }

        if (!programLevelCode){
            throw new Error('Required parameter programLevelCode was null or undefined when calling apiNskV1ResourcesCustomerProgramsByProgramCodeLevelsByProgramLevelCodeGet.');
        }

        let queryParameters: string[] = [];
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }


            const requestObj: Request<{
                programCode: string, programLevelCode: string, cultureCode?: string, 
            }> = {
                url: '/api/nsk/v1/resources/CustomerPrograms/${encodeURIComponent(String(programCode))}/levels/${encodeURIComponent(String(programLevelCode))}',
                method: 'get',
                data: {
                    programCode,programLevelCode,cultureCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the collection of customer program resources.
     * 
     * @param activeOnly Flag indicating to return just active only or all.
     * @param cultureCode The desired culture code to be returned.
     * @param eTag The cache token for this request. Data will not be returned if etag still matches.
     * @param startIndex The start index value for this request.
     * @param itemCount The item count value for this request.
     
     */
    public apiNskV1ResourcesCustomerProgramsGet = (activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, ) => {
        if (!activeOnly){
            throw new Error('Required parameter activeOnly was null or undefined when calling apiNskV1ResourcesCustomerProgramsGet.');
        }

        let queryParameters: string[] = [];
        if (activeOnly !== undefined) {
            queryParameters.push("activeOnly="+encodeURIComponent(String(activeOnly)));
        }
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }
        if (startIndex !== undefined) {
            queryParameters.push("startIndex="+encodeURIComponent(String(startIndex)));
        }
        if (itemCount !== undefined) {
            queryParameters.push("itemCount="+encodeURIComponent(String(itemCount)));
        }


            const requestObj: Request<{
                activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, 
            }> = {
                url: '/api/nsk/v1/resources/CustomerPrograms',
                method: 'get',
                data: {
                    activeOnly,cultureCode,eTag,startIndex,itemCount,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the specific delay resource.
     * 
     * @param delayCode The unique delay code.
     * @param cultureCode The specific culture code.
     
     */
    public apiNskV1ResourcesDelaysByDelayCodeGet = (delayCode: string, cultureCode?: string, ) => {
        if (!delayCode){
            throw new Error('Required parameter delayCode was null or undefined when calling apiNskV1ResourcesDelaysByDelayCodeGet.');
        }

        let queryParameters: string[] = [];
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }


            const requestObj: Request<{
                delayCode: string, cultureCode?: string, 
            }> = {
                url: '/api/nsk/v1/resources/Delays/${encodeURIComponent(String(delayCode))}',
                method: 'get',
                data: {
                    delayCode,cultureCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the collection of delay resources.
     * 
     * @param activeOnly Flag indicating to return just active only or all.
     * @param cultureCode The desired culture code to be returned.
     * @param eTag The cache token for this request. Data will not be returned if etag still matches.
     * @param startIndex The start index value for this request.
     * @param itemCount The item count value for this request.
     
     */
    public apiNskV1ResourcesDelaysGet = (activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, ) => {
        if (!activeOnly){
            throw new Error('Required parameter activeOnly was null or undefined when calling apiNskV1ResourcesDelaysGet.');
        }

        let queryParameters: string[] = [];
        if (activeOnly !== undefined) {
            queryParameters.push("activeOnly="+encodeURIComponent(String(activeOnly)));
        }
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }
        if (startIndex !== undefined) {
            queryParameters.push("startIndex="+encodeURIComponent(String(startIndex)));
        }
        if (itemCount !== undefined) {
            queryParameters.push("itemCount="+encodeURIComponent(String(itemCount)));
        }


            const requestObj: Request<{
                activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, 
            }> = {
                url: '/api/nsk/v1/resources/Delays',
                method: 'get',
                data: {
                    activeOnly,cultureCode,eTag,startIndex,itemCount,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the specific department resource.
     * 
     * @param departmentCode The unique department code.
     * @param cultureCode The specific culture code.
     
     */
    public apiNskV1ResourcesDepartmentsByDepartmentCodeGet = (departmentCode: string, cultureCode?: string, ) => {
        if (!departmentCode){
            throw new Error('Required parameter departmentCode was null or undefined when calling apiNskV1ResourcesDepartmentsByDepartmentCodeGet.');
        }

        let queryParameters: string[] = [];
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }


            const requestObj: Request<{
                departmentCode: string, cultureCode?: string, 
            }> = {
                url: '/api/nsk/v1/resources/Departments/${encodeURIComponent(String(departmentCode))}',
                method: 'get',
                data: {
                    departmentCode,cultureCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the collection of department resources.
     * 
     * @param activeOnly Flag indicating to return just active only or all.
     * @param cultureCode The desired culture code to be returned.
     * @param eTag The cache token for this request. Data will not be returned if etag still matches.
     * @param startIndex The start index value for this request.
     * @param itemCount The item count value for this request.
     
     */
    public apiNskV1ResourcesDepartmentsGet = (activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, ) => {
        if (!activeOnly){
            throw new Error('Required parameter activeOnly was null or undefined when calling apiNskV1ResourcesDepartmentsGet.');
        }

        let queryParameters: string[] = [];
        if (activeOnly !== undefined) {
            queryParameters.push("activeOnly="+encodeURIComponent(String(activeOnly)));
        }
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }
        if (startIndex !== undefined) {
            queryParameters.push("startIndex="+encodeURIComponent(String(startIndex)));
        }
        if (itemCount !== undefined) {
            queryParameters.push("itemCount="+encodeURIComponent(String(itemCount)));
        }


            const requestObj: Request<{
                activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, 
            }> = {
                url: '/api/nsk/v1/resources/Departments',
                method: 'get',
                data: {
                    activeOnly,cultureCode,eTag,startIndex,itemCount,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the localizations.
     * 
     * @param cultureCode The desired culture code to be returned.
     * @param eTag The cache token for this request. Data will not be returned if etag still matches.
     * @param startIndex The start index value for this request.
     * @param itemCount The item count value for this request.
     
     */
    public apiNskV1ResourcesDistributionOptionsGet = (cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, ) => {
        let queryParameters: string[] = [];
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }
        if (startIndex !== undefined) {
            queryParameters.push("startIndex="+encodeURIComponent(String(startIndex)));
        }
        if (itemCount !== undefined) {
            queryParameters.push("itemCount="+encodeURIComponent(String(itemCount)));
        }


            const requestObj: Request<{
                cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, 
            }> = {
                url: '/api/nsk/v1/resources/distributionOptions',
                method: 'get',
                data: {
                    cultureCode,eTag,startIndex,itemCount,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the specific document type resource.
     * 
     * @param documentTypeCode The unique document type code.
     * @param cultureCode The specific culture code.
     
     */
    public apiNskV1ResourcesDocumentTypesByDocumentTypeCodeGet = (documentTypeCode: string, cultureCode?: string, ) => {
        if (!documentTypeCode){
            throw new Error('Required parameter documentTypeCode was null or undefined when calling apiNskV1ResourcesDocumentTypesByDocumentTypeCodeGet.');
        }

        let queryParameters: string[] = [];
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }


            const requestObj: Request<{
                documentTypeCode: string, cultureCode?: string, 
            }> = {
                url: '/api/nsk/v1/resources/DocumentTypes/${encodeURIComponent(String(documentTypeCode))}',
                method: 'get',
                data: {
                    documentTypeCode,cultureCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the collection of document type resources.
     * 
     * @param activeOnly Flag indicating to return just active only or all.
     * @param cultureCode The desired culture code to be returned.
     * @param eTag The cache token for this request. Data will not be returned if etag still matches.
     * @param startIndex The start index value for this request.
     * @param itemCount The item count value for this request.
     
     */
    public apiNskV1ResourcesDocumentTypesGet = (activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, ) => {
        if (!activeOnly){
            throw new Error('Required parameter activeOnly was null or undefined when calling apiNskV1ResourcesDocumentTypesGet.');
        }

        let queryParameters: string[] = [];
        if (activeOnly !== undefined) {
            queryParameters.push("activeOnly="+encodeURIComponent(String(activeOnly)));
        }
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }
        if (startIndex !== undefined) {
            queryParameters.push("startIndex="+encodeURIComponent(String(startIndex)));
        }
        if (itemCount !== undefined) {
            queryParameters.push("itemCount="+encodeURIComponent(String(itemCount)));
        }


            const requestObj: Request<{
                activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, 
            }> = {
                url: '/api/nsk/v1/resources/DocumentTypes',
                method: 'get',
                data: {
                    activeOnly,cultureCode,eTag,startIndex,itemCount,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the specific domain resource.
     * 
     * @param domainCode The unique domain code.
     
     */
    public apiNskV1ResourcesDomainsByDomainCodeGet = (domainCode: string, ) => {
        if (!domainCode){
            throw new Error('Required parameter domainCode was null or undefined when calling apiNskV1ResourcesDomainsByDomainCodeGet.');
        }


            const requestObj: Request<{
                domainCode: string, 
            }> = {
                url: '/api/nsk/v1/resources/Domains/${encodeURIComponent(String(domainCode))}',
                method: 'get',
                data: {
                    domainCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the collection of domain resources.
     * 
     * @param eTag The unique etag ID.
     
     */
    public apiNskV1ResourcesDomainsGet = (eTag?: string, ) => {
        let queryParameters: string[] = [];
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }


            const requestObj: Request<{
                eTag?: string, 
            }> = {
                url: '/api/nsk/v1/resources/Domains',
                method: 'get',
                data: {
                    eTag,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the specific email type resource.
     * 
     * @param emailTypeCode The unique email type code.
     * @param cultureCode The specific culture code.
     
     */
    public apiNskV1ResourcesEmailTypesByEmailTypeCodeGet = (emailTypeCode: string, cultureCode?: string, ) => {
        if (!emailTypeCode){
            throw new Error('Required parameter emailTypeCode was null or undefined when calling apiNskV1ResourcesEmailTypesByEmailTypeCodeGet.');
        }

        let queryParameters: string[] = [];
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }


            const requestObj: Request<{
                emailTypeCode: string, cultureCode?: string, 
            }> = {
                url: '/api/nsk/v1/resources/EmailTypes/${encodeURIComponent(String(emailTypeCode))}',
                method: 'get',
                data: {
                    emailTypeCode,cultureCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the collection of email type resources.
     * 
     * @param activeOnly Flag indicating to return just active only or all.
     * @param cultureCode The desired culture code to be returned.
     * @param eTag The cache token for this request. Data will not be returned if etag still matches.
     * @param startIndex The start index value for this request.
     * @param itemCount The item count value for this request.
     
     */
    public apiNskV1ResourcesEmailTypesGet = (activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, ) => {
        if (!activeOnly){
            throw new Error('Required parameter activeOnly was null or undefined when calling apiNskV1ResourcesEmailTypesGet.');
        }

        let queryParameters: string[] = [];
        if (activeOnly !== undefined) {
            queryParameters.push("activeOnly="+encodeURIComponent(String(activeOnly)));
        }
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }
        if (startIndex !== undefined) {
            queryParameters.push("startIndex="+encodeURIComponent(String(startIndex)));
        }
        if (itemCount !== undefined) {
            queryParameters.push("itemCount="+encodeURIComponent(String(itemCount)));
        }


            const requestObj: Request<{
                activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, 
            }> = {
                url: '/api/nsk/v1/resources/EmailTypes',
                method: 'get',
                data: {
                    activeOnly,cultureCode,eTag,startIndex,itemCount,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the specific external rate resource.
     * 
     * @param rateId The unique rate ID.
     * @param cultureCode The specific culture code.
     
     */
    public apiNskV1ResourcesExternalRatesByRateIdGet = (rateId: string, cultureCode?: string, ) => {
        if (!rateId){
            throw new Error('Required parameter rateId was null or undefined when calling apiNskV1ResourcesExternalRatesByRateIdGet.');
        }

        let queryParameters: string[] = [];
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }


            const requestObj: Request<{
                rateId: string, cultureCode?: string, 
            }> = {
                url: '/api/nsk/v1/resources/ExternalRates/${encodeURIComponent(String(rateId))}',
                method: 'get',
                data: {
                    rateId,cultureCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the collection of external rate resources.
     * 
     * @param activeOnly Flag indicating to return just active only or all.
     * @param cultureCode The desired culture code to be returned.
     * @param eTag The cache token for this request. Data will not be returned if etag still matches.
     * @param startIndex The start index value for this request.
     * @param itemCount The item count value for this request.
     
     */
    public apiNskV1ResourcesExternalRatesGet = (activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, ) => {
        if (!activeOnly){
            throw new Error('Required parameter activeOnly was null or undefined when calling apiNskV1ResourcesExternalRatesGet.');
        }

        let queryParameters: string[] = [];
        if (activeOnly !== undefined) {
            queryParameters.push("activeOnly="+encodeURIComponent(String(activeOnly)));
        }
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }
        if (startIndex !== undefined) {
            queryParameters.push("startIndex="+encodeURIComponent(String(startIndex)));
        }
        if (itemCount !== undefined) {
            queryParameters.push("itemCount="+encodeURIComponent(String(itemCount)));
        }


            const requestObj: Request<{
                activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, 
            }> = {
                url: '/api/nsk/v1/resources/ExternalRates',
                method: 'get',
                data: {
                    activeOnly,cultureCode,eTag,startIndex,itemCount,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the specific fare type resource.
     * 
     * @param fareTypeCode The unique fare type code.
     * @param cultureCode The specific culture code.
     
     */
    public apiNskV1ResourcesFareTypesByFareTypeCodeGet = (fareTypeCode: string, cultureCode?: string, ) => {
        if (!fareTypeCode){
            throw new Error('Required parameter fareTypeCode was null or undefined when calling apiNskV1ResourcesFareTypesByFareTypeCodeGet.');
        }

        let queryParameters: string[] = [];
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }


            const requestObj: Request<{
                fareTypeCode: string, cultureCode?: string, 
            }> = {
                url: '/api/nsk/v1/resources/FareTypes/${encodeURIComponent(String(fareTypeCode))}',
                method: 'get',
                data: {
                    fareTypeCode,cultureCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the collection of fare type resources.
     * 
     * @param activeOnly Flag indicating to return just active only or all.
     * @param cultureCode The desired culture code to be returned.
     * @param eTag The cache token for this request. Data will not be returned if etag still matches.
     * @param startIndex The start index value for this request.
     * @param itemCount The item count value for this request.
     
     */
    public apiNskV1ResourcesFareTypesGet = (activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, ) => {
        if (!activeOnly){
            throw new Error('Required parameter activeOnly was null or undefined when calling apiNskV1ResourcesFareTypesGet.');
        }

        let queryParameters: string[] = [];
        if (activeOnly !== undefined) {
            queryParameters.push("activeOnly="+encodeURIComponent(String(activeOnly)));
        }
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }
        if (startIndex !== undefined) {
            queryParameters.push("startIndex="+encodeURIComponent(String(startIndex)));
        }
        if (itemCount !== undefined) {
            queryParameters.push("itemCount="+encodeURIComponent(String(itemCount)));
        }


            const requestObj: Request<{
                activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, 
            }> = {
                url: '/api/nsk/v1/resources/FareTypes',
                method: 'get',
                data: {
                    activeOnly,cultureCode,eTag,startIndex,itemCount,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets the fee options.
     * Note, this endpoint is not cached like other resource endpoints.
     * @param feeCode The unique fee code.
     
     */
    public apiNskV1ResourcesFeesByFeeCodeDetailsGet = (feeCode: string, ) => {
        if (!feeCode){
            throw new Error('Required parameter feeCode was null or undefined when calling apiNskV1ResourcesFeesByFeeCodeDetailsGet.');
        }


            const requestObj: Request<{
                feeCode: string, 
            }> = {
                url: '/api/nsk/v1/resources/fees/${encodeURIComponent(String(feeCode))}/details',
                method: 'get',
                data: {
                    feeCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the specific fee resource.
     * 
     * @param feeCode The unique fee code.
     * @param cultureCode The specific culture code.
     
     */
    public apiNskV1ResourcesFeesByFeeCodeGet = (feeCode: string, cultureCode?: string, ) => {
        if (!feeCode){
            throw new Error('Required parameter feeCode was null or undefined when calling apiNskV1ResourcesFeesByFeeCodeGet.');
        }

        let queryParameters: string[] = [];
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }


            const requestObj: Request<{
                feeCode: string, cultureCode?: string, 
            }> = {
                url: '/api/nsk/v1/resources/Fees/${encodeURIComponent(String(feeCode))}',
                method: 'get',
                data: {
                    feeCode,cultureCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the collection of fee resources.
     * 
     * @param activeOnly Flag indicating to return just active only or all.
     * @param cultureCode The desired culture code to be returned.
     * @param eTag The cache token for this request. Data will not be returned if etag still matches.
     * @param startIndex The start index value for this request.
     * @param itemCount The item count value for this request.
     
     */
    public apiNskV1ResourcesFeesGet = (activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, ) => {
        if (!activeOnly){
            throw new Error('Required parameter activeOnly was null or undefined when calling apiNskV1ResourcesFeesGet.');
        }

        let queryParameters: string[] = [];
        if (activeOnly !== undefined) {
            queryParameters.push("activeOnly="+encodeURIComponent(String(activeOnly)));
        }
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }
        if (startIndex !== undefined) {
            queryParameters.push("startIndex="+encodeURIComponent(String(startIndex)));
        }
        if (itemCount !== undefined) {
            queryParameters.push("itemCount="+encodeURIComponent(String(itemCount)));
        }


            const requestObj: Request<{
                activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, 
            }> = {
                url: '/api/nsk/v1/resources/Fees',
                method: 'get',
                data: {
                    activeOnly,cultureCode,eTag,startIndex,itemCount,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the localizations.
     * 
     * @param cultureCode The desired culture code to be returned.
     * @param eTag The cache token for this request. Data will not be returned if etag still matches.
     * @param startIndex The start index value for this request.
     * @param itemCount The item count value for this request.
     
     */
    public apiNskV1ResourcesGendersGet = (cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, ) => {
        let queryParameters: string[] = [];
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }
        if (startIndex !== undefined) {
            queryParameters.push("startIndex="+encodeURIComponent(String(startIndex)));
        }
        if (itemCount !== undefined) {
            queryParameters.push("itemCount="+encodeURIComponent(String(itemCount)));
        }


            const requestObj: Request<{
                cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, 
            }> = {
                url: '/api/nsk/v1/resources/genders',
                method: 'get',
                data: {
                    cultureCode,eTag,startIndex,itemCount,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the specific hot card reason resource.
     * 
     * @param hotCardReasonCode The unique hot card reason.
     * @param cultureCode The specific culture code.
     
     */
    public apiNskV1ResourcesHotCardReasonsByHotCardReasonCodeGet = (hotCardReasonCode: string, cultureCode?: string, ) => {
        if (!hotCardReasonCode){
            throw new Error('Required parameter hotCardReasonCode was null or undefined when calling apiNskV1ResourcesHotCardReasonsByHotCardReasonCodeGet.');
        }

        let queryParameters: string[] = [];
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }


            const requestObj: Request<{
                hotCardReasonCode: string, cultureCode?: string, 
            }> = {
                url: '/api/nsk/v1/resources/HotCardReasons/${encodeURIComponent(String(hotCardReasonCode))}',
                method: 'get',
                data: {
                    hotCardReasonCode,cultureCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the collection of hot card reason resources.
     * 
     * @param activeOnly Flag indicating to return just active only or all.
     * @param cultureCode The desired culture code to be returned.
     * @param eTag The cache token for this request. Data will not be returned if etag still matches.
     * @param startIndex The start index value for this request.
     * @param itemCount The item count value for this request.
     
     */
    public apiNskV1ResourcesHotCardReasonsGet = (activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, ) => {
        if (!activeOnly){
            throw new Error('Required parameter activeOnly was null or undefined when calling apiNskV1ResourcesHotCardReasonsGet.');
        }

        let queryParameters: string[] = [];
        if (activeOnly !== undefined) {
            queryParameters.push("activeOnly="+encodeURIComponent(String(activeOnly)));
        }
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }
        if (startIndex !== undefined) {
            queryParameters.push("startIndex="+encodeURIComponent(String(startIndex)));
        }
        if (itemCount !== undefined) {
            queryParameters.push("itemCount="+encodeURIComponent(String(itemCount)));
        }


            const requestObj: Request<{
                activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, 
            }> = {
                url: '/api/nsk/v1/resources/HotCardReasons',
                method: 'get',
                data: {
                    activeOnly,cultureCode,eTag,startIndex,itemCount,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the specific issuance reason resource.
     * 
     * @param issuanceReasonCode The unique issuance reason code.
     * @param cultureCode The specific culture code.
     
     */
    public apiNskV1ResourcesIssuanceReasonsByIssuanceReasonCodeGet = (issuanceReasonCode: string, cultureCode?: string, ) => {
        if (!issuanceReasonCode){
            throw new Error('Required parameter issuanceReasonCode was null or undefined when calling apiNskV1ResourcesIssuanceReasonsByIssuanceReasonCodeGet.');
        }

        let queryParameters: string[] = [];
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }


            const requestObj: Request<{
                issuanceReasonCode: string, cultureCode?: string, 
            }> = {
                url: '/api/nsk/v1/resources/IssuanceReasons/${encodeURIComponent(String(issuanceReasonCode))}',
                method: 'get',
                data: {
                    issuanceReasonCode,cultureCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the collection of issuance reason resources.
     * 
     * @param activeOnly Flag indicating to return just active only or all.
     * @param cultureCode The desired culture code to be returned.
     * @param eTag The cache token for this request. Data will not be returned if etag still matches.
     * @param startIndex The start index value for this request.
     * @param itemCount The item count value for this request.
     
     */
    public apiNskV1ResourcesIssuanceReasonsGet = (activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, ) => {
        if (!activeOnly){
            throw new Error('Required parameter activeOnly was null or undefined when calling apiNskV1ResourcesIssuanceReasonsGet.');
        }

        let queryParameters: string[] = [];
        if (activeOnly !== undefined) {
            queryParameters.push("activeOnly="+encodeURIComponent(String(activeOnly)));
        }
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }
        if (startIndex !== undefined) {
            queryParameters.push("startIndex="+encodeURIComponent(String(startIndex)));
        }
        if (itemCount !== undefined) {
            queryParameters.push("itemCount="+encodeURIComponent(String(itemCount)));
        }


            const requestObj: Request<{
                activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, 
            }> = {
                url: '/api/nsk/v1/resources/IssuanceReasons',
                method: 'get',
                data: {
                    activeOnly,cultureCode,eTag,startIndex,itemCount,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the specific location resource.
     * 
     * @param locationCode 
     * @param cultureCode 
     
     */
    public apiNskV1ResourcesLocationsByLocationCodeGet = (locationCode: string, cultureCode?: string, ) => {
        if (!locationCode){
            throw new Error('Required parameter locationCode was null or undefined when calling apiNskV1ResourcesLocationsByLocationCodeGet.');
        }

        let queryParameters: string[] = [];
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }


            const requestObj: Request<{
                locationCode: string, cultureCode?: string, 
            }> = {
                url: '/api/nsk/v1/resources/Locations/${encodeURIComponent(String(locationCode))}',
                method: 'get',
                data: {
                    locationCode,cultureCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the collection of location resources.
     * 
     * @param activeOnly Flag indicating to return just active only or all.
     * @param cultureCode The desired culture code to be returned.
     * @param eTag The cache token for this request. Data will not be returned if etag still matches.
     * @param startIndex The start index value for this request.
     * @param itemCount The item count value for this request.
     
     */
    public apiNskV1ResourcesLocationsGet = (activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, ) => {
        if (!activeOnly){
            throw new Error('Required parameter activeOnly was null or undefined when calling apiNskV1ResourcesLocationsGet.');
        }

        let queryParameters: string[] = [];
        if (activeOnly !== undefined) {
            queryParameters.push("activeOnly="+encodeURIComponent(String(activeOnly)));
        }
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }
        if (startIndex !== undefined) {
            queryParameters.push("startIndex="+encodeURIComponent(String(startIndex)));
        }
        if (itemCount !== undefined) {
            queryParameters.push("itemCount="+encodeURIComponent(String(itemCount)));
        }


            const requestObj: Request<{
                activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, 
            }> = {
                url: '/api/nsk/v1/resources/Locations',
                method: 'get',
                data: {
                    activeOnly,cultureCode,eTag,startIndex,itemCount,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the specific mac resource.
     * 
     * @param macCode The unique mac code.
     
     */
    public apiNskV1ResourcesMacsByMacCodeGet = (macCode: string, ) => {
        if (!macCode){
            throw new Error('Required parameter macCode was null or undefined when calling apiNskV1ResourcesMacsByMacCodeGet.');
        }


            const requestObj: Request<{
                macCode: string, 
            }> = {
                url: '/api/nsk/v1/resources/Macs/${encodeURIComponent(String(macCode))}',
                method: 'get',
                data: {
                    macCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the collection of mac resources.
     * 
     * @param eTag The unique etag ID.
     
     */
    public apiNskV1ResourcesMacsGet = (eTag?: string, ) => {
        let queryParameters: string[] = [];
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }


            const requestObj: Request<{
                eTag?: string, 
            }> = {
                url: '/api/nsk/v1/resources/Macs',
                method: 'get',
                data: {
                    eTag,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the specific message type resource.
     * 
     * @param messageTypeCode The unique message type code.
     * @param cultureCode The specific culture code.
     
     */
    public apiNskV1ResourcesMessageTypesByMessageTypeCodeGet = (messageTypeCode: string, cultureCode?: string, ) => {
        if (!messageTypeCode){
            throw new Error('Required parameter messageTypeCode was null or undefined when calling apiNskV1ResourcesMessageTypesByMessageTypeCodeGet.');
        }

        let queryParameters: string[] = [];
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }


            const requestObj: Request<{
                messageTypeCode: string, cultureCode?: string, 
            }> = {
                url: '/api/nsk/v1/resources/MessageTypes/${encodeURIComponent(String(messageTypeCode))}',
                method: 'get',
                data: {
                    messageTypeCode,cultureCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the collection of message type resources.
     * 
     * @param activeOnly Flag indicating to return just active only or all.
     * @param cultureCode The desired culture code to be returned.
     * @param eTag The cache token for this request. Data will not be returned if etag still matches.
     * @param startIndex The start index value for this request.
     * @param itemCount The item count value for this request.
     
     */
    public apiNskV1ResourcesMessageTypesGet = (activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, ) => {
        if (!activeOnly){
            throw new Error('Required parameter activeOnly was null or undefined when calling apiNskV1ResourcesMessageTypesGet.');
        }

        let queryParameters: string[] = [];
        if (activeOnly !== undefined) {
            queryParameters.push("activeOnly="+encodeURIComponent(String(activeOnly)));
        }
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }
        if (startIndex !== undefined) {
            queryParameters.push("startIndex="+encodeURIComponent(String(startIndex)));
        }
        if (itemCount !== undefined) {
            queryParameters.push("itemCount="+encodeURIComponent(String(itemCount)));
        }


            const requestObj: Request<{
                activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, 
            }> = {
                url: '/api/nsk/v1/resources/MessageTypes',
                method: 'get',
                data: {
                    activeOnly,cultureCode,eTag,startIndex,itemCount,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the localizations.
     * 
     * @param cultureCode The desired culture code to be returned.
     * @param eTag The cache token for this request. Data will not be returned if etag still matches.
     * @param startIndex The start index value for this request.
     * @param itemCount The item count value for this request.
     
     */
    public apiNskV1ResourcesOrganizationStatusesGet = (cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, ) => {
        let queryParameters: string[] = [];
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }
        if (startIndex !== undefined) {
            queryParameters.push("startIndex="+encodeURIComponent(String(startIndex)));
        }
        if (itemCount !== undefined) {
            queryParameters.push("itemCount="+encodeURIComponent(String(itemCount)));
        }


            const requestObj: Request<{
                cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, 
            }> = {
                url: '/api/nsk/v1/resources/organizationStatuses',
                method: 'get',
                data: {
                    cultureCode,eTag,startIndex,itemCount,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the specific passenger discount resource.
     * 
     * @param passengerDiscountCode The unique passenger discount code.
     * @param cultureCode The specific culture code.
     
     */
    public apiNskV1ResourcesPassengerDiscountsByPassengerDiscountCodeGet = (passengerDiscountCode: string, cultureCode?: string, ) => {
        if (!passengerDiscountCode){
            throw new Error('Required parameter passengerDiscountCode was null or undefined when calling apiNskV1ResourcesPassengerDiscountsByPassengerDiscountCodeGet.');
        }

        let queryParameters: string[] = [];
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }


            const requestObj: Request<{
                passengerDiscountCode: string, cultureCode?: string, 
            }> = {
                url: '/api/nsk/v1/resources/PassengerDiscounts/${encodeURIComponent(String(passengerDiscountCode))}',
                method: 'get',
                data: {
                    passengerDiscountCode,cultureCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the collection of passenger discount resources.
     * 
     * @param activeOnly Flag indicating to return just active only or all.
     * @param cultureCode The desired culture code to be returned.
     * @param eTag The cache token for this request. Data will not be returned if etag still matches.
     * @param startIndex The start index value for this request.
     * @param itemCount The item count value for this request.
     
     */
    public apiNskV1ResourcesPassengerDiscountsGet = (activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, ) => {
        if (!activeOnly){
            throw new Error('Required parameter activeOnly was null or undefined when calling apiNskV1ResourcesPassengerDiscountsGet.');
        }

        let queryParameters: string[] = [];
        if (activeOnly !== undefined) {
            queryParameters.push("activeOnly="+encodeURIComponent(String(activeOnly)));
        }
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }
        if (startIndex !== undefined) {
            queryParameters.push("startIndex="+encodeURIComponent(String(startIndex)));
        }
        if (itemCount !== undefined) {
            queryParameters.push("itemCount="+encodeURIComponent(String(itemCount)));
        }


            const requestObj: Request<{
                activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, 
            }> = {
                url: '/api/nsk/v1/resources/PassengerDiscounts',
                method: 'get',
                data: {
                    activeOnly,cultureCode,eTag,startIndex,itemCount,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the specific passenger type resource.
     * 
     * @param passengerTypeCode The unique passenger type code.
     * @param cultureCode The specific culture code.
     
     */
    public apiNskV1ResourcesPassengerTypesByPassengerTypeCodeGet = (passengerTypeCode: string, cultureCode?: string, ) => {
        if (!passengerTypeCode){
            throw new Error('Required parameter passengerTypeCode was null or undefined when calling apiNskV1ResourcesPassengerTypesByPassengerTypeCodeGet.');
        }

        let queryParameters: string[] = [];
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }


            const requestObj: Request<{
                passengerTypeCode: string, cultureCode?: string, 
            }> = {
                url: '/api/nsk/v1/resources/PassengerTypes/${encodeURIComponent(String(passengerTypeCode))}',
                method: 'get',
                data: {
                    passengerTypeCode,cultureCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the collection of passenger type resources.
     * 
     * @param activeOnly Flag indicating to return just active only or all.
     * @param cultureCode The desired culture code to be returned.
     * @param eTag The cache token for this request. Data will not be returned if etag still matches.
     * @param startIndex The start index value for this request.
     * @param itemCount The item count value for this request.
     
     */
    public apiNskV1ResourcesPassengerTypesGet = (activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, ) => {
        if (!activeOnly){
            throw new Error('Required parameter activeOnly was null or undefined when calling apiNskV1ResourcesPassengerTypesGet.');
        }

        let queryParameters: string[] = [];
        if (activeOnly !== undefined) {
            queryParameters.push("activeOnly="+encodeURIComponent(String(activeOnly)));
        }
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }
        if (startIndex !== undefined) {
            queryParameters.push("startIndex="+encodeURIComponent(String(startIndex)));
        }
        if (itemCount !== undefined) {
            queryParameters.push("itemCount="+encodeURIComponent(String(itemCount)));
        }


            const requestObj: Request<{
                activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, 
            }> = {
                url: '/api/nsk/v1/resources/PassengerTypes',
                method: 'get',
                data: {
                    activeOnly,cultureCode,eTag,startIndex,itemCount,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the specific payment method resource.
     * 
     * @param paymentMethodCode The unique payment method code.
     * @param cultureCode The specific culture code.
     
     */
    public apiNskV1ResourcesPaymentMethodsByPaymentMethodCodeGet = (paymentMethodCode: string, cultureCode?: string, ) => {
        if (!paymentMethodCode){
            throw new Error('Required parameter paymentMethodCode was null or undefined when calling apiNskV1ResourcesPaymentMethodsByPaymentMethodCodeGet.');
        }

        let queryParameters: string[] = [];
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }


            const requestObj: Request<{
                paymentMethodCode: string, cultureCode?: string, 
            }> = {
                url: '/api/nsk/v1/resources/PaymentMethods/${encodeURIComponent(String(paymentMethodCode))}',
                method: 'get',
                data: {
                    paymentMethodCode,cultureCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the collection of payment method resources.
     * 
     * @param activeOnly Flag indicating to return just active only or all.
     * @param cultureCode The desired culture code to be returned.
     * @param eTag The cache token for this request. Data will not be returned if etag still matches.
     * @param startIndex The start index value for this request.
     * @param itemCount The item count value for this request.
     
     */
    public apiNskV1ResourcesPaymentMethodsGet = (activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, ) => {
        if (!activeOnly){
            throw new Error('Required parameter activeOnly was null or undefined when calling apiNskV1ResourcesPaymentMethodsGet.');
        }

        let queryParameters: string[] = [];
        if (activeOnly !== undefined) {
            queryParameters.push("activeOnly="+encodeURIComponent(String(activeOnly)));
        }
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }
        if (startIndex !== undefined) {
            queryParameters.push("startIndex="+encodeURIComponent(String(startIndex)));
        }
        if (itemCount !== undefined) {
            queryParameters.push("itemCount="+encodeURIComponent(String(itemCount)));
        }


            const requestObj: Request<{
                activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, 
            }> = {
                url: '/api/nsk/v1/resources/PaymentMethods',
                method: 'get',
                data: {
                    activeOnly,cultureCode,eTag,startIndex,itemCount,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the specific person attachment resource.
     * 
     * @param personAttachmentTypeCode The unique person attachment type code.
     * @param cultureCode The specific culture code.
     
     */
    public apiNskV1ResourcesPersonAttachmentTypesByPersonAttachmentTypeCodeGet = (personAttachmentTypeCode: string, cultureCode?: string, ) => {
        if (!personAttachmentTypeCode){
            throw new Error('Required parameter personAttachmentTypeCode was null or undefined when calling apiNskV1ResourcesPersonAttachmentTypesByPersonAttachmentTypeCodeGet.');
        }

        let queryParameters: string[] = [];
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }


            const requestObj: Request<{
                personAttachmentTypeCode: string, cultureCode?: string, 
            }> = {
                url: '/api/nsk/v1/resources/PersonAttachmentTypes/${encodeURIComponent(String(personAttachmentTypeCode))}',
                method: 'get',
                data: {
                    personAttachmentTypeCode,cultureCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the collection of person attachment type resources.
     * 
     * @param activeOnly Flag indicating to return just active only or all.
     * @param cultureCode The desired culture code to be returned.
     * @param eTag The cache token for this request. Data will not be returned if etag still matches.
     * @param startIndex The start index value for this request.
     * @param itemCount The item count value for this request.
     
     */
    public apiNskV1ResourcesPersonAttachmentTypesGet = (activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, ) => {
        if (!activeOnly){
            throw new Error('Required parameter activeOnly was null or undefined when calling apiNskV1ResourcesPersonAttachmentTypesGet.');
        }

        let queryParameters: string[] = [];
        if (activeOnly !== undefined) {
            queryParameters.push("activeOnly="+encodeURIComponent(String(activeOnly)));
        }
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }
        if (startIndex !== undefined) {
            queryParameters.push("startIndex="+encodeURIComponent(String(startIndex)));
        }
        if (itemCount !== undefined) {
            queryParameters.push("itemCount="+encodeURIComponent(String(itemCount)));
        }


            const requestObj: Request<{
                activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, 
            }> = {
                url: '/api/nsk/v1/resources/PersonAttachmentTypes',
                method: 'get',
                data: {
                    activeOnly,cultureCode,eTag,startIndex,itemCount,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the specific person information type resource.
     * 
     * @param personInformationTypeCode The unique person information type code.
     * @param cultureCode The specific culture code.
     
     */
    public apiNskV1ResourcesPersonInformationTypesByPersonInformationTypeCodeGet = (personInformationTypeCode: string, cultureCode?: string, ) => {
        if (!personInformationTypeCode){
            throw new Error('Required parameter personInformationTypeCode was null or undefined when calling apiNskV1ResourcesPersonInformationTypesByPersonInformationTypeCodeGet.');
        }

        let queryParameters: string[] = [];
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }


            const requestObj: Request<{
                personInformationTypeCode: string, cultureCode?: string, 
            }> = {
                url: '/api/nsk/v1/resources/PersonInformationTypes/${encodeURIComponent(String(personInformationTypeCode))}',
                method: 'get',
                data: {
                    personInformationTypeCode,cultureCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the collection of person information type resources.
     * 
     * @param activeOnly Flag indicating to return just active only or all.
     * @param cultureCode The desired culture code to be returned.
     * @param eTag The cache token for this request. Data will not be returned if etag still matches.
     * @param startIndex The start index value for this request.
     * @param itemCount The item count value for this request.
     
     */
    public apiNskV1ResourcesPersonInformationTypesGet = (activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, ) => {
        if (!activeOnly){
            throw new Error('Required parameter activeOnly was null or undefined when calling apiNskV1ResourcesPersonInformationTypesGet.');
        }

        let queryParameters: string[] = [];
        if (activeOnly !== undefined) {
            queryParameters.push("activeOnly="+encodeURIComponent(String(activeOnly)));
        }
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }
        if (startIndex !== undefined) {
            queryParameters.push("startIndex="+encodeURIComponent(String(startIndex)));
        }
        if (itemCount !== undefined) {
            queryParameters.push("itemCount="+encodeURIComponent(String(itemCount)));
        }


            const requestObj: Request<{
                activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, 
            }> = {
                url: '/api/nsk/v1/resources/PersonInformationTypes',
                method: 'get',
                data: {
                    activeOnly,cultureCode,eTag,startIndex,itemCount,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the specific phone number type resource.
     * 
     * @param phoneTypeCode The unique phone type.
     * @param cultureCode The specific culture code.
     
     */
    public apiNskV1ResourcesPhoneTypesByPhoneTypeCodeGet = (phoneTypeCode: string, cultureCode?: string, ) => {
        if (!phoneTypeCode){
            throw new Error('Required parameter phoneTypeCode was null or undefined when calling apiNskV1ResourcesPhoneTypesByPhoneTypeCodeGet.');
        }

        let queryParameters: string[] = [];
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }


            const requestObj: Request<{
                phoneTypeCode: string, cultureCode?: string, 
            }> = {
                url: '/api/nsk/v1/resources/PhoneTypes/${encodeURIComponent(String(phoneTypeCode))}',
                method: 'get',
                data: {
                    phoneTypeCode,cultureCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the collection of phone number type resources.
     * 
     * @param activeOnly Flag indicating to return just active only or all.
     * @param cultureCode The desired culture code to be returned.
     * @param eTag The cache token for this request. Data will not be returned if etag still matches.
     * @param startIndex The start index value for this request.
     * @param itemCount The item count value for this request.
     
     */
    public apiNskV1ResourcesPhoneTypesGet = (activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, ) => {
        if (!activeOnly){
            throw new Error('Required parameter activeOnly was null or undefined when calling apiNskV1ResourcesPhoneTypesGet.');
        }

        let queryParameters: string[] = [];
        if (activeOnly !== undefined) {
            queryParameters.push("activeOnly="+encodeURIComponent(String(activeOnly)));
        }
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }
        if (startIndex !== undefined) {
            queryParameters.push("startIndex="+encodeURIComponent(String(startIndex)));
        }
        if (itemCount !== undefined) {
            queryParameters.push("itemCount="+encodeURIComponent(String(itemCount)));
        }


            const requestObj: Request<{
                activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, 
            }> = {
                url: '/api/nsk/v1/resources/PhoneTypes',
                method: 'get',
                data: {
                    activeOnly,cultureCode,eTag,startIndex,itemCount,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the specific product class resource.
     * 
     * @param productClassCode 
     * @param cultureCode 
     
     */
    public apiNskV1ResourcesProductClassesByProductClassCodeGet = (productClassCode: string, cultureCode?: string, ) => {
        if (!productClassCode){
            throw new Error('Required parameter productClassCode was null or undefined when calling apiNskV1ResourcesProductClassesByProductClassCodeGet.');
        }

        let queryParameters: string[] = [];
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }


            const requestObj: Request<{
                productClassCode: string, cultureCode?: string, 
            }> = {
                url: '/api/nsk/v1/resources/ProductClasses/${encodeURIComponent(String(productClassCode))}',
                method: 'get',
                data: {
                    productClassCode,cultureCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the collection of product class resources.
     * 
     * @param activeOnly Flag indicating to return just active only or all.
     * @param cultureCode The desired culture code to be returned.
     * @param eTag The cache token for this request. Data will not be returned if etag still matches.
     * @param startIndex The start index value for this request.
     * @param itemCount The item count value for this request.
     
     */
    public apiNskV1ResourcesProductClassesGet = (activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, ) => {
        if (!activeOnly){
            throw new Error('Required parameter activeOnly was null or undefined when calling apiNskV1ResourcesProductClassesGet.');
        }

        let queryParameters: string[] = [];
        if (activeOnly !== undefined) {
            queryParameters.push("activeOnly="+encodeURIComponent(String(activeOnly)));
        }
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }
        if (startIndex !== undefined) {
            queryParameters.push("startIndex="+encodeURIComponent(String(startIndex)));
        }
        if (itemCount !== undefined) {
            queryParameters.push("itemCount="+encodeURIComponent(String(itemCount)));
        }


            const requestObj: Request<{
                activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, 
            }> = {
                url: '/api/nsk/v1/resources/ProductClasses',
                method: 'get',
                data: {
                    activeOnly,cultureCode,eTag,startIndex,itemCount,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the specific promotion setting type resource.
     * 
     * @param promotionSettingsTypeCode 
     * @param cultureCode 
     
     */
    public apiNskV1ResourcesPromotionSettingTypesByPromotionSettingsTypeCodeGet = (promotionSettingsTypeCode: string, cultureCode?: string, ) => {
        if (!promotionSettingsTypeCode){
            throw new Error('Required parameter promotionSettingsTypeCode was null or undefined when calling apiNskV1ResourcesPromotionSettingTypesByPromotionSettingsTypeCodeGet.');
        }

        let queryParameters: string[] = [];
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }


            const requestObj: Request<{
                promotionSettingsTypeCode: string, cultureCode?: string, 
            }> = {
                url: '/api/nsk/v1/resources/PromotionSettingTypes/${encodeURIComponent(String(promotionSettingsTypeCode))}',
                method: 'get',
                data: {
                    promotionSettingsTypeCode,cultureCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the collection of promotion setting type resources.
     * 
     * @param activeOnly Flag indicating to return just active only or all.
     * @param cultureCode The desired culture code to be returned.
     * @param eTag The cache token for this request. Data will not be returned if etag still matches.
     * @param startIndex The start index value for this request.
     * @param itemCount The item count value for this request.
     
     */
    public apiNskV1ResourcesPromotionSettingTypesGet = (activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, ) => {
        if (!activeOnly){
            throw new Error('Required parameter activeOnly was null or undefined when calling apiNskV1ResourcesPromotionSettingTypesGet.');
        }

        let queryParameters: string[] = [];
        if (activeOnly !== undefined) {
            queryParameters.push("activeOnly="+encodeURIComponent(String(activeOnly)));
        }
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }
        if (startIndex !== undefined) {
            queryParameters.push("startIndex="+encodeURIComponent(String(startIndex)));
        }
        if (itemCount !== undefined) {
            queryParameters.push("itemCount="+encodeURIComponent(String(itemCount)));
        }


            const requestObj: Request<{
                activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, 
            }> = {
                url: '/api/nsk/v1/resources/PromotionSettingTypes',
                method: 'get',
                data: {
                    activeOnly,cultureCode,eTag,startIndex,itemCount,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the specific province state resource.
     * 
     * @param provinceStateCode The unique province state code.
     * @param cultureCode The specific culture code.
     
     */
    public apiNskV1ResourcesProvinceStatesByProvinceStateCodeGet = (provinceStateCode: string, cultureCode?: string, ) => {
        if (!provinceStateCode){
            throw new Error('Required parameter provinceStateCode was null or undefined when calling apiNskV1ResourcesProvinceStatesByProvinceStateCodeGet.');
        }

        let queryParameters: string[] = [];
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }


            const requestObj: Request<{
                provinceStateCode: string, cultureCode?: string, 
            }> = {
                url: '/api/nsk/v1/resources/ProvinceStates/${encodeURIComponent(String(provinceStateCode))}',
                method: 'get',
                data: {
                    provinceStateCode,cultureCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the collection of province state resources.
     * 
     * @param activeOnly Flag indicating to return just active only or all.
     * @param cultureCode The desired culture code to be returned.
     * @param eTag The cache token for this request. Data will not be returned if etag still matches.
     * @param startIndex The start index value for this request.
     * @param itemCount The item count value for this request.
     
     */
    public apiNskV1ResourcesProvinceStatesGet = (activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, ) => {
        if (!activeOnly){
            throw new Error('Required parameter activeOnly was null or undefined when calling apiNskV1ResourcesProvinceStatesGet.');
        }

        let queryParameters: string[] = [];
        if (activeOnly !== undefined) {
            queryParameters.push("activeOnly="+encodeURIComponent(String(activeOnly)));
        }
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }
        if (startIndex !== undefined) {
            queryParameters.push("startIndex="+encodeURIComponent(String(startIndex)));
        }
        if (itemCount !== undefined) {
            queryParameters.push("itemCount="+encodeURIComponent(String(itemCount)));
        }


            const requestObj: Request<{
                activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, 
            }> = {
                url: '/api/nsk/v1/resources/ProvinceStates',
                method: 'get',
                data: {
                    activeOnly,cultureCode,eTag,startIndex,itemCount,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets a response with a single QueueCategory that match the given parameters.
     * 
     * @param queueCategoryCode Queue Category Code being requested.
     * @param cultureCode [Optional] The culture code for the resources.
     
     */
    public apiNskV1ResourcesQueueCategoriesByQueueCategoryCodeGet = (queueCategoryCode: string, cultureCode?: string, ) => {
        if (!queueCategoryCode){
            throw new Error('Required parameter queueCategoryCode was null or undefined when calling apiNskV1ResourcesQueueCategoriesByQueueCategoryCodeGet.');
        }

        let queryParameters: string[] = [];
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }


            const requestObj: Request<{
                queueCategoryCode: string, cultureCode?: string, 
            }> = {
                url: '/api/nsk/v1/resources/queue/categories/${encodeURIComponent(String(queueCategoryCode))}',
                method: 'get',
                data: {
                    queueCategoryCode,cultureCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets a response with a list of QueueCategories that match the given parameters.
     * 
     * @param activeOnly Flag indicating to return just active only or all.
     * @param cultureCode The desired culture code to be returned.
     * @param eTag The cache token for this request. Data will not be returned if etag still matches.
     * @param startIndex The start index value for this request.
     * @param itemCount The item count value for this request.
     
     */
    public apiNskV1ResourcesQueueCategoriesGet = (activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, ) => {
        if (!activeOnly){
            throw new Error('Required parameter activeOnly was null or undefined when calling apiNskV1ResourcesQueueCategoriesGet.');
        }

        let queryParameters: string[] = [];
        if (activeOnly !== undefined) {
            queryParameters.push("activeOnly="+encodeURIComponent(String(activeOnly)));
        }
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }
        if (startIndex !== undefined) {
            queryParameters.push("startIndex="+encodeURIComponent(String(startIndex)));
        }
        if (itemCount !== undefined) {
            queryParameters.push("itemCount="+encodeURIComponent(String(itemCount)));
        }


            const requestObj: Request<{
                activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, 
            }> = {
                url: '/api/nsk/v1/resources/queue/categories',
                method: 'get',
                data: {
                    activeOnly,cultureCode,eTag,startIndex,itemCount,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves a specific reminder time resource that contains valid times for a passenger travel notification timed  event.
     * 
     * @param timedEventType The timed event type.
     
     */
    public apiNskV1ResourcesReminderTimesByTimedEventTypeGet = (timedEventType: 'Departure' | 'Arrival', ) => {
        if (!timedEventType){
            throw new Error('Required parameter timedEventType was null or undefined when calling apiNskV1ResourcesReminderTimesByTimedEventTypeGet.');
        }


            const requestObj: Request<{
                timedEventType: 'Departure' | 'Arrival', 
            }> = {
                url: '/api/nsk/v1/resources/reminderTimes/${encodeURIComponent(String(timedEventType))}',
                method: 'get',
                data: {
                    timedEventType,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the collection of reminder time resource that contains valid times for all passenger travel notification  timed events.
     * 
     * @param eTag The unique etag ID.
     
     */
    public apiNskV1ResourcesReminderTimesGet = (eTag?: string, ) => {
        let queryParameters: string[] = [];
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }


            const requestObj: Request<{
                eTag?: string, 
            }> = {
                url: '/api/nsk/v1/resources/reminderTimes',
                method: 'get',
                data: {
                    eTag,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the specific role setting resource.
     * 
     * @param roleSettingTypeCode The unique role setting type code.
     
     */
    public apiNskV1ResourcesRoleSettingTypesByRoleSettingTypeCodeGet = (roleSettingTypeCode: string, ) => {
        if (!roleSettingTypeCode){
            throw new Error('Required parameter roleSettingTypeCode was null or undefined when calling apiNskV1ResourcesRoleSettingTypesByRoleSettingTypeCodeGet.');
        }


            const requestObj: Request<{
                roleSettingTypeCode: string, 
            }> = {
                url: '/api/nsk/v1/resources/RoleSettingTypes/${encodeURIComponent(String(roleSettingTypeCode))}',
                method: 'get',
                data: {
                    roleSettingTypeCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the collection of role setting resources.
     * 
     * @param activeOnly Flag indicating to return just active only or all.
     * @param cultureCode The desired culture code to be returned.
     * @param eTag The cache token for this request. Data will not be returned if etag still matches.
     * @param startIndex The start index value for this request.
     * @param itemCount The item count value for this request.
     
     */
    public apiNskV1ResourcesRoleSettingTypesGet = (activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, ) => {
        if (!activeOnly){
            throw new Error('Required parameter activeOnly was null or undefined when calling apiNskV1ResourcesRoleSettingTypesGet.');
        }

        let queryParameters: string[] = [];
        if (activeOnly !== undefined) {
            queryParameters.push("activeOnly="+encodeURIComponent(String(activeOnly)));
        }
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }
        if (startIndex !== undefined) {
            queryParameters.push("startIndex="+encodeURIComponent(String(startIndex)));
        }
        if (itemCount !== undefined) {
            queryParameters.push("itemCount="+encodeURIComponent(String(itemCount)));
        }


            const requestObj: Request<{
                activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, 
            }> = {
                url: '/api/nsk/v1/resources/RoleSettingTypes',
                method: 'get',
                data: {
                    activeOnly,cultureCode,eTag,startIndex,itemCount,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the resource.
     * 
     * @param roleCode The unique role code.
     
     */
    public apiNskV1ResourcesRolesByRoleCodeGet = (roleCode: string, ) => {
        if (!roleCode){
            throw new Error('Required parameter roleCode was null or undefined when calling apiNskV1ResourcesRolesByRoleCodeGet.');
        }


            const requestObj: Request<{
                roleCode: string, 
            }> = {
                url: '/api/nsk/v1/resources/roles/${encodeURIComponent(String(roleCode))}',
                method: 'get',
                data: {
                    roleCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the resources.
     * 
     * @param eTag The unique etag ID.
     
     */
    public apiNskV1ResourcesRolesGet = (eTag?: string, ) => {
        let queryParameters: string[] = [];
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }


            const requestObj: Request<{
                eTag?: string, 
            }> = {
                url: '/api/nsk/v1/resources/roles',
                method: 'get',
                data: {
                    eTag,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the localizations.
     * 
     * @param cultureCode The desired culture code to be returned.
     * @param eTag The cache token for this request. Data will not be returned if etag still matches.
     * @param startIndex The start index value for this request.
     * @param itemCount The item count value for this request.
     
     */
    public apiNskV1ResourcesSearchTypesGet = (cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, ) => {
        let queryParameters: string[] = [];
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }
        if (startIndex !== undefined) {
            queryParameters.push("startIndex="+encodeURIComponent(String(startIndex)));
        }
        if (itemCount !== undefined) {
            queryParameters.push("itemCount="+encodeURIComponent(String(itemCount)));
        }


            const requestObj: Request<{
                cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, 
            }> = {
                url: '/api/nsk/v1/resources/searchTypes',
                method: 'get',
                data: {
                    cultureCode,eTag,startIndex,itemCount,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves resource setting data based on the accept content type.
     * This is a post to easily allow special path characters.
     * @param request The resource settings request.
     * @param eTag ETag for caching.
     
     */
    public apiNskV1ResourcesSettingsDataPost = (request?: SettingsCategoryRequest, eTag?: string, ) => {
        let queryParameters: string[] = [];
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }


            const requestObj: Request<{
                request?: SettingsCategoryRequest, eTag?: string, 
            }> = {
                url: '/api/nsk/v1/resources/settings/data',
                method: 'post',
                data: {
                    request,eTag,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves a resource setting and its related information.
     * This is a post to easily allow special path characters.  See /resources/settings/data to avoid manually parsing the data.
     * @param request The resource settings request.
     * @param eTag ETag for caching.
     
     */
    public apiNskV1ResourcesSettingsPost = (request?: SettingsCategoryRequest, eTag?: string, ) => {
        let queryParameters: string[] = [];
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }


            const requestObj: Request<{
                request?: SettingsCategoryRequest, eTag?: string, 
            }> = {
                url: '/api/nsk/v1/resources/settings',
                method: 'post',
                data: {
                    request,eTag,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the specific shopping attribute group resource.
     * 
     * @param shoppingAttributeGroupCode The unique shopping attribute group code.
     * @param cultureCode The specific culture code.
     
     */
    public apiNskV1ResourcesShoppingAttributeGroupsByShoppingAttributeGroupCodeGet = (shoppingAttributeGroupCode: string, cultureCode?: string, ) => {
        if (!shoppingAttributeGroupCode){
            throw new Error('Required parameter shoppingAttributeGroupCode was null or undefined when calling apiNskV1ResourcesShoppingAttributeGroupsByShoppingAttributeGroupCodeGet.');
        }

        let queryParameters: string[] = [];
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }


            const requestObj: Request<{
                shoppingAttributeGroupCode: string, cultureCode?: string, 
            }> = {
                url: '/api/nsk/v1/resources/ShoppingAttributeGroups/${encodeURIComponent(String(shoppingAttributeGroupCode))}',
                method: 'get',
                data: {
                    shoppingAttributeGroupCode,cultureCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the collection of shopping attribute group resources.
     * 
     * @param activeOnly Flag indicating to return just active only or all.
     * @param cultureCode The desired culture code to be returned.
     * @param eTag The cache token for this request. Data will not be returned if etag still matches.
     * @param startIndex The start index value for this request.
     * @param itemCount The item count value for this request.
     
     */
    public apiNskV1ResourcesShoppingAttributeGroupsGet = (activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, ) => {
        if (!activeOnly){
            throw new Error('Required parameter activeOnly was null or undefined when calling apiNskV1ResourcesShoppingAttributeGroupsGet.');
        }

        let queryParameters: string[] = [];
        if (activeOnly !== undefined) {
            queryParameters.push("activeOnly="+encodeURIComponent(String(activeOnly)));
        }
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }
        if (startIndex !== undefined) {
            queryParameters.push("startIndex="+encodeURIComponent(String(startIndex)));
        }
        if (itemCount !== undefined) {
            queryParameters.push("itemCount="+encodeURIComponent(String(itemCount)));
        }


            const requestObj: Request<{
                activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, 
            }> = {
                url: '/api/nsk/v1/resources/ShoppingAttributeGroups',
                method: 'get',
                data: {
                    activeOnly,cultureCode,eTag,startIndex,itemCount,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the specific shopping attribute resource.
     * 
     * @param shoppingAttributeCode The unique shopping attribute code.
     * @param cultureCode The specific culture code.
     
     */
    public apiNskV1ResourcesShoppingAttributesByShoppingAttributeCodeGet = (shoppingAttributeCode: string, cultureCode?: string, ) => {
        if (!shoppingAttributeCode){
            throw new Error('Required parameter shoppingAttributeCode was null or undefined when calling apiNskV1ResourcesShoppingAttributesByShoppingAttributeCodeGet.');
        }

        let queryParameters: string[] = [];
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }


            const requestObj: Request<{
                shoppingAttributeCode: string, cultureCode?: string, 
            }> = {
                url: '/api/nsk/v1/resources/ShoppingAttributes/${encodeURIComponent(String(shoppingAttributeCode))}',
                method: 'get',
                data: {
                    shoppingAttributeCode,cultureCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the collection of shopping attribute resources.
     * 
     * @param activeOnly Flag indicating to return just active only or all.
     * @param cultureCode The desired culture code to be returned.
     * @param eTag The cache token for this request. Data will not be returned if etag still matches.
     * @param startIndex The start index value for this request.
     * @param itemCount The item count value for this request.
     
     */
    public apiNskV1ResourcesShoppingAttributesGet = (activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, ) => {
        if (!activeOnly){
            throw new Error('Required parameter activeOnly was null or undefined when calling apiNskV1ResourcesShoppingAttributesGet.');
        }

        let queryParameters: string[] = [];
        if (activeOnly !== undefined) {
            queryParameters.push("activeOnly="+encodeURIComponent(String(activeOnly)));
        }
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }
        if (startIndex !== undefined) {
            queryParameters.push("startIndex="+encodeURIComponent(String(startIndex)));
        }
        if (itemCount !== undefined) {
            queryParameters.push("itemCount="+encodeURIComponent(String(itemCount)));
        }


            const requestObj: Request<{
                activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, 
            }> = {
                url: '/api/nsk/v1/resources/ShoppingAttributes',
                method: 'get',
                data: {
                    activeOnly,cultureCode,eTag,startIndex,itemCount,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves a specific single sign on provider.
     * 
     * @param providerName The single sign on provider name.
     
     */
    public apiNskV1ResourcesSingleSignOnProviderByProviderNameGet = (providerName: string, ) => {
        if (!providerName){
            throw new Error('Required parameter providerName was null or undefined when calling apiNskV1ResourcesSingleSignOnProviderByProviderNameGet.');
        }


            const requestObj: Request<{
                providerName: string, 
            }> = {
                url: '/api/nsk/v1/resources/singleSignOnProvider/${encodeURIComponent(String(providerName))}',
                method: 'get',
                data: {
                    providerName,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves a list of available single sign on providers.
     * 
     * @param activeOnly Flag indicating to return just active only or all.
     * @param cultureCode The desired culture code to be returned.
     * @param eTag The cache token for this request. Data will not be returned if etag still matches.
     * @param startIndex The start index value for this request.
     * @param itemCount The item count value for this request.
     
     */
    public apiNskV1ResourcesSingleSignOnProviderGet = (activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, ) => {
        if (!activeOnly){
            throw new Error('Required parameter activeOnly was null or undefined when calling apiNskV1ResourcesSingleSignOnProviderGet.');
        }

        let queryParameters: string[] = [];
        if (activeOnly !== undefined) {
            queryParameters.push("activeOnly="+encodeURIComponent(String(activeOnly)));
        }
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }
        if (startIndex !== undefined) {
            queryParameters.push("startIndex="+encodeURIComponent(String(startIndex)));
        }
        if (itemCount !== undefined) {
            queryParameters.push("itemCount="+encodeURIComponent(String(itemCount)));
        }


            const requestObj: Request<{
                activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, 
            }> = {
                url: '/api/nsk/v1/resources/singleSignOnProvider',
                method: 'get',
                data: {
                    activeOnly,cultureCode,eTag,startIndex,itemCount,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the specific ssr group resource.
     * 
     * @param ssrGroupCode 
     * @param cultureCode 
     
     */
    public apiNskV1ResourcesSsrGroupsBySsrGroupCodeGet = (ssrGroupCode: string, cultureCode?: string, ) => {
        if (!ssrGroupCode){
            throw new Error('Required parameter ssrGroupCode was null or undefined when calling apiNskV1ResourcesSsrGroupsBySsrGroupCodeGet.');
        }

        let queryParameters: string[] = [];
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }


            const requestObj: Request<{
                ssrGroupCode: string, cultureCode?: string, 
            }> = {
                url: '/api/nsk/v1/resources/SsrGroups/${encodeURIComponent(String(ssrGroupCode))}',
                method: 'get',
                data: {
                    ssrGroupCode,cultureCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the collection of ssr group resources.
     * 
     * @param activeOnly Flag indicating to return just active only or all.
     * @param cultureCode The desired culture code to be returned.
     * @param eTag The cache token for this request. Data will not be returned if etag still matches.
     * @param startIndex The start index value for this request.
     * @param itemCount The item count value for this request.
     
     */
    public apiNskV1ResourcesSsrGroupsGet = (activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, ) => {
        if (!activeOnly){
            throw new Error('Required parameter activeOnly was null or undefined when calling apiNskV1ResourcesSsrGroupsGet.');
        }

        let queryParameters: string[] = [];
        if (activeOnly !== undefined) {
            queryParameters.push("activeOnly="+encodeURIComponent(String(activeOnly)));
        }
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }
        if (startIndex !== undefined) {
            queryParameters.push("startIndex="+encodeURIComponent(String(startIndex)));
        }
        if (itemCount !== undefined) {
            queryParameters.push("itemCount="+encodeURIComponent(String(itemCount)));
        }


            const requestObj: Request<{
                activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, 
            }> = {
                url: '/api/nsk/v1/resources/SsrGroups',
                method: 'get',
                data: {
                    activeOnly,cultureCode,eTag,startIndex,itemCount,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the specific ssr nest resource.
     * 
     * @param ssrNestCode The unique ssr nest code.
     * @param cultureCode The specific culture code.
     
     */
    public apiNskV1ResourcesSsrNestsBySsrNestCodeGet = (ssrNestCode: string, cultureCode?: string, ) => {
        if (!ssrNestCode){
            throw new Error('Required parameter ssrNestCode was null or undefined when calling apiNskV1ResourcesSsrNestsBySsrNestCodeGet.');
        }

        let queryParameters: string[] = [];
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }


            const requestObj: Request<{
                ssrNestCode: string, cultureCode?: string, 
            }> = {
                url: '/api/nsk/v1/resources/SsrNests/${encodeURIComponent(String(ssrNestCode))}',
                method: 'get',
                data: {
                    ssrNestCode,cultureCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the collection of ssr nest resources.
     * 
     * @param activeOnly Flag indicating to return just active only or all.
     * @param cultureCode The desired culture code to be returned.
     * @param eTag The cache token for this request. Data will not be returned if etag still matches.
     * @param startIndex The start index value for this request.
     * @param itemCount The item count value for this request.
     
     */
    public apiNskV1ResourcesSsrNestsGet = (activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, ) => {
        if (!activeOnly){
            throw new Error('Required parameter activeOnly was null or undefined when calling apiNskV1ResourcesSsrNestsGet.');
        }

        let queryParameters: string[] = [];
        if (activeOnly !== undefined) {
            queryParameters.push("activeOnly="+encodeURIComponent(String(activeOnly)));
        }
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }
        if (startIndex !== undefined) {
            queryParameters.push("startIndex="+encodeURIComponent(String(startIndex)));
        }
        if (itemCount !== undefined) {
            queryParameters.push("itemCount="+encodeURIComponent(String(itemCount)));
        }


            const requestObj: Request<{
                activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, 
            }> = {
                url: '/api/nsk/v1/resources/SsrNests',
                method: 'get',
                data: {
                    activeOnly,cultureCode,eTag,startIndex,itemCount,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the specific ssr restriction result. resource.
     * 
     * @param ssrRestrictionResultCode The unique ssr restriction result code.
     * @param cultureCode The unique culture code.
     
     */
    public apiNskV1ResourcesSsrRestrictionResultsBySsrRestrictionResultCodeGet = (ssrRestrictionResultCode: string, cultureCode?: string, ) => {
        if (!ssrRestrictionResultCode){
            throw new Error('Required parameter ssrRestrictionResultCode was null or undefined when calling apiNskV1ResourcesSsrRestrictionResultsBySsrRestrictionResultCodeGet.');
        }

        let queryParameters: string[] = [];
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }


            const requestObj: Request<{
                ssrRestrictionResultCode: string, cultureCode?: string, 
            }> = {
                url: '/api/nsk/v1/resources/SsrRestrictionResults/${encodeURIComponent(String(ssrRestrictionResultCode))}',
                method: 'get',
                data: {
                    ssrRestrictionResultCode,cultureCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the collection of ssr restriction result resources.
     * 
     * @param activeOnly Flag indicating to return just active only or all.
     * @param cultureCode The desired culture code to be returned.
     * @param eTag The cache token for this request. Data will not be returned if etag still matches.
     * @param startIndex The start index value for this request.
     * @param itemCount The item count value for this request.
     
     */
    public apiNskV1ResourcesSsrRestrictionResultsGet = (activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, ) => {
        if (!activeOnly){
            throw new Error('Required parameter activeOnly was null or undefined when calling apiNskV1ResourcesSsrRestrictionResultsGet.');
        }

        let queryParameters: string[] = [];
        if (activeOnly !== undefined) {
            queryParameters.push("activeOnly="+encodeURIComponent(String(activeOnly)));
        }
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }
        if (startIndex !== undefined) {
            queryParameters.push("startIndex="+encodeURIComponent(String(startIndex)));
        }
        if (itemCount !== undefined) {
            queryParameters.push("itemCount="+encodeURIComponent(String(itemCount)));
        }


            const requestObj: Request<{
                activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, 
            }> = {
                url: '/api/nsk/v1/resources/SsrRestrictionResults',
                method: 'get',
                data: {
                    activeOnly,cultureCode,eTag,startIndex,itemCount,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the specific ssr resource.
     * 
     * @param ssrCode The unique ssr code.
     * @param cultureCode The specific culture code.
     
     */
    public apiNskV1ResourcesSsrsBySsrCodeGet = (ssrCode: string, cultureCode?: string, ) => {
        if (!ssrCode){
            throw new Error('Required parameter ssrCode was null or undefined when calling apiNskV1ResourcesSsrsBySsrCodeGet.');
        }

        let queryParameters: string[] = [];
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }


            const requestObj: Request<{
                ssrCode: string, cultureCode?: string, 
            }> = {
                url: '/api/nsk/v1/resources/Ssrs/${encodeURIComponent(String(ssrCode))}',
                method: 'get',
                data: {
                    ssrCode,cultureCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the collection of ssr resources.
     * 
     * @param activeOnly Flag indicating to return just active only or all.
     * @param cultureCode The desired culture code to be returned.
     * @param eTag The cache token for this request. Data will not be returned if etag still matches.
     * @param startIndex The start index value for this request.
     * @param itemCount The item count value for this request.
     
     */
    public apiNskV1ResourcesSsrsGet = (activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, ) => {
        if (!activeOnly){
            throw new Error('Required parameter activeOnly was null or undefined when calling apiNskV1ResourcesSsrsGet.');
        }

        let queryParameters: string[] = [];
        if (activeOnly !== undefined) {
            queryParameters.push("activeOnly="+encodeURIComponent(String(activeOnly)));
        }
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }
        if (startIndex !== undefined) {
            queryParameters.push("startIndex="+encodeURIComponent(String(startIndex)));
        }
        if (itemCount !== undefined) {
            queryParameters.push("itemCount="+encodeURIComponent(String(itemCount)));
        }


            const requestObj: Request<{
                activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, 
            }> = {
                url: '/api/nsk/v1/resources/Ssrs',
                method: 'get',
                data: {
                    activeOnly,cultureCode,eTag,startIndex,itemCount,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the specific standby priority resource.
     * 
     * @param standByPriorityCode The unique standby priority code.
     * @param cultureCode The specific culture code.
     
     */
    public apiNskV1ResourcesStandByPrioritiesByStandByPriorityCodeGet = (standByPriorityCode: string, cultureCode?: string, ) => {
        if (!standByPriorityCode){
            throw new Error('Required parameter standByPriorityCode was null or undefined when calling apiNskV1ResourcesStandByPrioritiesByStandByPriorityCodeGet.');
        }

        let queryParameters: string[] = [];
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }


            const requestObj: Request<{
                standByPriorityCode: string, cultureCode?: string, 
            }> = {
                url: '/api/nsk/v1/resources/StandByPriorities/${encodeURIComponent(String(standByPriorityCode))}',
                method: 'get',
                data: {
                    standByPriorityCode,cultureCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the collection of standby priority resources.
     * 
     * @param activeOnly Flag indicating to return just active only or all.
     * @param cultureCode The desired culture code to be returned.
     * @param eTag The cache token for this request. Data will not be returned if etag still matches.
     * @param startIndex The start index value for this request.
     * @param itemCount The item count value for this request.
     
     */
    public apiNskV1ResourcesStandByPrioritiesGet = (activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, ) => {
        if (!activeOnly){
            throw new Error('Required parameter activeOnly was null or undefined when calling apiNskV1ResourcesStandByPrioritiesGet.');
        }

        let queryParameters: string[] = [];
        if (activeOnly !== undefined) {
            queryParameters.push("activeOnly="+encodeURIComponent(String(activeOnly)));
        }
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }
        if (startIndex !== undefined) {
            queryParameters.push("startIndex="+encodeURIComponent(String(startIndex)));
        }
        if (itemCount !== undefined) {
            queryParameters.push("itemCount="+encodeURIComponent(String(itemCount)));
        }


            const requestObj: Request<{
                activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, 
            }> = {
                url: '/api/nsk/v1/resources/StandByPriorities',
                method: 'get',
                data: {
                    activeOnly,cultureCode,eTag,startIndex,itemCount,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the specific station category resource.
     * 
     * @param stationCategoryCode The unique station category code.
     * @param cultureCode The specific culture code.
     
     */
    public apiNskV1ResourcesStationCategoriesByStationCategoryCodeGet = (stationCategoryCode: string, cultureCode?: string, ) => {
        if (!stationCategoryCode){
            throw new Error('Required parameter stationCategoryCode was null or undefined when calling apiNskV1ResourcesStationCategoriesByStationCategoryCodeGet.');
        }

        let queryParameters: string[] = [];
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }


            const requestObj: Request<{
                stationCategoryCode: string, cultureCode?: string, 
            }> = {
                url: '/api/nsk/v1/resources/StationCategories/${encodeURIComponent(String(stationCategoryCode))}',
                method: 'get',
                data: {
                    stationCategoryCode,cultureCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the collection of station category resources.
     * 
     * @param activeOnly Flag indicating to return just active only or all.
     * @param cultureCode The desired culture code to be returned.
     * @param eTag The cache token for this request. Data will not be returned if etag still matches.
     * @param startIndex The start index value for this request.
     * @param itemCount The item count value for this request.
     
     */
    public apiNskV1ResourcesStationCategoriesGet = (activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, ) => {
        if (!activeOnly){
            throw new Error('Required parameter activeOnly was null or undefined when calling apiNskV1ResourcesStationCategoriesGet.');
        }

        let queryParameters: string[] = [];
        if (activeOnly !== undefined) {
            queryParameters.push("activeOnly="+encodeURIComponent(String(activeOnly)));
        }
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }
        if (startIndex !== undefined) {
            queryParameters.push("startIndex="+encodeURIComponent(String(startIndex)));
        }
        if (itemCount !== undefined) {
            queryParameters.push("itemCount="+encodeURIComponent(String(itemCount)));
        }


            const requestObj: Request<{
                activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, 
            }> = {
                url: '/api/nsk/v1/resources/StationCategories',
                method: 'get',
                data: {
                    activeOnly,cultureCode,eTag,startIndex,itemCount,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Get the station details.
     * Note this endpoint is not cached like other resource endpoints.
     * @param stationCode The station code.
     
     */
    public apiNskV1ResourcesStationsByStationCodeDetailsGet = (stationCode: string, ) => {
        if (!stationCode){
            throw new Error('Required parameter stationCode was null or undefined when calling apiNskV1ResourcesStationsByStationCodeDetailsGet.');
        }


            const requestObj: Request<{
                stationCode: string, 
            }> = {
                url: '/api/nsk/v1/resources/stations/${encodeURIComponent(String(stationCode))}/details',
                method: 'get',
                data: {
                    stationCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the specific station resource.
     * 
     * @param stationCode The unique station code.
     * @param cultureCode The specific culture code.
     * @param eTag The eTag.
     
     */
    public apiNskV1ResourcesStationsByStationCodeGet = (stationCode: string, cultureCode?: string, eTag?: string, ) => {
        if (!stationCode){
            throw new Error('Required parameter stationCode was null or undefined when calling apiNskV1ResourcesStationsByStationCodeGet.');
        }

        let queryParameters: string[] = [];
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }


            const requestObj: Request<{
                stationCode: string, cultureCode?: string, eTag?: string, 
            }> = {
                url: '/api/nsk/v1/resources/Stations/${encodeURIComponent(String(stationCode))}',
                method: 'get',
                data: {
                    stationCode,cultureCode,eTag,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets a response with stations filtered by category.
     * This endpoint is resource intensive until cached.
     * @param stationCategoryCode 
     * @param activeOnly Flag indicating to return just active only or all.
     * @param cultureCode The desired culture code to be returned.
     * @param eTag The cache token for this request. Data will not be returned if etag still matches.
     * @param startIndex The start index value for this request.
     * @param itemCount The item count value for this request.
     
     */
    public apiNskV1ResourcesStationsCategoryByStationCategoryCodeGet = (stationCategoryCode: string, activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, ) => {
        if (!stationCategoryCode){
            throw new Error('Required parameter stationCategoryCode was null or undefined when calling apiNskV1ResourcesStationsCategoryByStationCategoryCodeGet.');
        }

        if (!activeOnly){
            throw new Error('Required parameter activeOnly was null or undefined when calling apiNskV1ResourcesStationsCategoryByStationCategoryCodeGet.');
        }

        let queryParameters: string[] = [];
        if (activeOnly !== undefined) {
            queryParameters.push("activeOnly="+encodeURIComponent(String(activeOnly)));
        }
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }
        if (startIndex !== undefined) {
            queryParameters.push("startIndex="+encodeURIComponent(String(startIndex)));
        }
        if (itemCount !== undefined) {
            queryParameters.push("itemCount="+encodeURIComponent(String(itemCount)));
        }


            const requestObj: Request<{
                stationCategoryCode: string, activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, 
            }> = {
                url: '/api/nsk/v1/resources/stations/category/${encodeURIComponent(String(stationCategoryCode))}',
                method: 'get',
                data: {
                    stationCategoryCode,activeOnly,cultureCode,eTag,startIndex,itemCount,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the collection of station resources.
     * 
     * @param activeOnly Flag indicating to return just active only or all.
     * @param cultureCode The desired culture code to be returned.
     * @param eTag The cache token for this request. Data will not be returned if etag still matches.
     * @param startIndex The start index value for this request.
     * @param itemCount The item count value for this request.
     
     */
    public apiNskV1ResourcesStationsGet = (activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, ) => {
        if (!activeOnly){
            throw new Error('Required parameter activeOnly was null or undefined when calling apiNskV1ResourcesStationsGet.');
        }

        let queryParameters: string[] = [];
        if (activeOnly !== undefined) {
            queryParameters.push("activeOnly="+encodeURIComponent(String(activeOnly)));
        }
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }
        if (startIndex !== undefined) {
            queryParameters.push("startIndex="+encodeURIComponent(String(startIndex)));
        }
        if (itemCount !== undefined) {
            queryParameters.push("itemCount="+encodeURIComponent(String(itemCount)));
        }


            const requestObj: Request<{
                activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, 
            }> = {
                url: '/api/nsk/v1/resources/Stations',
                method: 'get',
                data: {
                    activeOnly,cultureCode,eTag,startIndex,itemCount,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the specific sub zone resource.
     * 
     * @param subZoneCode The unique sub zone code.
     * @param cultureCode The specific culture code.
     
     */
    public apiNskV1ResourcesSubZonesBySubZoneCodeGet = (subZoneCode: string, cultureCode?: string, ) => {
        if (!subZoneCode){
            throw new Error('Required parameter subZoneCode was null or undefined when calling apiNskV1ResourcesSubZonesBySubZoneCodeGet.');
        }

        let queryParameters: string[] = [];
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }


            const requestObj: Request<{
                subZoneCode: string, cultureCode?: string, 
            }> = {
                url: '/api/nsk/v1/resources/SubZones/${encodeURIComponent(String(subZoneCode))}',
                method: 'get',
                data: {
                    subZoneCode,cultureCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the collection of sub zone resources.
     * 
     * @param activeOnly Flag indicating to return just active only or all.
     * @param cultureCode The desired culture code to be returned.
     * @param eTag The cache token for this request. Data will not be returned if etag still matches.
     * @param startIndex The start index value for this request.
     * @param itemCount The item count value for this request.
     
     */
    public apiNskV1ResourcesSubZonesGet = (activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, ) => {
        if (!activeOnly){
            throw new Error('Required parameter activeOnly was null or undefined when calling apiNskV1ResourcesSubZonesGet.');
        }

        let queryParameters: string[] = [];
        if (activeOnly !== undefined) {
            queryParameters.push("activeOnly="+encodeURIComponent(String(activeOnly)));
        }
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }
        if (startIndex !== undefined) {
            queryParameters.push("startIndex="+encodeURIComponent(String(startIndex)));
        }
        if (itemCount !== undefined) {
            queryParameters.push("itemCount="+encodeURIComponent(String(itemCount)));
        }


            const requestObj: Request<{
                activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, 
            }> = {
                url: '/api/nsk/v1/resources/SubZones',
                method: 'get',
                data: {
                    activeOnly,cultureCode,eTag,startIndex,itemCount,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the specific suffix resource.
     * 
     * @param suffixCode The unique suffix code.
     
     */
    public apiNskV1ResourcesSuffixesBySuffixCodeGet = (suffixCode: string, ) => {
        if (!suffixCode){
            throw new Error('Required parameter suffixCode was null or undefined when calling apiNskV1ResourcesSuffixesBySuffixCodeGet.');
        }


            const requestObj: Request<{
                suffixCode: string, 
            }> = {
                url: '/api/nsk/v1/resources/Suffixes/${encodeURIComponent(String(suffixCode))}',
                method: 'get',
                data: {
                    suffixCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the collection of suffix resources.
     * 
     * @param activeOnly Flag indicating to return just active only or all.
     * @param cultureCode The desired culture code to be returned.
     * @param eTag The cache token for this request. Data will not be returned if etag still matches.
     * @param startIndex The start index value for this request.
     * @param itemCount The item count value for this request.
     
     */
    public apiNskV1ResourcesSuffixesGet = (activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, ) => {
        if (!activeOnly){
            throw new Error('Required parameter activeOnly was null or undefined when calling apiNskV1ResourcesSuffixesGet.');
        }

        let queryParameters: string[] = [];
        if (activeOnly !== undefined) {
            queryParameters.push("activeOnly="+encodeURIComponent(String(activeOnly)));
        }
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }
        if (startIndex !== undefined) {
            queryParameters.push("startIndex="+encodeURIComponent(String(startIndex)));
        }
        if (itemCount !== undefined) {
            queryParameters.push("itemCount="+encodeURIComponent(String(itemCount)));
        }


            const requestObj: Request<{
                activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, 
            }> = {
                url: '/api/nsk/v1/resources/Suffixes',
                method: 'get',
                data: {
                    activeOnly,cultureCode,eTag,startIndex,itemCount,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the specific time zone resource.
     * 
     * @param timeZoneCode The unique time zone code.
     * @param cultureCode The specific culture code.
     * @param eTag The eTag.
     
     */
    public apiNskV1ResourcesTimeZonesByTimeZoneCodeGet = (timeZoneCode: string, cultureCode?: string, eTag?: string, ) => {
        if (!timeZoneCode){
            throw new Error('Required parameter timeZoneCode was null or undefined when calling apiNskV1ResourcesTimeZonesByTimeZoneCodeGet.');
        }

        let queryParameters: string[] = [];
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }


            const requestObj: Request<{
                timeZoneCode: string, cultureCode?: string, eTag?: string, 
            }> = {
                url: '/api/nsk/v1/resources/TimeZones/${encodeURIComponent(String(timeZoneCode))}',
                method: 'get',
                data: {
                    timeZoneCode,cultureCode,eTag,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the collection of time zone resources.
     * 
     * @param activeOnly Flag indicating to return just active only or all.
     * @param cultureCode The desired culture code to be returned.
     * @param eTag The cache token for this request. Data will not be returned if etag still matches.
     * @param startIndex The start index value for this request.
     * @param itemCount The item count value for this request.
     
     */
    public apiNskV1ResourcesTimeZonesGet = (activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, ) => {
        if (!activeOnly){
            throw new Error('Required parameter activeOnly was null or undefined when calling apiNskV1ResourcesTimeZonesGet.');
        }

        let queryParameters: string[] = [];
        if (activeOnly !== undefined) {
            queryParameters.push("activeOnly="+encodeURIComponent(String(activeOnly)));
        }
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }
        if (startIndex !== undefined) {
            queryParameters.push("startIndex="+encodeURIComponent(String(startIndex)));
        }
        if (itemCount !== undefined) {
            queryParameters.push("itemCount="+encodeURIComponent(String(itemCount)));
        }


            const requestObj: Request<{
                activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, 
            }> = {
                url: '/api/nsk/v1/resources/TimeZones',
                method: 'get',
                data: {
                    activeOnly,cultureCode,eTag,startIndex,itemCount,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the specific title resource.
     * 
     * @param titleKey The unique title key.
     
     */
    public apiNskV1ResourcesTitlesByTitleKeyGet = (titleKey: string, ) => {
        if (!titleKey){
            throw new Error('Required parameter titleKey was null or undefined when calling apiNskV1ResourcesTitlesByTitleKeyGet.');
        }


            const requestObj: Request<{
                titleKey: string, 
            }> = {
                url: '/api/nsk/v1/resources/Titles/${encodeURIComponent(String(titleKey))}',
                method: 'get',
                data: {
                    titleKey,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the collection of title resources.
     * 
     * @param activeOnly Flag indicating to return just active only or all.
     * @param cultureCode The desired culture code to be returned.
     * @param eTag The cache token for this request. Data will not be returned if etag still matches.
     * @param startIndex The start index value for this request.
     * @param itemCount The item count value for this request.
     
     */
    public apiNskV1ResourcesTitlesGet = (activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, ) => {
        if (!activeOnly){
            throw new Error('Required parameter activeOnly was null or undefined when calling apiNskV1ResourcesTitlesGet.');
        }

        let queryParameters: string[] = [];
        if (activeOnly !== undefined) {
            queryParameters.push("activeOnly="+encodeURIComponent(String(activeOnly)));
        }
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }
        if (startIndex !== undefined) {
            queryParameters.push("startIndex="+encodeURIComponent(String(startIndex)));
        }
        if (itemCount !== undefined) {
            queryParameters.push("itemCount="+encodeURIComponent(String(itemCount)));
        }


            const requestObj: Request<{
                activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, 
            }> = {
                url: '/api/nsk/v1/resources/Titles',
                method: 'get',
                data: {
                    activeOnly,cultureCode,eTag,startIndex,itemCount,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the specific travel class resource.
     * 
     * @param travelClassCode The unique travel class code.
     * @param cultureCode The specific culture code.
     
     */
    public apiNskV1ResourcesTravelClassesByTravelClassCodeGet = (travelClassCode: string, cultureCode?: string, ) => {
        if (!travelClassCode){
            throw new Error('Required parameter travelClassCode was null or undefined when calling apiNskV1ResourcesTravelClassesByTravelClassCodeGet.');
        }

        let queryParameters: string[] = [];
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }


            const requestObj: Request<{
                travelClassCode: string, cultureCode?: string, 
            }> = {
                url: '/api/nsk/v1/resources/TravelClasses/${encodeURIComponent(String(travelClassCode))}',
                method: 'get',
                data: {
                    travelClassCode,cultureCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the collection of travel class resources.
     * 
     * @param activeOnly Flag indicating to return just active only or all.
     * @param cultureCode The desired culture code to be returned.
     * @param eTag The cache token for this request. Data will not be returned if etag still matches.
     * @param startIndex The start index value for this request.
     * @param itemCount The item count value for this request.
     
     */
    public apiNskV1ResourcesTravelClassesGet = (activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, ) => {
        if (!activeOnly){
            throw new Error('Required parameter activeOnly was null or undefined when calling apiNskV1ResourcesTravelClassesGet.');
        }

        let queryParameters: string[] = [];
        if (activeOnly !== undefined) {
            queryParameters.push("activeOnly="+encodeURIComponent(String(activeOnly)));
        }
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }
        if (startIndex !== undefined) {
            queryParameters.push("startIndex="+encodeURIComponent(String(startIndex)));
        }
        if (itemCount !== undefined) {
            queryParameters.push("itemCount="+encodeURIComponent(String(itemCount)));
        }


            const requestObj: Request<{
                activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, 
            }> = {
                url: '/api/nsk/v1/resources/TravelClasses',
                method: 'get',
                data: {
                    activeOnly,cultureCode,eTag,startIndex,itemCount,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the specific zone resource.
     * 
     * @param zoneCode The unique zone code.
     * @param cultureCode The specific culture code.
     
     */
    public apiNskV1ResourcesZonesByZoneCodeGet = (zoneCode: string, cultureCode?: string, ) => {
        if (!zoneCode){
            throw new Error('Required parameter zoneCode was null or undefined when calling apiNskV1ResourcesZonesByZoneCodeGet.');
        }

        let queryParameters: string[] = [];
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }


            const requestObj: Request<{
                zoneCode: string, cultureCode?: string, 
            }> = {
                url: '/api/nsk/v1/resources/Zones/${encodeURIComponent(String(zoneCode))}',
                method: 'get',
                data: {
                    zoneCode,cultureCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the collection of zone resources.
     * 
     * @param activeOnly Flag indicating to return just active only or all.
     * @param cultureCode The desired culture code to be returned.
     * @param eTag The cache token for this request. Data will not be returned if etag still matches.
     * @param startIndex The start index value for this request.
     * @param itemCount The item count value for this request.
     
     */
    public apiNskV1ResourcesZonesGet = (activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, ) => {
        if (!activeOnly){
            throw new Error('Required parameter activeOnly was null or undefined when calling apiNskV1ResourcesZonesGet.');
        }

        let queryParameters: string[] = [];
        if (activeOnly !== undefined) {
            queryParameters.push("activeOnly="+encodeURIComponent(String(activeOnly)));
        }
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }
        if (startIndex !== undefined) {
            queryParameters.push("startIndex="+encodeURIComponent(String(startIndex)));
        }
        if (itemCount !== undefined) {
            queryParameters.push("itemCount="+encodeURIComponent(String(itemCount)));
        }


            const requestObj: Request<{
                activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, 
            }> = {
                url: '/api/nsk/v1/resources/Zones',
                method: 'get',
                data: {
                    activeOnly,cultureCode,eTag,startIndex,itemCount,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Gets the travel commerce vendors.
     * 
     * @param type The type of search performed (Default &#x3D; 0, Insurance &#x3D; 1, Activity &#x3D; 2, Hotel &#x3D; 3, Auto &#x3D; 4).
     * @param cultureCode The specific culture code.
     * @param eTag The cache eTag for this request.
     
     */
    public apiNskV2ResourcesAddOnsVendorsGet = (type: 'Default' | 'Insurance' | 'Activity' | 'Hotel' | 'Car', cultureCode?: string, eTag?: string, ) => {
        if (!type){
            throw new Error('Required parameter type was null or undefined when calling apiNskV2ResourcesAddOnsVendorsGet.');
        }

        let queryParameters: string[] = [];
        if (type !== undefined) {
            queryParameters.push("type="+encodeURIComponent(String(type)));
        }
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }


            const requestObj: Request<{
                type: 'Default' | 'Insurance' | 'Activity' | 'Hotel' | 'Car', cultureCode?: string, eTag?: string, 
            }> = {
                url: '/api/nsk/v2/resources/addOns/vendors',
                method: 'get',
                data: {
                    type,cultureCode,eTag,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves a specific country resource.
     * 
     * @param countryCode The unique country code.
     * @param cultureCode The specific culture code.
     
     */
    public apiNskV2ResourcesCountriesByCountryCodeGet = (countryCode: string, cultureCode?: string, ) => {
        if (!countryCode){
            throw new Error('Required parameter countryCode was null or undefined when calling apiNskV2ResourcesCountriesByCountryCodeGet.');
        }

        let queryParameters: string[] = [];
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }


            const requestObj: Request<{
                countryCode: string, cultureCode?: string, 
            }> = {
                url: '/api/nsk/v2/resources/countries/${encodeURIComponent(String(countryCode))}',
                method: 'get',
                data: {
                    countryCode,cultureCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the collection of country resources.
     * 
     * @param activeOnly Flag indicating to return just active only or all.
     * @param cultureCode The desired culture code to be returned.
     * @param eTag The cache token for this request. Data will not be returned if etag still matches.
     * @param startIndex The start index value for this request.
     * @param itemCount The item count value for this request.
     
     */
    public apiNskV2ResourcesCountriesGet = (activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, ) => {
        if (!activeOnly){
            throw new Error('Required parameter activeOnly was null or undefined when calling apiNskV2ResourcesCountriesGet.');
        }

        let queryParameters: string[] = [];
        if (activeOnly !== undefined) {
            queryParameters.push("activeOnly="+encodeURIComponent(String(activeOnly)));
        }
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }
        if (startIndex !== undefined) {
            queryParameters.push("startIndex="+encodeURIComponent(String(startIndex)));
        }
        if (itemCount !== undefined) {
            queryParameters.push("itemCount="+encodeURIComponent(String(itemCount)));
        }


            const requestObj: Request<{
                activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, 
            }> = {
                url: '/api/nsk/v2/resources/countries',
                method: 'get',
                data: {
                    activeOnly,cultureCode,eTag,startIndex,itemCount,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the specific currency resource.
     * 
     * @param currencyCode The unique currency code.
     * @param cultureCode The specific culture code.
     
     */
    public apiNskV2ResourcesCurrenciesControllerv2ByCurrencyCodeGet = (currencyCode: string, cultureCode?: string, ) => {
        if (!currencyCode){
            throw new Error('Required parameter currencyCode was null or undefined when calling apiNskV2ResourcesCurrenciesControllerv2ByCurrencyCodeGet.');
        }

        let queryParameters: string[] = [];
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }


            const requestObj: Request<{
                currencyCode: string, cultureCode?: string, 
            }> = {
                url: '/api/nsk/v2/resources/CurrenciesControllerv2/${encodeURIComponent(String(currencyCode))}',
                method: 'get',
                data: {
                    currencyCode,cultureCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the collection of currency resources.
     * 
     * @param activeOnly Flag indicating to return just active only or all.
     * @param cultureCode The desired culture code to be returned.
     * @param eTag The cache token for this request. Data will not be returned if etag still matches.
     * @param startIndex The start index value for this request.
     * @param itemCount The item count value for this request.
     
     */
    public apiNskV2ResourcesCurrenciesControllerv2Get = (activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, ) => {
        if (!activeOnly){
            throw new Error('Required parameter activeOnly was null or undefined when calling apiNskV2ResourcesCurrenciesControllerv2Get.');
        }

        let queryParameters: string[] = [];
        if (activeOnly !== undefined) {
            queryParameters.push("activeOnly="+encodeURIComponent(String(activeOnly)));
        }
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }
        if (startIndex !== undefined) {
            queryParameters.push("startIndex="+encodeURIComponent(String(startIndex)));
        }
        if (itemCount !== undefined) {
            queryParameters.push("itemCount="+encodeURIComponent(String(itemCount)));
        }


            const requestObj: Request<{
                activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, 
            }> = {
                url: '/api/nsk/v2/resources/CurrenciesControllerv2',
                method: 'get',
                data: {
                    activeOnly,cultureCode,eTag,startIndex,itemCount,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the resource.
     * 
     * @param locationCode 
     * @param travelLocationCode 
     * @param cultureCode 
     
     */
    public apiNskV2ResourcesMarketsByLocationCodeByTravelLocationCodeGet = (locationCode: string, travelLocationCode: string, cultureCode?: string, ) => {
        if (!locationCode){
            throw new Error('Required parameter locationCode was null or undefined when calling apiNskV2ResourcesMarketsByLocationCodeByTravelLocationCodeGet.');
        }

        if (!travelLocationCode){
            throw new Error('Required parameter travelLocationCode was null or undefined when calling apiNskV2ResourcesMarketsByLocationCodeByTravelLocationCodeGet.');
        }

        let queryParameters: string[] = [];
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }


            const requestObj: Request<{
                locationCode: string, travelLocationCode: string, cultureCode?: string, 
            }> = {
                url: '/api/nsk/v2/resources/markets/${encodeURIComponent(String(locationCode))}/${encodeURIComponent(String(travelLocationCode))}',
                method: 'get',
                data: {
                    locationCode,travelLocationCode,cultureCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves a specific market resource.
     * 
     * @param locationCode The unique location code.
     * @param cultureCode The specific culture code.
     
     */
    public apiNskV2ResourcesMarketsByLocationCodeGet = (locationCode: string, cultureCode?: string, ) => {
        if (!locationCode){
            throw new Error('Required parameter locationCode was null or undefined when calling apiNskV2ResourcesMarketsByLocationCodeGet.');
        }

        let queryParameters: string[] = [];
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }


            const requestObj: Request<{
                locationCode: string, cultureCode?: string, 
            }> = {
                url: '/api/nsk/v2/resources/markets/${encodeURIComponent(String(locationCode))}',
                method: 'get',
                data: {
                    locationCode,cultureCode,
                }
            };
            return this.client.makeRequest(requestObj);
    }


    /**
     * Retrieves the collection of market resources.
     * 
     * @param activeOnly Flag indicating to return just active only or all.
     * @param cultureCode The desired culture code to be returned.
     * @param eTag The cache token for this request. Data will not be returned if etag still matches.
     * @param startIndex The start index value for this request.
     * @param itemCount The item count value for this request.
     
     */
    public apiNskV2ResourcesMarketsGet = (activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, ) => {
        if (!activeOnly){
            throw new Error('Required parameter activeOnly was null or undefined when calling apiNskV2ResourcesMarketsGet.');
        }

        let queryParameters: string[] = [];
        if (activeOnly !== undefined) {
            queryParameters.push("activeOnly="+encodeURIComponent(String(activeOnly)));
        }
        if (cultureCode !== undefined) {
            queryParameters.push("cultureCode="+encodeURIComponent(String(cultureCode)));
        }
        if (eTag !== undefined) {
            queryParameters.push("eTag="+encodeURIComponent(String(eTag)));
        }
        if (startIndex !== undefined) {
            queryParameters.push("startIndex="+encodeURIComponent(String(startIndex)));
        }
        if (itemCount !== undefined) {
            queryParameters.push("itemCount="+encodeURIComponent(String(itemCount)));
        }


            const requestObj: Request<{
                activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number, 
            }> = {
                url: '/api/nsk/v2/resources/markets',
                method: 'get',
                data: {
                    activeOnly,cultureCode,eTag,startIndex,itemCount,
                }
            };
            return this.client.makeRequest(requestObj);
    }

}
