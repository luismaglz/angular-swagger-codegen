/**
 * API - Current Routes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: trunk
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from "rxjs/Observable";
import { map, toPromise } from "rxjs";
import IHttpClient from "../IHttpClient";
import { inject, injectable } from "inversify";
import { IAPIConfiguration } from "../IAPIConfiguration";
import { Headers } from "../Headers";
import HttpResponse from "../HttpResponse";

import {
    IJsonResponse, 
    Manifest, 
    ManifestRequestBase, 
    PassengerDetails, 
    PassengerSeatAssignment, 
    TripInformationResponse, 
} from 'api-models';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class ManifestService {
    private basePath: string = 'https://localhost';

    constructor(@inject("IApiHttpClient") private httpClient: IHttpClient,
        @inject("IAPIConfiguration") private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * Gets the passenger details for the specified leg.
     * 
     * @param legKey The leg key.
     
     */
    public apiNskV1ManifestByLegKeyPassengerDetailsGet(legKey: string, observe?: 'body', headers?: Headers): Observable<PassengerDetails>;
    public apiNskV1ManifestByLegKeyPassengerDetailsGet(legKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<PassengerDetails>>;
    public apiNskV1ManifestByLegKeyPassengerDetailsGet(legKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!legKey){
            throw new Error('Required parameter legKey was null or undefined when calling apiNskV1ManifestByLegKeyPassengerDetailsGet.');
        }


        const response: Observable<HttpResponse<PassengerDetails>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/manifest/${encodeURIComponent(String(legKey))}/passengerDetails`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <PassengerDetails>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets a list of seat assignment reports for the specified leg.
     * 
     * @param legKey The leg key.
     
     */
    public apiNskV1ManifestByLegKeyPassengerSeatAssignmentsGet(legKey: string, observe?: 'body', headers?: Headers): Observable<Array<PassengerSeatAssignment>>;
    public apiNskV1ManifestByLegKeyPassengerSeatAssignmentsGet(legKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<PassengerSeatAssignment>>>;
    public apiNskV1ManifestByLegKeyPassengerSeatAssignmentsGet(legKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!legKey){
            throw new Error('Required parameter legKey was null or undefined when calling apiNskV1ManifestByLegKeyPassengerSeatAssignmentsGet.');
        }


        const response: Observable<HttpResponse<Array<PassengerSeatAssignment>>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/manifest/${encodeURIComponent(String(legKey))}/passengerSeatAssignments`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<PassengerSeatAssignment>>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets the manifest for the specified leg.
     * 
     * @param legKey The manifest leg key.
     * @param request The manifest request
     
     */
    public apiNskV1ManifestByLegKeyPost(legKey: string, request?: ManifestRequestBase, observe?: 'body', headers?: Headers): Observable<Manifest>;
    public apiNskV1ManifestByLegKeyPost(legKey: string, request?: ManifestRequestBase, observe?: 'response', headers?: Headers): Observable<HttpResponse<Manifest>>;
    public apiNskV1ManifestByLegKeyPost(legKey: string, request?: ManifestRequestBase, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!legKey){
            throw new Error('Required parameter legKey was null or undefined when calling apiNskV1ManifestByLegKeyPost.');
        }


        const response: Observable<HttpResponse<Manifest>> = this.httpClient.post(`${this.basePath}/api/nsk/v1/manifest/${encodeURIComponent(String(legKey))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Manifest>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets the manifest trip information response list for the specified   manifest trip information search request.
     * 
     * @param beginDate The starting date of the trip information search.
     * @param origin The departure station.
     * @param destination The arrival station.
     * @param identifier The transportation identifier, such as a flight number.
     * @param carrierCode The carrier code.
     * @param flightType The flight type.
     
     */
    public apiNskV1ManifestGet(beginDate: Date, origin?: string, destination?: string, identifier?: string, carrierCode?: string, flightType?: 'All' | 'NonStop' | 'Through' | 'Direct' | 'Connect', observe?: 'body', headers?: Headers): Observable<TripInformationResponse>;
    public apiNskV1ManifestGet(beginDate: Date, origin?: string, destination?: string, identifier?: string, carrierCode?: string, flightType?: 'All' | 'NonStop' | 'Through' | 'Direct' | 'Connect', observe?: 'response', headers?: Headers): Observable<HttpResponse<TripInformationResponse>>;
    public apiNskV1ManifestGet(beginDate: Date, origin?: string, destination?: string, identifier?: string, carrierCode?: string, flightType?: 'All' | 'NonStop' | 'Through' | 'Direct' | 'Connect', observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!beginDate){
            throw new Error('Required parameter beginDate was null or undefined when calling apiNskV1ManifestGet.');
        }

        let queryParameters: string[] = [];
        if (origin !== undefined) {
            queryParameters.push("origin="+encodeURIComponent(String(origin)));
        }
        if (destination !== undefined) {
            queryParameters.push("destination="+encodeURIComponent(String(destination)));
        }
        if (beginDate !== undefined) {
           queryParameters.push("beginDate="+encodeURIComponent(<any>beginDate.toISOString()));
        }
        if (identifier !== undefined) {
            queryParameters.push("identifier="+encodeURIComponent(String(identifier)));
        }
        if (carrierCode !== undefined) {
            queryParameters.push("carrierCode="+encodeURIComponent(String(carrierCode)));
        }
        if (flightType !== undefined) {
            queryParameters.push("flightType="+encodeURIComponent(String(flightType)));
        }


        const response: Observable<HttpResponse<TripInformationResponse>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/manifest?${queryParameters.join('&')}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <TripInformationResponse>(httpResponse.response));
        }
        return response;
    }

}
