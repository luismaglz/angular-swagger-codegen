/**
 * API - Current Routes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: trunk
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from "rxjs/Observable";
import { map, toPromise } from "rxjs";
import IHttpClient from "../IHttpClient";
import { inject, injectable } from "inversify";
import { IAPIConfiguration } from "../IAPIConfiguration";
import { Headers } from "../Headers";
import HttpResponse from "../HttpResponse";

import {
    Account, 
    AccountCollectionRequest, 
    CreateAccountRequest, 
    DeltaMapperPersonAddressEditRequest, 
    DeltaMapperPersonAliasRequest, 
    DeltaMapperPersonCommentRequest, 
    DeltaMapperPersonCustomerProgramEditRequest, 
    DeltaMapperPersonEditRequest, 
    DeltaMapperPersonEmailEditRequest, 
    DeltaMapperPersonInformationEditRequest, 
    DeltaMapperPersonPhoneNumberRequest, 
    DeltaMapperPersonPreferenceEditRequest, 
    DeltaMapperPersonStoredPaymentUpdateRequest, 
    DeltaMapperTravelDocumentEditRequestv2, 
    DeltaMapperTravelNotificationEditRequest, 
    IJsonResponse, 
    NotificationEvent, 
    NotificationEventCreateRequest, 
    NotificationTimedEvent, 
    NotificationTimedEventCreateRequest, 
    NotificationTimedEventEditRequest, 
    Person, 
    PersonAddress, 
    PersonAddressCreateRequest, 
    PersonAddressEditRequest, 
    PersonAlias, 
    PersonAliasRequest, 
    PersonComment, 
    PersonCommentRequest, 
    PersonCreateRequest, 
    PersonCustomerProgram, 
    PersonCustomerProgramCreateRequest, 
    PersonCustomerProgramEditRequest, 
    PersonEditRequest, 
    PersonEmail, 
    PersonEmailCreateRequest, 
    PersonEmailEditRequest, 
    PersonInformation, 
    PersonInformationCreateRequest, 
    PersonInformationEditRequest, 
    PersonPhoneNumber, 
    PersonPhoneNumberRequest, 
    PersonPreference, 
    PersonPreferenceCreateRequest, 
    PersonPreferenceEditRequest, 
    PersonRecord, 
    PersonStoredPayment, 
    PersonStoredPaymentRequest, 
    PersonTravelDocument, 
    PersonTravelDocumentRequest, 
    Transaction, 
    TransactionRequest, 
    TravelDocumentEditRequestv2, 
    TravelNotification, 
    TravelNotificationCreateRequest, 
    TravelNotificationEditRequest, 
} from 'api-models';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class PersonsService {
    private basePath: string = 'https://localhost';

    constructor(@inject("IApiHttpClient") private httpClient: IHttpClient,
        @inject("IAPIConfiguration") private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * Retrieves the person account collection transactions based on the person key,  the account collection key, and data in the request.
     * 
     * @param personKey The person key.
     * @param accountCollectionKey The account collection key.
     * @param startTime The starting date and time of the date range to search in.
     * @param sortByNewest Optional filter to sort results by newest.
     * @param endTime The end date and time of the date range to search in.
     * @param pageSize Used to specify the number of records to return.
     * @param pageIndex Represents the index of the requested paged item.
     
     */
    public apiNskV1PersonsByPersonKeyAccountCollectionByAccountCollectionKeyTransactionsGet(personKey: string, accountCollectionKey: string, startTime: Date, sortByNewest: boolean, endTime?: Date, pageSize?: number, pageIndex?: number, observe?: 'body', headers?: Headers): Observable<Array<Transaction>>;
    public apiNskV1PersonsByPersonKeyAccountCollectionByAccountCollectionKeyTransactionsGet(personKey: string, accountCollectionKey: string, startTime: Date, sortByNewest: boolean, endTime?: Date, pageSize?: number, pageIndex?: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<Transaction>>>;
    public apiNskV1PersonsByPersonKeyAccountCollectionByAccountCollectionKeyTransactionsGet(personKey: string, accountCollectionKey: string, startTime: Date, sortByNewest: boolean, endTime?: Date, pageSize?: number, pageIndex?: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyAccountCollectionByAccountCollectionKeyTransactionsGet.');
        }

        if (!accountCollectionKey){
            throw new Error('Required parameter accountCollectionKey was null or undefined when calling apiNskV1PersonsByPersonKeyAccountCollectionByAccountCollectionKeyTransactionsGet.');
        }

        if (!startTime){
            throw new Error('Required parameter startTime was null or undefined when calling apiNskV1PersonsByPersonKeyAccountCollectionByAccountCollectionKeyTransactionsGet.');
        }

        if (!sortByNewest){
            throw new Error('Required parameter sortByNewest was null or undefined when calling apiNskV1PersonsByPersonKeyAccountCollectionByAccountCollectionKeyTransactionsGet.');
        }

        let queryParameters: string[] = [];
        if (startTime !== undefined) {
           queryParameters.push("startTime="+encodeURIComponent(<any>startTime.toISOString()));
        }
        if (endTime !== undefined) {
           queryParameters.push("endTime="+encodeURIComponent(<any>endTime.toISOString()));
        }
        if (sortByNewest !== undefined) {
            queryParameters.push("sortByNewest="+encodeURIComponent(String(sortByNewest)));
        }
        if (pageSize !== undefined) {
            queryParameters.push("pageSize="+encodeURIComponent(String(pageSize)));
        }
        if (pageIndex !== undefined) {
            queryParameters.push("pageIndex="+encodeURIComponent(String(pageIndex)));
        }


        const response: Observable<HttpResponse<Array<Transaction>>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/account/collection/${encodeURIComponent(String(accountCollectionKey))}/transactions?${queryParameters.join('&')}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<Transaction>>(httpResponse.response));
        }
        return response;
    }


    /**
     * Creates an account collection transaction based on the person key, the  account collection key, and data in the request.
     * This endpoint will add a transaction to an existing account collection.  If there are no account collections, or the account collection key does  not match an existing collection, the request will fail.  To add a new account collection, see /api/nsk/v1/persons/{personKey}/account/collection.
     * @param personKey The person key.
     * @param accountCollectionKey The account collection key.
     * @param request The create transaction request.
     
     */
    public apiNskV1PersonsByPersonKeyAccountCollectionByAccountCollectionKeyTransactionsPost(personKey: string, accountCollectionKey: string, request?: TransactionRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1PersonsByPersonKeyAccountCollectionByAccountCollectionKeyTransactionsPost(personKey: string, accountCollectionKey: string, request?: TransactionRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1PersonsByPersonKeyAccountCollectionByAccountCollectionKeyTransactionsPost(personKey: string, accountCollectionKey: string, request?: TransactionRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyAccountCollectionByAccountCollectionKeyTransactionsPost.');
        }

        if (!accountCollectionKey){
            throw new Error('Required parameter accountCollectionKey was null or undefined when calling apiNskV1PersonsByPersonKeyAccountCollectionByAccountCollectionKeyTransactionsPost.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.post(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/account/collection/${encodeURIComponent(String(accountCollectionKey))}/transactions`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Creates an account collection based on the person key and data in the request.
     * This endpoint will create a new account collection and a transaction if no account  transaction exists or no matching collection is found.  An account collection is unique  based on the transaction code and the expiration date.  If a matching account collection  is found, a transaction for that collection is generated and the account collection will  be updated.  See /api/nsk/v1/resources/accountTransactionCodes for a list of available account transaction  codes.
     * @param personKey The person key.
     * @param request The create account collection request.
     
     */
    public apiNskV1PersonsByPersonKeyAccountCollectionPost(personKey: string, request?: AccountCollectionRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1PersonsByPersonKeyAccountCollectionPost(personKey: string, request?: AccountCollectionRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1PersonsByPersonKeyAccountCollectionPost(personKey: string, request?: AccountCollectionRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyAccountCollectionPost.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.post(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/account/collection`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Retrieves the person account and credits based on the person key.
     * 
     * @param personKey The person key.
     
     */
    public apiNskV1PersonsByPersonKeyAccountGet(personKey: string, observe?: 'body', headers?: Headers): Observable<Account>;
    public apiNskV1PersonsByPersonKeyAccountGet(personKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Account>>;
    public apiNskV1PersonsByPersonKeyAccountGet(personKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyAccountGet.');
        }


        const response: Observable<HttpResponse<Account>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/account`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Account>(httpResponse.response));
        }
        return response;
    }


    /**
     * Creates the person account based on the person key and  data in the request.
     * 
     * @param personKey The person key.
     * @param request The create account request.
     
     */
    public apiNskV1PersonsByPersonKeyAccountPost(personKey: string, request?: CreateAccountRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1PersonsByPersonKeyAccountPost(personKey: string, request?: CreateAccountRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1PersonsByPersonKeyAccountPost(personKey: string, request?: CreateAccountRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyAccountPost.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.post(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/account`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Updates the person account status.
     * 
     * @param personKey The person key.
     * @param status The new account status.
     
     */
    public apiNskV1PersonsByPersonKeyAccountStatusPut(personKey: string, status: 'Open' | 'Closed' | 'AgencyInactive' | 'Unknown', observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1PersonsByPersonKeyAccountStatusPut(personKey: string, status: 'Open' | 'Closed' | 'AgencyInactive' | 'Unknown', observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1PersonsByPersonKeyAccountStatusPut(personKey: string, status: 'Open' | 'Closed' | 'AgencyInactive' | 'Unknown', observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyAccountStatusPut.');
        }

        if (!status){
            throw new Error('Required parameter status was null or undefined when calling apiNskV1PersonsByPersonKeyAccountStatusPut.');
        }

        let queryParameters: string[] = [];
        if (status !== undefined) {
            queryParameters.push("status="+encodeURIComponent(String(status)));
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.put(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/account/status?${queryParameters.join('&')}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Retrieves all transactions for every collection.
     * 
     * @param personKey The person key.
     * @param startTime The starting date and time of the date range to search in.
     * @param sortByNewest Optional filter to sort results by newest.
     * @param endTime The end date and time of the date range to search in.
     * @param pageSize Used to specify the number of records to return.
     * @param pageIndex Represents the index of the requested paged item.
     
     */
    public apiNskV1PersonsByPersonKeyAccountTransactionsGet(personKey: string, startTime: Date, sortByNewest: boolean, endTime?: Date, pageSize?: number, pageIndex?: number, observe?: 'body', headers?: Headers): Observable<Array<Transaction>>;
    public apiNskV1PersonsByPersonKeyAccountTransactionsGet(personKey: string, startTime: Date, sortByNewest: boolean, endTime?: Date, pageSize?: number, pageIndex?: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<Transaction>>>;
    public apiNskV1PersonsByPersonKeyAccountTransactionsGet(personKey: string, startTime: Date, sortByNewest: boolean, endTime?: Date, pageSize?: number, pageIndex?: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyAccountTransactionsGet.');
        }

        if (!startTime){
            throw new Error('Required parameter startTime was null or undefined when calling apiNskV1PersonsByPersonKeyAccountTransactionsGet.');
        }

        if (!sortByNewest){
            throw new Error('Required parameter sortByNewest was null or undefined when calling apiNskV1PersonsByPersonKeyAccountTransactionsGet.');
        }

        let queryParameters: string[] = [];
        if (startTime !== undefined) {
           queryParameters.push("startTime="+encodeURIComponent(<any>startTime.toISOString()));
        }
        if (endTime !== undefined) {
           queryParameters.push("endTime="+encodeURIComponent(<any>endTime.toISOString()));
        }
        if (sortByNewest !== undefined) {
            queryParameters.push("sortByNewest="+encodeURIComponent(String(sortByNewest)));
        }
        if (pageSize !== undefined) {
            queryParameters.push("pageSize="+encodeURIComponent(String(pageSize)));
        }
        if (pageIndex !== undefined) {
            queryParameters.push("pageIndex="+encodeURIComponent(String(pageIndex)));
        }


        const response: Observable<HttpResponse<Array<Transaction>>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/account/transactions?${queryParameters.join('&')}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<Transaction>>(httpResponse.response));
        }
        return response;
    }


    /**
     * Deletes a specific address for a specific person.
     * 
     * @param personKey The unique person key.
     * @param personAddressKey The unique person address key.
     
     */
    public apiNskV1PersonsByPersonKeyAddressesByPersonAddressKeyDelete(personKey: string, personAddressKey: string, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1PersonsByPersonKeyAddressesByPersonAddressKeyDelete(personKey: string, personAddressKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1PersonsByPersonKeyAddressesByPersonAddressKeyDelete(personKey: string, personAddressKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyAddressesByPersonAddressKeyDelete.');
        }

        if (!personAddressKey){
            throw new Error('Required parameter personAddressKey was null or undefined when calling apiNskV1PersonsByPersonKeyAddressesByPersonAddressKeyDelete.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.delete(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/addresses/${encodeURIComponent(String(personAddressKey))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets a specific address for a specific person.
     * 
     * @param personKey The unique person key.
     * @param personAddressKey The unique address key.
     
     */
    public apiNskV1PersonsByPersonKeyAddressesByPersonAddressKeyGet(personKey: string, personAddressKey: string, observe?: 'body', headers?: Headers): Observable<PersonAddress>;
    public apiNskV1PersonsByPersonKeyAddressesByPersonAddressKeyGet(personKey: string, personAddressKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<PersonAddress>>;
    public apiNskV1PersonsByPersonKeyAddressesByPersonAddressKeyGet(personKey: string, personAddressKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyAddressesByPersonAddressKeyGet.');
        }

        if (!personAddressKey){
            throw new Error('Required parameter personAddressKey was null or undefined when calling apiNskV1PersonsByPersonKeyAddressesByPersonAddressKeyGet.');
        }


        const response: Observable<HttpResponse<PersonAddress>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/addresses/${encodeURIComponent(String(personAddressKey))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <PersonAddress>(httpResponse.response));
        }
        return response;
    }


    /**
     * Patches a specific address for a specific person.
     * 
     * @param personKey The unique person key.
     * @param personAddressKey The unique person address key.
     * @param request The patched address.
     
     */
    public apiNskV1PersonsByPersonKeyAddressesByPersonAddressKeyPatch(personKey: string, personAddressKey: string, request?: DeltaMapperPersonAddressEditRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1PersonsByPersonKeyAddressesByPersonAddressKeyPatch(personKey: string, personAddressKey: string, request?: DeltaMapperPersonAddressEditRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1PersonsByPersonKeyAddressesByPersonAddressKeyPatch(personKey: string, personAddressKey: string, request?: DeltaMapperPersonAddressEditRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyAddressesByPersonAddressKeyPatch.');
        }

        if (!personAddressKey){
            throw new Error('Required parameter personAddressKey was null or undefined when calling apiNskV1PersonsByPersonKeyAddressesByPersonAddressKeyPatch.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.patch(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/addresses/${encodeURIComponent(String(personAddressKey))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Updates a specific address for a specific person.
     * 
     * @param personKey The unique person key.
     * @param personAddressKey The unique person address key.
     * @param request The modified address.
     
     */
    public apiNskV1PersonsByPersonKeyAddressesByPersonAddressKeyPut(personKey: string, personAddressKey: string, request?: PersonAddressEditRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1PersonsByPersonKeyAddressesByPersonAddressKeyPut(personKey: string, personAddressKey: string, request?: PersonAddressEditRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1PersonsByPersonKeyAddressesByPersonAddressKeyPut(personKey: string, personAddressKey: string, request?: PersonAddressEditRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyAddressesByPersonAddressKeyPut.');
        }

        if (!personAddressKey){
            throw new Error('Required parameter personAddressKey was null or undefined when calling apiNskV1PersonsByPersonKeyAddressesByPersonAddressKeyPut.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.put(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/addresses/${encodeURIComponent(String(personAddressKey))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets the collection of addresses for a specific person.
     * 
     * @param personKey The unique person key.
     
     */
    public apiNskV1PersonsByPersonKeyAddressesGet(personKey: string, observe?: 'body', headers?: Headers): Observable<Array<PersonAddress>>;
    public apiNskV1PersonsByPersonKeyAddressesGet(personKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<PersonAddress>>>;
    public apiNskV1PersonsByPersonKeyAddressesGet(personKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyAddressesGet.');
        }


        const response: Observable<HttpResponse<Array<PersonAddress>>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/addresses`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<PersonAddress>>(httpResponse.response));
        }
        return response;
    }


    /**
     * Creates a new address for a specific person.
     * 
     * @param personKey The unique person key.
     * @param request The new address.
     
     */
    public apiNskV1PersonsByPersonKeyAddressesPost(personKey: string, request?: PersonAddressCreateRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1PersonsByPersonKeyAddressesPost(personKey: string, request?: PersonAddressCreateRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1PersonsByPersonKeyAddressesPost(personKey: string, request?: PersonAddressCreateRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyAddressesPost.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.post(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/addresses`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Deletes a specific alias for a specific person.
     * 
     * @param personKey The unique person key.
     * @param personAliasKey The unique person alias key.
     
     */
    public apiNskV1PersonsByPersonKeyAliasesByPersonAliasKeyDelete(personKey: string, personAliasKey: string, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1PersonsByPersonKeyAliasesByPersonAliasKeyDelete(personKey: string, personAliasKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1PersonsByPersonKeyAliasesByPersonAliasKeyDelete(personKey: string, personAliasKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyAliasesByPersonAliasKeyDelete.');
        }

        if (!personAliasKey){
            throw new Error('Required parameter personAliasKey was null or undefined when calling apiNskV1PersonsByPersonKeyAliasesByPersonAliasKeyDelete.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.delete(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/aliases/${encodeURIComponent(String(personAliasKey))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets a specific alias for a specific person.
     * 
     * @param personKey The unique person key.
     * @param personAliasKey The unique person alias key.
     
     */
    public apiNskV1PersonsByPersonKeyAliasesByPersonAliasKeyGet(personKey: string, personAliasKey: string, observe?: 'body', headers?: Headers): Observable<PersonAlias>;
    public apiNskV1PersonsByPersonKeyAliasesByPersonAliasKeyGet(personKey: string, personAliasKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<PersonAlias>>;
    public apiNskV1PersonsByPersonKeyAliasesByPersonAliasKeyGet(personKey: string, personAliasKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyAliasesByPersonAliasKeyGet.');
        }

        if (!personAliasKey){
            throw new Error('Required parameter personAliasKey was null or undefined when calling apiNskV1PersonsByPersonKeyAliasesByPersonAliasKeyGet.');
        }


        const response: Observable<HttpResponse<PersonAlias>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/aliases/${encodeURIComponent(String(personAliasKey))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <PersonAlias>(httpResponse.response));
        }
        return response;
    }


    /**
     * Patches a specific alias for a specific person.
     * 
     * @param personKey The unique person key.
     * @param personAliasKey The unique person alias key.
     * @param request The patched alias.
     
     */
    public apiNskV1PersonsByPersonKeyAliasesByPersonAliasKeyPatch(personKey: string, personAliasKey: string, request?: DeltaMapperPersonAliasRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1PersonsByPersonKeyAliasesByPersonAliasKeyPatch(personKey: string, personAliasKey: string, request?: DeltaMapperPersonAliasRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1PersonsByPersonKeyAliasesByPersonAliasKeyPatch(personKey: string, personAliasKey: string, request?: DeltaMapperPersonAliasRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyAliasesByPersonAliasKeyPatch.');
        }

        if (!personAliasKey){
            throw new Error('Required parameter personAliasKey was null or undefined when calling apiNskV1PersonsByPersonKeyAliasesByPersonAliasKeyPatch.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.patch(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/aliases/${encodeURIComponent(String(personAliasKey))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Updates a specific alias for a specific person.
     * 
     * @param personKey The unique person key.
     * @param personAliasKey The unique person alias key.
     * @param request The modified alias.
     
     */
    public apiNskV1PersonsByPersonKeyAliasesByPersonAliasKeyPut(personKey: string, personAliasKey: string, request?: PersonAliasRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1PersonsByPersonKeyAliasesByPersonAliasKeyPut(personKey: string, personAliasKey: string, request?: PersonAliasRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1PersonsByPersonKeyAliasesByPersonAliasKeyPut(personKey: string, personAliasKey: string, request?: PersonAliasRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyAliasesByPersonAliasKeyPut.');
        }

        if (!personAliasKey){
            throw new Error('Required parameter personAliasKey was null or undefined when calling apiNskV1PersonsByPersonKeyAliasesByPersonAliasKeyPut.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.put(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/aliases/${encodeURIComponent(String(personAliasKey))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets the collection of aliases for a specific person.
     * 
     * @param personKey The unique person key.
     
     */
    public apiNskV1PersonsByPersonKeyAliasesGet(personKey: string, observe?: 'body', headers?: Headers): Observable<Array<PersonAlias>>;
    public apiNskV1PersonsByPersonKeyAliasesGet(personKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<PersonAlias>>>;
    public apiNskV1PersonsByPersonKeyAliasesGet(personKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyAliasesGet.');
        }


        const response: Observable<HttpResponse<Array<PersonAlias>>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/aliases`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<PersonAlias>>(httpResponse.response));
        }
        return response;
    }


    /**
     * Creates a new alias for a specific person.
     * 
     * @param personKey The unique person key.
     * @param request The new alias.
     
     */
    public apiNskV1PersonsByPersonKeyAliasesPost(personKey: string, request?: PersonAliasRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1PersonsByPersonKeyAliasesPost(personKey: string, request?: PersonAliasRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1PersonsByPersonKeyAliasesPost(personKey: string, request?: PersonAliasRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyAliasesPost.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.post(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/aliases`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Deletes a specific comment for a specific person.
     * 
     * @param personKey The unique person key.
     * @param personCommentKey The unique person comment key.
     
     */
    public apiNskV1PersonsByPersonKeyCommentsByPersonCommentKeyDelete(personKey: string, personCommentKey: string, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1PersonsByPersonKeyCommentsByPersonCommentKeyDelete(personKey: string, personCommentKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1PersonsByPersonKeyCommentsByPersonCommentKeyDelete(personKey: string, personCommentKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyCommentsByPersonCommentKeyDelete.');
        }

        if (!personCommentKey){
            throw new Error('Required parameter personCommentKey was null or undefined when calling apiNskV1PersonsByPersonKeyCommentsByPersonCommentKeyDelete.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.delete(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/comments/${encodeURIComponent(String(personCommentKey))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets a specific comment for a specific person.
     * 
     * @param personKey The unique person key.
     * @param personCommentKey The unique comment key.
     
     */
    public apiNskV1PersonsByPersonKeyCommentsByPersonCommentKeyGet(personKey: string, personCommentKey: string, observe?: 'body', headers?: Headers): Observable<PersonComment>;
    public apiNskV1PersonsByPersonKeyCommentsByPersonCommentKeyGet(personKey: string, personCommentKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<PersonComment>>;
    public apiNskV1PersonsByPersonKeyCommentsByPersonCommentKeyGet(personKey: string, personCommentKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyCommentsByPersonCommentKeyGet.');
        }

        if (!personCommentKey){
            throw new Error('Required parameter personCommentKey was null or undefined when calling apiNskV1PersonsByPersonKeyCommentsByPersonCommentKeyGet.');
        }


        const response: Observable<HttpResponse<PersonComment>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/comments/${encodeURIComponent(String(personCommentKey))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <PersonComment>(httpResponse.response));
        }
        return response;
    }


    /**
     * Patches a specific comment for a specific person.
     * 
     * @param personKey The unique person key.
     * @param personCommentKey The unique person comment key.
     * @param request The patched comment.
     
     */
    public apiNskV1PersonsByPersonKeyCommentsByPersonCommentKeyPatch(personKey: string, personCommentKey: string, request?: DeltaMapperPersonCommentRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1PersonsByPersonKeyCommentsByPersonCommentKeyPatch(personKey: string, personCommentKey: string, request?: DeltaMapperPersonCommentRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1PersonsByPersonKeyCommentsByPersonCommentKeyPatch(personKey: string, personCommentKey: string, request?: DeltaMapperPersonCommentRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyCommentsByPersonCommentKeyPatch.');
        }

        if (!personCommentKey){
            throw new Error('Required parameter personCommentKey was null or undefined when calling apiNskV1PersonsByPersonKeyCommentsByPersonCommentKeyPatch.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.patch(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/comments/${encodeURIComponent(String(personCommentKey))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Updates a specific comment for a specific person.
     * 
     * @param personKey The unique person key.
     * @param personCommentKey The unique person comment key.
     * @param request The modified comment.
     
     */
    public apiNskV1PersonsByPersonKeyCommentsByPersonCommentKeyPut(personKey: string, personCommentKey: string, request?: PersonCommentRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1PersonsByPersonKeyCommentsByPersonCommentKeyPut(personKey: string, personCommentKey: string, request?: PersonCommentRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1PersonsByPersonKeyCommentsByPersonCommentKeyPut(personKey: string, personCommentKey: string, request?: PersonCommentRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyCommentsByPersonCommentKeyPut.');
        }

        if (!personCommentKey){
            throw new Error('Required parameter personCommentKey was null or undefined when calling apiNskV1PersonsByPersonKeyCommentsByPersonCommentKeyPut.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.put(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/comments/${encodeURIComponent(String(personCommentKey))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets the collection of comments for a specific person.
     * 
     * @param personKey The unique person key.
     
     */
    public apiNskV1PersonsByPersonKeyCommentsGet(personKey: string, observe?: 'body', headers?: Headers): Observable<Array<PersonComment>>;
    public apiNskV1PersonsByPersonKeyCommentsGet(personKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<PersonComment>>>;
    public apiNskV1PersonsByPersonKeyCommentsGet(personKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyCommentsGet.');
        }


        const response: Observable<HttpResponse<Array<PersonComment>>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/comments`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<PersonComment>>(httpResponse.response));
        }
        return response;
    }


    /**
     * Creates a new comment for a specific person.
     * 
     * @param personKey The unique person key.
     * @param request The new comment.
     
     */
    public apiNskV1PersonsByPersonKeyCommentsPost(personKey: string, request?: PersonCommentRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1PersonsByPersonKeyCommentsPost(personKey: string, request?: PersonCommentRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1PersonsByPersonKeyCommentsPost(personKey: string, request?: PersonCommentRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyCommentsPost.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.post(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/comments`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Deletes a person by setting the record to terminated.
     * 
     * @param personKey The unique person key.
     
     */
    public apiNskV1PersonsByPersonKeyDelete(personKey: string, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1PersonsByPersonKeyDelete(personKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1PersonsByPersonKeyDelete(personKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyDelete.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.delete(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Deletes a specific email address for a specific person.
     * 
     * @param personKey The unique person key.
     * @param personEmailAddressKey The unique person email address key.
     
     */
    public apiNskV1PersonsByPersonKeyEmailsByPersonEmailAddressKeyDelete(personKey: string, personEmailAddressKey: string, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1PersonsByPersonKeyEmailsByPersonEmailAddressKeyDelete(personKey: string, personEmailAddressKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1PersonsByPersonKeyEmailsByPersonEmailAddressKeyDelete(personKey: string, personEmailAddressKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyEmailsByPersonEmailAddressKeyDelete.');
        }

        if (!personEmailAddressKey){
            throw new Error('Required parameter personEmailAddressKey was null or undefined when calling apiNskV1PersonsByPersonKeyEmailsByPersonEmailAddressKeyDelete.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.delete(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/emails/${encodeURIComponent(String(personEmailAddressKey))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets a specific email address for a specific person.
     * 
     * @param personKey The unique person key.
     * @param personEmailAddressKey The unique email address key.
     
     */
    public apiNskV1PersonsByPersonKeyEmailsByPersonEmailAddressKeyGet(personKey: string, personEmailAddressKey: string, observe?: 'body', headers?: Headers): Observable<PersonEmail>;
    public apiNskV1PersonsByPersonKeyEmailsByPersonEmailAddressKeyGet(personKey: string, personEmailAddressKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<PersonEmail>>;
    public apiNskV1PersonsByPersonKeyEmailsByPersonEmailAddressKeyGet(personKey: string, personEmailAddressKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyEmailsByPersonEmailAddressKeyGet.');
        }

        if (!personEmailAddressKey){
            throw new Error('Required parameter personEmailAddressKey was null or undefined when calling apiNskV1PersonsByPersonKeyEmailsByPersonEmailAddressKeyGet.');
        }


        const response: Observable<HttpResponse<PersonEmail>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/emails/${encodeURIComponent(String(personEmailAddressKey))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <PersonEmail>(httpResponse.response));
        }
        return response;
    }


    /**
     * Patches a specific email address for a specific person.
     * 
     * @param personKey The unique person key.
     * @param personEmailAddressKey The unique person email address key.
     * @param request The patched email address.
     
     */
    public apiNskV1PersonsByPersonKeyEmailsByPersonEmailAddressKeyPatch(personKey: string, personEmailAddressKey: string, request?: DeltaMapperPersonEmailEditRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1PersonsByPersonKeyEmailsByPersonEmailAddressKeyPatch(personKey: string, personEmailAddressKey: string, request?: DeltaMapperPersonEmailEditRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1PersonsByPersonKeyEmailsByPersonEmailAddressKeyPatch(personKey: string, personEmailAddressKey: string, request?: DeltaMapperPersonEmailEditRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyEmailsByPersonEmailAddressKeyPatch.');
        }

        if (!personEmailAddressKey){
            throw new Error('Required parameter personEmailAddressKey was null or undefined when calling apiNskV1PersonsByPersonKeyEmailsByPersonEmailAddressKeyPatch.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.patch(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/emails/${encodeURIComponent(String(personEmailAddressKey))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Updates a specific email address for a specific person.
     * 
     * @param personKey The unique person key.
     * @param personEmailAddressKey The unique person email address key.
     * @param request The modified email address.
     
     */
    public apiNskV1PersonsByPersonKeyEmailsByPersonEmailAddressKeyPut(personKey: string, personEmailAddressKey: string, request?: PersonEmailEditRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1PersonsByPersonKeyEmailsByPersonEmailAddressKeyPut(personKey: string, personEmailAddressKey: string, request?: PersonEmailEditRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1PersonsByPersonKeyEmailsByPersonEmailAddressKeyPut(personKey: string, personEmailAddressKey: string, request?: PersonEmailEditRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyEmailsByPersonEmailAddressKeyPut.');
        }

        if (!personEmailAddressKey){
            throw new Error('Required parameter personEmailAddressKey was null or undefined when calling apiNskV1PersonsByPersonKeyEmailsByPersonEmailAddressKeyPut.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.put(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/emails/${encodeURIComponent(String(personEmailAddressKey))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets the collection of email addresses for a specific person.
     * 
     * @param personKey The unique person key.
     
     */
    public apiNskV1PersonsByPersonKeyEmailsGet(personKey: string, observe?: 'body', headers?: Headers): Observable<Array<PersonEmail>>;
    public apiNskV1PersonsByPersonKeyEmailsGet(personKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<PersonEmail>>>;
    public apiNskV1PersonsByPersonKeyEmailsGet(personKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyEmailsGet.');
        }


        const response: Observable<HttpResponse<Array<PersonEmail>>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/emails`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<PersonEmail>>(httpResponse.response));
        }
        return response;
    }


    /**
     * Creates a new email address for a specific person.
     * 
     * @param personKey The unique person key.
     * @param request The new email address.
     
     */
    public apiNskV1PersonsByPersonKeyEmailsPost(personKey: string, request?: PersonEmailCreateRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1PersonsByPersonKeyEmailsPost(personKey: string, request?: PersonEmailCreateRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1PersonsByPersonKeyEmailsPost(personKey: string, request?: PersonEmailCreateRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyEmailsPost.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.post(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/emails`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Retrieves a specific person by key.
     * 
     * @param personKey The unique person key.
     
     */
    public apiNskV1PersonsByPersonKeyGet(personKey: string, observe?: 'body', headers?: Headers): Observable<Person>;
    public apiNskV1PersonsByPersonKeyGet(personKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Person>>;
    public apiNskV1PersonsByPersonKeyGet(personKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyGet.');
        }


        const response: Observable<HttpResponse<Person>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Person>(httpResponse.response));
        }
        return response;
    }


    /**
     * Deletes a specific information on the logged in user&#39;s person.
     * 
     * @param personKey The unique person key.
     * @param personInformationKey The unique person information key.
     
     */
    public apiNskV1PersonsByPersonKeyInformationByPersonInformationKeyDelete(personKey: string, personInformationKey: string, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1PersonsByPersonKeyInformationByPersonInformationKeyDelete(personKey: string, personInformationKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1PersonsByPersonKeyInformationByPersonInformationKeyDelete(personKey: string, personInformationKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyInformationByPersonInformationKeyDelete.');
        }

        if (!personInformationKey){
            throw new Error('Required parameter personInformationKey was null or undefined when calling apiNskV1PersonsByPersonKeyInformationByPersonInformationKeyDelete.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.delete(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/information/${encodeURIComponent(String(personInformationKey))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets a specific information from the logged in user&#39;s person.
     * 
     * @param personKey The unique person key.
     * @param personInformationKey The unique person information key.
     
     */
    public apiNskV1PersonsByPersonKeyInformationByPersonInformationKeyGet(personKey: string, personInformationKey: string, observe?: 'body', headers?: Headers): Observable<PersonInformation>;
    public apiNskV1PersonsByPersonKeyInformationByPersonInformationKeyGet(personKey: string, personInformationKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<PersonInformation>>;
    public apiNskV1PersonsByPersonKeyInformationByPersonInformationKeyGet(personKey: string, personInformationKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyInformationByPersonInformationKeyGet.');
        }

        if (!personInformationKey){
            throw new Error('Required parameter personInformationKey was null or undefined when calling apiNskV1PersonsByPersonKeyInformationByPersonInformationKeyGet.');
        }


        const response: Observable<HttpResponse<PersonInformation>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/information/${encodeURIComponent(String(personInformationKey))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <PersonInformation>(httpResponse.response));
        }
        return response;
    }


    /**
     * Patches a specific information on the logged in user&#39;s person.
     * 
     * @param personKey The unique person key.
     * @param personInformationKey The unique person information key.
     * @param request The patched information.
     
     */
    public apiNskV1PersonsByPersonKeyInformationByPersonInformationKeyPatch(personKey: string, personInformationKey: string, request?: DeltaMapperPersonInformationEditRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1PersonsByPersonKeyInformationByPersonInformationKeyPatch(personKey: string, personInformationKey: string, request?: DeltaMapperPersonInformationEditRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1PersonsByPersonKeyInformationByPersonInformationKeyPatch(personKey: string, personInformationKey: string, request?: DeltaMapperPersonInformationEditRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyInformationByPersonInformationKeyPatch.');
        }

        if (!personInformationKey){
            throw new Error('Required parameter personInformationKey was null or undefined when calling apiNskV1PersonsByPersonKeyInformationByPersonInformationKeyPatch.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.patch(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/information/${encodeURIComponent(String(personInformationKey))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Updates a specific information on the logged in user&#39;s person.
     * 
     * @param personKey The unique person key.
     * @param personInformationKey The unique person information key.
     * @param request The modified information.
     
     */
    public apiNskV1PersonsByPersonKeyInformationByPersonInformationKeyPut(personKey: string, personInformationKey: string, request?: PersonInformationEditRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1PersonsByPersonKeyInformationByPersonInformationKeyPut(personKey: string, personInformationKey: string, request?: PersonInformationEditRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1PersonsByPersonKeyInformationByPersonInformationKeyPut(personKey: string, personInformationKey: string, request?: PersonInformationEditRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyInformationByPersonInformationKeyPut.');
        }

        if (!personInformationKey){
            throw new Error('Required parameter personInformationKey was null or undefined when calling apiNskV1PersonsByPersonKeyInformationByPersonInformationKeyPut.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.put(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/information/${encodeURIComponent(String(personInformationKey))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets all information from the logged in user&#39;s person.
     * 
     * @param personKey The unique person key.
     
     */
    public apiNskV1PersonsByPersonKeyInformationGet(personKey: string, observe?: 'body', headers?: Headers): Observable<Array<PersonInformation>>;
    public apiNskV1PersonsByPersonKeyInformationGet(personKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<PersonInformation>>>;
    public apiNskV1PersonsByPersonKeyInformationGet(personKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyInformationGet.');
        }


        const response: Observable<HttpResponse<Array<PersonInformation>>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/information`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<PersonInformation>>(httpResponse.response));
        }
        return response;
    }


    /**
     * Creates a new information on the logged in user&#39;s person.
     * 
     * @param personKey The unique person key.
     * @param request The new information.
     
     */
    public apiNskV1PersonsByPersonKeyInformationPost(personKey: string, request?: PersonInformationCreateRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1PersonsByPersonKeyInformationPost(personKey: string, request?: PersonInformationCreateRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1PersonsByPersonKeyInformationPost(personKey: string, request?: PersonInformationCreateRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyInformationPost.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.post(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/information`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Patches the person records basic information.
     * Only need to send in the data that is being requested to be updated.
     * @param personKey The unique person key.
     * @param request The person patch request.
     
     */
    public apiNskV1PersonsByPersonKeyPatch(personKey: string, request?: DeltaMapperPersonEditRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1PersonsByPersonKeyPatch(personKey: string, request?: DeltaMapperPersonEditRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1PersonsByPersonKeyPatch(personKey: string, request?: DeltaMapperPersonEditRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyPatch.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.patch(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Deletes a specific phone number for a specific person.
     * 
     * @param personKey The unique person key.
     * @param personPhoneNumberKey The unique person phone number key.
     
     */
    public apiNskV1PersonsByPersonKeyPhoneNumbersByPersonPhoneNumberKeyDelete(personKey: string, personPhoneNumberKey: string, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1PersonsByPersonKeyPhoneNumbersByPersonPhoneNumberKeyDelete(personKey: string, personPhoneNumberKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1PersonsByPersonKeyPhoneNumbersByPersonPhoneNumberKeyDelete(personKey: string, personPhoneNumberKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyPhoneNumbersByPersonPhoneNumberKeyDelete.');
        }

        if (!personPhoneNumberKey){
            throw new Error('Required parameter personPhoneNumberKey was null or undefined when calling apiNskV1PersonsByPersonKeyPhoneNumbersByPersonPhoneNumberKeyDelete.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.delete(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/phoneNumbers/${encodeURIComponent(String(personPhoneNumberKey))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets a specific phone number for a specific person.
     * 
     * @param personKey The unique person key.
     * @param personPhoneNumberKey The unique phone number key.
     
     */
    public apiNskV1PersonsByPersonKeyPhoneNumbersByPersonPhoneNumberKeyGet(personKey: string, personPhoneNumberKey: string, observe?: 'body', headers?: Headers): Observable<PersonPhoneNumber>;
    public apiNskV1PersonsByPersonKeyPhoneNumbersByPersonPhoneNumberKeyGet(personKey: string, personPhoneNumberKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<PersonPhoneNumber>>;
    public apiNskV1PersonsByPersonKeyPhoneNumbersByPersonPhoneNumberKeyGet(personKey: string, personPhoneNumberKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyPhoneNumbersByPersonPhoneNumberKeyGet.');
        }

        if (!personPhoneNumberKey){
            throw new Error('Required parameter personPhoneNumberKey was null or undefined when calling apiNskV1PersonsByPersonKeyPhoneNumbersByPersonPhoneNumberKeyGet.');
        }


        const response: Observable<HttpResponse<PersonPhoneNumber>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/phoneNumbers/${encodeURIComponent(String(personPhoneNumberKey))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <PersonPhoneNumber>(httpResponse.response));
        }
        return response;
    }


    /**
     * Patches a specific phone number for a specific person.
     * 
     * @param personKey The unique person key.
     * @param personPhoneNumberKey The unique person phone number key.
     * @param request The patched phone number.
     
     */
    public apiNskV1PersonsByPersonKeyPhoneNumbersByPersonPhoneNumberKeyPatch(personKey: string, personPhoneNumberKey: string, request?: DeltaMapperPersonPhoneNumberRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1PersonsByPersonKeyPhoneNumbersByPersonPhoneNumberKeyPatch(personKey: string, personPhoneNumberKey: string, request?: DeltaMapperPersonPhoneNumberRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1PersonsByPersonKeyPhoneNumbersByPersonPhoneNumberKeyPatch(personKey: string, personPhoneNumberKey: string, request?: DeltaMapperPersonPhoneNumberRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyPhoneNumbersByPersonPhoneNumberKeyPatch.');
        }

        if (!personPhoneNumberKey){
            throw new Error('Required parameter personPhoneNumberKey was null or undefined when calling apiNskV1PersonsByPersonKeyPhoneNumbersByPersonPhoneNumberKeyPatch.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.patch(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/phoneNumbers/${encodeURIComponent(String(personPhoneNumberKey))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Updates a specific phone number for a specific person.
     * 
     * @param personKey The unique person key.
     * @param personPhoneNumberKey The unique person phone number key.
     * @param request The modified phone number.
     
     */
    public apiNskV1PersonsByPersonKeyPhoneNumbersByPersonPhoneNumberKeyPut(personKey: string, personPhoneNumberKey: string, request?: PersonPhoneNumberRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1PersonsByPersonKeyPhoneNumbersByPersonPhoneNumberKeyPut(personKey: string, personPhoneNumberKey: string, request?: PersonPhoneNumberRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1PersonsByPersonKeyPhoneNumbersByPersonPhoneNumberKeyPut(personKey: string, personPhoneNumberKey: string, request?: PersonPhoneNumberRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyPhoneNumbersByPersonPhoneNumberKeyPut.');
        }

        if (!personPhoneNumberKey){
            throw new Error('Required parameter personPhoneNumberKey was null or undefined when calling apiNskV1PersonsByPersonKeyPhoneNumbersByPersonPhoneNumberKeyPut.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.put(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/phoneNumbers/${encodeURIComponent(String(personPhoneNumberKey))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets the collection of phone numbers for a specific person.
     * 
     * @param personKey The unique person key.
     
     */
    public apiNskV1PersonsByPersonKeyPhoneNumbersGet(personKey: string, observe?: 'body', headers?: Headers): Observable<Array<PersonPhoneNumber>>;
    public apiNskV1PersonsByPersonKeyPhoneNumbersGet(personKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<PersonPhoneNumber>>>;
    public apiNskV1PersonsByPersonKeyPhoneNumbersGet(personKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyPhoneNumbersGet.');
        }


        const response: Observable<HttpResponse<Array<PersonPhoneNumber>>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/phoneNumbers`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<PersonPhoneNumber>>(httpResponse.response));
        }
        return response;
    }


    /**
     * Creates a new phone number for a specific person.
     * 
     * @param personKey The unique person key.
     * @param request The new phone number.
     
     */
    public apiNskV1PersonsByPersonKeyPhoneNumbersPost(personKey: string, request?: PersonPhoneNumberRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1PersonsByPersonKeyPhoneNumbersPost(personKey: string, request?: PersonPhoneNumberRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1PersonsByPersonKeyPhoneNumbersPost(personKey: string, request?: PersonPhoneNumberRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyPhoneNumbersPost.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.post(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/phoneNumbers`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Deletes a specific preference for a specific person.
     * 
     * @param personKey The unique person key.
     * @param personPreferenceKey The unique person preference key.
     
     */
    public apiNskV1PersonsByPersonKeyPreferencesByPersonPreferenceKeyDelete(personKey: string, personPreferenceKey: string, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1PersonsByPersonKeyPreferencesByPersonPreferenceKeyDelete(personKey: string, personPreferenceKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1PersonsByPersonKeyPreferencesByPersonPreferenceKeyDelete(personKey: string, personPreferenceKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyPreferencesByPersonPreferenceKeyDelete.');
        }

        if (!personPreferenceKey){
            throw new Error('Required parameter personPreferenceKey was null or undefined when calling apiNskV1PersonsByPersonKeyPreferencesByPersonPreferenceKeyDelete.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.delete(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/preferences/${encodeURIComponent(String(personPreferenceKey))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets a specific preference for a specific person.
     * 
     * @param personKey The unique person key.
     * @param personPreferenceKey The unique person preference key.
     
     */
    public apiNskV1PersonsByPersonKeyPreferencesByPersonPreferenceKeyGet(personKey: string, personPreferenceKey: string, observe?: 'body', headers?: Headers): Observable<PersonPreference>;
    public apiNskV1PersonsByPersonKeyPreferencesByPersonPreferenceKeyGet(personKey: string, personPreferenceKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<PersonPreference>>;
    public apiNskV1PersonsByPersonKeyPreferencesByPersonPreferenceKeyGet(personKey: string, personPreferenceKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyPreferencesByPersonPreferenceKeyGet.');
        }

        if (!personPreferenceKey){
            throw new Error('Required parameter personPreferenceKey was null or undefined when calling apiNskV1PersonsByPersonKeyPreferencesByPersonPreferenceKeyGet.');
        }


        const response: Observable<HttpResponse<PersonPreference>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/preferences/${encodeURIComponent(String(personPreferenceKey))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <PersonPreference>(httpResponse.response));
        }
        return response;
    }


    /**
     * Patches a specific preference for a specific person.
     * 
     * @param personKey The unique person key.
     * @param personPreferenceKey The unique person preference key.
     * @param request The patched preference.
     
     */
    public apiNskV1PersonsByPersonKeyPreferencesByPersonPreferenceKeyPatch(personKey: string, personPreferenceKey: string, request?: DeltaMapperPersonPreferenceEditRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1PersonsByPersonKeyPreferencesByPersonPreferenceKeyPatch(personKey: string, personPreferenceKey: string, request?: DeltaMapperPersonPreferenceEditRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1PersonsByPersonKeyPreferencesByPersonPreferenceKeyPatch(personKey: string, personPreferenceKey: string, request?: DeltaMapperPersonPreferenceEditRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyPreferencesByPersonPreferenceKeyPatch.');
        }

        if (!personPreferenceKey){
            throw new Error('Required parameter personPreferenceKey was null or undefined when calling apiNskV1PersonsByPersonKeyPreferencesByPersonPreferenceKeyPatch.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.patch(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/preferences/${encodeURIComponent(String(personPreferenceKey))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Updates a specific preference for a specific person.
     * 
     * @param personKey The unique person key.
     * @param personPreferenceKey The unique person preference key.
     * @param request The modified preference.
     
     */
    public apiNskV1PersonsByPersonKeyPreferencesByPersonPreferenceKeyPut(personKey: string, personPreferenceKey: string, request?: PersonPreferenceEditRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1PersonsByPersonKeyPreferencesByPersonPreferenceKeyPut(personKey: string, personPreferenceKey: string, request?: PersonPreferenceEditRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1PersonsByPersonKeyPreferencesByPersonPreferenceKeyPut(personKey: string, personPreferenceKey: string, request?: PersonPreferenceEditRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyPreferencesByPersonPreferenceKeyPut.');
        }

        if (!personPreferenceKey){
            throw new Error('Required parameter personPreferenceKey was null or undefined when calling apiNskV1PersonsByPersonKeyPreferencesByPersonPreferenceKeyPut.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.put(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/preferences/${encodeURIComponent(String(personPreferenceKey))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets all preferences for a specific person.
     * 
     * @param personKey The unique person key.
     
     */
    public apiNskV1PersonsByPersonKeyPreferencesGet(personKey: string, observe?: 'body', headers?: Headers): Observable<Array<PersonPreference>>;
    public apiNskV1PersonsByPersonKeyPreferencesGet(personKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<PersonPreference>>>;
    public apiNskV1PersonsByPersonKeyPreferencesGet(personKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyPreferencesGet.');
        }


        const response: Observable<HttpResponse<Array<PersonPreference>>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/preferences`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<PersonPreference>>(httpResponse.response));
        }
        return response;
    }


    /**
     * Creates a new preference for a specific person.
     * 
     * @param personKey The unique person key.
     * @param request The new preference.
     
     */
    public apiNskV1PersonsByPersonKeyPreferencesPost(personKey: string, request?: PersonPreferenceCreateRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1PersonsByPersonKeyPreferencesPost(personKey: string, request?: PersonPreferenceCreateRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1PersonsByPersonKeyPreferencesPost(personKey: string, request?: PersonPreferenceCreateRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyPreferencesPost.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.post(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/preferences`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Deletes a specific program for a specific person.
     * 
     * @param personKey The unique person key.
     * @param personProgramKey The unique person program key.
     
     */
    public apiNskV1PersonsByPersonKeyProgramsByPersonProgramKeyDelete(personKey: string, personProgramKey: string, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1PersonsByPersonKeyProgramsByPersonProgramKeyDelete(personKey: string, personProgramKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1PersonsByPersonKeyProgramsByPersonProgramKeyDelete(personKey: string, personProgramKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyProgramsByPersonProgramKeyDelete.');
        }

        if (!personProgramKey){
            throw new Error('Required parameter personProgramKey was null or undefined when calling apiNskV1PersonsByPersonKeyProgramsByPersonProgramKeyDelete.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.delete(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/programs/${encodeURIComponent(String(personProgramKey))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets a specific program for a specific person.
     * 
     * @param personKey The unique person key.
     * @param personProgramKey The unique program key.
     
     */
    public apiNskV1PersonsByPersonKeyProgramsByPersonProgramKeyGet(personKey: string, personProgramKey: string, observe?: 'body', headers?: Headers): Observable<PersonCustomerProgram>;
    public apiNskV1PersonsByPersonKeyProgramsByPersonProgramKeyGet(personKey: string, personProgramKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<PersonCustomerProgram>>;
    public apiNskV1PersonsByPersonKeyProgramsByPersonProgramKeyGet(personKey: string, personProgramKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyProgramsByPersonProgramKeyGet.');
        }

        if (!personProgramKey){
            throw new Error('Required parameter personProgramKey was null or undefined when calling apiNskV1PersonsByPersonKeyProgramsByPersonProgramKeyGet.');
        }


        const response: Observable<HttpResponse<PersonCustomerProgram>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/programs/${encodeURIComponent(String(personProgramKey))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <PersonCustomerProgram>(httpResponse.response));
        }
        return response;
    }


    /**
     * Patches a specific program for a specific person.
     * 
     * @param personKey The unique person key.
     * @param personProgramKey The unique person program key.
     * @param request The patched program.
     
     */
    public apiNskV1PersonsByPersonKeyProgramsByPersonProgramKeyPatch(personKey: string, personProgramKey: string, request?: DeltaMapperPersonCustomerProgramEditRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1PersonsByPersonKeyProgramsByPersonProgramKeyPatch(personKey: string, personProgramKey: string, request?: DeltaMapperPersonCustomerProgramEditRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1PersonsByPersonKeyProgramsByPersonProgramKeyPatch(personKey: string, personProgramKey: string, request?: DeltaMapperPersonCustomerProgramEditRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyProgramsByPersonProgramKeyPatch.');
        }

        if (!personProgramKey){
            throw new Error('Required parameter personProgramKey was null or undefined when calling apiNskV1PersonsByPersonKeyProgramsByPersonProgramKeyPatch.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.patch(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/programs/${encodeURIComponent(String(personProgramKey))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Updates a specific program for a specific person.
     * 
     * @param personKey The unique person key.
     * @param personProgramKey The unique person program key.
     * @param request The modified program.
     
     */
    public apiNskV1PersonsByPersonKeyProgramsByPersonProgramKeyPut(personKey: string, personProgramKey: string, request?: PersonCustomerProgramEditRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1PersonsByPersonKeyProgramsByPersonProgramKeyPut(personKey: string, personProgramKey: string, request?: PersonCustomerProgramEditRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1PersonsByPersonKeyProgramsByPersonProgramKeyPut(personKey: string, personProgramKey: string, request?: PersonCustomerProgramEditRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyProgramsByPersonProgramKeyPut.');
        }

        if (!personProgramKey){
            throw new Error('Required parameter personProgramKey was null or undefined when calling apiNskV1PersonsByPersonKeyProgramsByPersonProgramKeyPut.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.put(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/programs/${encodeURIComponent(String(personProgramKey))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets the collection of programs for a specific person.
     * 
     * @param personKey The unique person key.
     
     */
    public apiNskV1PersonsByPersonKeyProgramsGet(personKey: string, observe?: 'body', headers?: Headers): Observable<Array<PersonCustomerProgram>>;
    public apiNskV1PersonsByPersonKeyProgramsGet(personKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<PersonCustomerProgram>>>;
    public apiNskV1PersonsByPersonKeyProgramsGet(personKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyProgramsGet.');
        }


        const response: Observable<HttpResponse<Array<PersonCustomerProgram>>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/programs`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<PersonCustomerProgram>>(httpResponse.response));
        }
        return response;
    }


    /**
     * Creates a new program for a specific person.
     * 
     * @param personKey The unique person key.
     * @param request The new program.
     
     */
    public apiNskV1PersonsByPersonKeyProgramsPost(personKey: string, request?: PersonCustomerProgramCreateRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1PersonsByPersonKeyProgramsPost(personKey: string, request?: PersonCustomerProgramCreateRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1PersonsByPersonKeyProgramsPost(personKey: string, request?: PersonCustomerProgramCreateRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyProgramsPost.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.post(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/programs`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Updates the person record basic information.
     * 
     * @param personKey The unique person key.
     * @param request The person edit request.
     
     */
    public apiNskV1PersonsByPersonKeyPut(personKey: string, request?: PersonEditRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1PersonsByPersonKeyPut(personKey: string, request?: PersonEditRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1PersonsByPersonKeyPut(personKey: string, request?: PersonEditRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyPut.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.put(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Deletes a specific stored payment for a specific person.
     * 
     * @param personKey The unique person key.
     * @param personStoredPaymentKey The unique person stored payment key.
     
     */
    public apiNskV1PersonsByPersonKeyStoredPaymentsByPersonStoredPaymentKeyDelete(personKey: string, personStoredPaymentKey: string, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1PersonsByPersonKeyStoredPaymentsByPersonStoredPaymentKeyDelete(personKey: string, personStoredPaymentKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1PersonsByPersonKeyStoredPaymentsByPersonStoredPaymentKeyDelete(personKey: string, personStoredPaymentKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyStoredPaymentsByPersonStoredPaymentKeyDelete.');
        }

        if (!personStoredPaymentKey){
            throw new Error('Required parameter personStoredPaymentKey was null or undefined when calling apiNskV1PersonsByPersonKeyStoredPaymentsByPersonStoredPaymentKeyDelete.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.delete(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/storedPayments/${encodeURIComponent(String(personStoredPaymentKey))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets a specific stored payment for a specific person.
     * 
     * @param personKey The unique person key.
     * @param personStoredPaymentKey The unique stored payment key.
     
     */
    public apiNskV1PersonsByPersonKeyStoredPaymentsByPersonStoredPaymentKeyGet(personKey: string, personStoredPaymentKey: string, observe?: 'body', headers?: Headers): Observable<PersonStoredPayment>;
    public apiNskV1PersonsByPersonKeyStoredPaymentsByPersonStoredPaymentKeyGet(personKey: string, personStoredPaymentKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<PersonStoredPayment>>;
    public apiNskV1PersonsByPersonKeyStoredPaymentsByPersonStoredPaymentKeyGet(personKey: string, personStoredPaymentKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyStoredPaymentsByPersonStoredPaymentKeyGet.');
        }

        if (!personStoredPaymentKey){
            throw new Error('Required parameter personStoredPaymentKey was null or undefined when calling apiNskV1PersonsByPersonKeyStoredPaymentsByPersonStoredPaymentKeyGet.');
        }


        const response: Observable<HttpResponse<PersonStoredPayment>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/storedPayments/${encodeURIComponent(String(personStoredPaymentKey))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <PersonStoredPayment>(httpResponse.response));
        }
        return response;
    }


    /**
     * Patches a specific stored payment for a specific person.
     * 
     * @param personKey The unique person key.
     * @param personStoredPaymentKey The unique person stored payment key.
     * @param request The patched stored payment.
     
     */
    public apiNskV1PersonsByPersonKeyStoredPaymentsByPersonStoredPaymentKeyPatch(personKey: string, personStoredPaymentKey: string, request?: DeltaMapperPersonStoredPaymentUpdateRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1PersonsByPersonKeyStoredPaymentsByPersonStoredPaymentKeyPatch(personKey: string, personStoredPaymentKey: string, request?: DeltaMapperPersonStoredPaymentUpdateRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1PersonsByPersonKeyStoredPaymentsByPersonStoredPaymentKeyPatch(personKey: string, personStoredPaymentKey: string, request?: DeltaMapperPersonStoredPaymentUpdateRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyStoredPaymentsByPersonStoredPaymentKeyPatch.');
        }

        if (!personStoredPaymentKey){
            throw new Error('Required parameter personStoredPaymentKey was null or undefined when calling apiNskV1PersonsByPersonKeyStoredPaymentsByPersonStoredPaymentKeyPatch.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.patch(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/storedPayments/${encodeURIComponent(String(personStoredPaymentKey))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Updates a specific stored payment for a specific person.
     * 
     * @param personKey The unique person key.
     * @param personStoredPaymentKey The unique person stored payment key.
     * @param request The modified stored payment.
     
     */
    public apiNskV1PersonsByPersonKeyStoredPaymentsByPersonStoredPaymentKeyPut(personKey: string, personStoredPaymentKey: string, request?: PersonStoredPaymentRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1PersonsByPersonKeyStoredPaymentsByPersonStoredPaymentKeyPut(personKey: string, personStoredPaymentKey: string, request?: PersonStoredPaymentRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1PersonsByPersonKeyStoredPaymentsByPersonStoredPaymentKeyPut(personKey: string, personStoredPaymentKey: string, request?: PersonStoredPaymentRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyStoredPaymentsByPersonStoredPaymentKeyPut.');
        }

        if (!personStoredPaymentKey){
            throw new Error('Required parameter personStoredPaymentKey was null or undefined when calling apiNskV1PersonsByPersonKeyStoredPaymentsByPersonStoredPaymentKeyPut.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.put(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/storedPayments/${encodeURIComponent(String(personStoredPaymentKey))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets the collection of stored payments for a specific person.
     * 
     * @param personKey The unique person key.
     
     */
    public apiNskV1PersonsByPersonKeyStoredPaymentsGet(personKey: string, observe?: 'body', headers?: Headers): Observable<Array<PersonStoredPayment>>;
    public apiNskV1PersonsByPersonKeyStoredPaymentsGet(personKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<PersonStoredPayment>>>;
    public apiNskV1PersonsByPersonKeyStoredPaymentsGet(personKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyStoredPaymentsGet.');
        }


        const response: Observable<HttpResponse<Array<PersonStoredPayment>>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/storedPayments`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<PersonStoredPayment>>(httpResponse.response));
        }
        return response;
    }


    /**
     * Creates a new stored payment for a specific person.
     * 
     * @param personKey The unique person key.
     * @param request The new stored payment.
     
     */
    public apiNskV1PersonsByPersonKeyStoredPaymentsPost(personKey: string, request?: PersonStoredPaymentRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1PersonsByPersonKeyStoredPaymentsPost(personKey: string, request?: PersonStoredPaymentRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1PersonsByPersonKeyStoredPaymentsPost(personKey: string, request?: PersonStoredPaymentRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyStoredPaymentsPost.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.post(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/storedPayments`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Deletes a specific travel document for a specific person.
     * 
     * @param personKey The unique person key.
     * @param personTravelDocumentKey The unique person travel document key.
     
     */
    public apiNskV1PersonsByPersonKeyTravelDocumentsByPersonTravelDocumentKeyDelete(personKey: string, personTravelDocumentKey: string, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1PersonsByPersonKeyTravelDocumentsByPersonTravelDocumentKeyDelete(personKey: string, personTravelDocumentKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1PersonsByPersonKeyTravelDocumentsByPersonTravelDocumentKeyDelete(personKey: string, personTravelDocumentKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyTravelDocumentsByPersonTravelDocumentKeyDelete.');
        }

        if (!personTravelDocumentKey){
            throw new Error('Required parameter personTravelDocumentKey was null or undefined when calling apiNskV1PersonsByPersonKeyTravelDocumentsByPersonTravelDocumentKeyDelete.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.delete(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/travelDocuments/${encodeURIComponent(String(personTravelDocumentKey))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets a specific travel document for a specific person.
     * 
     * @param personKey The unique person key.
     * @param personTravelDocumentKey The unique travel document key.
     
     */
    public apiNskV1PersonsByPersonKeyTravelDocumentsByPersonTravelDocumentKeyGet(personKey: string, personTravelDocumentKey: string, observe?: 'body', headers?: Headers): Observable<PersonTravelDocument>;
    public apiNskV1PersonsByPersonKeyTravelDocumentsByPersonTravelDocumentKeyGet(personKey: string, personTravelDocumentKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<PersonTravelDocument>>;
    public apiNskV1PersonsByPersonKeyTravelDocumentsByPersonTravelDocumentKeyGet(personKey: string, personTravelDocumentKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyTravelDocumentsByPersonTravelDocumentKeyGet.');
        }

        if (!personTravelDocumentKey){
            throw new Error('Required parameter personTravelDocumentKey was null or undefined when calling apiNskV1PersonsByPersonKeyTravelDocumentsByPersonTravelDocumentKeyGet.');
        }


        const response: Observable<HttpResponse<PersonTravelDocument>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/travelDocuments/${encodeURIComponent(String(personTravelDocumentKey))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <PersonTravelDocument>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets the collection of travel documents for a specific person.
     * 
     * @param personKey The unique person key.
     
     */
    public apiNskV1PersonsByPersonKeyTravelDocumentsGet(personKey: string, observe?: 'body', headers?: Headers): Observable<Array<PersonTravelDocument>>;
    public apiNskV1PersonsByPersonKeyTravelDocumentsGet(personKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<PersonTravelDocument>>>;
    public apiNskV1PersonsByPersonKeyTravelDocumentsGet(personKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyTravelDocumentsGet.');
        }


        const response: Observable<HttpResponse<Array<PersonTravelDocument>>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/travelDocuments`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<PersonTravelDocument>>(httpResponse.response));
        }
        return response;
    }


    /**
     * Creates a new travel document for a specific person.
     * 
     * @param personKey The unique person key.
     * @param request The new travel document.
     
     */
    public apiNskV1PersonsByPersonKeyTravelDocumentsPost(personKey: string, request?: PersonTravelDocumentRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1PersonsByPersonKeyTravelDocumentsPost(personKey: string, request?: PersonTravelDocumentRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1PersonsByPersonKeyTravelDocumentsPost(personKey: string, request?: PersonTravelDocumentRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyTravelDocumentsPost.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.post(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/travelDocuments`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Deletes a person travel notification for a person.
     * 
     * @param personKey The person key.
     * @param travelNotificationKey The travel notification key.
     
     */
    public apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyDelete(personKey: string, travelNotificationKey: string, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyDelete(personKey: string, travelNotificationKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyDelete(personKey: string, travelNotificationKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyDelete.');
        }

        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyDelete.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.delete(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Deletes a notification event from a person travel notification for a person.
     * 
     * @param personKey The person key.
     * @param travelNotificationKey The travel notification key.
     * @param eventType The notification event type.
     
     */
    public apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyEventsByEventTypeDelete(personKey: string, travelNotificationKey: string, eventType: 'DepartureDelay' | 'ArrivalDelay' | 'ScheduleChange' | 'CheckIn', observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyEventsByEventTypeDelete(personKey: string, travelNotificationKey: string, eventType: 'DepartureDelay' | 'ArrivalDelay' | 'ScheduleChange' | 'CheckIn', observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyEventsByEventTypeDelete(personKey: string, travelNotificationKey: string, eventType: 'DepartureDelay' | 'ArrivalDelay' | 'ScheduleChange' | 'CheckIn', observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyEventsByEventTypeDelete.');
        }

        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyEventsByEventTypeDelete.');
        }

        if (!eventType){
            throw new Error('Required parameter eventType was null or undefined when calling apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyEventsByEventTypeDelete.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.delete(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}/events/${encodeURIComponent(String(eventType))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets a notification event for a person travel notification for a person.
     * 
     * @param personKey The person key.
     * @param travelNotificationKey The travel notification key.
     * @param eventType The event type.
     
     */
    public apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyEventsByEventTypeGet(personKey: string, travelNotificationKey: string, eventType: 'DepartureDelay' | 'ArrivalDelay' | 'ScheduleChange' | 'CheckIn', observe?: 'body', headers?: Headers): Observable<NotificationEvent>;
    public apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyEventsByEventTypeGet(personKey: string, travelNotificationKey: string, eventType: 'DepartureDelay' | 'ArrivalDelay' | 'ScheduleChange' | 'CheckIn', observe?: 'response', headers?: Headers): Observable<HttpResponse<NotificationEvent>>;
    public apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyEventsByEventTypeGet(personKey: string, travelNotificationKey: string, eventType: 'DepartureDelay' | 'ArrivalDelay' | 'ScheduleChange' | 'CheckIn', observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyEventsByEventTypeGet.');
        }

        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyEventsByEventTypeGet.');
        }

        if (!eventType){
            throw new Error('Required parameter eventType was null or undefined when calling apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyEventsByEventTypeGet.');
        }


        const response: Observable<HttpResponse<NotificationEvent>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}/events/${encodeURIComponent(String(eventType))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <NotificationEvent>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets notification events for a person travel notification for a person.
     * 
     * @param personKey The person key.
     * @param travelNotificationKey The travel notification key.
     
     */
    public apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyEventsGet(personKey: string, travelNotificationKey: string, observe?: 'body', headers?: Headers): Observable<Array<NotificationEvent>>;
    public apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyEventsGet(personKey: string, travelNotificationKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<NotificationEvent>>>;
    public apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyEventsGet(personKey: string, travelNotificationKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyEventsGet.');
        }

        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyEventsGet.');
        }


        const response: Observable<HttpResponse<Array<NotificationEvent>>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}/events`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<NotificationEvent>>(httpResponse.response));
        }
        return response;
    }


    /**
     * Creates a notification event for a person travel notification for a person.
     * 
     * @param personKey The person key.
     * @param travelNotificationKey The travel notification key.
     * @param request The notification event create request.
     
     */
    public apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyEventsPost(personKey: string, travelNotificationKey: string, request?: NotificationEventCreateRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyEventsPost(personKey: string, travelNotificationKey: string, request?: NotificationEventCreateRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyEventsPost(personKey: string, travelNotificationKey: string, request?: NotificationEventCreateRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyEventsPost.');
        }

        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyEventsPost.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.post(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}/events`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets a person travel notification for a person.
     * 
     * @param personKey The person key.
     * @param travelNotificationKey The travel notification key.
     
     */
    public apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyGet(personKey: string, travelNotificationKey: string, observe?: 'body', headers?: Headers): Observable<TravelNotification>;
    public apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyGet(personKey: string, travelNotificationKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<TravelNotification>>;
    public apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyGet(personKey: string, travelNotificationKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyGet.');
        }

        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyGet.');
        }


        const response: Observable<HttpResponse<TravelNotification>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <TravelNotification>(httpResponse.response));
        }
        return response;
    }


    /**
     * Patches a person travel notification for a person.
     * 
     * @param personKey The person key.
     * @param travelNotificationKey The travel notification key.
     * @param request The delta mapper travel notification edit request.
     
     */
    public apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyPatch(personKey: string, travelNotificationKey: string, request?: DeltaMapperTravelNotificationEditRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyPatch(personKey: string, travelNotificationKey: string, request?: DeltaMapperTravelNotificationEditRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyPatch(personKey: string, travelNotificationKey: string, request?: DeltaMapperTravelNotificationEditRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyPatch.');
        }

        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyPatch.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.patch(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Updates a person travel notification for a person.
     * 
     * @param personKey The person key.
     * @param travelNotificationKey The travel notification key.
     * @param request The travel notification edit request.
     
     */
    public apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyPut(personKey: string, travelNotificationKey: string, request?: TravelNotificationEditRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyPut(personKey: string, travelNotificationKey: string, request?: TravelNotificationEditRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyPut(personKey: string, travelNotificationKey: string, request?: TravelNotificationEditRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyPut.');
        }

        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyPut.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.put(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Deletes a notification timed event from a person travel notification for a person.
     * 
     * @param personKey The person key.
     * @param travelNotificationKey The travel notification key.
     * @param timedEventType The notification timed event type.
     
     */
    public apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeDelete(personKey: string, travelNotificationKey: string, timedEventType: 'Departure' | 'Arrival', observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeDelete(personKey: string, travelNotificationKey: string, timedEventType: 'Departure' | 'Arrival', observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeDelete(personKey: string, travelNotificationKey: string, timedEventType: 'Departure' | 'Arrival', observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeDelete.');
        }

        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeDelete.');
        }

        if (!timedEventType){
            throw new Error('Required parameter timedEventType was null or undefined when calling apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeDelete.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.delete(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}/timedEvents/${encodeURIComponent(String(timedEventType))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets a notification timed event for a person travel notification for a person.
     * 
     * @param personKey The person key.
     * @param travelNotificationKey The travel notification key.
     * @param timedEventType The timed event type.
     
     */
    public apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeGet(personKey: string, travelNotificationKey: string, timedEventType: 'Departure' | 'Arrival', observe?: 'body', headers?: Headers): Observable<NotificationTimedEvent>;
    public apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeGet(personKey: string, travelNotificationKey: string, timedEventType: 'Departure' | 'Arrival', observe?: 'response', headers?: Headers): Observable<HttpResponse<NotificationTimedEvent>>;
    public apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeGet(personKey: string, travelNotificationKey: string, timedEventType: 'Departure' | 'Arrival', observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeGet.');
        }

        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeGet.');
        }

        if (!timedEventType){
            throw new Error('Required parameter timedEventType was null or undefined when calling apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeGet.');
        }


        const response: Observable<HttpResponse<NotificationTimedEvent>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}/timedEvents/${encodeURIComponent(String(timedEventType))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <NotificationTimedEvent>(httpResponse.response));
        }
        return response;
    }


    /**
     * Updates a notification timed event for a person travel notification for a person.
     * 
     * @param personKey The person key.
     * @param travelNotificationKey The travel notification key.
     * @param timedEventType The notification timed event type.
     * @param request The updated notification timed event request.
     
     */
    public apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypePut(personKey: string, travelNotificationKey: string, timedEventType: 'Departure' | 'Arrival', request?: NotificationTimedEventEditRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypePut(personKey: string, travelNotificationKey: string, timedEventType: 'Departure' | 'Arrival', request?: NotificationTimedEventEditRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypePut(personKey: string, travelNotificationKey: string, timedEventType: 'Departure' | 'Arrival', request?: NotificationTimedEventEditRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypePut.');
        }

        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypePut.');
        }

        if (!timedEventType){
            throw new Error('Required parameter timedEventType was null or undefined when calling apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypePut.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.put(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}/timedEvents/${encodeURIComponent(String(timedEventType))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets notification timed events for a person travel notification for a person.
     * 
     * @param personKey The person key.
     * @param travelNotificationKey The travel notification key.
     
     */
    public apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyTimedEventsGet(personKey: string, travelNotificationKey: string, observe?: 'body', headers?: Headers): Observable<Array<NotificationTimedEvent>>;
    public apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyTimedEventsGet(personKey: string, travelNotificationKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<NotificationTimedEvent>>>;
    public apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyTimedEventsGet(personKey: string, travelNotificationKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyTimedEventsGet.');
        }

        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyTimedEventsGet.');
        }


        const response: Observable<HttpResponse<Array<NotificationTimedEvent>>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}/timedEvents`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<NotificationTimedEvent>>(httpResponse.response));
        }
        return response;
    }


    /**
     * Creates a notification timed event for a person travel notification for a person.
     * 
     * @param personKey The person key.
     * @param travelNotificationKey The travel notification key.
     * @param request The notification timed even create request.
     
     */
    public apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyTimedEventsPost(personKey: string, travelNotificationKey: string, request?: NotificationTimedEventCreateRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyTimedEventsPost(personKey: string, travelNotificationKey: string, request?: NotificationTimedEventCreateRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyTimedEventsPost(personKey: string, travelNotificationKey: string, request?: NotificationTimedEventCreateRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyTimedEventsPost.');
        }

        if (!travelNotificationKey){
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyTimedEventsPost.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.post(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}/timedEvents`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets person travel notifications for a person.
     * 
     * @param personKey The person key.
     
     */
    public apiNskV1PersonsByPersonKeyTravelNotificationsGet(personKey: string, observe?: 'body', headers?: Headers): Observable<Array<TravelNotification>>;
    public apiNskV1PersonsByPersonKeyTravelNotificationsGet(personKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<TravelNotification>>>;
    public apiNskV1PersonsByPersonKeyTravelNotificationsGet(personKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyTravelNotificationsGet.');
        }


        const response: Observable<HttpResponse<Array<TravelNotification>>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/travelNotifications`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<TravelNotification>>(httpResponse.response));
        }
        return response;
    }


    /**
     * Creates a person travel notification for a person.
     * 
     * @param personKey The person key.
     * @param request The travel notification create request.
     
     */
    public apiNskV1PersonsByPersonKeyTravelNotificationsPost(personKey: string, request?: TravelNotificationCreateRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1PersonsByPersonKeyTravelNotificationsPost(personKey: string, request?: TravelNotificationCreateRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1PersonsByPersonKeyTravelNotificationsPost(personKey: string, request?: TravelNotificationCreateRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV1PersonsByPersonKeyTravelNotificationsPost.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.post(`${this.basePath}/api/nsk/v1/persons/${encodeURIComponent(String(personKey))}/travelNotifications`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Search person records.
     * 
     * @param activeOnly Include active person records only.
     * @param firstName The person&#39;s first name to search by.
     * @param lastName The person&#39;s last name to search by.
     * @param firstNameMatching The matching criteria for the person&#39;s first name.
     * @param customerNumber The person&#39;s customer number.
     * @param phoneNumber The phone number to search by.
     * @param emailAddress The email address to search by.
     * @param programNumber The program number to search by.
     * @param programCode The program code to search by.
     * @param type The person type to search by.
     * @param nationalIdNumber The national ID number to search by.
     * @param nationalIdNumberMatching The matching criteria for the national ID number.
     * @param returnCount The number of results to return.
     * @param lastPersonKey The last person key (used for paging).
     
     */
    public apiNskV1PersonsGet(activeOnly: boolean, firstName?: string, lastName?: string, firstNameMatching?: 'StartsWith' | 'EndsWith' | 'Contains' | 'ExactMatch', customerNumber?: string, phoneNumber?: string, emailAddress?: string, programNumber?: string, programCode?: string, type?: 'None' | 'Customer' | 'Agent', nationalIdNumber?: string, nationalIdNumberMatching?: 'StartsWith' | 'EndsWith' | 'Contains' | 'ExactMatch', returnCount?: number, lastPersonKey?: string, observe?: 'body', headers?: Headers): Observable<Array<PersonRecord>>;
    public apiNskV1PersonsGet(activeOnly: boolean, firstName?: string, lastName?: string, firstNameMatching?: 'StartsWith' | 'EndsWith' | 'Contains' | 'ExactMatch', customerNumber?: string, phoneNumber?: string, emailAddress?: string, programNumber?: string, programCode?: string, type?: 'None' | 'Customer' | 'Agent', nationalIdNumber?: string, nationalIdNumberMatching?: 'StartsWith' | 'EndsWith' | 'Contains' | 'ExactMatch', returnCount?: number, lastPersonKey?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<PersonRecord>>>;
    public apiNskV1PersonsGet(activeOnly: boolean, firstName?: string, lastName?: string, firstNameMatching?: 'StartsWith' | 'EndsWith' | 'Contains' | 'ExactMatch', customerNumber?: string, phoneNumber?: string, emailAddress?: string, programNumber?: string, programCode?: string, type?: 'None' | 'Customer' | 'Agent', nationalIdNumber?: string, nationalIdNumberMatching?: 'StartsWith' | 'EndsWith' | 'Contains' | 'ExactMatch', returnCount?: number, lastPersonKey?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!activeOnly){
            throw new Error('Required parameter activeOnly was null or undefined when calling apiNskV1PersonsGet.');
        }

        let queryParameters: string[] = [];
        if (firstName !== undefined) {
            queryParameters.push("firstName="+encodeURIComponent(String(firstName)));
        }
        if (lastName !== undefined) {
            queryParameters.push("lastName="+encodeURIComponent(String(lastName)));
        }
        if (firstNameMatching !== undefined) {
            queryParameters.push("firstNameMatching="+encodeURIComponent(String(firstNameMatching)));
        }
        if (customerNumber !== undefined) {
            queryParameters.push("customerNumber="+encodeURIComponent(String(customerNumber)));
        }
        if (phoneNumber !== undefined) {
            queryParameters.push("phoneNumber="+encodeURIComponent(String(phoneNumber)));
        }
        if (emailAddress !== undefined) {
            queryParameters.push("emailAddress="+encodeURIComponent(String(emailAddress)));
        }
        if (programNumber !== undefined) {
            queryParameters.push("programNumber="+encodeURIComponent(String(programNumber)));
        }
        if (programCode !== undefined) {
            queryParameters.push("programCode="+encodeURIComponent(String(programCode)));
        }
        if (type !== undefined) {
            queryParameters.push("type="+encodeURIComponent(String(type)));
        }
        if (nationalIdNumber !== undefined) {
            queryParameters.push("nationalIdNumber="+encodeURIComponent(String(nationalIdNumber)));
        }
        if (nationalIdNumberMatching !== undefined) {
            queryParameters.push("nationalIdNumberMatching="+encodeURIComponent(String(nationalIdNumberMatching)));
        }
        if (returnCount !== undefined) {
            queryParameters.push("returnCount="+encodeURIComponent(String(returnCount)));
        }
        if (lastPersonKey !== undefined) {
            queryParameters.push("lastPersonKey="+encodeURIComponent(String(lastPersonKey)));
        }
        if (activeOnly !== undefined) {
            queryParameters.push("activeOnly="+encodeURIComponent(String(activeOnly)));
        }


        const response: Observable<HttpResponse<Array<PersonRecord>>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/persons?${queryParameters.join('&')}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<PersonRecord>>(httpResponse.response));
        }
        return response;
    }


    /**
     * Creates a new person record.
     * 
     * @param request The person create request.
     
     */
    public apiNskV1PersonsPost(request?: PersonCreateRequest, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV1PersonsPost(request?: PersonCreateRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1PersonsPost(request?: PersonCreateRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {

        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.post(`${this.basePath}/api/nsk/v1/persons`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Patches a specific travel document for a specific person.
     * 
     * @param personKey The unique person key.
     * @param personTravelDocumentKey The unique person travel document key.
     * @param request The patched travel document.
     
     */
    public apiNskV2PersonsByPersonKeyTravelDocumentsByPersonTravelDocumentKeyPatch(personKey: string, personTravelDocumentKey: string, request?: DeltaMapperTravelDocumentEditRequestv2, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV2PersonsByPersonKeyTravelDocumentsByPersonTravelDocumentKeyPatch(personKey: string, personTravelDocumentKey: string, request?: DeltaMapperTravelDocumentEditRequestv2, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV2PersonsByPersonKeyTravelDocumentsByPersonTravelDocumentKeyPatch(personKey: string, personTravelDocumentKey: string, request?: DeltaMapperTravelDocumentEditRequestv2, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV2PersonsByPersonKeyTravelDocumentsByPersonTravelDocumentKeyPatch.');
        }

        if (!personTravelDocumentKey){
            throw new Error('Required parameter personTravelDocumentKey was null or undefined when calling apiNskV2PersonsByPersonKeyTravelDocumentsByPersonTravelDocumentKeyPatch.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.patch(`${this.basePath}/api/nsk/v2/persons/${encodeURIComponent(String(personKey))}/travelDocuments/${encodeURIComponent(String(personTravelDocumentKey))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }


    /**
     * Updates a specific travel document for a specific person.
     * 
     * @param personKey The unique person key.
     * @param personTravelDocumentKey The unique person travel document key.
     * @param request The modified travel document.
     
     */
    public apiNskV2PersonsByPersonKeyTravelDocumentsByPersonTravelDocumentKeyPut(personKey: string, personTravelDocumentKey: string, request?: TravelDocumentEditRequestv2, observe?: 'body', headers?: Headers): Observable<IJsonResponse>;
    public apiNskV2PersonsByPersonKeyTravelDocumentsByPersonTravelDocumentKeyPut(personKey: string, personTravelDocumentKey: string, request?: TravelDocumentEditRequestv2, observe?: 'response', headers?: Headers): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV2PersonsByPersonKeyTravelDocumentsByPersonTravelDocumentKeyPut(personKey: string, personTravelDocumentKey: string, request?: TravelDocumentEditRequestv2, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!personKey){
            throw new Error('Required parameter personKey was null or undefined when calling apiNskV2PersonsByPersonKeyTravelDocumentsByPersonTravelDocumentKeyPut.');
        }

        if (!personTravelDocumentKey){
            throw new Error('Required parameter personTravelDocumentKey was null or undefined when calling apiNskV2PersonsByPersonKeyTravelDocumentsByPersonTravelDocumentKeyPut.');
        }


        const response: Observable<HttpResponse<IJsonResponse>> = this.httpClient.put(`${this.basePath}/api/nsk/v2/persons/${encodeURIComponent(String(personKey))}/travelDocuments/${encodeURIComponent(String(personTravelDocumentKey))}`, request , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <IJsonResponse>(httpResponse.response));
        }
        return response;
    }

}
