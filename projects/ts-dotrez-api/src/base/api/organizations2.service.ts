/**
 * API - Current Routes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: trunk
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from "rxjs";
import { map } from "rxjs/operators";
import { inject, injectable } from "inversify";

import {
  ChildAccountTransactionsRequest,
  CreateOrganizationAccountRequest,
  DeltaMapperOrganizationEditRequest,
  IJsonResponse,
  OrganizationAccount,
  OrganizationCommissionRate,
  OrganizationCreateRequest,
  OrganizationEditRequest,
  OrganizationExternalAccountRequest,
  OrganizationExternalAccountv2,
  OrganizationRecord,
  OrganizationRegisterRequest,
  OrganizationTransactionRequest,
  Organizationv2,
  PhoneNumber,
  PhoneNumberBase,
  Transaction
} from "api-models";

import { IHttpClient } from "../IHttpClient";
import { IAPIConfiguration } from "../IAPIConfiguration";
import { HttpResponse } from "../HttpResponse";
import { Headers } from "../Headers";

import { COLLECTION_FORMATS } from "../variables";

@injectable()
export class Organizations2Service {
  private basePath: string = "https://localhost";

  constructor(
    @inject("IApiHttpClient") private httpClient: IHttpClient,
    @inject("IAPIConfiguration") private APIConfiguration: IAPIConfiguration
  ) {
    if (this.APIConfiguration.basePath)
      this.basePath = this.APIConfiguration.basePath;
  }

  /**
     * Adjust the available amount of a child account.
     * The known list of parent-child relations are as follows:  - Dependent accounts are not supported.  - A parent&#39;s account of type credit may have children of type supplemental or credit.  - A parent&#39;s account of type prepaid may have children of type prepaid.  - No other combination of parent-child relations are supported.
     * @param organizationCode The account reference number for the child organization.
     * @param request The child account transaction request.
     
     */
  public apiNskV1Organizations2ByOrganizationCodeAccountChildAccountTransactionsPost(
    organizationCode: string,
    request?: ChildAccountTransactionsRequest,
    observe?: "body",
    headers?: Headers
  ): Observable<IJsonResponse>;
  public apiNskV1Organizations2ByOrganizationCodeAccountChildAccountTransactionsPost(
    organizationCode: string,
    request?: ChildAccountTransactionsRequest,
    observe?: "response",
    headers?: Headers
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV1Organizations2ByOrganizationCodeAccountChildAccountTransactionsPost(
    organizationCode: string,
    request?: ChildAccountTransactionsRequest,
    observe: any = "body",
    headers: Headers = {}
  ): Observable<any> {
    if (!organizationCode) {
      throw new Error(
        "Required parameter organizationCode was null or undefined when calling apiNskV1Organizations2ByOrganizationCodeAccountChildAccountTransactionsPost."
      );
    }

    const response: Observable<HttpResponse<
      IJsonResponse
    >> = this.httpClient.post(
      `${this.basePath}/api/nsk/v1/organizations2/${encodeURIComponent(
        String(organizationCode)
      )}/account/childAccountTransactions`,
      request,
      headers
    );
    if (observe == "body") {
      return response.pipe(
        map(httpResponse => <IJsonResponse>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Adjust the credit limit of a child account.
     * The known list of parent-child relations are as follows:  - Dependent accounts are not supported.  - A parent&#39;s account of type credit may have children of type supplemental or credit.  - A parent&#39;s account of type prepaid may have children of type prepaid.  - No other combination of parent-child relations are supported.
     * @param organizationCode The account reference number for the child organization.
     * @param request The child account transaction request.
     
     */
  public apiNskV1Organizations2ByOrganizationCodeAccountChildAccountTransactionsPut(
    organizationCode: string,
    request?: ChildAccountTransactionsRequest,
    observe?: "body",
    headers?: Headers
  ): Observable<IJsonResponse>;
  public apiNskV1Organizations2ByOrganizationCodeAccountChildAccountTransactionsPut(
    organizationCode: string,
    request?: ChildAccountTransactionsRequest,
    observe?: "response",
    headers?: Headers
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV1Organizations2ByOrganizationCodeAccountChildAccountTransactionsPut(
    organizationCode: string,
    request?: ChildAccountTransactionsRequest,
    observe: any = "body",
    headers: Headers = {}
  ): Observable<any> {
    if (!organizationCode) {
      throw new Error(
        "Required parameter organizationCode was null or undefined when calling apiNskV1Organizations2ByOrganizationCodeAccountChildAccountTransactionsPut."
      );
    }

    const response: Observable<HttpResponse<
      IJsonResponse
    >> = this.httpClient.put(
      `${this.basePath}/api/nsk/v1/organizations2/${encodeURIComponent(
        String(organizationCode)
      )}/account/childAccountTransactions`,
      request,
      headers
    );
    if (observe == "body") {
      return response.pipe(
        map(httpResponse => <IJsonResponse>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Retrieves the organization account and collections based on the organization code.
     * 
     * @param organizationCode The organization code.
     
     */
  public apiNskV1Organizations2ByOrganizationCodeAccountGet(
    organizationCode: string,
    observe?: "body",
    headers?: Headers
  ): Observable<OrganizationAccount>;
  public apiNskV1Organizations2ByOrganizationCodeAccountGet(
    organizationCode: string,
    observe?: "response",
    headers?: Headers
  ): Observable<HttpResponse<OrganizationAccount>>;
  public apiNskV1Organizations2ByOrganizationCodeAccountGet(
    organizationCode: string,
    observe: any = "body",
    headers: Headers = {}
  ): Observable<any> {
    if (!organizationCode) {
      throw new Error(
        "Required parameter organizationCode was null or undefined when calling apiNskV1Organizations2ByOrganizationCodeAccountGet."
      );
    }

    const response: Observable<HttpResponse<
      OrganizationAccount
    >> = this.httpClient.get(
      `${this.basePath}/api/nsk/v1/organizations2/${encodeURIComponent(
        String(organizationCode)
      )}/account`,
      headers
    );
    if (observe == "body") {
      return response.pipe(
        map(httpResponse => <OrganizationAccount>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Creates an organization account based on the organization code.
     * 
     * @param organizationCode The organization code.
     * @param request The create organization account request.
     
     */
  public apiNskV1Organizations2ByOrganizationCodeAccountPost(
    organizationCode: string,
    request?: CreateOrganizationAccountRequest,
    observe?: "body",
    headers?: Headers
  ): Observable<IJsonResponse>;
  public apiNskV1Organizations2ByOrganizationCodeAccountPost(
    organizationCode: string,
    request?: CreateOrganizationAccountRequest,
    observe?: "response",
    headers?: Headers
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV1Organizations2ByOrganizationCodeAccountPost(
    organizationCode: string,
    request?: CreateOrganizationAccountRequest,
    observe: any = "body",
    headers: Headers = {}
  ): Observable<any> {
    if (!organizationCode) {
      throw new Error(
        "Required parameter organizationCode was null or undefined when calling apiNskV1Organizations2ByOrganizationCodeAccountPost."
      );
    }

    const response: Observable<HttpResponse<
      IJsonResponse
    >> = this.httpClient.post(
      `${this.basePath}/api/nsk/v1/organizations2/${encodeURIComponent(
        String(organizationCode)
      )}/account`,
      request,
      headers
    );
    if (observe == "body") {
      return response.pipe(
        map(httpResponse => <IJsonResponse>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Updates the organization account status.
     * 
     * @param organizationCode The organization code.
     * @param status The allowed account status.
     
     */
  public apiNskV1Organizations2ByOrganizationCodeAccountStatusPut(
    organizationCode: string,
    status: "Open" | "Closed" | "AgencyInactive" | "Unknown",
    observe?: "body",
    headers?: Headers
  ): Observable<IJsonResponse>;
  public apiNskV1Organizations2ByOrganizationCodeAccountStatusPut(
    organizationCode: string,
    status: "Open" | "Closed" | "AgencyInactive" | "Unknown",
    observe?: "response",
    headers?: Headers
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV1Organizations2ByOrganizationCodeAccountStatusPut(
    organizationCode: string,
    status: "Open" | "Closed" | "AgencyInactive" | "Unknown",
    observe: any = "body",
    headers: Headers = {}
  ): Observable<any> {
    if (!organizationCode) {
      throw new Error(
        "Required parameter organizationCode was null or undefined when calling apiNskV1Organizations2ByOrganizationCodeAccountStatusPut."
      );
    }

    if (!status) {
      throw new Error(
        "Required parameter status was null or undefined when calling apiNskV1Organizations2ByOrganizationCodeAccountStatusPut."
      );
    }

    let queryParameters: string[] = [];
    if (status !== undefined) {
      queryParameters.push("status=" + encodeURIComponent(String(status)));
    }

    const response: Observable<HttpResponse<
      IJsonResponse
    >> = this.httpClient.put(
      `${this.basePath}/api/nsk/v1/organizations2/${encodeURIComponent(
        String(organizationCode)
      )}/account/status?${queryParameters.join("&")}`,
      headers
    );
    if (observe == "body") {
      return response.pipe(
        map(httpResponse => <IJsonResponse>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Retrieves the organization account transactions based on the organization code  and data in the request.
     * 
     * @param organizationCode The organization code.
     * @param startTime The starting date and time of the date range to search in.
     * @param sortByNewest Optional filter to sort results by newest.
     * @param endTime The end date and time of the date range to search in.
     * @param pageSize Used to specify the number of records to return.
     * @param pageIndex Represents the index of the requested paged item.
     
     */
  public apiNskV1Organizations2ByOrganizationCodeAccountTransactionsGet(
    organizationCode: string,
    startTime: Date,
    sortByNewest: boolean,
    endTime?: Date,
    pageSize?: number,
    pageIndex?: number,
    observe?: "body",
    headers?: Headers
  ): Observable<Array<Transaction>>;
  public apiNskV1Organizations2ByOrganizationCodeAccountTransactionsGet(
    organizationCode: string,
    startTime: Date,
    sortByNewest: boolean,
    endTime?: Date,
    pageSize?: number,
    pageIndex?: number,
    observe?: "response",
    headers?: Headers
  ): Observable<HttpResponse<Array<Transaction>>>;
  public apiNskV1Organizations2ByOrganizationCodeAccountTransactionsGet(
    organizationCode: string,
    startTime: Date,
    sortByNewest: boolean,
    endTime?: Date,
    pageSize?: number,
    pageIndex?: number,
    observe: any = "body",
    headers: Headers = {}
  ): Observable<any> {
    if (!organizationCode) {
      throw new Error(
        "Required parameter organizationCode was null or undefined when calling apiNskV1Organizations2ByOrganizationCodeAccountTransactionsGet."
      );
    }

    if (!startTime) {
      throw new Error(
        "Required parameter startTime was null or undefined when calling apiNskV1Organizations2ByOrganizationCodeAccountTransactionsGet."
      );
    }

    if (!sortByNewest) {
      throw new Error(
        "Required parameter sortByNewest was null or undefined when calling apiNskV1Organizations2ByOrganizationCodeAccountTransactionsGet."
      );
    }

    let queryParameters: string[] = [];
    if (startTime !== undefined) {
      queryParameters.push(
        "startTime=" + encodeURIComponent(<any>startTime.toISOString())
      );
    }
    if (endTime !== undefined) {
      queryParameters.push(
        "endTime=" + encodeURIComponent(<any>endTime.toISOString())
      );
    }
    if (sortByNewest !== undefined) {
      queryParameters.push(
        "sortByNewest=" + encodeURIComponent(String(sortByNewest))
      );
    }
    if (pageSize !== undefined) {
      queryParameters.push("pageSize=" + encodeURIComponent(String(pageSize)));
    }
    if (pageIndex !== undefined) {
      queryParameters.push(
        "pageIndex=" + encodeURIComponent(String(pageIndex))
      );
    }

    const response: Observable<HttpResponse<
      Array<Transaction>
    >> = this.httpClient.get(
      `${this.basePath}/api/nsk/v1/organizations2/${encodeURIComponent(
        String(organizationCode)
      )}/account/transactions?${queryParameters.join("&")}`,
      headers
    );
    if (observe == "body") {
      return response.pipe(
        map(httpResponse => <Array<Transaction>>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Creates account transactions based on data in the request and the  organization code.
     * 
     * @param organizationCode The organization code.
     * @param request The transaction request.
     
     */
  public apiNskV1Organizations2ByOrganizationCodeAccountTransactionsPost(
    organizationCode: string,
    request?: OrganizationTransactionRequest,
    observe?: "body",
    headers?: Headers
  ): Observable<IJsonResponse>;
  public apiNskV1Organizations2ByOrganizationCodeAccountTransactionsPost(
    organizationCode: string,
    request?: OrganizationTransactionRequest,
    observe?: "response",
    headers?: Headers
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV1Organizations2ByOrganizationCodeAccountTransactionsPost(
    organizationCode: string,
    request?: OrganizationTransactionRequest,
    observe: any = "body",
    headers: Headers = {}
  ): Observable<any> {
    if (!organizationCode) {
      throw new Error(
        "Required parameter organizationCode was null or undefined when calling apiNskV1Organizations2ByOrganizationCodeAccountTransactionsPost."
      );
    }

    const response: Observable<HttpResponse<
      IJsonResponse
    >> = this.httpClient.post(
      `${this.basePath}/api/nsk/v1/organizations2/${encodeURIComponent(
        String(organizationCode)
      )}/account/transactions`,
      request,
      headers
    );
    if (observe == "body") {
      return response.pipe(
        map(httpResponse => <IJsonResponse>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Delete a commission rate.
     * 
     * @param organizationCode 
     * @param commissionRateCode 
     
     */
  public apiNskV1Organizations2ByOrganizationCodeCommissionRatesByCommissionRateCodeDelete(
    organizationCode: string,
    commissionRateCode: string,
    observe?: "body",
    headers?: Headers
  ): Observable<IJsonResponse>;
  public apiNskV1Organizations2ByOrganizationCodeCommissionRatesByCommissionRateCodeDelete(
    organizationCode: string,
    commissionRateCode: string,
    observe?: "response",
    headers?: Headers
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV1Organizations2ByOrganizationCodeCommissionRatesByCommissionRateCodeDelete(
    organizationCode: string,
    commissionRateCode: string,
    observe: any = "body",
    headers: Headers = {}
  ): Observable<any> {
    if (!organizationCode) {
      throw new Error(
        "Required parameter organizationCode was null or undefined when calling apiNskV1Organizations2ByOrganizationCodeCommissionRatesByCommissionRateCodeDelete."
      );
    }

    if (!commissionRateCode) {
      throw new Error(
        "Required parameter commissionRateCode was null or undefined when calling apiNskV1Organizations2ByOrganizationCodeCommissionRatesByCommissionRateCodeDelete."
      );
    }

    const response: Observable<HttpResponse<
      IJsonResponse
    >> = this.httpClient.delete(
      `${this.basePath}/api/nsk/v1/organizations2/${encodeURIComponent(
        String(organizationCode)
      )}/commissionRates/${encodeURIComponent(String(commissionRateCode))}`,
      headers
    );
    if (observe == "body") {
      return response.pipe(
        map(httpResponse => <IJsonResponse>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Get a commission rate.
     * 
     * @param organizationCode 
     * @param commissionRateCode 
     
     */
  public apiNskV1Organizations2ByOrganizationCodeCommissionRatesByCommissionRateCodeGet(
    organizationCode: string,
    commissionRateCode: string,
    observe?: "body",
    headers?: Headers
  ): Observable<OrganizationCommissionRate>;
  public apiNskV1Organizations2ByOrganizationCodeCommissionRatesByCommissionRateCodeGet(
    organizationCode: string,
    commissionRateCode: string,
    observe?: "response",
    headers?: Headers
  ): Observable<HttpResponse<OrganizationCommissionRate>>;
  public apiNskV1Organizations2ByOrganizationCodeCommissionRatesByCommissionRateCodeGet(
    organizationCode: string,
    commissionRateCode: string,
    observe: any = "body",
    headers: Headers = {}
  ): Observable<any> {
    if (!organizationCode) {
      throw new Error(
        "Required parameter organizationCode was null or undefined when calling apiNskV1Organizations2ByOrganizationCodeCommissionRatesByCommissionRateCodeGet."
      );
    }

    if (!commissionRateCode) {
      throw new Error(
        "Required parameter commissionRateCode was null or undefined when calling apiNskV1Organizations2ByOrganizationCodeCommissionRatesByCommissionRateCodeGet."
      );
    }

    const response: Observable<HttpResponse<
      OrganizationCommissionRate
    >> = this.httpClient.get(
      `${this.basePath}/api/nsk/v1/organizations2/${encodeURIComponent(
        String(organizationCode)
      )}/commissionRates/${encodeURIComponent(String(commissionRateCode))}`,
      headers
    );
    if (observe == "body") {
      return response.pipe(
        map(httpResponse => <OrganizationCommissionRate>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Create a commission rate.
     * 
     * @param organizationCode 
     * @param request 
     
     */
  public apiNskV1Organizations2ByOrganizationCodeCommissionRatesPost(
    organizationCode: string,
    request?: OrganizationCommissionRate,
    observe?: "body",
    headers?: Headers
  ): Observable<IJsonResponse>;
  public apiNskV1Organizations2ByOrganizationCodeCommissionRatesPost(
    organizationCode: string,
    request?: OrganizationCommissionRate,
    observe?: "response",
    headers?: Headers
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV1Organizations2ByOrganizationCodeCommissionRatesPost(
    organizationCode: string,
    request?: OrganizationCommissionRate,
    observe: any = "body",
    headers: Headers = {}
  ): Observable<any> {
    if (!organizationCode) {
      throw new Error(
        "Required parameter organizationCode was null or undefined when calling apiNskV1Organizations2ByOrganizationCodeCommissionRatesPost."
      );
    }

    const response: Observable<HttpResponse<
      IJsonResponse
    >> = this.httpClient.post(
      `${this.basePath}/api/nsk/v1/organizations2/${encodeURIComponent(
        String(organizationCode)
      )}/commissionRates`,
      request,
      headers
    );
    if (observe == "body") {
      return response.pipe(
        map(httpResponse => <IJsonResponse>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Deletes a company phone number.
     * 
     * @param organizationCode 
     * @param phoneNumberType 
     
     */
  public apiNskV1Organizations2ByOrganizationCodeCompanyPhoneNumbersByPhoneNumberTypeDelete(
    organizationCode: string,
    phoneNumberType: "Other" | "Home" | "Work" | "Mobile" | "Fax",
    observe?: "body",
    headers?: Headers
  ): Observable<IJsonResponse>;
  public apiNskV1Organizations2ByOrganizationCodeCompanyPhoneNumbersByPhoneNumberTypeDelete(
    organizationCode: string,
    phoneNumberType: "Other" | "Home" | "Work" | "Mobile" | "Fax",
    observe?: "response",
    headers?: Headers
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV1Organizations2ByOrganizationCodeCompanyPhoneNumbersByPhoneNumberTypeDelete(
    organizationCode: string,
    phoneNumberType: "Other" | "Home" | "Work" | "Mobile" | "Fax",
    observe: any = "body",
    headers: Headers = {}
  ): Observable<any> {
    if (!organizationCode) {
      throw new Error(
        "Required parameter organizationCode was null or undefined when calling apiNskV1Organizations2ByOrganizationCodeCompanyPhoneNumbersByPhoneNumberTypeDelete."
      );
    }

    if (!phoneNumberType) {
      throw new Error(
        "Required parameter phoneNumberType was null or undefined when calling apiNskV1Organizations2ByOrganizationCodeCompanyPhoneNumbersByPhoneNumberTypeDelete."
      );
    }

    const response: Observable<HttpResponse<
      IJsonResponse
    >> = this.httpClient.delete(
      `${this.basePath}/api/nsk/v1/organizations2/${encodeURIComponent(
        String(organizationCode)
      )}/company/phoneNumbers/${encodeURIComponent(String(phoneNumberType))}`,
      headers
    );
    if (observe == "body") {
      return response.pipe(
        map(httpResponse => <IJsonResponse>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Updates a company phone number.
     * 
     * @param organizationCode 
     * @param phoneNumberType 
     * @param request 
     
     */
  public apiNskV1Organizations2ByOrganizationCodeCompanyPhoneNumbersByPhoneNumberTypePut(
    organizationCode: string,
    phoneNumberType: "Other" | "Home" | "Work" | "Mobile" | "Fax",
    request?: PhoneNumberBase,
    observe?: "body",
    headers?: Headers
  ): Observable<IJsonResponse>;
  public apiNskV1Organizations2ByOrganizationCodeCompanyPhoneNumbersByPhoneNumberTypePut(
    organizationCode: string,
    phoneNumberType: "Other" | "Home" | "Work" | "Mobile" | "Fax",
    request?: PhoneNumberBase,
    observe?: "response",
    headers?: Headers
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV1Organizations2ByOrganizationCodeCompanyPhoneNumbersByPhoneNumberTypePut(
    organizationCode: string,
    phoneNumberType: "Other" | "Home" | "Work" | "Mobile" | "Fax",
    request?: PhoneNumberBase,
    observe: any = "body",
    headers: Headers = {}
  ): Observable<any> {
    if (!organizationCode) {
      throw new Error(
        "Required parameter organizationCode was null or undefined when calling apiNskV1Organizations2ByOrganizationCodeCompanyPhoneNumbersByPhoneNumberTypePut."
      );
    }

    if (!phoneNumberType) {
      throw new Error(
        "Required parameter phoneNumberType was null or undefined when calling apiNskV1Organizations2ByOrganizationCodeCompanyPhoneNumbersByPhoneNumberTypePut."
      );
    }

    const response: Observable<HttpResponse<
      IJsonResponse
    >> = this.httpClient.put(
      `${this.basePath}/api/nsk/v1/organizations2/${encodeURIComponent(
        String(organizationCode)
      )}/company/phoneNumbers/${encodeURIComponent(String(phoneNumberType))}`,
      request,
      headers
    );
    if (observe == "body") {
      return response.pipe(
        map(httpResponse => <IJsonResponse>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Create a company phone number.
     * 
     * @param organizationCode 
     * @param request 
     
     */
  public apiNskV1Organizations2ByOrganizationCodeCompanyPhoneNumbersPost(
    organizationCode: string,
    request?: PhoneNumber,
    observe?: "body",
    headers?: Headers
  ): Observable<IJsonResponse>;
  public apiNskV1Organizations2ByOrganizationCodeCompanyPhoneNumbersPost(
    organizationCode: string,
    request?: PhoneNumber,
    observe?: "response",
    headers?: Headers
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV1Organizations2ByOrganizationCodeCompanyPhoneNumbersPost(
    organizationCode: string,
    request?: PhoneNumber,
    observe: any = "body",
    headers: Headers = {}
  ): Observable<any> {
    if (!organizationCode) {
      throw new Error(
        "Required parameter organizationCode was null or undefined when calling apiNskV1Organizations2ByOrganizationCodeCompanyPhoneNumbersPost."
      );
    }

    const response: Observable<HttpResponse<
      IJsonResponse
    >> = this.httpClient.post(
      `${this.basePath}/api/nsk/v1/organizations2/${encodeURIComponent(
        String(organizationCode)
      )}/company/phoneNumbers`,
      request,
      headers
    );
    if (observe == "body") {
      return response.pipe(
        map(httpResponse => <IJsonResponse>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Deletes a contact phone number.
     * 
     * @param organizationCode 
     * @param phoneNumberType 
     
     */
  public apiNskV1Organizations2ByOrganizationCodeContactPhoneNumbersByPhoneNumberTypeDelete(
    organizationCode: string,
    phoneNumberType: "Other" | "Home" | "Work" | "Mobile" | "Fax",
    observe?: "body",
    headers?: Headers
  ): Observable<IJsonResponse>;
  public apiNskV1Organizations2ByOrganizationCodeContactPhoneNumbersByPhoneNumberTypeDelete(
    organizationCode: string,
    phoneNumberType: "Other" | "Home" | "Work" | "Mobile" | "Fax",
    observe?: "response",
    headers?: Headers
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV1Organizations2ByOrganizationCodeContactPhoneNumbersByPhoneNumberTypeDelete(
    organizationCode: string,
    phoneNumberType: "Other" | "Home" | "Work" | "Mobile" | "Fax",
    observe: any = "body",
    headers: Headers = {}
  ): Observable<any> {
    if (!organizationCode) {
      throw new Error(
        "Required parameter organizationCode was null or undefined when calling apiNskV1Organizations2ByOrganizationCodeContactPhoneNumbersByPhoneNumberTypeDelete."
      );
    }

    if (!phoneNumberType) {
      throw new Error(
        "Required parameter phoneNumberType was null or undefined when calling apiNskV1Organizations2ByOrganizationCodeContactPhoneNumbersByPhoneNumberTypeDelete."
      );
    }

    const response: Observable<HttpResponse<
      IJsonResponse
    >> = this.httpClient.delete(
      `${this.basePath}/api/nsk/v1/organizations2/${encodeURIComponent(
        String(organizationCode)
      )}/contact/phoneNumbers/${encodeURIComponent(String(phoneNumberType))}`,
      headers
    );
    if (observe == "body") {
      return response.pipe(
        map(httpResponse => <IJsonResponse>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Updates a contact phone number.
     * 
     * @param organizationCode 
     * @param phoneNumberType 
     * @param request 
     
     */
  public apiNskV1Organizations2ByOrganizationCodeContactPhoneNumbersByPhoneNumberTypePut(
    organizationCode: string,
    phoneNumberType: "Other" | "Home" | "Work" | "Mobile" | "Fax",
    request?: PhoneNumberBase,
    observe?: "body",
    headers?: Headers
  ): Observable<IJsonResponse>;
  public apiNskV1Organizations2ByOrganizationCodeContactPhoneNumbersByPhoneNumberTypePut(
    organizationCode: string,
    phoneNumberType: "Other" | "Home" | "Work" | "Mobile" | "Fax",
    request?: PhoneNumberBase,
    observe?: "response",
    headers?: Headers
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV1Organizations2ByOrganizationCodeContactPhoneNumbersByPhoneNumberTypePut(
    organizationCode: string,
    phoneNumberType: "Other" | "Home" | "Work" | "Mobile" | "Fax",
    request?: PhoneNumberBase,
    observe: any = "body",
    headers: Headers = {}
  ): Observable<any> {
    if (!organizationCode) {
      throw new Error(
        "Required parameter organizationCode was null or undefined when calling apiNskV1Organizations2ByOrganizationCodeContactPhoneNumbersByPhoneNumberTypePut."
      );
    }

    if (!phoneNumberType) {
      throw new Error(
        "Required parameter phoneNumberType was null or undefined when calling apiNskV1Organizations2ByOrganizationCodeContactPhoneNumbersByPhoneNumberTypePut."
      );
    }

    const response: Observable<HttpResponse<
      IJsonResponse
    >> = this.httpClient.put(
      `${this.basePath}/api/nsk/v1/organizations2/${encodeURIComponent(
        String(organizationCode)
      )}/contact/phoneNumbers/${encodeURIComponent(String(phoneNumberType))}`,
      request,
      headers
    );
    if (observe == "body") {
      return response.pipe(
        map(httpResponse => <IJsonResponse>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Create a contact phone number.
     * 
     * @param organizationCode 
     * @param request 
     
     */
  public apiNskV1Organizations2ByOrganizationCodeContactPhoneNumbersPost(
    organizationCode: string,
    request?: PhoneNumber,
    observe?: "body",
    headers?: Headers
  ): Observable<IJsonResponse>;
  public apiNskV1Organizations2ByOrganizationCodeContactPhoneNumbersPost(
    organizationCode: string,
    request?: PhoneNumber,
    observe?: "response",
    headers?: Headers
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV1Organizations2ByOrganizationCodeContactPhoneNumbersPost(
    organizationCode: string,
    request?: PhoneNumber,
    observe: any = "body",
    headers: Headers = {}
  ): Observable<any> {
    if (!organizationCode) {
      throw new Error(
        "Required parameter organizationCode was null or undefined when calling apiNskV1Organizations2ByOrganizationCodeContactPhoneNumbersPost."
      );
    }

    const response: Observable<HttpResponse<
      IJsonResponse
    >> = this.httpClient.post(
      `${this.basePath}/api/nsk/v1/organizations2/${encodeURIComponent(
        String(organizationCode)
      )}/contact/phoneNumbers`,
      request,
      headers
    );
    if (observe == "body") {
      return response.pipe(
        map(httpResponse => <IJsonResponse>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Delete an external account.
     * 
     * @param organizationCode 
     * @param externalAccountKey 
     
     */
  public apiNskV1Organizations2ByOrganizationCodeExternalAccountsByExternalAccountKeyDelete(
    organizationCode: string,
    externalAccountKey: string,
    observe?: "body",
    headers?: Headers
  ): Observable<IJsonResponse>;
  public apiNskV1Organizations2ByOrganizationCodeExternalAccountsByExternalAccountKeyDelete(
    organizationCode: string,
    externalAccountKey: string,
    observe?: "response",
    headers?: Headers
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV1Organizations2ByOrganizationCodeExternalAccountsByExternalAccountKeyDelete(
    organizationCode: string,
    externalAccountKey: string,
    observe: any = "body",
    headers: Headers = {}
  ): Observable<any> {
    if (!organizationCode) {
      throw new Error(
        "Required parameter organizationCode was null or undefined when calling apiNskV1Organizations2ByOrganizationCodeExternalAccountsByExternalAccountKeyDelete."
      );
    }

    if (!externalAccountKey) {
      throw new Error(
        "Required parameter externalAccountKey was null or undefined when calling apiNskV1Organizations2ByOrganizationCodeExternalAccountsByExternalAccountKeyDelete."
      );
    }

    const response: Observable<HttpResponse<
      IJsonResponse
    >> = this.httpClient.delete(
      `${this.basePath}/api/nsk/v1/organizations2/${encodeURIComponent(
        String(organizationCode)
      )}/externalAccounts/${encodeURIComponent(String(externalAccountKey))}`,
      headers
    );
    if (observe == "body") {
      return response.pipe(
        map(httpResponse => <IJsonResponse>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Get an external account.
     * 
     * @param organizationCode 
     * @param externalAccountKey 
     
     */
  public apiNskV1Organizations2ByOrganizationCodeExternalAccountsByExternalAccountKeyGet(
    organizationCode: string,
    externalAccountKey: string,
    observe?: "body",
    headers?: Headers
  ): Observable<OrganizationExternalAccountv2>;
  public apiNskV1Organizations2ByOrganizationCodeExternalAccountsByExternalAccountKeyGet(
    organizationCode: string,
    externalAccountKey: string,
    observe?: "response",
    headers?: Headers
  ): Observable<HttpResponse<OrganizationExternalAccountv2>>;
  public apiNskV1Organizations2ByOrganizationCodeExternalAccountsByExternalAccountKeyGet(
    organizationCode: string,
    externalAccountKey: string,
    observe: any = "body",
    headers: Headers = {}
  ): Observable<any> {
    if (!organizationCode) {
      throw new Error(
        "Required parameter organizationCode was null or undefined when calling apiNskV1Organizations2ByOrganizationCodeExternalAccountsByExternalAccountKeyGet."
      );
    }

    if (!externalAccountKey) {
      throw new Error(
        "Required parameter externalAccountKey was null or undefined when calling apiNskV1Organizations2ByOrganizationCodeExternalAccountsByExternalAccountKeyGet."
      );
    }

    const response: Observable<HttpResponse<
      OrganizationExternalAccountv2
    >> = this.httpClient.get(
      `${this.basePath}/api/nsk/v1/organizations2/${encodeURIComponent(
        String(organizationCode)
      )}/externalAccounts/${encodeURIComponent(String(externalAccountKey))}`,
      headers
    );
    if (observe == "body") {
      return response.pipe(
        map(
          httpResponse => <OrganizationExternalAccountv2>httpResponse.response
        )
      );
    }
    return response;
  }

  /**
     * Create an external account.
     * 
     * @param organizationCode 
     * @param request 
     
     */
  public apiNskV1Organizations2ByOrganizationCodeExternalAccountsPost(
    organizationCode: string,
    request?: OrganizationExternalAccountRequest,
    observe?: "body",
    headers?: Headers
  ): Observable<IJsonResponse>;
  public apiNskV1Organizations2ByOrganizationCodeExternalAccountsPost(
    organizationCode: string,
    request?: OrganizationExternalAccountRequest,
    observe?: "response",
    headers?: Headers
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV1Organizations2ByOrganizationCodeExternalAccountsPost(
    organizationCode: string,
    request?: OrganizationExternalAccountRequest,
    observe: any = "body",
    headers: Headers = {}
  ): Observable<any> {
    if (!organizationCode) {
      throw new Error(
        "Required parameter organizationCode was null or undefined when calling apiNskV1Organizations2ByOrganizationCodeExternalAccountsPost."
      );
    }

    const response: Observable<HttpResponse<
      IJsonResponse
    >> = this.httpClient.post(
      `${this.basePath}/api/nsk/v1/organizations2/${encodeURIComponent(
        String(organizationCode)
      )}/externalAccounts`,
      request,
      headers
    );
    if (observe == "body") {
      return response.pipe(
        map(httpResponse => <IJsonResponse>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Retrieves the organization.
     * 
     * @param organizationCode 
     
     */
  public apiNskV1Organizations2ByOrganizationCodeGet(
    organizationCode: string,
    observe?: "body",
    headers?: Headers
  ): Observable<Organizationv2>;
  public apiNskV1Organizations2ByOrganizationCodeGet(
    organizationCode: string,
    observe?: "response",
    headers?: Headers
  ): Observable<HttpResponse<Organizationv2>>;
  public apiNskV1Organizations2ByOrganizationCodeGet(
    organizationCode: string,
    observe: any = "body",
    headers: Headers = {}
  ): Observable<any> {
    if (!organizationCode) {
      throw new Error(
        "Required parameter organizationCode was null or undefined when calling apiNskV1Organizations2ByOrganizationCodeGet."
      );
    }

    const response: Observable<HttpResponse<
      Organizationv2
    >> = this.httpClient.get(
      `${this.basePath}/api/nsk/v1/organizations2/${encodeURIComponent(
        String(organizationCode)
      )}`,
      headers
    );
    if (observe == "body") {
      return response.pipe(
        map(httpResponse => <Organizationv2>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Updates an organization.
     * Requires agent permissions.  The organization code is a generic code for all of the organization types. Each individual type has its own code  and validation.  If the organization status is not pending the organization code should follow these validation rules based on type:  &lt;ul&gt;&lt;li&gt;Third Party: 3 to 10 characters in length with alphanumeric values.&lt;/li&gt;&lt;li&gt;Travel Agency: 7 to 10 characters in length with numeric values.&lt;/li&gt;&lt;li&gt;Carrier: 2 to 3 characters in length with alphanumeric values.&lt;/li&gt;&lt;/ul&gt;
     * @param organizationCode 
     * @param createRequest 
     
     */
  public apiNskV1Organizations2ByOrganizationCodePatch(
    organizationCode: string,
    createRequest?: DeltaMapperOrganizationEditRequest,
    observe?: "body",
    headers?: Headers
  ): Observable<Organizationv2>;
  public apiNskV1Organizations2ByOrganizationCodePatch(
    organizationCode: string,
    createRequest?: DeltaMapperOrganizationEditRequest,
    observe?: "response",
    headers?: Headers
  ): Observable<HttpResponse<Organizationv2>>;
  public apiNskV1Organizations2ByOrganizationCodePatch(
    organizationCode: string,
    createRequest?: DeltaMapperOrganizationEditRequest,
    observe: any = "body",
    headers: Headers = {}
  ): Observable<any> {
    if (!organizationCode) {
      throw new Error(
        "Required parameter organizationCode was null or undefined when calling apiNskV1Organizations2ByOrganizationCodePatch."
      );
    }

    const response: Observable<HttpResponse<
      Organizationv2
    >> = this.httpClient.patch(
      `${this.basePath}/api/nsk/v1/organizations2/${encodeURIComponent(
        String(organizationCode)
      )}`,
      createRequest,
      headers
    );
    if (observe == "body") {
      return response.pipe(
        map(httpResponse => <Organizationv2>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Updates an organization.
     * Requires agent permissions.  The organization code is a generic code for all of the organization types. Each individual type has its own code  and validation.  If the organization status is not pending the organization code should follow these validation rules based on type:  &lt;ul&gt;&lt;li&gt;Third Party: 3 to 10 characters in length with alphanumeric values.&lt;/li&gt;&lt;li&gt;Travel Agency: 7 to 10 characters in length with numeric values.&lt;/li&gt;&lt;li&gt;Carrier: 2 to 3 characters in length with alphanumeric values.&lt;/li&gt;&lt;/ul&gt;
     * @param organizationCode 
     * @param request 
     
     */
  public apiNskV1Organizations2ByOrganizationCodePut(
    organizationCode: string,
    request?: OrganizationEditRequest,
    observe?: "body",
    headers?: Headers
  ): Observable<Organizationv2>;
  public apiNskV1Organizations2ByOrganizationCodePut(
    organizationCode: string,
    request?: OrganizationEditRequest,
    observe?: "response",
    headers?: Headers
  ): Observable<HttpResponse<Organizationv2>>;
  public apiNskV1Organizations2ByOrganizationCodePut(
    organizationCode: string,
    request?: OrganizationEditRequest,
    observe: any = "body",
    headers: Headers = {}
  ): Observable<any> {
    if (!organizationCode) {
      throw new Error(
        "Required parameter organizationCode was null or undefined when calling apiNskV1Organizations2ByOrganizationCodePut."
      );
    }

    const response: Observable<HttpResponse<
      Organizationv2
    >> = this.httpClient.put(
      `${this.basePath}/api/nsk/v1/organizations2/${encodeURIComponent(
        String(organizationCode)
      )}`,
      request,
      headers
    );
    if (observe == "body") {
      return response.pipe(
        map(httpResponse => <Organizationv2>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Create a new organization.
     * Requires agent permissions.  The organization code is a generic code for all of the organization types. Each individual type has its own code  and validation.  If the organization status is not pending the organization code should follow these validation rules based on type:  &lt;ul&gt;&lt;li&gt;Third Party: 3 to 10 characters in length with alphanumeric values.&lt;/li&gt;&lt;li&gt;Travel Agency: 7 to 10 characters in length with numeric values.&lt;/li&gt;&lt;li&gt;Carrier: 2 to 3 characters in length with alphanumeric values.&lt;/li&gt;&lt;/ul&gt;
     * @param createRequest 
     
     */
  public apiNskV1Organizations2Post(
    createRequest?: OrganizationCreateRequest,
    observe?: "body",
    headers?: Headers
  ): Observable<Organizationv2>;
  public apiNskV1Organizations2Post(
    createRequest?: OrganizationCreateRequest,
    observe?: "response",
    headers?: Headers
  ): Observable<HttpResponse<Organizationv2>>;
  public apiNskV1Organizations2Post(
    createRequest?: OrganizationCreateRequest,
    observe: any = "body",
    headers: Headers = {}
  ): Observable<any> {
    const response: Observable<HttpResponse<
      Organizationv2
    >> = this.httpClient.post(
      `${this.basePath}/api/nsk/v1/organizations2`,
      createRequest,
      headers
    );
    if (observe == "body") {
      return response.pipe(
        map(httpResponse => <Organizationv2>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Requests to register a new organization.
     * Note: This is only a request. An agent will need to approve the action.
     * @param registerRequest 
     
     */
  public apiNskV1Organizations2RegisterPost(
    registerRequest?: OrganizationRegisterRequest,
    observe?: "body",
    headers?: Headers
  ): Observable<Organizationv2>;
  public apiNskV1Organizations2RegisterPost(
    registerRequest?: OrganizationRegisterRequest,
    observe?: "response",
    headers?: Headers
  ): Observable<HttpResponse<Organizationv2>>;
  public apiNskV1Organizations2RegisterPost(
    registerRequest?: OrganizationRegisterRequest,
    observe: any = "body",
    headers: Headers = {}
  ): Observable<any> {
    const response: Observable<HttpResponse<
      Organizationv2
    >> = this.httpClient.post(
      `${this.basePath}/api/nsk/v1/organizations2/register`,
      registerRequest,
      headers
    );
    if (observe == "body") {
      return response.pipe(
        map(httpResponse => <Organizationv2>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Searches for organizations.
     * 
     * @param type Organization type.
     * @param status The organization status.
     * @param organizationCode The organization code.
     * @param parentOrganizationCode The parent organization code.
     * @param companyName The organization company name.
     * @param city The organization company city.
     * @param postalCode The organization company postal code.
     * @param pagedItemIndex Used to specify the index for skipping values when paging.
     * @param pageSize Used to specify the maximum results to return.
     * @param matchCriteriaOrganizationCode The type of string search for organization code.
     * @param matchCriteriaParentOrganizationCode The  type of string search for parent organization code.
     * @param matchCriteriaCompanyName The  type of string search for organization company name.
     * @param matchCriteriaCity The  type of string search for organization company city.
     * @param matchCriteriaPostalCode The  type of string search for organization company postal code.
     
     */
  public apiNskV2Organizations2Get(
    type: "Default" | "Master" | "Carrier" | "TravelAgency" | "ThirdParty",
    status: "Default" | "Active" | "Cancelled" | "Pending",
    organizationCode?: string,
    parentOrganizationCode?: string,
    companyName?: string,
    city?: string,
    postalCode?: string,
    pagedItemIndex?: number,
    pageSize?: number,
    matchCriteriaOrganizationCode?:
      | "StartsWith"
      | "EndsWith"
      | "Contains"
      | "ExactMatch",
    matchCriteriaParentOrganizationCode?:
      | "StartsWith"
      | "EndsWith"
      | "Contains"
      | "ExactMatch",
    matchCriteriaCompanyName?:
      | "StartsWith"
      | "EndsWith"
      | "Contains"
      | "ExactMatch",
    matchCriteriaCity?: "StartsWith" | "EndsWith" | "Contains" | "ExactMatch",
    matchCriteriaPostalCode?:
      | "StartsWith"
      | "EndsWith"
      | "Contains"
      | "ExactMatch",
    observe?: "body",
    headers?: Headers
  ): Observable<Array<OrganizationRecord>>;
  public apiNskV2Organizations2Get(
    type: "Default" | "Master" | "Carrier" | "TravelAgency" | "ThirdParty",
    status: "Default" | "Active" | "Cancelled" | "Pending",
    organizationCode?: string,
    parentOrganizationCode?: string,
    companyName?: string,
    city?: string,
    postalCode?: string,
    pagedItemIndex?: number,
    pageSize?: number,
    matchCriteriaOrganizationCode?:
      | "StartsWith"
      | "EndsWith"
      | "Contains"
      | "ExactMatch",
    matchCriteriaParentOrganizationCode?:
      | "StartsWith"
      | "EndsWith"
      | "Contains"
      | "ExactMatch",
    matchCriteriaCompanyName?:
      | "StartsWith"
      | "EndsWith"
      | "Contains"
      | "ExactMatch",
    matchCriteriaCity?: "StartsWith" | "EndsWith" | "Contains" | "ExactMatch",
    matchCriteriaPostalCode?:
      | "StartsWith"
      | "EndsWith"
      | "Contains"
      | "ExactMatch",
    observe?: "response",
    headers?: Headers
  ): Observable<HttpResponse<Array<OrganizationRecord>>>;
  public apiNskV2Organizations2Get(
    type: "Default" | "Master" | "Carrier" | "TravelAgency" | "ThirdParty",
    status: "Default" | "Active" | "Cancelled" | "Pending",
    organizationCode?: string,
    parentOrganizationCode?: string,
    companyName?: string,
    city?: string,
    postalCode?: string,
    pagedItemIndex?: number,
    pageSize?: number,
    matchCriteriaOrganizationCode?:
      | "StartsWith"
      | "EndsWith"
      | "Contains"
      | "ExactMatch",
    matchCriteriaParentOrganizationCode?:
      | "StartsWith"
      | "EndsWith"
      | "Contains"
      | "ExactMatch",
    matchCriteriaCompanyName?:
      | "StartsWith"
      | "EndsWith"
      | "Contains"
      | "ExactMatch",
    matchCriteriaCity?: "StartsWith" | "EndsWith" | "Contains" | "ExactMatch",
    matchCriteriaPostalCode?:
      | "StartsWith"
      | "EndsWith"
      | "Contains"
      | "ExactMatch",
    observe: any = "body",
    headers: Headers = {}
  ): Observable<any> {
    if (!type) {
      throw new Error(
        "Required parameter type was null or undefined when calling apiNskV2Organizations2Get."
      );
    }

    if (!status) {
      throw new Error(
        "Required parameter status was null or undefined when calling apiNskV2Organizations2Get."
      );
    }

    let queryParameters: string[] = [];
    if (organizationCode !== undefined) {
      queryParameters.push(
        "organizationCode=" + encodeURIComponent(String(organizationCode))
      );
    }
    if (type !== undefined) {
      queryParameters.push("type=" + encodeURIComponent(String(type)));
    }
    if (status !== undefined) {
      queryParameters.push("status=" + encodeURIComponent(String(status)));
    }
    if (parentOrganizationCode !== undefined) {
      queryParameters.push(
        "parentOrganizationCode=" +
          encodeURIComponent(String(parentOrganizationCode))
      );
    }
    if (companyName !== undefined) {
      queryParameters.push(
        "companyName=" + encodeURIComponent(String(companyName))
      );
    }
    if (city !== undefined) {
      queryParameters.push("city=" + encodeURIComponent(String(city)));
    }
    if (postalCode !== undefined) {
      queryParameters.push(
        "postalCode=" + encodeURIComponent(String(postalCode))
      );
    }
    if (pagedItemIndex !== undefined) {
      queryParameters.push(
        "pagedItemIndex=" + encodeURIComponent(String(pagedItemIndex))
      );
    }
    if (pageSize !== undefined) {
      queryParameters.push("pageSize=" + encodeURIComponent(String(pageSize)));
    }
    if (matchCriteriaOrganizationCode !== undefined) {
      queryParameters.push(
        "matchCriteriaOrganizationCode=" +
          encodeURIComponent(String(matchCriteriaOrganizationCode))
      );
    }
    if (matchCriteriaParentOrganizationCode !== undefined) {
      queryParameters.push(
        "matchCriteriaParentOrganizationCode=" +
          encodeURIComponent(String(matchCriteriaParentOrganizationCode))
      );
    }
    if (matchCriteriaCompanyName !== undefined) {
      queryParameters.push(
        "matchCriteriaCompanyName=" +
          encodeURIComponent(String(matchCriteriaCompanyName))
      );
    }
    if (matchCriteriaCity !== undefined) {
      queryParameters.push(
        "matchCriteriaCity=" + encodeURIComponent(String(matchCriteriaCity))
      );
    }
    if (matchCriteriaPostalCode !== undefined) {
      queryParameters.push(
        "matchCriteriaPostalCode=" +
          encodeURIComponent(String(matchCriteriaPostalCode))
      );
    }

    const response: Observable<HttpResponse<
      Array<OrganizationRecord>
    >> = this.httpClient.get(
      `${this.basePath}/api/nsk/v2/organizations2?${queryParameters.join("&")}`,
      headers
    );
    if (observe == "body") {
      return response.pipe(
        map(httpResponse => <Array<OrganizationRecord>>httpResponse.response)
      );
    }
    return response;
  }
}
