/**
 * API - Current Routes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: trunk
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';
import { inject, injectable } from 'inversify';

import {
  ApplyBookingCreditRequestv2,
  ApplyCreditAccountRequest,
  ApplyCreditRequest,
  CreditAccount,
  CustomerCreditRefundRequest,
  DccRequestBasev2,
  DirectCurrencyConversionAvailability,
  IJsonResponse,
  InlineResponse2008,
  InlineResponse2009,
  OrganizationRefundRequest,
  Payment,
  PaymentFeeResponse,
  PaymentMethodRequest,
  PaymentRefundRequest,
  PaymentRequest,
  ThreeDSecurePaymentMethodRequestv2,
  ThreeDSecureResponse,
  VoucherInformation,
  VoucherPaymentRequest
} from 'api-models';

import { IHttpClient } from '../IHttpClient';
import { IAPIConfiguration } from '../IAPIConfiguration';
import { HttpResponse } from '../HttpResponse';
import { Headers } from '../Headers';

import { COLLECTION_FORMATS } from '../variables';

@injectable()
export class BookingpaymentsService {
  private basePath: string = 'https://localhost';

  constructor(
    @inject('IApiHttpClient') private httpClient: IHttpClient,
    @inject('IAPIConfiguration') private APIConfiguration: IAPIConfiguration
  ) {
    if (this.APIConfiguration.basePath)
      this.basePath = this.APIConfiguration.basePath;
  }

  /**
     * Deletes the payment.
     * 
     * @param paymentKey Payment key.
     
     */
  public apiNskV1BookingPaymentsByPaymentKeyDelete(
    paymentKey: string,
    observe?: 'body',
    headers?: Headers
  ): Observable<IJsonResponse>;
  public apiNskV1BookingPaymentsByPaymentKeyDelete(
    paymentKey: string,
    observe?: 'response',
    headers?: Headers
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV1BookingPaymentsByPaymentKeyDelete(
    paymentKey: string,
    observe: any = 'body',
    headers: Headers = {}
  ): Observable<any> {
    if (!paymentKey) {
      throw new Error(
        'Required parameter paymentKey was null or undefined when calling apiNskV1BookingPaymentsByPaymentKeyDelete.'
      );
    }

    const response: Observable<HttpResponse<
      IJsonResponse
    >> = this.httpClient.delete(
      `${this.basePath}/api/nsk/v1/booking/payments/${encodeURIComponent(
        String(paymentKey)
      )}`,
      headers
    );
    if (observe == 'body') {
      return response.pipe(
        map(httpResponse => <IJsonResponse>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Gets a specific payment.
     * 
     * @param paymentKey Payment key.
     
     */
  public apiNskV1BookingPaymentsByPaymentKeyGet(
    paymentKey: string,
    observe?: 'body',
    headers?: Headers
  ): Observable<Payment>;
  public apiNskV1BookingPaymentsByPaymentKeyGet(
    paymentKey: string,
    observe?: 'response',
    headers?: Headers
  ): Observable<HttpResponse<Payment>>;
  public apiNskV1BookingPaymentsByPaymentKeyGet(
    paymentKey: string,
    observe: any = 'body',
    headers: Headers = {}
  ): Observable<any> {
    if (!paymentKey) {
      throw new Error(
        'Required parameter paymentKey was null or undefined when calling apiNskV1BookingPaymentsByPaymentKeyGet.'
      );
    }

    const response: Observable<HttpResponse<Payment>> = this.httpClient.get(
      `${this.basePath}/api/nsk/v1/booking/payments/${encodeURIComponent(
        String(paymentKey)
      )}`,
      headers
    );
    if (observe == 'body') {
      return response.pipe(map(httpResponse => <Payment>httpResponse.response));
    }
    return response;
  }

  /**
     * Retrieves the booking payments on the booking in state.
     * Requires a booking in state.
     
     */
  public apiNskV1BookingPaymentsGet(
    observe?: 'body',
    headers?: Headers
  ): Observable<Array<Payment>>;
  public apiNskV1BookingPaymentsGet(
    observe?: 'response',
    headers?: Headers
  ): Observable<HttpResponse<Array<Payment>>>;
  public apiNskV1BookingPaymentsGet(
    observe: any = 'body',
    headers: Headers = {}
  ): Observable<any> {
    const response: Observable<HttpResponse<
      Array<Payment>
    >> = this.httpClient.get(
      `${this.basePath}/api/nsk/v1/booking/payments`,
      headers
    );
    if (observe == 'body') {
      return response.pipe(
        map(httpResponse => <Array<Payment>>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Retrieves the booking payment methods available for a refund on the booking in state.
     * Requires a booking in state.
     
     */
  public apiNskV1BookingPaymentsRefundsGet(
    observe?: 'body',
    headers?: Headers
  ): Observable<InlineResponse2008>;
  public apiNskV1BookingPaymentsRefundsGet(
    observe?: 'response',
    headers?: Headers
  ): Observable<HttpResponse<InlineResponse2008>>;
  public apiNskV1BookingPaymentsRefundsGet(
    observe: any = 'body',
    headers: Headers = {}
  ): Observable<any> {
    const response: Observable<HttpResponse<
      InlineResponse2008
    >> = this.httpClient.get(
      `${this.basePath}/api/nsk/v1/booking/payments/refunds`,
      headers
    );
    if (observe == 'body') {
      return response.pipe(
        map(httpResponse => <InlineResponse2008>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Creates an organization account refund for a payment from  the booking in state.
     * 
     * @param request The organization refund request.
     
     */
  public apiNskV1BookingPaymentsRefundsOrganizationCreditPost(
    request?: OrganizationRefundRequest,
    observe?: 'body',
    headers?: Headers
  ): Observable<IJsonResponse>;
  public apiNskV1BookingPaymentsRefundsOrganizationCreditPost(
    request?: OrganizationRefundRequest,
    observe?: 'response',
    headers?: Headers
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV1BookingPaymentsRefundsOrganizationCreditPost(
    request?: OrganizationRefundRequest,
    observe: any = 'body',
    headers: Headers = {}
  ): Observable<any> {
    const response: Observable<HttpResponse<
      IJsonResponse
    >> = this.httpClient.post(
      `${this.basePath}/api/nsk/v1/booking/payments/refunds/organizationCredit`,
      request,
      headers
    );
    if (observe == 'body') {
      return response.pipe(
        map(httpResponse => <IJsonResponse>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Deletes a voucher payment on the booking in state.
     * 
     * @param voucherPaymentReference Voucher payment reference.
     
     */
  public apiNskV1BookingPaymentsVoucherByVoucherPaymentReferenceDelete(
    voucherPaymentReference: string,
    observe?: 'body',
    headers?: Headers
  ): Observable<IJsonResponse>;
  public apiNskV1BookingPaymentsVoucherByVoucherPaymentReferenceDelete(
    voucherPaymentReference: string,
    observe?: 'response',
    headers?: Headers
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV1BookingPaymentsVoucherByVoucherPaymentReferenceDelete(
    voucherPaymentReference: string,
    observe: any = 'body',
    headers: Headers = {}
  ): Observable<any> {
    if (!voucherPaymentReference) {
      throw new Error(
        'Required parameter voucherPaymentReference was null or undefined when calling apiNskV1BookingPaymentsVoucherByVoucherPaymentReferenceDelete.'
      );
    }

    const response: Observable<HttpResponse<
      IJsonResponse
    >> = this.httpClient.delete(
      `${
        this.basePath
      }/api/nsk/v1/booking/payments/voucher/${encodeURIComponent(
        String(voucherPaymentReference)
      )}`,
      headers
    );
    if (observe == 'body') {
      return response.pipe(
        map(httpResponse => <IJsonResponse>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Gets information regarding a specific voucher code.
     * 
     * @param referenceCode The voucher reference code.
     * @param overrideRestrictions Override restrictions. Defaults to false.
     
     */
  public apiNskV1BookingPaymentsVoucherGet(
    referenceCode: string,
    overrideRestrictions?: boolean,
    observe?: 'body',
    headers?: Headers
  ): Observable<VoucherInformation>;
  public apiNskV1BookingPaymentsVoucherGet(
    referenceCode: string,
    overrideRestrictions?: boolean,
    observe?: 'response',
    headers?: Headers
  ): Observable<HttpResponse<VoucherInformation>>;
  public apiNskV1BookingPaymentsVoucherGet(
    referenceCode: string,
    overrideRestrictions?: boolean,
    observe: any = 'body',
    headers: Headers = {}
  ): Observable<any> {
    if (!referenceCode) {
      throw new Error(
        'Required parameter referenceCode was null or undefined when calling apiNskV1BookingPaymentsVoucherGet.'
      );
    }

    let queryParameters: string[] = [];
    if (referenceCode !== undefined) {
      queryParameters.push(
        'referenceCode=' + encodeURIComponent(String(referenceCode))
      );
    }
    if (overrideRestrictions !== undefined) {
      queryParameters.push(
        'overrideRestrictions=' +
          encodeURIComponent(String(overrideRestrictions))
      );
    }

    const response: Observable<HttpResponse<
      VoucherInformation
    >> = this.httpClient.get(
      `${
        this.basePath
      }/api/nsk/v1/booking/payments/voucher?${queryParameters.join('&')}`,
      headers
    );
    if (observe == 'body') {
      return response.pipe(
        map(httpResponse => <VoucherInformation>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Retrieves the booking payment methods available for the booking in state.
     * Requires a booking in state.
     
     */
  public apiNskV2BookingPaymentsAvailableGet(
    observe?: 'body',
    headers?: Headers
  ): Observable<InlineResponse2008>;
  public apiNskV2BookingPaymentsAvailableGet(
    observe?: 'response',
    headers?: Headers
  ): Observable<HttpResponse<InlineResponse2008>>;
  public apiNskV2BookingPaymentsAvailableGet(
    observe: any = 'body',
    headers: Headers = {}
  ): Observable<any> {
    const response: Observable<HttpResponse<
      InlineResponse2008
    >> = this.httpClient.get(
      `${this.basePath}/api/nsk/v2/booking/payments/available`,
      headers
    );
    if (observe == 'body') {
      return response.pipe(
        map(httpResponse => <InlineResponse2008>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Gets credit available from a past booking.
     * See booking retrieve. This method uses the same validation rules.
     * @param recordLocator Record locator being requested.
     * @param currencyCode The currency code of the account.
     * @param emailAddress The email address of a contact.
     * @param origin The origin station code.
     * @param firstName The first name of a passenger or contact.
     * @param lastName The last name of a passenger or contact.
     * @param customerNumber One of the passengers customer numbers applied.
     * @param departureDate The first journeys departure date.
     
     */
  public apiNskV2BookingPaymentsBookingCreditGet(
    recordLocator: string,
    currencyCode?: string,
    emailAddress?: string,
    origin?: string,
    firstName?: string,
    lastName?: string,
    customerNumber?: string,
    departureDate?: Date,
    observe?: 'body',
    headers?: Headers
  ): Observable<CreditAccount>;
  public apiNskV2BookingPaymentsBookingCreditGet(
    recordLocator: string,
    currencyCode?: string,
    emailAddress?: string,
    origin?: string,
    firstName?: string,
    lastName?: string,
    customerNumber?: string,
    departureDate?: Date,
    observe?: 'response',
    headers?: Headers
  ): Observable<HttpResponse<CreditAccount>>;
  public apiNskV2BookingPaymentsBookingCreditGet(
    recordLocator: string,
    currencyCode?: string,
    emailAddress?: string,
    origin?: string,
    firstName?: string,
    lastName?: string,
    customerNumber?: string,
    departureDate?: Date,
    observe: any = 'body',
    headers: Headers = {}
  ): Observable<any> {
    if (!recordLocator) {
      throw new Error(
        'Required parameter recordLocator was null or undefined when calling apiNskV2BookingPaymentsBookingCreditGet.'
      );
    }

    let queryParameters: string[] = [];
    if (currencyCode !== undefined) {
      queryParameters.push(
        'currencyCode=' + encodeURIComponent(String(currencyCode))
      );
    }
    if (recordLocator !== undefined) {
      queryParameters.push(
        'recordLocator=' + encodeURIComponent(String(recordLocator))
      );
    }
    if (emailAddress !== undefined) {
      queryParameters.push(
        'emailAddress=' + encodeURIComponent(String(emailAddress))
      );
    }
    if (origin !== undefined) {
      queryParameters.push('origin=' + encodeURIComponent(String(origin)));
    }
    if (firstName !== undefined) {
      queryParameters.push(
        'firstName=' + encodeURIComponent(String(firstName))
      );
    }
    if (lastName !== undefined) {
      queryParameters.push('lastName=' + encodeURIComponent(String(lastName)));
    }
    if (customerNumber !== undefined) {
      queryParameters.push(
        'customerNumber=' + encodeURIComponent(String(customerNumber))
      );
    }
    if (departureDate !== undefined) {
      queryParameters.push(
        'departureDate=' + encodeURIComponent(<any>departureDate.toISOString())
      );
    }

    const response: Observable<HttpResponse<
      CreditAccount
    >> = this.httpClient.get(
      `${
        this.basePath
      }/api/nsk/v2/booking/payments/bookingCredit?${queryParameters.join('&')}`,
      headers
    );
    if (observe == 'body') {
      return response.pipe(
        map(httpResponse => <CreditAccount>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Applies credit from a past booking.
     * 
     * @param request Apply booking credit request.
     
     */
  public apiNskV2BookingPaymentsBookingCreditPost(
    request?: ApplyBookingCreditRequestv2,
    observe?: 'body',
    headers?: Headers
  ): Observable<IJsonResponse>;
  public apiNskV2BookingPaymentsBookingCreditPost(
    request?: ApplyBookingCreditRequestv2,
    observe?: 'response',
    headers?: Headers
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV2BookingPaymentsBookingCreditPost(
    request?: ApplyBookingCreditRequestv2,
    observe: any = 'body',
    headers: Headers = {}
  ): Observable<any> {
    const response: Observable<HttpResponse<
      IJsonResponse
    >> = this.httpClient.post(
      `${this.basePath}/api/nsk/v2/booking/payments/bookingCredit`,
      request,
      headers
    );
    if (observe == 'body') {
      return response.pipe(
        map(httpResponse => <IJsonResponse>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Gets credit available by reference number and type.
     * This endpoint is for agents and can get credit available for any user or type.
     * @param referenceNumber The account reference. This will be the record locator, customer account number, or organization code depending on  the type.
     * @param type Defines the type of credit being applied.
     * @param currencyCode The currency code of the account.
     
     */
  public apiNskV2BookingPaymentsCreditGet(
    referenceNumber: string,
    type: 'Customer' | 'Booking' | 'Organization',
    currencyCode?: string,
    observe?: 'body',
    headers?: Headers
  ): Observable<CreditAccount>;
  public apiNskV2BookingPaymentsCreditGet(
    referenceNumber: string,
    type: 'Customer' | 'Booking' | 'Organization',
    currencyCode?: string,
    observe?: 'response',
    headers?: Headers
  ): Observable<HttpResponse<CreditAccount>>;
  public apiNskV2BookingPaymentsCreditGet(
    referenceNumber: string,
    type: 'Customer' | 'Booking' | 'Organization',
    currencyCode?: string,
    observe: any = 'body',
    headers: Headers = {}
  ): Observable<any> {
    if (!referenceNumber) {
      throw new Error(
        'Required parameter referenceNumber was null or undefined when calling apiNskV2BookingPaymentsCreditGet.'
      );
    }

    if (!type) {
      throw new Error(
        'Required parameter type was null or undefined when calling apiNskV2BookingPaymentsCreditGet.'
      );
    }

    let queryParameters: string[] = [];
    if (referenceNumber !== undefined) {
      queryParameters.push(
        'referenceNumber=' + encodeURIComponent(String(referenceNumber))
      );
    }
    if (currencyCode !== undefined) {
      queryParameters.push(
        'currencyCode=' + encodeURIComponent(String(currencyCode))
      );
    }
    if (type !== undefined) {
      queryParameters.push('type=' + encodeURIComponent(String(type)));
    }

    const response: Observable<HttpResponse<
      CreditAccount
    >> = this.httpClient.get(
      `${
        this.basePath
      }/api/nsk/v2/booking/payments/credit?${queryParameters.join('&')}`,
      headers
    );
    if (observe == 'body') {
      return response.pipe(
        map(httpResponse => <CreditAccount>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Applies credit by reference number and type.
     * This endpoint is for agents and can apply credit for any user or type.
     * @param request Apply credit request.
     
     */
  public apiNskV2BookingPaymentsCreditPost(
    request?: ApplyCreditAccountRequest,
    observe?: 'body',
    headers?: Headers
  ): Observable<IJsonResponse>;
  public apiNskV2BookingPaymentsCreditPost(
    request?: ApplyCreditAccountRequest,
    observe?: 'response',
    headers?: Headers
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV2BookingPaymentsCreditPost(
    request?: ApplyCreditAccountRequest,
    observe: any = 'body',
    headers: Headers = {}
  ): Observable<any> {
    const response: Observable<HttpResponse<
      IJsonResponse
    >> = this.httpClient.post(
      `${this.basePath}/api/nsk/v2/booking/payments/credit`,
      request,
      headers
    );
    if (observe == 'body') {
      return response.pipe(
        map(httpResponse => <IJsonResponse>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Gets credit available for the logged in user on the booking in state.
     * Depending on configuration, credit may be validated by the contacts and passengers on the booking.
     * @param currencyCode The currency code of the account.
     
     */
  public apiNskV2BookingPaymentsCustomerCreditGet(
    currencyCode?: string,
    observe?: 'body',
    headers?: Headers
  ): Observable<CreditAccount>;
  public apiNskV2BookingPaymentsCustomerCreditGet(
    currencyCode?: string,
    observe?: 'response',
    headers?: Headers
  ): Observable<HttpResponse<CreditAccount>>;
  public apiNskV2BookingPaymentsCustomerCreditGet(
    currencyCode?: string,
    observe: any = 'body',
    headers: Headers = {}
  ): Observable<any> {
    let queryParameters: string[] = [];
    if (currencyCode !== undefined) {
      queryParameters.push(
        'currencyCode=' + encodeURIComponent(String(currencyCode))
      );
    }

    const response: Observable<HttpResponse<
      CreditAccount
    >> = this.httpClient.get(
      `${
        this.basePath
      }/api/nsk/v2/booking/payments/customerCredit?${queryParameters.join(
        '&'
      )}`,
      headers
    );
    if (observe == 'body') {
      return response.pipe(
        map(httpResponse => <CreditAccount>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Applies credit from the logged in customer to the booking in state.
     * 
     * @param request Apply credit request.
     
     */
  public apiNskV2BookingPaymentsCustomerCreditPost(
    request?: ApplyCreditRequest,
    observe?: 'body',
    headers?: Headers
  ): Observable<IJsonResponse>;
  public apiNskV2BookingPaymentsCustomerCreditPost(
    request?: ApplyCreditRequest,
    observe?: 'response',
    headers?: Headers
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV2BookingPaymentsCustomerCreditPost(
    request?: ApplyCreditRequest,
    observe: any = 'body',
    headers: Headers = {}
  ): Observable<any> {
    const response: Observable<HttpResponse<
      IJsonResponse
    >> = this.httpClient.post(
      `${this.basePath}/api/nsk/v2/booking/payments/customerCredit`,
      request,
      headers
    );
    if (observe == 'body') {
      return response.pipe(
        map(httpResponse => <IJsonResponse>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Gets credit available for the logged in users organization.
     * Depending on configuration, credit may be validated by the contacts and passengers on the booking.
     * @param currencyCode The currency code of the account.
     
     */
  public apiNskV2BookingPaymentsOrganizationCreditGet(
    currencyCode?: string,
    observe?: 'body',
    headers?: Headers
  ): Observable<CreditAccount>;
  public apiNskV2BookingPaymentsOrganizationCreditGet(
    currencyCode?: string,
    observe?: 'response',
    headers?: Headers
  ): Observable<HttpResponse<CreditAccount>>;
  public apiNskV2BookingPaymentsOrganizationCreditGet(
    currencyCode?: string,
    observe: any = 'body',
    headers: Headers = {}
  ): Observable<any> {
    let queryParameters: string[] = [];
    if (currencyCode !== undefined) {
      queryParameters.push(
        'currencyCode=' + encodeURIComponent(String(currencyCode))
      );
    }

    const response: Observable<HttpResponse<
      CreditAccount
    >> = this.httpClient.get(
      `${
        this.basePath
      }/api/nsk/v2/booking/payments/organizationCredit?${queryParameters.join(
        '&'
      )}`,
      headers
    );
    if (observe == 'body') {
      return response.pipe(
        map(httpResponse => <CreditAccount>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Applies credit to the logged in user&#39;s organization.
     * 
     * @param request Apply credit request.
     
     */
  public apiNskV2BookingPaymentsOrganizationCreditPost(
    request?: ApplyCreditRequest,
    observe?: 'body',
    headers?: Headers
  ): Observable<IJsonResponse>;
  public apiNskV2BookingPaymentsOrganizationCreditPost(
    request?: ApplyCreditRequest,
    observe?: 'response',
    headers?: Headers
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV2BookingPaymentsOrganizationCreditPost(
    request?: ApplyCreditRequest,
    observe: any = 'body',
    headers: Headers = {}
  ): Observable<any> {
    const response: Observable<HttpResponse<
      IJsonResponse
    >> = this.httpClient.post(
      `${this.basePath}/api/nsk/v2/booking/payments/organizationCredit`,
      request,
      headers
    );
    if (observe == 'body') {
      return response.pipe(
        map(httpResponse => <IJsonResponse>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Creates a new external payment or prepaid payment on the booking in state.
     * &lt;p&gt;                      The payment fields are dynamic to the criteria of your payment provider. Here is an example request for a                      credit card payment that does not require address, zip, etc.                      { \&quot;amount\&quot;: 10, \&quot;currencyCode\&quot;: \&quot;USD\&quot;, \&quot;paymentFields\&quot;: {\&quot;ACCTNO\&quot;:\&quot;411111111111\&quot;, \&quot;EXPDATE\&quot;:\&quot;10/8/2017\&quot;,                      \&quot;CC::AccountHolderName\&quot;:\&quot;Bob Smith\&quot;, \&quot;CC::VerificationCode\&quot;:\&quot;111\&quot;}}                  &lt;/p&gt;  &lt;p&gt;                      A 202 (HTTP status code) response returns alternate data signifying that Three D Secure was enabled for this                      payment                      and is required for this payment type. The payment will need to be resent using the 3DS endpoint.                  &lt;/p&gt;  &lt;p&gt;                      If you would like to make a ThreeDSecure payment, you will need to have these headers populated:                      &lt;ul&gt;&lt;li&gt;                              User Agent                          &lt;/li&gt;&lt;li&gt;                              Ip Address                          &lt;/li&gt;&lt;li&gt;                              Accept                          &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;
     * @param request Payment request.
     * @param termUrl The term URL.
     
     */
  public apiNskV2BookingPaymentsPost(
    request?: PaymentMethodRequest,
    termUrl?: string,
    observe?: 'body',
    headers?: Headers
  ): Observable<IJsonResponse>;
  public apiNskV2BookingPaymentsPost(
    request?: PaymentMethodRequest,
    termUrl?: string,
    observe?: 'response',
    headers?: Headers
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV2BookingPaymentsPost(
    request?: PaymentMethodRequest,
    termUrl?: string,
    observe: any = 'body',
    headers: Headers = {}
  ): Observable<any> {
    let queryParameters: string[] = [];
    if (termUrl !== undefined) {
      queryParameters.push('termUrl=' + encodeURIComponent(String(termUrl)));
    }

    const response: Observable<HttpResponse<
      IJsonResponse
    >> = this.httpClient.post(
      `${this.basePath}/api/nsk/v2/booking/payments?${queryParameters.join(
        '&'
      )}`,
      request,
      headers
    );
    if (observe == 'body') {
      return response.pipe(
        map(httpResponse => <IJsonResponse>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Creates a customer credit for a specified customer.
     * Requires a booking in state and an agent token. Agents should use /refunds endpoint for booking credits.
     * @param request 
     
     */
  public apiNskV2BookingPaymentsRefundsCustomerCreditPost(
    request?: CustomerCreditRefundRequest,
    observe?: 'body',
    headers?: Headers
  ): Observable<IJsonResponse>;
  public apiNskV2BookingPaymentsRefundsCustomerCreditPost(
    request?: CustomerCreditRefundRequest,
    observe?: 'response',
    headers?: Headers
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV2BookingPaymentsRefundsCustomerCreditPost(
    request?: CustomerCreditRefundRequest,
    observe: any = 'body',
    headers: Headers = {}
  ): Observable<any> {
    const response: Observable<HttpResponse<
      IJsonResponse
    >> = this.httpClient.post(
      `${this.basePath}/api/nsk/v2/booking/payments/refunds/customerCredit`,
      request,
      headers
    );
    if (observe == 'body') {
      return response.pipe(
        map(httpResponse => <IJsonResponse>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Deletes a voucher payment on the booking in state.
     * 
     * @param voucherPaymentReference Voucher payment reference.
     
     */
  public apiNskV2BookingPaymentsVoucherByVoucherPaymentReferenceDelete(
    voucherPaymentReference: string,
    observe?: 'body',
    headers?: Headers
  ): Observable<IJsonResponse>;
  public apiNskV2BookingPaymentsVoucherByVoucherPaymentReferenceDelete(
    voucherPaymentReference: string,
    observe?: 'response',
    headers?: Headers
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV2BookingPaymentsVoucherByVoucherPaymentReferenceDelete(
    voucherPaymentReference: string,
    observe: any = 'body',
    headers: Headers = {}
  ): Observable<any> {
    if (!voucherPaymentReference) {
      throw new Error(
        'Required parameter voucherPaymentReference was null or undefined when calling apiNskV2BookingPaymentsVoucherByVoucherPaymentReferenceDelete.'
      );
    }

    const response: Observable<HttpResponse<
      IJsonResponse
    >> = this.httpClient.delete(
      `${
        this.basePath
      }/api/nsk/v2/booking/payments/voucher/${encodeURIComponent(
        String(voucherPaymentReference)
      )}`,
      headers
    );
    if (observe == 'body') {
      return response.pipe(
        map(httpResponse => <IJsonResponse>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Gets the available direct currency codes offer.
     * 
     * @param paymentMethod Payment method code.
     * @param amount The amount being applied as a payment.
     * @param accountNumber The account number.
     * @param quotedCurrencyCode The quoted currency code to convert to.
     
     */
  public apiNskV3BookingPaymentsByPaymentMethodDccGet(
    paymentMethod: string,
    amount: number,
    accountNumber: string,
    quotedCurrencyCode: string,
    observe?: 'body',
    headers?: Headers
  ): Observable<DirectCurrencyConversionAvailability>;
  public apiNskV3BookingPaymentsByPaymentMethodDccGet(
    paymentMethod: string,
    amount: number,
    accountNumber: string,
    quotedCurrencyCode: string,
    observe?: 'response',
    headers?: Headers
  ): Observable<HttpResponse<DirectCurrencyConversionAvailability>>;
  public apiNskV3BookingPaymentsByPaymentMethodDccGet(
    paymentMethod: string,
    amount: number,
    accountNumber: string,
    quotedCurrencyCode: string,
    observe: any = 'body',
    headers: Headers = {}
  ): Observable<any> {
    if (!paymentMethod) {
      throw new Error(
        'Required parameter paymentMethod was null or undefined when calling apiNskV3BookingPaymentsByPaymentMethodDccGet.'
      );
    }

    if (!amount) {
      throw new Error(
        'Required parameter amount was null or undefined when calling apiNskV3BookingPaymentsByPaymentMethodDccGet.'
      );
    }

    if (!accountNumber) {
      throw new Error(
        'Required parameter accountNumber was null or undefined when calling apiNskV3BookingPaymentsByPaymentMethodDccGet.'
      );
    }

    if (!quotedCurrencyCode) {
      throw new Error(
        'Required parameter quotedCurrencyCode was null or undefined when calling apiNskV3BookingPaymentsByPaymentMethodDccGet.'
      );
    }

    let queryParameters: string[] = [];
    if (amount !== undefined) {
      queryParameters.push('amount=' + encodeURIComponent(String(amount)));
    }
    if (accountNumber !== undefined) {
      queryParameters.push(
        'accountNumber=' + encodeURIComponent(String(accountNumber))
      );
    }
    if (quotedCurrencyCode !== undefined) {
      queryParameters.push(
        'quotedCurrencyCode=' + encodeURIComponent(String(quotedCurrencyCode))
      );
    }

    const response: Observable<HttpResponse<
      DirectCurrencyConversionAvailability
    >> = this.httpClient.get(
      `${this.basePath}/api/nsk/v3/booking/payments/${encodeURIComponent(
        String(paymentMethod)
      )}/dcc?${queryParameters.join('&')}`,
      headers
    );
    if (observe == 'body') {
      return response.pipe(
        map(
          httpResponse =>
            <DirectCurrencyConversionAvailability>httpResponse.response
        )
      );
    }
    return response;
  }

  /**
     * Retrieves the payment fee for the fee code.
     * 
     * @param feeCode The unique fee code identifier.
     * @param amount The amount being payed.
     * @param currencyCode The currency code. This will default to the bookings currency code.
     * @param collectedCurrencyCode The optional collected currency code. This will be needed for MCC requests.
     
     */
  public apiNskV3BookingPaymentsFeesByFeeCodeGet(
    feeCode: string,
    amount: number,
    currencyCode?: string,
    collectedCurrencyCode?: string,
    observe?: 'body',
    headers?: Headers
  ): Observable<PaymentFeeResponse>;
  public apiNskV3BookingPaymentsFeesByFeeCodeGet(
    feeCode: string,
    amount: number,
    currencyCode?: string,
    collectedCurrencyCode?: string,
    observe?: 'response',
    headers?: Headers
  ): Observable<HttpResponse<PaymentFeeResponse>>;
  public apiNskV3BookingPaymentsFeesByFeeCodeGet(
    feeCode: string,
    amount: number,
    currencyCode?: string,
    collectedCurrencyCode?: string,
    observe: any = 'body',
    headers: Headers = {}
  ): Observable<any> {
    if (!feeCode) {
      throw new Error(
        'Required parameter feeCode was null or undefined when calling apiNskV3BookingPaymentsFeesByFeeCodeGet.'
      );
    }

    if (!amount) {
      throw new Error(
        'Required parameter amount was null or undefined when calling apiNskV3BookingPaymentsFeesByFeeCodeGet.'
      );
    }

    let queryParameters: string[] = [];
    if (amount !== undefined) {
      queryParameters.push('amount=' + encodeURIComponent(String(amount)));
    }
    if (currencyCode !== undefined) {
      queryParameters.push(
        'currencyCode=' + encodeURIComponent(String(currencyCode))
      );
    }
    if (collectedCurrencyCode !== undefined) {
      queryParameters.push(
        'collectedCurrencyCode=' +
          encodeURIComponent(String(collectedCurrencyCode))
      );
    }

    const response: Observable<HttpResponse<
      PaymentFeeResponse
    >> = this.httpClient.get(
      `${this.basePath}/api/nsk/v3/booking/payments/fees/${encodeURIComponent(
        String(feeCode)
      )}?${queryParameters.join('&')}`,
      headers
    );
    if (observe == 'body') {
      return response.pipe(
        map(httpResponse => <PaymentFeeResponse>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Creates a new MCC payment.
     * This is affected by the booking currency code.
     * @param currencyCode The collected currency code.
     * @param request The payment method request.
     
     */
  public apiNskV3BookingPaymentsMccByCurrencyCodePost(
    currencyCode: string,
    request?: PaymentMethodRequest,
    observe?: 'body',
    headers?: Headers
  ): Observable<IJsonResponse>;
  public apiNskV3BookingPaymentsMccByCurrencyCodePost(
    currencyCode: string,
    request?: PaymentMethodRequest,
    observe?: 'response',
    headers?: Headers
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV3BookingPaymentsMccByCurrencyCodePost(
    currencyCode: string,
    request?: PaymentMethodRequest,
    observe: any = 'body',
    headers: Headers = {}
  ): Observable<any> {
    if (!currencyCode) {
      throw new Error(
        'Required parameter currencyCode was null or undefined when calling apiNskV3BookingPaymentsMccByCurrencyCodePost.'
      );
    }

    const response: Observable<HttpResponse<
      IJsonResponse
    >> = this.httpClient.post(
      `${this.basePath}/api/nsk/v3/booking/payments/mcc/${encodeURIComponent(
        String(currencyCode)
      )}`,
      request,
      headers
    );
    if (observe == 'body') {
      return response.pipe(
        map(httpResponse => <IJsonResponse>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Creates a new MCC payment from a stored payment.
     * This is affected by the booking currency code.
     * @param currencyCode The collected currency code.
     * @param storedPaymentKey Stored payment key.
     * @param request The payment method request.
     
     */
  public apiNskV3BookingPaymentsMccByCurrencyCodeStoredPaymentByStoredPaymentKeyPost(
    currencyCode: string,
    storedPaymentKey: string,
    request?: PaymentRequest,
    observe?: 'body',
    headers?: Headers
  ): Observable<IJsonResponse>;
  public apiNskV3BookingPaymentsMccByCurrencyCodeStoredPaymentByStoredPaymentKeyPost(
    currencyCode: string,
    storedPaymentKey: string,
    request?: PaymentRequest,
    observe?: 'response',
    headers?: Headers
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV3BookingPaymentsMccByCurrencyCodeStoredPaymentByStoredPaymentKeyPost(
    currencyCode: string,
    storedPaymentKey: string,
    request?: PaymentRequest,
    observe: any = 'body',
    headers: Headers = {}
  ): Observable<any> {
    if (!currencyCode) {
      throw new Error(
        'Required parameter currencyCode was null or undefined when calling apiNskV3BookingPaymentsMccByCurrencyCodeStoredPaymentByStoredPaymentKeyPost.'
      );
    }

    if (!storedPaymentKey) {
      throw new Error(
        'Required parameter storedPaymentKey was null or undefined when calling apiNskV3BookingPaymentsMccByCurrencyCodeStoredPaymentByStoredPaymentKeyPost.'
      );
    }

    const response: Observable<HttpResponse<
      IJsonResponse
    >> = this.httpClient.post(
      `${this.basePath}/api/nsk/v3/booking/payments/mcc/${encodeURIComponent(
        String(currencyCode)
      )}/storedPayment/${encodeURIComponent(String(storedPaymentKey))}`,
      request,
      headers
    );
    if (observe == 'body') {
      return response.pipe(
        map(httpResponse => <IJsonResponse>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Gets the available multi-currency codes available.
     * This is affected by the booking currency code.
     
     */
  public apiNskV3BookingPaymentsMccGet(
    observe?: 'body',
    headers?: Headers
  ): Observable<InlineResponse2009>;
  public apiNskV3BookingPaymentsMccGet(
    observe?: 'response',
    headers?: Headers
  ): Observable<HttpResponse<InlineResponse2009>>;
  public apiNskV3BookingPaymentsMccGet(
    observe: any = 'body',
    headers: Headers = {}
  ): Observable<any> {
    const response: Observable<HttpResponse<
      InlineResponse2009
    >> = this.httpClient.get(
      `${this.basePath}/api/nsk/v3/booking/payments/mcc`,
      headers
    );
    if (observe == 'body') {
      return response.pipe(
        map(httpResponse => <InlineResponse2009>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Creates a refund for the booking in state.
     * Requires a booking in state. Credit shell payment types will default to a customer credit if logged in. If not  logged in a booking credit will be applied.
     * @param request 
     
     */
  public apiNskV3BookingPaymentsRefundsPost(
    request?: PaymentRefundRequest,
    observe?: 'body',
    headers?: Headers
  ): Observable<IJsonResponse>;
  public apiNskV3BookingPaymentsRefundsPost(
    request?: PaymentRefundRequest,
    observe?: 'response',
    headers?: Headers
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV3BookingPaymentsRefundsPost(
    request?: PaymentRefundRequest,
    observe: any = 'body',
    headers: Headers = {}
  ): Observable<any> {
    const response: Observable<HttpResponse<
      IJsonResponse
    >> = this.httpClient.post(
      `${this.basePath}/api/nsk/v3/booking/payments/refunds`,
      request,
      headers
    );
    if (observe == 'body') {
      return response.pipe(
        map(httpResponse => <IJsonResponse>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Creates a payment using the stored payment information for the booking in state.
     * Account Number and Expiration Date are stored.  With stored payments, payment fields may still be required to complete the transaction.  For example, a credit card that requires address information, this information is not stored with the stored  payment.
     * @param storedPaymentKey Stored payment key.
     * @param request Payment request.
     
     */
  public apiNskV3BookingPaymentsStoredPaymentByStoredPaymentKeyPost(
    storedPaymentKey: string,
    request?: PaymentRequest,
    observe?: 'body',
    headers?: Headers
  ): Observable<IJsonResponse>;
  public apiNskV3BookingPaymentsStoredPaymentByStoredPaymentKeyPost(
    storedPaymentKey: string,
    request?: PaymentRequest,
    observe?: 'response',
    headers?: Headers
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV3BookingPaymentsStoredPaymentByStoredPaymentKeyPost(
    storedPaymentKey: string,
    request?: PaymentRequest,
    observe: any = 'body',
    headers: Headers = {}
  ): Observable<any> {
    if (!storedPaymentKey) {
      throw new Error(
        'Required parameter storedPaymentKey was null or undefined when calling apiNskV3BookingPaymentsStoredPaymentByStoredPaymentKeyPost.'
      );
    }

    const response: Observable<HttpResponse<
      IJsonResponse
    >> = this.httpClient.post(
      `${
        this.basePath
      }/api/nsk/v3/booking/payments/storedPayment/${encodeURIComponent(
        String(storedPaymentKey)
      )}`,
      request,
      headers
    );
    if (observe == 'body') {
      return response.pipe(
        map(httpResponse => <IJsonResponse>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Creates a new ThreeDSecure external payment or prepaid payment on the booking in state.
     * &lt;p&gt;                      A call to payments post should be made first and processed to verify a 3DS payment is required.                  &lt;/p&gt;  &lt;p&gt;                      If you would like to make a ThreeDSecure payment, you will need to provide a valid term url.                      You will also need to have these headers populated:                      &lt;ul&gt;&lt;li&gt;                              User Agent                          &lt;/li&gt;&lt;li&gt;                              Ip Address                          &lt;/li&gt;&lt;li&gt;                              Accept                          &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;
     * @param request Payment request.
     * @param termUrl The term URL.
     
     */
  public apiNskV3BookingPaymentsThreeDSecurePost(
    request?: ThreeDSecurePaymentMethodRequestv2,
    termUrl?: string,
    observe?: 'body',
    headers?: Headers
  ): Observable<IJsonResponse>;
  public apiNskV3BookingPaymentsThreeDSecurePost(
    request?: ThreeDSecurePaymentMethodRequestv2,
    termUrl?: string,
    observe?: 'response',
    headers?: Headers
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV3BookingPaymentsThreeDSecurePost(
    request?: ThreeDSecurePaymentMethodRequestv2,
    termUrl?: string,
    observe: any = 'body',
    headers: Headers = {}
  ): Observable<any> {
    let queryParameters: string[] = [];
    if (termUrl !== undefined) {
      queryParameters.push('termUrl=' + encodeURIComponent(String(termUrl)));
    }

    const response: Observable<HttpResponse<
      IJsonResponse
    >> = this.httpClient.post(
      `${
        this.basePath
      }/api/nsk/v3/booking/payments/threeDSecure?${queryParameters.join('&')}`,
      request,
      headers
    );
    if (observe == 'body') {
      return response.pipe(
        map(httpResponse => <IJsonResponse>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Creates a new voucher payment on the booking in state.
     * 
     * @param request 
     
     */
  public apiNskV3BookingPaymentsVoucherPost(
    request?: VoucherPaymentRequest,
    observe?: 'body',
    headers?: Headers
  ): Observable<IJsonResponse>;
  public apiNskV3BookingPaymentsVoucherPost(
    request?: VoucherPaymentRequest,
    observe?: 'response',
    headers?: Headers
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV3BookingPaymentsVoucherPost(
    request?: VoucherPaymentRequest,
    observe: any = 'body',
    headers: Headers = {}
  ): Observable<any> {
    const response: Observable<HttpResponse<
      IJsonResponse
    >> = this.httpClient.post(
      `${this.basePath}/api/nsk/v3/booking/payments/voucher`,
      request,
      headers
    );
    if (observe == 'body') {
      return response.pipe(
        map(httpResponse => <IJsonResponse>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Creates a new external payment with direct currency conversion.
     * 
     * @param dccKey 
     * @param request 
     
     */
  public apiNskV4BookingPaymentsDccByDccKeyPost(
    dccKey: string,
    request?: DccRequestBasev2,
    observe?: 'body',
    headers?: Headers
  ): Observable<IJsonResponse>;
  public apiNskV4BookingPaymentsDccByDccKeyPost(
    dccKey: string,
    request?: DccRequestBasev2,
    observe?: 'response',
    headers?: Headers
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV4BookingPaymentsDccByDccKeyPost(
    dccKey: string,
    request?: DccRequestBasev2,
    observe: any = 'body',
    headers: Headers = {}
  ): Observable<any> {
    if (!dccKey) {
      throw new Error(
        'Required parameter dccKey was null or undefined when calling apiNskV4BookingPaymentsDccByDccKeyPost.'
      );
    }

    const response: Observable<HttpResponse<
      IJsonResponse
    >> = this.httpClient.post(
      `${this.basePath}/api/nsk/v4/booking/payments/dcc/${encodeURIComponent(
        String(dccKey)
      )}`,
      request,
      headers
    );
    if (observe == 'body') {
      return response.pipe(
        map(httpResponse => <IJsonResponse>httpResponse.response)
      );
    }
    return response;
  }
}
