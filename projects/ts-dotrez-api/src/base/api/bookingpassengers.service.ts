/**
 * API - Current Routes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: trunk
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';
import { inject, injectable } from 'inversify';

import {
  AddSeatRequest,
  DeltaMapperInfant,
  DeltaMapperPassengerAddressEditRequest,
  DeltaMapperPassengerBase,
  DeltaMapperTravelDocumentEditRequest,
  DeltaMapperTravelNotificationEditRequest,
  IJsonResponse,
  Infant,
  InlineResponse2005,
  InlineResponse2006,
  InlineResponse2007,
  NotificationEvent,
  NotificationEventCreateRequest,
  NotificationTimedEvent,
  NotificationTimedEventCreateRequest,
  NotificationTimedEventEditRequest,
  Passenger,
  PassengerAddress,
  PassengerAddressCreateRequest,
  PassengerAddressEditRequest,
  PassengerBag,
  PassengerBase,
  PassengerInfant,
  PassengerInfantCreateRequest,
  PassengerKeyResponse,
  PassengerPriceBreakdown,
  PassengerSeat,
  PassengerTravelDocument,
  PassengerTypeCodeEditRequest,
  TravelDocumentCreateRequest,
  TravelDocumentEditRequest,
  TravelNotification,
  TravelNotificationCreateRequest,
  TravelNotificationEditRequest
} from 'api-models';

import { IHttpClient } from '../IHttpClient';
import { IAPIConfiguration } from '../IAPIConfiguration';
import { HttpResponse } from '../HttpResponse';
import { Headers } from '../Headers';

import { COLLECTION_FORMATS } from '../variables';

@injectable()
export class BookingpassengersService {
  private basePath: string = 'https://localhost';

  constructor(
    @inject('IApiHttpClient') private httpClient: IHttpClient,
    @inject('IAPIConfiguration') private APIConfiguration: IAPIConfiguration
  ) {
    if (this.APIConfiguration.basePath)
      this.basePath = this.APIConfiguration.basePath;
  }

  /**
     * Gets all the passenger price breakdown by passenger type.
     * 
     
     */
  public apiNskV1BookingPassengersBreakdownByTypeGet(
    observe?: 'body',
    headers?: Headers
  ): Observable<InlineResponse2007>;
  public apiNskV1BookingPassengersBreakdownByTypeGet(
    observe?: 'response',
    headers?: Headers
  ): Observable<HttpResponse<InlineResponse2007>>;
  public apiNskV1BookingPassengersBreakdownByTypeGet(
    observe: any = 'body',
    headers: Headers = {}
  ): Observable<any> {
    const response: Observable<HttpResponse<
      InlineResponse2007
    >> = this.httpClient.get(
      `${this.basePath}/api/nsk/v1/booking/passengers/breakdown/byType`,
      headers
    );
    if (observe == 'body') {
      return response.pipe(
        map(httpResponse => <InlineResponse2007>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Gets all the passenger price breakdowns.
     * 
     
     */
  public apiNskV1BookingPassengersBreakdownGet(
    observe?: 'body',
    headers?: Headers
  ): Observable<InlineResponse2006>;
  public apiNskV1BookingPassengersBreakdownGet(
    observe?: 'response',
    headers?: Headers
  ): Observable<HttpResponse<InlineResponse2006>>;
  public apiNskV1BookingPassengersBreakdownGet(
    observe: any = 'body',
    headers: Headers = {}
  ): Observable<any> {
    const response: Observable<HttpResponse<
      InlineResponse2006
    >> = this.httpClient.get(
      `${this.basePath}/api/nsk/v1/booking/passengers/breakdown`,
      headers
    );
    if (observe == 'body') {
      return response.pipe(
        map(httpResponse => <InlineResponse2006>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Deletes a passenger travel notification for a specific passenger on the booking in state.
     * 
     * @param passengerAlternateKey The passenger alternate key. This key will be null until the booking is committed.
     * @param travelNotificationKey The travel notification key.
     
     */
  public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyDelete(
    passengerAlternateKey: string,
    travelNotificationKey: string,
    observe?: 'body',
    headers?: Headers
  ): Observable<IJsonResponse>;
  public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyDelete(
    passengerAlternateKey: string,
    travelNotificationKey: string,
    observe?: 'response',
    headers?: Headers
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyDelete(
    passengerAlternateKey: string,
    travelNotificationKey: string,
    observe: any = 'body',
    headers: Headers = {}
  ): Observable<any> {
    if (!passengerAlternateKey) {
      throw new Error(
        'Required parameter passengerAlternateKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyDelete.'
      );
    }

    if (!travelNotificationKey) {
      throw new Error(
        'Required parameter travelNotificationKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyDelete.'
      );
    }

    const response: Observable<HttpResponse<
      IJsonResponse
    >> = this.httpClient.delete(
      `${this.basePath}/api/nsk/v1/booking/passengers/${encodeURIComponent(
        String(passengerAlternateKey)
      )}/travelNotifications/${encodeURIComponent(
        String(travelNotificationKey)
      )}`,
      headers
    );
    if (observe == 'body') {
      return response.pipe(
        map(httpResponse => <IJsonResponse>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Deletes a notification event from a specific passenger travel notification on the booking in state.
     * 
     * @param passengerAlternateKey The passenger alternate key. This key will be null until the booking is committed.
     * @param travelNotificationKey The travel notification key.
     * @param eventType The notification event type.
     
     */
  public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyEventsByEventTypeDelete(
    passengerAlternateKey: string,
    travelNotificationKey: string,
    eventType: 'DepartureDelay' | 'ArrivalDelay' | 'ScheduleChange' | 'CheckIn',
    observe?: 'body',
    headers?: Headers
  ): Observable<IJsonResponse>;
  public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyEventsByEventTypeDelete(
    passengerAlternateKey: string,
    travelNotificationKey: string,
    eventType: 'DepartureDelay' | 'ArrivalDelay' | 'ScheduleChange' | 'CheckIn',
    observe?: 'response',
    headers?: Headers
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyEventsByEventTypeDelete(
    passengerAlternateKey: string,
    travelNotificationKey: string,
    eventType: 'DepartureDelay' | 'ArrivalDelay' | 'ScheduleChange' | 'CheckIn',
    observe: any = 'body',
    headers: Headers = {}
  ): Observable<any> {
    if (!passengerAlternateKey) {
      throw new Error(
        'Required parameter passengerAlternateKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyEventsByEventTypeDelete.'
      );
    }

    if (!travelNotificationKey) {
      throw new Error(
        'Required parameter travelNotificationKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyEventsByEventTypeDelete.'
      );
    }

    if (!eventType) {
      throw new Error(
        'Required parameter eventType was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyEventsByEventTypeDelete.'
      );
    }

    const response: Observable<HttpResponse<
      IJsonResponse
    >> = this.httpClient.delete(
      `${this.basePath}/api/nsk/v1/booking/passengers/${encodeURIComponent(
        String(passengerAlternateKey)
      )}/travelNotifications/${encodeURIComponent(
        String(travelNotificationKey)
      )}/events/${encodeURIComponent(String(eventType))}`,
      headers
    );
    if (observe == 'body') {
      return response.pipe(
        map(httpResponse => <IJsonResponse>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Get a notification event for a specific passenger travel notification on the booking in state.
     * 
     * @param passengerAlternateKey The passenger alternate key. This key will be null until the booking is committed.
     * @param travelNotificationKey The travel notification key.
     * @param eventType The event type.
     
     */
  public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyEventsByEventTypeGet(
    passengerAlternateKey: string,
    travelNotificationKey: string,
    eventType: 'DepartureDelay' | 'ArrivalDelay' | 'ScheduleChange' | 'CheckIn',
    observe?: 'body',
    headers?: Headers
  ): Observable<NotificationEvent>;
  public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyEventsByEventTypeGet(
    passengerAlternateKey: string,
    travelNotificationKey: string,
    eventType: 'DepartureDelay' | 'ArrivalDelay' | 'ScheduleChange' | 'CheckIn',
    observe?: 'response',
    headers?: Headers
  ): Observable<HttpResponse<NotificationEvent>>;
  public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyEventsByEventTypeGet(
    passengerAlternateKey: string,
    travelNotificationKey: string,
    eventType: 'DepartureDelay' | 'ArrivalDelay' | 'ScheduleChange' | 'CheckIn',
    observe: any = 'body',
    headers: Headers = {}
  ): Observable<any> {
    if (!passengerAlternateKey) {
      throw new Error(
        'Required parameter passengerAlternateKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyEventsByEventTypeGet.'
      );
    }

    if (!travelNotificationKey) {
      throw new Error(
        'Required parameter travelNotificationKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyEventsByEventTypeGet.'
      );
    }

    if (!eventType) {
      throw new Error(
        'Required parameter eventType was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyEventsByEventTypeGet.'
      );
    }

    const response: Observable<HttpResponse<
      NotificationEvent
    >> = this.httpClient.get(
      `${this.basePath}/api/nsk/v1/booking/passengers/${encodeURIComponent(
        String(passengerAlternateKey)
      )}/travelNotifications/${encodeURIComponent(
        String(travelNotificationKey)
      )}/events/${encodeURIComponent(String(eventType))}`,
      headers
    );
    if (observe == 'body') {
      return response.pipe(
        map(httpResponse => <NotificationEvent>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Gets notification events for a specific passenger travel notification on the booking in state.
     * 
     * @param passengerAlternateKey The passenger alternate key. This key will be null until the booking is committed.
     * @param travelNotificationKey The travel notification key.
     
     */
  public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyEventsGet(
    passengerAlternateKey: string,
    travelNotificationKey: string,
    observe?: 'body',
    headers?: Headers
  ): Observable<Array<NotificationEvent>>;
  public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyEventsGet(
    passengerAlternateKey: string,
    travelNotificationKey: string,
    observe?: 'response',
    headers?: Headers
  ): Observable<HttpResponse<Array<NotificationEvent>>>;
  public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyEventsGet(
    passengerAlternateKey: string,
    travelNotificationKey: string,
    observe: any = 'body',
    headers: Headers = {}
  ): Observable<any> {
    if (!passengerAlternateKey) {
      throw new Error(
        'Required parameter passengerAlternateKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyEventsGet.'
      );
    }

    if (!travelNotificationKey) {
      throw new Error(
        'Required parameter travelNotificationKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyEventsGet.'
      );
    }

    const response: Observable<HttpResponse<
      Array<NotificationEvent>
    >> = this.httpClient.get(
      `${this.basePath}/api/nsk/v1/booking/passengers/${encodeURIComponent(
        String(passengerAlternateKey)
      )}/travelNotifications/${encodeURIComponent(
        String(travelNotificationKey)
      )}/events`,
      headers
    );
    if (observe == 'body') {
      return response.pipe(
        map(httpResponse => <Array<NotificationEvent>>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Adds a notification event to a specific passenger travel notification on the booking in state.
     * 
     * @param passengerAlternateKey The passenger alternate key. This key will be null until the booking is committed.
     * @param travelNotificationKey The travel notification key.
     * @param request The notification event create request.
     
     */
  public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyEventsPost(
    passengerAlternateKey: string,
    travelNotificationKey: string,
    request?: NotificationEventCreateRequest,
    observe?: 'body',
    headers?: Headers
  ): Observable<IJsonResponse>;
  public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyEventsPost(
    passengerAlternateKey: string,
    travelNotificationKey: string,
    request?: NotificationEventCreateRequest,
    observe?: 'response',
    headers?: Headers
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyEventsPost(
    passengerAlternateKey: string,
    travelNotificationKey: string,
    request?: NotificationEventCreateRequest,
    observe: any = 'body',
    headers: Headers = {}
  ): Observable<any> {
    if (!passengerAlternateKey) {
      throw new Error(
        'Required parameter passengerAlternateKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyEventsPost.'
      );
    }

    if (!travelNotificationKey) {
      throw new Error(
        'Required parameter travelNotificationKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyEventsPost.'
      );
    }

    const response: Observable<HttpResponse<
      IJsonResponse
    >> = this.httpClient.post(
      `${this.basePath}/api/nsk/v1/booking/passengers/${encodeURIComponent(
        String(passengerAlternateKey)
      )}/travelNotifications/${encodeURIComponent(
        String(travelNotificationKey)
      )}/events`,
      request,
      headers
    );
    if (observe == 'body') {
      return response.pipe(
        map(httpResponse => <IJsonResponse>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Gets a passenger travel notification for a specific passenger on the booking in state.
     * 
     * @param passengerAlternateKey The passenger alternate key. This key will be null until the booking is committed.
     * @param travelNotificationKey The travel notification key.
     
     */
  public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyGet(
    passengerAlternateKey: string,
    travelNotificationKey: string,
    observe?: 'body',
    headers?: Headers
  ): Observable<TravelNotification>;
  public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyGet(
    passengerAlternateKey: string,
    travelNotificationKey: string,
    observe?: 'response',
    headers?: Headers
  ): Observable<HttpResponse<TravelNotification>>;
  public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyGet(
    passengerAlternateKey: string,
    travelNotificationKey: string,
    observe: any = 'body',
    headers: Headers = {}
  ): Observable<any> {
    if (!passengerAlternateKey) {
      throw new Error(
        'Required parameter passengerAlternateKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyGet.'
      );
    }

    if (!travelNotificationKey) {
      throw new Error(
        'Required parameter travelNotificationKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyGet.'
      );
    }

    const response: Observable<HttpResponse<
      TravelNotification
    >> = this.httpClient.get(
      `${this.basePath}/api/nsk/v1/booking/passengers/${encodeURIComponent(
        String(passengerAlternateKey)
      )}/travelNotifications/${encodeURIComponent(
        String(travelNotificationKey)
      )}`,
      headers
    );
    if (observe == 'body') {
      return response.pipe(
        map(httpResponse => <TravelNotification>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Patches a passenger travel notification for a specific passenger on the booking in state.
     * 
     * @param passengerAlternateKey The passenger alternate key. This key will be null until the booking is committed.
     * @param travelNotificationKey The travel notification key.
     * @param request The delta mapper travel notification edit request.
     
     */
  public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyPatch(
    passengerAlternateKey: string,
    travelNotificationKey: string,
    request?: DeltaMapperTravelNotificationEditRequest,
    observe?: 'body',
    headers?: Headers
  ): Observable<IJsonResponse>;
  public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyPatch(
    passengerAlternateKey: string,
    travelNotificationKey: string,
    request?: DeltaMapperTravelNotificationEditRequest,
    observe?: 'response',
    headers?: Headers
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyPatch(
    passengerAlternateKey: string,
    travelNotificationKey: string,
    request?: DeltaMapperTravelNotificationEditRequest,
    observe: any = 'body',
    headers: Headers = {}
  ): Observable<any> {
    if (!passengerAlternateKey) {
      throw new Error(
        'Required parameter passengerAlternateKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyPatch.'
      );
    }

    if (!travelNotificationKey) {
      throw new Error(
        'Required parameter travelNotificationKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyPatch.'
      );
    }

    const response: Observable<HttpResponse<
      IJsonResponse
    >> = this.httpClient.patch(
      `${this.basePath}/api/nsk/v1/booking/passengers/${encodeURIComponent(
        String(passengerAlternateKey)
      )}/travelNotifications/${encodeURIComponent(
        String(travelNotificationKey)
      )}`,
      request,
      headers
    );
    if (observe == 'body') {
      return response.pipe(
        map(httpResponse => <IJsonResponse>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Updates a passenger travel notification for a specific passenger on the booking in state.
     * 
     * @param passengerAlternateKey The passenger alternate key. This key will be null until the booking is committed.
     * @param travelNotificationKey The travel notification key.
     * @param request The travel notification edit request.
     
     */
  public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyPut(
    passengerAlternateKey: string,
    travelNotificationKey: string,
    request?: TravelNotificationEditRequest,
    observe?: 'body',
    headers?: Headers
  ): Observable<IJsonResponse>;
  public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyPut(
    passengerAlternateKey: string,
    travelNotificationKey: string,
    request?: TravelNotificationEditRequest,
    observe?: 'response',
    headers?: Headers
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyPut(
    passengerAlternateKey: string,
    travelNotificationKey: string,
    request?: TravelNotificationEditRequest,
    observe: any = 'body',
    headers: Headers = {}
  ): Observable<any> {
    if (!passengerAlternateKey) {
      throw new Error(
        'Required parameter passengerAlternateKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyPut.'
      );
    }

    if (!travelNotificationKey) {
      throw new Error(
        'Required parameter travelNotificationKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyPut.'
      );
    }

    const response: Observable<HttpResponse<
      IJsonResponse
    >> = this.httpClient.put(
      `${this.basePath}/api/nsk/v1/booking/passengers/${encodeURIComponent(
        String(passengerAlternateKey)
      )}/travelNotifications/${encodeURIComponent(
        String(travelNotificationKey)
      )}`,
      request,
      headers
    );
    if (observe == 'body') {
      return response.pipe(
        map(httpResponse => <IJsonResponse>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Deletes a notification timed event from a specific passenger travel notification on the booking in state.
     * 
     * @param passengerAlternateKey The passenger alternate key. This key will be null until the booking is committed.
     * @param travelNotificationKey The travel notification key.
     * @param timedEventType The notification timed event type.
     
     */
  public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeDelete(
    passengerAlternateKey: string,
    travelNotificationKey: string,
    timedEventType: 'Departure' | 'Arrival',
    observe?: 'body',
    headers?: Headers
  ): Observable<IJsonResponse>;
  public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeDelete(
    passengerAlternateKey: string,
    travelNotificationKey: string,
    timedEventType: 'Departure' | 'Arrival',
    observe?: 'response',
    headers?: Headers
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeDelete(
    passengerAlternateKey: string,
    travelNotificationKey: string,
    timedEventType: 'Departure' | 'Arrival',
    observe: any = 'body',
    headers: Headers = {}
  ): Observable<any> {
    if (!passengerAlternateKey) {
      throw new Error(
        'Required parameter passengerAlternateKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeDelete.'
      );
    }

    if (!travelNotificationKey) {
      throw new Error(
        'Required parameter travelNotificationKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeDelete.'
      );
    }

    if (!timedEventType) {
      throw new Error(
        'Required parameter timedEventType was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeDelete.'
      );
    }

    const response: Observable<HttpResponse<
      IJsonResponse
    >> = this.httpClient.delete(
      `${this.basePath}/api/nsk/v1/booking/passengers/${encodeURIComponent(
        String(passengerAlternateKey)
      )}/travelNotifications/${encodeURIComponent(
        String(travelNotificationKey)
      )}/timedEvents/${encodeURIComponent(String(timedEventType))}`,
      headers
    );
    if (observe == 'body') {
      return response.pipe(
        map(httpResponse => <IJsonResponse>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Get a notification timed event for a specific passenger travel notification on the booking in state.
     * 
     * @param passengerAlternateKey The passenger alternate key. This key will be null until the booking is committed.
     * @param travelNotificationKey The travel notification key.
     * @param timedEventType The timed event type.
     
     */
  public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeGet(
    passengerAlternateKey: string,
    travelNotificationKey: string,
    timedEventType: 'Departure' | 'Arrival',
    observe?: 'body',
    headers?: Headers
  ): Observable<NotificationTimedEvent>;
  public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeGet(
    passengerAlternateKey: string,
    travelNotificationKey: string,
    timedEventType: 'Departure' | 'Arrival',
    observe?: 'response',
    headers?: Headers
  ): Observable<HttpResponse<NotificationTimedEvent>>;
  public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeGet(
    passengerAlternateKey: string,
    travelNotificationKey: string,
    timedEventType: 'Departure' | 'Arrival',
    observe: any = 'body',
    headers: Headers = {}
  ): Observable<any> {
    if (!passengerAlternateKey) {
      throw new Error(
        'Required parameter passengerAlternateKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeGet.'
      );
    }

    if (!travelNotificationKey) {
      throw new Error(
        'Required parameter travelNotificationKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeGet.'
      );
    }

    if (!timedEventType) {
      throw new Error(
        'Required parameter timedEventType was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeGet.'
      );
    }

    const response: Observable<HttpResponse<
      NotificationTimedEvent
    >> = this.httpClient.get(
      `${this.basePath}/api/nsk/v1/booking/passengers/${encodeURIComponent(
        String(passengerAlternateKey)
      )}/travelNotifications/${encodeURIComponent(
        String(travelNotificationKey)
      )}/timedEvents/${encodeURIComponent(String(timedEventType))}`,
      headers
    );
    if (observe == 'body') {
      return response.pipe(
        map(httpResponse => <NotificationTimedEvent>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Updates a notification timed event for a specific passenger travel notification on the booking in state.
     * 
     * @param passengerAlternateKey The passenger alternate key. This key will be null until the booking is committed.
     * @param travelNotificationKey The travel notification key.
     * @param timedEventType The notification timed event type.
     * @param request The updated notification timed event request.
     
     */
  public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypePut(
    passengerAlternateKey: string,
    travelNotificationKey: string,
    timedEventType: 'Departure' | 'Arrival',
    request?: NotificationTimedEventEditRequest,
    observe?: 'body',
    headers?: Headers
  ): Observable<IJsonResponse>;
  public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypePut(
    passengerAlternateKey: string,
    travelNotificationKey: string,
    timedEventType: 'Departure' | 'Arrival',
    request?: NotificationTimedEventEditRequest,
    observe?: 'response',
    headers?: Headers
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypePut(
    passengerAlternateKey: string,
    travelNotificationKey: string,
    timedEventType: 'Departure' | 'Arrival',
    request?: NotificationTimedEventEditRequest,
    observe: any = 'body',
    headers: Headers = {}
  ): Observable<any> {
    if (!passengerAlternateKey) {
      throw new Error(
        'Required parameter passengerAlternateKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypePut.'
      );
    }

    if (!travelNotificationKey) {
      throw new Error(
        'Required parameter travelNotificationKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypePut.'
      );
    }

    if (!timedEventType) {
      throw new Error(
        'Required parameter timedEventType was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypePut.'
      );
    }

    const response: Observable<HttpResponse<
      IJsonResponse
    >> = this.httpClient.put(
      `${this.basePath}/api/nsk/v1/booking/passengers/${encodeURIComponent(
        String(passengerAlternateKey)
      )}/travelNotifications/${encodeURIComponent(
        String(travelNotificationKey)
      )}/timedEvents/${encodeURIComponent(String(timedEventType))}`,
      request,
      headers
    );
    if (observe == 'body') {
      return response.pipe(
        map(httpResponse => <IJsonResponse>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Gets notification timed events for a specific passenger travel notification on the booking in state.
     * 
     * @param passengerAlternateKey The passenger alternate key. This key will be null until the booking is committed.
     * @param travelNotificationKey The travel notification key.
     
     */
  public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyTimedEventsGet(
    passengerAlternateKey: string,
    travelNotificationKey: string,
    observe?: 'body',
    headers?: Headers
  ): Observable<Array<NotificationTimedEvent>>;
  public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyTimedEventsGet(
    passengerAlternateKey: string,
    travelNotificationKey: string,
    observe?: 'response',
    headers?: Headers
  ): Observable<HttpResponse<Array<NotificationTimedEvent>>>;
  public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyTimedEventsGet(
    passengerAlternateKey: string,
    travelNotificationKey: string,
    observe: any = 'body',
    headers: Headers = {}
  ): Observable<any> {
    if (!passengerAlternateKey) {
      throw new Error(
        'Required parameter passengerAlternateKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyTimedEventsGet.'
      );
    }

    if (!travelNotificationKey) {
      throw new Error(
        'Required parameter travelNotificationKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyTimedEventsGet.'
      );
    }

    const response: Observable<HttpResponse<
      Array<NotificationTimedEvent>
    >> = this.httpClient.get(
      `${this.basePath}/api/nsk/v1/booking/passengers/${encodeURIComponent(
        String(passengerAlternateKey)
      )}/travelNotifications/${encodeURIComponent(
        String(travelNotificationKey)
      )}/timedEvents`,
      headers
    );
    if (observe == 'body') {
      return response.pipe(
        map(
          httpResponse => <Array<NotificationTimedEvent>>httpResponse.response
        )
      );
    }
    return response;
  }

  /**
     * Adds a notification timed event to a specific passenger travel notification on the booking in state.
     * 
     * @param passengerAlternateKey The passenger alternate key. This key will be null until the booking is committed.
     * @param travelNotificationKey The travel notification key.
     * @param request The notification timed even create request.
     
     */
  public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyTimedEventsPost(
    passengerAlternateKey: string,
    travelNotificationKey: string,
    request?: NotificationTimedEventCreateRequest,
    observe?: 'body',
    headers?: Headers
  ): Observable<IJsonResponse>;
  public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyTimedEventsPost(
    passengerAlternateKey: string,
    travelNotificationKey: string,
    request?: NotificationTimedEventCreateRequest,
    observe?: 'response',
    headers?: Headers
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyTimedEventsPost(
    passengerAlternateKey: string,
    travelNotificationKey: string,
    request?: NotificationTimedEventCreateRequest,
    observe: any = 'body',
    headers: Headers = {}
  ): Observable<any> {
    if (!passengerAlternateKey) {
      throw new Error(
        'Required parameter passengerAlternateKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyTimedEventsPost.'
      );
    }

    if (!travelNotificationKey) {
      throw new Error(
        'Required parameter travelNotificationKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyTimedEventsPost.'
      );
    }

    const response: Observable<HttpResponse<
      IJsonResponse
    >> = this.httpClient.post(
      `${this.basePath}/api/nsk/v1/booking/passengers/${encodeURIComponent(
        String(passengerAlternateKey)
      )}/travelNotifications/${encodeURIComponent(
        String(travelNotificationKey)
      )}/timedEvents`,
      request,
      headers
    );
    if (observe == 'body') {
      return response.pipe(
        map(httpResponse => <IJsonResponse>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Gets passenger travel notifications for a specific passenger on the booking in state.
     * 
     * @param passengerAlternateKey The passenger alternate key. This key will be null until the booking is committed.
     
     */
  public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsGet(
    passengerAlternateKey: string,
    observe?: 'body',
    headers?: Headers
  ): Observable<Array<TravelNotification>>;
  public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsGet(
    passengerAlternateKey: string,
    observe?: 'response',
    headers?: Headers
  ): Observable<HttpResponse<Array<TravelNotification>>>;
  public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsGet(
    passengerAlternateKey: string,
    observe: any = 'body',
    headers: Headers = {}
  ): Observable<any> {
    if (!passengerAlternateKey) {
      throw new Error(
        'Required parameter passengerAlternateKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsGet.'
      );
    }

    const response: Observable<HttpResponse<
      Array<TravelNotification>
    >> = this.httpClient.get(
      `${this.basePath}/api/nsk/v1/booking/passengers/${encodeURIComponent(
        String(passengerAlternateKey)
      )}/travelNotifications`,
      headers
    );
    if (observe == 'body') {
      return response.pipe(
        map(httpResponse => <Array<TravelNotification>>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Creates a passenger travel notification for a specific passenger on the booking in state.
     * 
     * @param passengerAlternateKey The passenger alternate key. This key will be null until the booking is committed.
     * @param request The passenger travel notification create request.
     
     */
  public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsPost(
    passengerAlternateKey: string,
    request?: TravelNotificationCreateRequest,
    observe?: 'body',
    headers?: Headers
  ): Observable<IJsonResponse>;
  public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsPost(
    passengerAlternateKey: string,
    request?: TravelNotificationCreateRequest,
    observe?: 'response',
    headers?: Headers
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsPost(
    passengerAlternateKey: string,
    request?: TravelNotificationCreateRequest,
    observe: any = 'body',
    headers: Headers = {}
  ): Observable<any> {
    if (!passengerAlternateKey) {
      throw new Error(
        'Required parameter passengerAlternateKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsPost.'
      );
    }

    const response: Observable<HttpResponse<
      IJsonResponse
    >> = this.httpClient.post(
      `${this.basePath}/api/nsk/v1/booking/passengers/${encodeURIComponent(
        String(passengerAlternateKey)
      )}/travelNotifications`,
      request,
      headers
    );
    if (observe == 'body') {
      return response.pipe(
        map(httpResponse => <IJsonResponse>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Gets a specific address from a specific passenger.
     * 
     * @param passengerKey The unique passenger key.
     * @param addressKey The unique address key.
     
     */
  public apiNskV1BookingPassengersByPassengerKeyAddressesByAddressKeyGet(
    passengerKey: string,
    addressKey: string,
    observe?: 'body',
    headers?: Headers
  ): Observable<PassengerAddress>;
  public apiNskV1BookingPassengersByPassengerKeyAddressesByAddressKeyGet(
    passengerKey: string,
    addressKey: string,
    observe?: 'response',
    headers?: Headers
  ): Observable<HttpResponse<PassengerAddress>>;
  public apiNskV1BookingPassengersByPassengerKeyAddressesByAddressKeyGet(
    passengerKey: string,
    addressKey: string,
    observe: any = 'body',
    headers: Headers = {}
  ): Observable<any> {
    if (!passengerKey) {
      throw new Error(
        'Required parameter passengerKey was null or undefined when calling apiNskV1BookingPassengersByPassengerKeyAddressesByAddressKeyGet.'
      );
    }

    if (!addressKey) {
      throw new Error(
        'Required parameter addressKey was null or undefined when calling apiNskV1BookingPassengersByPassengerKeyAddressesByAddressKeyGet.'
      );
    }

    const response: Observable<HttpResponse<
      PassengerAddress
    >> = this.httpClient.get(
      `${this.basePath}/api/nsk/v1/booking/passengers/${encodeURIComponent(
        String(passengerKey)
      )}/addresses/${encodeURIComponent(String(addressKey))}`,
      headers
    );
    if (observe == 'body') {
      return response.pipe(
        map(httpResponse => <PassengerAddress>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Gets the collection of addresses from a specific passenger.
     * 
     * @param passengerKey The unique passenger key.
     
     */
  public apiNskV1BookingPassengersByPassengerKeyAddressesGet(
    passengerKey: string,
    observe?: 'body',
    headers?: Headers
  ): Observable<Array<PassengerAddress>>;
  public apiNskV1BookingPassengersByPassengerKeyAddressesGet(
    passengerKey: string,
    observe?: 'response',
    headers?: Headers
  ): Observable<HttpResponse<Array<PassengerAddress>>>;
  public apiNskV1BookingPassengersByPassengerKeyAddressesGet(
    passengerKey: string,
    observe: any = 'body',
    headers: Headers = {}
  ): Observable<any> {
    if (!passengerKey) {
      throw new Error(
        'Required parameter passengerKey was null or undefined when calling apiNskV1BookingPassengersByPassengerKeyAddressesGet.'
      );
    }

    const response: Observable<HttpResponse<
      Array<PassengerAddress>
    >> = this.httpClient.get(
      `${this.basePath}/api/nsk/v1/booking/passengers/${encodeURIComponent(
        String(passengerKey)
      )}/addresses`,
      headers
    );
    if (observe == 'body') {
      return response.pipe(
        map(httpResponse => <Array<PassengerAddress>>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Retrieve a single bag from a specific passenger.
     * 
     * @param passengerKey The passenger key for the passenger to retrieve from.
     * @param baggageKey The bag key for the bag to retrieve.
     
     */
  public apiNskV1BookingPassengersByPassengerKeyBaggageByBaggageKeyGet(
    passengerKey: string,
    baggageKey: string,
    observe?: 'body',
    headers?: Headers
  ): Observable<PassengerBag>;
  public apiNskV1BookingPassengersByPassengerKeyBaggageByBaggageKeyGet(
    passengerKey: string,
    baggageKey: string,
    observe?: 'response',
    headers?: Headers
  ): Observable<HttpResponse<PassengerBag>>;
  public apiNskV1BookingPassengersByPassengerKeyBaggageByBaggageKeyGet(
    passengerKey: string,
    baggageKey: string,
    observe: any = 'body',
    headers: Headers = {}
  ): Observable<any> {
    if (!passengerKey) {
      throw new Error(
        'Required parameter passengerKey was null or undefined when calling apiNskV1BookingPassengersByPassengerKeyBaggageByBaggageKeyGet.'
      );
    }

    if (!baggageKey) {
      throw new Error(
        'Required parameter baggageKey was null or undefined when calling apiNskV1BookingPassengersByPassengerKeyBaggageByBaggageKeyGet.'
      );
    }

    const response: Observable<HttpResponse<
      PassengerBag
    >> = this.httpClient.get(
      `${this.basePath}/api/nsk/v1/booking/passengers/${encodeURIComponent(
        String(passengerKey)
      )}/baggage/${encodeURIComponent(String(baggageKey))}`,
      headers
    );
    if (observe == 'body') {
      return response.pipe(
        map(httpResponse => <PassengerBag>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Gets all the baggage for a specified passenger.
     * 
     * @param passengerKey The unique identifier for the passenger to get baggage for.
     
     */
  public apiNskV1BookingPassengersByPassengerKeyBaggageGet(
    passengerKey: string,
    observe?: 'body',
    headers?: Headers
  ): Observable<Array<PassengerBag>>;
  public apiNskV1BookingPassengersByPassengerKeyBaggageGet(
    passengerKey: string,
    observe?: 'response',
    headers?: Headers
  ): Observable<HttpResponse<Array<PassengerBag>>>;
  public apiNskV1BookingPassengersByPassengerKeyBaggageGet(
    passengerKey: string,
    observe: any = 'body',
    headers: Headers = {}
  ): Observable<any> {
    if (!passengerKey) {
      throw new Error(
        'Required parameter passengerKey was null or undefined when calling apiNskV1BookingPassengersByPassengerKeyBaggageGet.'
      );
    }

    const response: Observable<HttpResponse<
      Array<PassengerBag>
    >> = this.httpClient.get(
      `${this.basePath}/api/nsk/v1/booking/passengers/${encodeURIComponent(
        String(passengerKey)
      )}/baggage`,
      headers
    );
    if (observe == 'body') {
      return response.pipe(
        map(httpResponse => <Array<PassengerBag>>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Gets a specific passenger price breakdown by passenger key.
     * 
     * @param passengerKey The specific passenger key.
     
     */
  public apiNskV1BookingPassengersByPassengerKeyBreakdownGet(
    passengerKey: string,
    observe?: 'body',
    headers?: Headers
  ): Observable<PassengerPriceBreakdown>;
  public apiNskV1BookingPassengersByPassengerKeyBreakdownGet(
    passengerKey: string,
    observe?: 'response',
    headers?: Headers
  ): Observable<HttpResponse<PassengerPriceBreakdown>>;
  public apiNskV1BookingPassengersByPassengerKeyBreakdownGet(
    passengerKey: string,
    observe: any = 'body',
    headers: Headers = {}
  ): Observable<any> {
    if (!passengerKey) {
      throw new Error(
        'Required parameter passengerKey was null or undefined when calling apiNskV1BookingPassengersByPassengerKeyBreakdownGet.'
      );
    }

    const response: Observable<HttpResponse<
      PassengerPriceBreakdown
    >> = this.httpClient.get(
      `${this.basePath}/api/nsk/v1/booking/passengers/${encodeURIComponent(
        String(passengerKey)
      )}/breakdown`,
      headers
    );
    if (observe == 'body') {
      return response.pipe(
        map(httpResponse => <PassengerPriceBreakdown>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Gets a specific passenger&#39;s specific travel document.
     * 
     * @param passengerKey The unique passenger key.
     * @param travelDocumentKey The unique travel document key.
     
     */
  public apiNskV1BookingPassengersByPassengerKeyDocumentsByTravelDocumentKeyGet(
    passengerKey: string,
    travelDocumentKey: string,
    observe?: 'body',
    headers?: Headers
  ): Observable<PassengerTravelDocument>;
  public apiNskV1BookingPassengersByPassengerKeyDocumentsByTravelDocumentKeyGet(
    passengerKey: string,
    travelDocumentKey: string,
    observe?: 'response',
    headers?: Headers
  ): Observable<HttpResponse<PassengerTravelDocument>>;
  public apiNskV1BookingPassengersByPassengerKeyDocumentsByTravelDocumentKeyGet(
    passengerKey: string,
    travelDocumentKey: string,
    observe: any = 'body',
    headers: Headers = {}
  ): Observable<any> {
    if (!passengerKey) {
      throw new Error(
        'Required parameter passengerKey was null or undefined when calling apiNskV1BookingPassengersByPassengerKeyDocumentsByTravelDocumentKeyGet.'
      );
    }

    if (!travelDocumentKey) {
      throw new Error(
        'Required parameter travelDocumentKey was null or undefined when calling apiNskV1BookingPassengersByPassengerKeyDocumentsByTravelDocumentKeyGet.'
      );
    }

    const response: Observable<HttpResponse<
      PassengerTravelDocument
    >> = this.httpClient.get(
      `${this.basePath}/api/nsk/v1/booking/passengers/${encodeURIComponent(
        String(passengerKey)
      )}/documents/${encodeURIComponent(String(travelDocumentKey))}`,
      headers
    );
    if (observe == 'body') {
      return response.pipe(
        map(httpResponse => <PassengerTravelDocument>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Gets a specific passenger&#39;s collection of travel documents.
     * 
     * @param passengerKey The unique passenger key.
     
     */
  public apiNskV1BookingPassengersByPassengerKeyDocumentsGet(
    passengerKey: string,
    observe?: 'body',
    headers?: Headers
  ): Observable<Array<PassengerTravelDocument>>;
  public apiNskV1BookingPassengersByPassengerKeyDocumentsGet(
    passengerKey: string,
    observe?: 'response',
    headers?: Headers
  ): Observable<HttpResponse<Array<PassengerTravelDocument>>>;
  public apiNskV1BookingPassengersByPassengerKeyDocumentsGet(
    passengerKey: string,
    observe: any = 'body',
    headers: Headers = {}
  ): Observable<any> {
    if (!passengerKey) {
      throw new Error(
        'Required parameter passengerKey was null or undefined when calling apiNskV1BookingPassengersByPassengerKeyDocumentsGet.'
      );
    }

    const response: Observable<HttpResponse<
      Array<PassengerTravelDocument>
    >> = this.httpClient.get(
      `${this.basePath}/api/nsk/v1/booking/passengers/${encodeURIComponent(
        String(passengerKey)
      )}/documents`,
      headers
    );
    if (observe == 'body') {
      return response.pipe(
        map(
          httpResponse => <Array<PassengerTravelDocument>>httpResponse.response
        )
      );
    }
    return response;
  }

  /**
     * Gets a specific passenger on the booking.
     * 
     * @param passengerKey The unique passenger key.
     
     */
  public apiNskV1BookingPassengersByPassengerKeyGet(
    passengerKey: string,
    observe?: 'body',
    headers?: Headers
  ): Observable<Passenger>;
  public apiNskV1BookingPassengersByPassengerKeyGet(
    passengerKey: string,
    observe?: 'response',
    headers?: Headers
  ): Observable<HttpResponse<Passenger>>;
  public apiNskV1BookingPassengersByPassengerKeyGet(
    passengerKey: string,
    observe: any = 'body',
    headers: Headers = {}
  ): Observable<any> {
    if (!passengerKey) {
      throw new Error(
        'Required parameter passengerKey was null or undefined when calling apiNskV1BookingPassengersByPassengerKeyGet.'
      );
    }

    const response: Observable<HttpResponse<Passenger>> = this.httpClient.get(
      `${this.basePath}/api/nsk/v1/booking/passengers/${encodeURIComponent(
        String(passengerKey)
      )}`,
      headers
    );
    if (observe == 'body') {
      return response.pipe(
        map(httpResponse => <Passenger>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Gets a specific passenger infant&#39;s specific travel document.
     * 
     * @param passengerKey The unique passenger key.
     * @param travelDocumentKey The unique travel document key.
     
     */
  public apiNskV1BookingPassengersByPassengerKeyInfantDocumentsByTravelDocumentKeyGet(
    passengerKey: string,
    travelDocumentKey: string,
    observe?: 'body',
    headers?: Headers
  ): Observable<PassengerTravelDocument>;
  public apiNskV1BookingPassengersByPassengerKeyInfantDocumentsByTravelDocumentKeyGet(
    passengerKey: string,
    travelDocumentKey: string,
    observe?: 'response',
    headers?: Headers
  ): Observable<HttpResponse<PassengerTravelDocument>>;
  public apiNskV1BookingPassengersByPassengerKeyInfantDocumentsByTravelDocumentKeyGet(
    passengerKey: string,
    travelDocumentKey: string,
    observe: any = 'body',
    headers: Headers = {}
  ): Observable<any> {
    if (!passengerKey) {
      throw new Error(
        'Required parameter passengerKey was null or undefined when calling apiNskV1BookingPassengersByPassengerKeyInfantDocumentsByTravelDocumentKeyGet.'
      );
    }

    if (!travelDocumentKey) {
      throw new Error(
        'Required parameter travelDocumentKey was null or undefined when calling apiNskV1BookingPassengersByPassengerKeyInfantDocumentsByTravelDocumentKeyGet.'
      );
    }

    const response: Observable<HttpResponse<
      PassengerTravelDocument
    >> = this.httpClient.get(
      `${this.basePath}/api/nsk/v1/booking/passengers/${encodeURIComponent(
        String(passengerKey)
      )}/infant/documents/${encodeURIComponent(String(travelDocumentKey))}`,
      headers
    );
    if (observe == 'body') {
      return response.pipe(
        map(httpResponse => <PassengerTravelDocument>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Gets a specific passenger infant&#39;s collection of travel documents.
     * 
     * @param passengerKey The unique passenger key.
     
     */
  public apiNskV1BookingPassengersByPassengerKeyInfantDocumentsGet(
    passengerKey: string,
    observe?: 'body',
    headers?: Headers
  ): Observable<Array<PassengerTravelDocument>>;
  public apiNskV1BookingPassengersByPassengerKeyInfantDocumentsGet(
    passengerKey: string,
    observe?: 'response',
    headers?: Headers
  ): Observable<HttpResponse<Array<PassengerTravelDocument>>>;
  public apiNskV1BookingPassengersByPassengerKeyInfantDocumentsGet(
    passengerKey: string,
    observe: any = 'body',
    headers: Headers = {}
  ): Observable<any> {
    if (!passengerKey) {
      throw new Error(
        'Required parameter passengerKey was null or undefined when calling apiNskV1BookingPassengersByPassengerKeyInfantDocumentsGet.'
      );
    }

    const response: Observable<HttpResponse<
      Array<PassengerTravelDocument>
    >> = this.httpClient.get(
      `${this.basePath}/api/nsk/v1/booking/passengers/${encodeURIComponent(
        String(passengerKey)
      )}/infant/documents`,
      headers
    );
    if (observe == 'body') {
      return response.pipe(
        map(
          httpResponse => <Array<PassengerTravelDocument>>httpResponse.response
        )
      );
    }
    return response;
  }

  /**
     * Gets a specific passenger&#39;s infant.
     * 
     * @param passengerKey The unique passenger key.
     
     */
  public apiNskV1BookingPassengersByPassengerKeyInfantGet(
    passengerKey: string,
    observe?: 'body',
    headers?: Headers
  ): Observable<PassengerInfant>;
  public apiNskV1BookingPassengersByPassengerKeyInfantGet(
    passengerKey: string,
    observe?: 'response',
    headers?: Headers
  ): Observable<HttpResponse<PassengerInfant>>;
  public apiNskV1BookingPassengersByPassengerKeyInfantGet(
    passengerKey: string,
    observe: any = 'body',
    headers: Headers = {}
  ): Observable<any> {
    if (!passengerKey) {
      throw new Error(
        'Required parameter passengerKey was null or undefined when calling apiNskV1BookingPassengersByPassengerKeyInfantGet.'
      );
    }

    const response: Observable<HttpResponse<
      PassengerInfant
    >> = this.httpClient.get(
      `${this.basePath}/api/nsk/v1/booking/passengers/${encodeURIComponent(
        String(passengerKey)
      )}/infant`,
      headers
    );
    if (observe == 'body') {
      return response.pipe(
        map(httpResponse => <PassengerInfant>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Patches a specific passenger to the given passenger type.
     * NOTE: The date of birth doesn&#39;t need to be updated if the passenger&#39;s current date of birth still falls within the  new passenger type&#39;s age restriction.  This could also cause a repricing on the booking.  In addition, changing the passenger type will change the passenger key as well.
     * @param passengerKey The unique passenger key.
     * @param request The passenger type request containing the new passenger type.
     
     */
  public apiNskV1BookingPassengersByPassengerKeyPassengerTypeCodePatch(
    passengerKey: string,
    request?: PassengerTypeCodeEditRequest,
    observe?: 'body',
    headers?: Headers
  ): Observable<PassengerKeyResponse>;
  public apiNskV1BookingPassengersByPassengerKeyPassengerTypeCodePatch(
    passengerKey: string,
    request?: PassengerTypeCodeEditRequest,
    observe?: 'response',
    headers?: Headers
  ): Observable<HttpResponse<PassengerKeyResponse>>;
  public apiNskV1BookingPassengersByPassengerKeyPassengerTypeCodePatch(
    passengerKey: string,
    request?: PassengerTypeCodeEditRequest,
    observe: any = 'body',
    headers: Headers = {}
  ): Observable<any> {
    if (!passengerKey) {
      throw new Error(
        'Required parameter passengerKey was null or undefined when calling apiNskV1BookingPassengersByPassengerKeyPassengerTypeCodePatch.'
      );
    }

    const response: Observable<HttpResponse<
      PassengerKeyResponse
    >> = this.httpClient.patch(
      `${this.basePath}/api/nsk/v1/booking/passengers/${encodeURIComponent(
        String(passengerKey)
      )}/passengerTypeCode`,
      request,
      headers
    );
    if (observe == 'body') {
      return response.pipe(
        map(httpResponse => <PassengerKeyResponse>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Deletes a seat assignment from a specific passenger on the booking in state.
     * 
     * @param passengerKey 
     * @param unitKey The unique unit key.
     * @param waiveFee The flag indicating to waive the seat fees if permissions permit.
     * @param ignoreSeatSsrs Flag indicating whether to ignore seat SSR&#39;s.
     
     */
  public apiNskV1BookingPassengersByPassengerKeySeatsByUnitKeyDelete(
    passengerKey: string,
    unitKey: string,
    waiveFee?: boolean,
    ignoreSeatSsrs?: boolean,
    observe?: 'body',
    headers?: Headers
  ): Observable<IJsonResponse>;
  public apiNskV1BookingPassengersByPassengerKeySeatsByUnitKeyDelete(
    passengerKey: string,
    unitKey: string,
    waiveFee?: boolean,
    ignoreSeatSsrs?: boolean,
    observe?: 'response',
    headers?: Headers
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV1BookingPassengersByPassengerKeySeatsByUnitKeyDelete(
    passengerKey: string,
    unitKey: string,
    waiveFee?: boolean,
    ignoreSeatSsrs?: boolean,
    observe: any = 'body',
    headers: Headers = {}
  ): Observable<any> {
    if (!passengerKey) {
      throw new Error(
        'Required parameter passengerKey was null or undefined when calling apiNskV1BookingPassengersByPassengerKeySeatsByUnitKeyDelete.'
      );
    }

    if (!unitKey) {
      throw new Error(
        'Required parameter unitKey was null or undefined when calling apiNskV1BookingPassengersByPassengerKeySeatsByUnitKeyDelete.'
      );
    }

    let queryParameters: string[] = [];
    if (waiveFee !== undefined) {
      queryParameters.push('waiveFee=' + encodeURIComponent(String(waiveFee)));
    }
    if (ignoreSeatSsrs !== undefined) {
      queryParameters.push(
        'ignoreSeatSsrs=' + encodeURIComponent(String(ignoreSeatSsrs))
      );
    }

    const response: Observable<HttpResponse<
      IJsonResponse
    >> = this.httpClient.delete(
      `${this.basePath}/api/nsk/v1/booking/passengers/${encodeURIComponent(
        String(passengerKey)
      )}/seats/${encodeURIComponent(String(unitKey))}?${queryParameters.join(
        '&'
      )}`,
      headers
    );
    if (observe == 'body') {
      return response.pipe(
        map(httpResponse => <IJsonResponse>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Gets the collection of passengers on the booking.
     * 
     
     */
  public apiNskV1BookingPassengersGet(
    observe?: 'body',
    headers?: Headers
  ): Observable<InlineResponse2005>;
  public apiNskV1BookingPassengersGet(
    observe?: 'response',
    headers?: Headers
  ): Observable<HttpResponse<InlineResponse2005>>;
  public apiNskV1BookingPassengersGet(
    observe: any = 'body',
    headers: Headers = {}
  ): Observable<any> {
    const response: Observable<HttpResponse<
      InlineResponse2005
    >> = this.httpClient.get(
      `${this.basePath}/api/nsk/v1/booking/passengers`,
      headers
    );
    if (observe == 'body') {
      return response.pipe(
        map(httpResponse => <InlineResponse2005>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Deletes a specific address on a specific passenger.
     * 
     * @param passengerKey The unique passenger key.
     * @param addressKey The unique addres key.
     
     */
  public apiNskV2BookingPassengersByPassengerKeyAddressesByAddressKeyDelete(
    passengerKey: string,
    addressKey: string,
    observe?: 'body',
    headers?: Headers
  ): Observable<IJsonResponse>;
  public apiNskV2BookingPassengersByPassengerKeyAddressesByAddressKeyDelete(
    passengerKey: string,
    addressKey: string,
    observe?: 'response',
    headers?: Headers
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV2BookingPassengersByPassengerKeyAddressesByAddressKeyDelete(
    passengerKey: string,
    addressKey: string,
    observe: any = 'body',
    headers: Headers = {}
  ): Observable<any> {
    if (!passengerKey) {
      throw new Error(
        'Required parameter passengerKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeyAddressesByAddressKeyDelete.'
      );
    }

    if (!addressKey) {
      throw new Error(
        'Required parameter addressKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeyAddressesByAddressKeyDelete.'
      );
    }

    const response: Observable<HttpResponse<
      IJsonResponse
    >> = this.httpClient.delete(
      `${this.basePath}/api/nsk/v2/booking/passengers/${encodeURIComponent(
        String(passengerKey)
      )}/addresses/${encodeURIComponent(String(addressKey))}`,
      headers
    );
    if (observe == 'body') {
      return response.pipe(
        map(httpResponse => <IJsonResponse>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Patches a specific address on a specific passenger.
     * 
     * @param passengerKey The unique passenger key.
     * @param addressKey The unique addres key.
     * @param request The patched address.
     
     */
  public apiNskV2BookingPassengersByPassengerKeyAddressesByAddressKeyPatch(
    passengerKey: string,
    addressKey: string,
    request?: DeltaMapperPassengerAddressEditRequest,
    observe?: 'body',
    headers?: Headers
  ): Observable<IJsonResponse>;
  public apiNskV2BookingPassengersByPassengerKeyAddressesByAddressKeyPatch(
    passengerKey: string,
    addressKey: string,
    request?: DeltaMapperPassengerAddressEditRequest,
    observe?: 'response',
    headers?: Headers
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV2BookingPassengersByPassengerKeyAddressesByAddressKeyPatch(
    passengerKey: string,
    addressKey: string,
    request?: DeltaMapperPassengerAddressEditRequest,
    observe: any = 'body',
    headers: Headers = {}
  ): Observable<any> {
    if (!passengerKey) {
      throw new Error(
        'Required parameter passengerKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeyAddressesByAddressKeyPatch.'
      );
    }

    if (!addressKey) {
      throw new Error(
        'Required parameter addressKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeyAddressesByAddressKeyPatch.'
      );
    }

    const response: Observable<HttpResponse<
      IJsonResponse
    >> = this.httpClient.patch(
      `${this.basePath}/api/nsk/v2/booking/passengers/${encodeURIComponent(
        String(passengerKey)
      )}/addresses/${encodeURIComponent(String(addressKey))}`,
      request,
      headers
    );
    if (observe == 'body') {
      return response.pipe(
        map(httpResponse => <IJsonResponse>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Updates a specific address on a specific passenger.
     * 
     * @param passengerKey The unique passenger key.
     * @param addressKey The unique address key.
     * @param request The modified address.
     
     */
  public apiNskV2BookingPassengersByPassengerKeyAddressesByAddressKeyPut(
    passengerKey: string,
    addressKey: string,
    request?: PassengerAddressEditRequest,
    observe?: 'body',
    headers?: Headers
  ): Observable<IJsonResponse>;
  public apiNskV2BookingPassengersByPassengerKeyAddressesByAddressKeyPut(
    passengerKey: string,
    addressKey: string,
    request?: PassengerAddressEditRequest,
    observe?: 'response',
    headers?: Headers
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV2BookingPassengersByPassengerKeyAddressesByAddressKeyPut(
    passengerKey: string,
    addressKey: string,
    request?: PassengerAddressEditRequest,
    observe: any = 'body',
    headers: Headers = {}
  ): Observable<any> {
    if (!passengerKey) {
      throw new Error(
        'Required parameter passengerKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeyAddressesByAddressKeyPut.'
      );
    }

    if (!addressKey) {
      throw new Error(
        'Required parameter addressKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeyAddressesByAddressKeyPut.'
      );
    }

    const response: Observable<HttpResponse<
      IJsonResponse
    >> = this.httpClient.put(
      `${this.basePath}/api/nsk/v2/booking/passengers/${encodeURIComponent(
        String(passengerKey)
      )}/addresses/${encodeURIComponent(String(addressKey))}`,
      request,
      headers
    );
    if (observe == 'body') {
      return response.pipe(
        map(httpResponse => <IJsonResponse>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Creates a new address for a specific passenger.
     * 
     * @param passengerKey The unique passenger key.
     * @param request The new address request.
     
     */
  public apiNskV2BookingPassengersByPassengerKeyAddressesPost(
    passengerKey: string,
    request?: PassengerAddressCreateRequest,
    observe?: 'body',
    headers?: Headers
  ): Observable<IJsonResponse>;
  public apiNskV2BookingPassengersByPassengerKeyAddressesPost(
    passengerKey: string,
    request?: PassengerAddressCreateRequest,
    observe?: 'response',
    headers?: Headers
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV2BookingPassengersByPassengerKeyAddressesPost(
    passengerKey: string,
    request?: PassengerAddressCreateRequest,
    observe: any = 'body',
    headers: Headers = {}
  ): Observable<any> {
    if (!passengerKey) {
      throw new Error(
        'Required parameter passengerKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeyAddressesPost.'
      );
    }

    const response: Observable<HttpResponse<
      IJsonResponse
    >> = this.httpClient.post(
      `${this.basePath}/api/nsk/v2/booking/passengers/${encodeURIComponent(
        String(passengerKey)
      )}/addresses`,
      request,
      headers
    );
    if (observe == 'body') {
      return response.pipe(
        map(httpResponse => <IJsonResponse>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Deletes a specific passenger&#39;s specific travel document.
     * 
     * @param passengerKey The unique passenger key.
     * @param travelDocumentKey The unique travel document key.
     
     */
  public apiNskV2BookingPassengersByPassengerKeyDocumentsByTravelDocumentKeyDelete(
    passengerKey: string,
    travelDocumentKey: string,
    observe?: 'body',
    headers?: Headers
  ): Observable<IJsonResponse>;
  public apiNskV2BookingPassengersByPassengerKeyDocumentsByTravelDocumentKeyDelete(
    passengerKey: string,
    travelDocumentKey: string,
    observe?: 'response',
    headers?: Headers
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV2BookingPassengersByPassengerKeyDocumentsByTravelDocumentKeyDelete(
    passengerKey: string,
    travelDocumentKey: string,
    observe: any = 'body',
    headers: Headers = {}
  ): Observable<any> {
    if (!passengerKey) {
      throw new Error(
        'Required parameter passengerKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeyDocumentsByTravelDocumentKeyDelete.'
      );
    }

    if (!travelDocumentKey) {
      throw new Error(
        'Required parameter travelDocumentKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeyDocumentsByTravelDocumentKeyDelete.'
      );
    }

    const response: Observable<HttpResponse<
      IJsonResponse
    >> = this.httpClient.delete(
      `${this.basePath}/api/nsk/v2/booking/passengers/${encodeURIComponent(
        String(passengerKey)
      )}/documents/${encodeURIComponent(String(travelDocumentKey))}`,
      headers
    );
    if (observe == 'body') {
      return response.pipe(
        map(httpResponse => <IJsonResponse>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Patches a specific passenger&#39;s travel document.
     * 
     * @param passengerKey The unique passenger key.
     * @param travelDocumentKey The unique travel document key.
     * @param request The patched travel document.
     
     */
  public apiNskV2BookingPassengersByPassengerKeyDocumentsByTravelDocumentKeyPatch(
    passengerKey: string,
    travelDocumentKey: string,
    request?: DeltaMapperTravelDocumentEditRequest,
    observe?: 'body',
    headers?: Headers
  ): Observable<IJsonResponse>;
  public apiNskV2BookingPassengersByPassengerKeyDocumentsByTravelDocumentKeyPatch(
    passengerKey: string,
    travelDocumentKey: string,
    request?: DeltaMapperTravelDocumentEditRequest,
    observe?: 'response',
    headers?: Headers
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV2BookingPassengersByPassengerKeyDocumentsByTravelDocumentKeyPatch(
    passengerKey: string,
    travelDocumentKey: string,
    request?: DeltaMapperTravelDocumentEditRequest,
    observe: any = 'body',
    headers: Headers = {}
  ): Observable<any> {
    if (!passengerKey) {
      throw new Error(
        'Required parameter passengerKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeyDocumentsByTravelDocumentKeyPatch.'
      );
    }

    if (!travelDocumentKey) {
      throw new Error(
        'Required parameter travelDocumentKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeyDocumentsByTravelDocumentKeyPatch.'
      );
    }

    const response: Observable<HttpResponse<
      IJsonResponse
    >> = this.httpClient.patch(
      `${this.basePath}/api/nsk/v2/booking/passengers/${encodeURIComponent(
        String(passengerKey)
      )}/documents/${encodeURIComponent(String(travelDocumentKey))}`,
      request,
      headers
    );
    if (observe == 'body') {
      return response.pipe(
        map(httpResponse => <IJsonResponse>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Updates a specific passenger&#39;s travel document.
     * 
     * @param passengerKey The unique passenger key.
     * @param travelDocumentKey The unique travel document key.
     * @param request The modified travel document.
     
     */
  public apiNskV2BookingPassengersByPassengerKeyDocumentsByTravelDocumentKeyPut(
    passengerKey: string,
    travelDocumentKey: string,
    request?: TravelDocumentEditRequest,
    observe?: 'body',
    headers?: Headers
  ): Observable<IJsonResponse>;
  public apiNskV2BookingPassengersByPassengerKeyDocumentsByTravelDocumentKeyPut(
    passengerKey: string,
    travelDocumentKey: string,
    request?: TravelDocumentEditRequest,
    observe?: 'response',
    headers?: Headers
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV2BookingPassengersByPassengerKeyDocumentsByTravelDocumentKeyPut(
    passengerKey: string,
    travelDocumentKey: string,
    request?: TravelDocumentEditRequest,
    observe: any = 'body',
    headers: Headers = {}
  ): Observable<any> {
    if (!passengerKey) {
      throw new Error(
        'Required parameter passengerKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeyDocumentsByTravelDocumentKeyPut.'
      );
    }

    if (!travelDocumentKey) {
      throw new Error(
        'Required parameter travelDocumentKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeyDocumentsByTravelDocumentKeyPut.'
      );
    }

    const response: Observable<HttpResponse<
      IJsonResponse
    >> = this.httpClient.put(
      `${this.basePath}/api/nsk/v2/booking/passengers/${encodeURIComponent(
        String(passengerKey)
      )}/documents/${encodeURIComponent(String(travelDocumentKey))}`,
      request,
      headers
    );
    if (observe == 'body') {
      return response.pipe(
        map(httpResponse => <IJsonResponse>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Create a new travel document for a specific passenger.
     * 
     * @param passengerKey The unique passenger key.
     * @param request The new travel document.
     
     */
  public apiNskV2BookingPassengersByPassengerKeyDocumentsPost(
    passengerKey: string,
    request?: TravelDocumentCreateRequest,
    observe?: 'body',
    headers?: Headers
  ): Observable<IJsonResponse>;
  public apiNskV2BookingPassengersByPassengerKeyDocumentsPost(
    passengerKey: string,
    request?: TravelDocumentCreateRequest,
    observe?: 'response',
    headers?: Headers
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV2BookingPassengersByPassengerKeyDocumentsPost(
    passengerKey: string,
    request?: TravelDocumentCreateRequest,
    observe: any = 'body',
    headers: Headers = {}
  ): Observable<any> {
    if (!passengerKey) {
      throw new Error(
        'Required parameter passengerKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeyDocumentsPost.'
      );
    }

    const response: Observable<HttpResponse<
      IJsonResponse
    >> = this.httpClient.post(
      `${this.basePath}/api/nsk/v2/booking/passengers/${encodeURIComponent(
        String(passengerKey)
      )}/documents`,
      request,
      headers
    );
    if (observe == 'body') {
      return response.pipe(
        map(httpResponse => <IJsonResponse>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Deletes a infant from a specific passenger.
     * 
     * @param passengerKey The unique passenger key.
     
     */
  public apiNskV2BookingPassengersByPassengerKeyInfantDelete(
    passengerKey: string,
    observe?: 'body',
    headers?: Headers
  ): Observable<IJsonResponse>;
  public apiNskV2BookingPassengersByPassengerKeyInfantDelete(
    passengerKey: string,
    observe?: 'response',
    headers?: Headers
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV2BookingPassengersByPassengerKeyInfantDelete(
    passengerKey: string,
    observe: any = 'body',
    headers: Headers = {}
  ): Observable<any> {
    if (!passengerKey) {
      throw new Error(
        'Required parameter passengerKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeyInfantDelete.'
      );
    }

    const response: Observable<HttpResponse<
      IJsonResponse
    >> = this.httpClient.delete(
      `${this.basePath}/api/nsk/v2/booking/passengers/${encodeURIComponent(
        String(passengerKey)
      )}/infant`,
      headers
    );
    if (observe == 'body') {
      return response.pipe(
        map(httpResponse => <IJsonResponse>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Deletes a specific passenger infant specific travel document.
     * 
     * @param passengerKey The unique passenger key.
     * @param travelDocumentKey The unique travel document key.
     
     */
  public apiNskV2BookingPassengersByPassengerKeyInfantDocumentsByTravelDocumentKeyDelete(
    passengerKey: string,
    travelDocumentKey: string,
    observe?: 'body',
    headers?: Headers
  ): Observable<IJsonResponse>;
  public apiNskV2BookingPassengersByPassengerKeyInfantDocumentsByTravelDocumentKeyDelete(
    passengerKey: string,
    travelDocumentKey: string,
    observe?: 'response',
    headers?: Headers
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV2BookingPassengersByPassengerKeyInfantDocumentsByTravelDocumentKeyDelete(
    passengerKey: string,
    travelDocumentKey: string,
    observe: any = 'body',
    headers: Headers = {}
  ): Observable<any> {
    if (!passengerKey) {
      throw new Error(
        'Required parameter passengerKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeyInfantDocumentsByTravelDocumentKeyDelete.'
      );
    }

    if (!travelDocumentKey) {
      throw new Error(
        'Required parameter travelDocumentKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeyInfantDocumentsByTravelDocumentKeyDelete.'
      );
    }

    const response: Observable<HttpResponse<
      IJsonResponse
    >> = this.httpClient.delete(
      `${this.basePath}/api/nsk/v2/booking/passengers/${encodeURIComponent(
        String(passengerKey)
      )}/infant/documents/${encodeURIComponent(String(travelDocumentKey))}`,
      headers
    );
    if (observe == 'body') {
      return response.pipe(
        map(httpResponse => <IJsonResponse>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Patches a specific passenger infant travel document.
     * 
     * @param passengerKey The unique passenger key.
     * @param travelDocumentKey The unique travel document key.
     * @param request The patched travel document.
     
     */
  public apiNskV2BookingPassengersByPassengerKeyInfantDocumentsByTravelDocumentKeyPatch(
    passengerKey: string,
    travelDocumentKey: string,
    request?: DeltaMapperTravelDocumentEditRequest,
    observe?: 'body',
    headers?: Headers
  ): Observable<IJsonResponse>;
  public apiNskV2BookingPassengersByPassengerKeyInfantDocumentsByTravelDocumentKeyPatch(
    passengerKey: string,
    travelDocumentKey: string,
    request?: DeltaMapperTravelDocumentEditRequest,
    observe?: 'response',
    headers?: Headers
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV2BookingPassengersByPassengerKeyInfantDocumentsByTravelDocumentKeyPatch(
    passengerKey: string,
    travelDocumentKey: string,
    request?: DeltaMapperTravelDocumentEditRequest,
    observe: any = 'body',
    headers: Headers = {}
  ): Observable<any> {
    if (!passengerKey) {
      throw new Error(
        'Required parameter passengerKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeyInfantDocumentsByTravelDocumentKeyPatch.'
      );
    }

    if (!travelDocumentKey) {
      throw new Error(
        'Required parameter travelDocumentKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeyInfantDocumentsByTravelDocumentKeyPatch.'
      );
    }

    const response: Observable<HttpResponse<
      IJsonResponse
    >> = this.httpClient.patch(
      `${this.basePath}/api/nsk/v2/booking/passengers/${encodeURIComponent(
        String(passengerKey)
      )}/infant/documents/${encodeURIComponent(String(travelDocumentKey))}`,
      request,
      headers
    );
    if (observe == 'body') {
      return response.pipe(
        map(httpResponse => <IJsonResponse>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Updates a specific passenger infant travel document.
     * 
     * @param passengerKey The unique passenger key.
     * @param travelDocumentKey The unique travel document key.
     * @param request The modified travel document.
     
     */
  public apiNskV2BookingPassengersByPassengerKeyInfantDocumentsByTravelDocumentKeyPut(
    passengerKey: string,
    travelDocumentKey: string,
    request?: TravelDocumentEditRequest,
    observe?: 'body',
    headers?: Headers
  ): Observable<IJsonResponse>;
  public apiNskV2BookingPassengersByPassengerKeyInfantDocumentsByTravelDocumentKeyPut(
    passengerKey: string,
    travelDocumentKey: string,
    request?: TravelDocumentEditRequest,
    observe?: 'response',
    headers?: Headers
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV2BookingPassengersByPassengerKeyInfantDocumentsByTravelDocumentKeyPut(
    passengerKey: string,
    travelDocumentKey: string,
    request?: TravelDocumentEditRequest,
    observe: any = 'body',
    headers: Headers = {}
  ): Observable<any> {
    if (!passengerKey) {
      throw new Error(
        'Required parameter passengerKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeyInfantDocumentsByTravelDocumentKeyPut.'
      );
    }

    if (!travelDocumentKey) {
      throw new Error(
        'Required parameter travelDocumentKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeyInfantDocumentsByTravelDocumentKeyPut.'
      );
    }

    const response: Observable<HttpResponse<
      IJsonResponse
    >> = this.httpClient.put(
      `${this.basePath}/api/nsk/v2/booking/passengers/${encodeURIComponent(
        String(passengerKey)
      )}/infant/documents/${encodeURIComponent(String(travelDocumentKey))}`,
      request,
      headers
    );
    if (observe == 'body') {
      return response.pipe(
        map(httpResponse => <IJsonResponse>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Create a new travel document for a specific passenger infant.
     * 
     * @param passengerKey The unique passenger key.
     * @param request The new travel document.
     
     */
  public apiNskV2BookingPassengersByPassengerKeyInfantDocumentsPost(
    passengerKey: string,
    request?: TravelDocumentCreateRequest,
    observe?: 'body',
    headers?: Headers
  ): Observable<IJsonResponse>;
  public apiNskV2BookingPassengersByPassengerKeyInfantDocumentsPost(
    passengerKey: string,
    request?: TravelDocumentCreateRequest,
    observe?: 'response',
    headers?: Headers
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV2BookingPassengersByPassengerKeyInfantDocumentsPost(
    passengerKey: string,
    request?: TravelDocumentCreateRequest,
    observe: any = 'body',
    headers: Headers = {}
  ): Observable<any> {
    if (!passengerKey) {
      throw new Error(
        'Required parameter passengerKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeyInfantDocumentsPost.'
      );
    }

    const response: Observable<HttpResponse<
      IJsonResponse
    >> = this.httpClient.post(
      `${this.basePath}/api/nsk/v2/booking/passengers/${encodeURIComponent(
        String(passengerKey)
      )}/infant/documents`,
      request,
      headers
    );
    if (observe == 'body') {
      return response.pipe(
        map(httpResponse => <IJsonResponse>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Patches a infant on a specific passenger.
     * 
     * @param passengerKey The unique passenger key.
     * @param request The patched infant.
     
     */
  public apiNskV2BookingPassengersByPassengerKeyInfantPatch(
    passengerKey: string,
    request?: DeltaMapperInfant,
    observe?: 'body',
    headers?: Headers
  ): Observable<IJsonResponse>;
  public apiNskV2BookingPassengersByPassengerKeyInfantPatch(
    passengerKey: string,
    request?: DeltaMapperInfant,
    observe?: 'response',
    headers?: Headers
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV2BookingPassengersByPassengerKeyInfantPatch(
    passengerKey: string,
    request?: DeltaMapperInfant,
    observe: any = 'body',
    headers: Headers = {}
  ): Observable<any> {
    if (!passengerKey) {
      throw new Error(
        'Required parameter passengerKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeyInfantPatch.'
      );
    }

    const response: Observable<HttpResponse<
      IJsonResponse
    >> = this.httpClient.patch(
      `${this.basePath}/api/nsk/v2/booking/passengers/${encodeURIComponent(
        String(passengerKey)
      )}/infant`,
      request,
      headers
    );
    if (observe == 'body') {
      return response.pipe(
        map(httpResponse => <IJsonResponse>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Gets passenger seat by key.
     * 
     * @param passengerKey Unique passenger key.
     * @param unitKey Unique unit key.
     
     */
  public apiNskV2BookingPassengersByPassengerKeySeatsByUnitKeyGet(
    passengerKey: string,
    unitKey: string,
    observe?: 'body',
    headers?: Headers
  ): Observable<PassengerSeat>;
  public apiNskV2BookingPassengersByPassengerKeySeatsByUnitKeyGet(
    passengerKey: string,
    unitKey: string,
    observe?: 'response',
    headers?: Headers
  ): Observable<HttpResponse<PassengerSeat>>;
  public apiNskV2BookingPassengersByPassengerKeySeatsByUnitKeyGet(
    passengerKey: string,
    unitKey: string,
    observe: any = 'body',
    headers: Headers = {}
  ): Observable<any> {
    if (!passengerKey) {
      throw new Error(
        'Required parameter passengerKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeySeatsByUnitKeyGet.'
      );
    }

    if (!unitKey) {
      throw new Error(
        'Required parameter unitKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeySeatsByUnitKeyGet.'
      );
    }

    const response: Observable<HttpResponse<
      PassengerSeat
    >> = this.httpClient.get(
      `${this.basePath}/api/nsk/v2/booking/passengers/${encodeURIComponent(
        String(passengerKey)
      )}/seats/${encodeURIComponent(String(unitKey))}`,
      headers
    );
    if (observe == 'body') {
      return response.pipe(
        map(httpResponse => <PassengerSeat>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Adds a seat assignment to a specific passenger on the booking in state.
     * This endpoint actively checks whether the passenger has a seat. If the passenger does  have a seat, it will delete the current seat the passenger occupies and add the requested  one. This may result in slightly slower response times.
     * @param passengerKey The passenger key.
     * @param unitKey The unit key.
     * @param request The add seat request.
     
     */
  public apiNskV2BookingPassengersByPassengerKeySeatsByUnitKeyPost(
    passengerKey: string,
    unitKey: string,
    request?: AddSeatRequest,
    observe?: 'body',
    headers?: Headers
  ): Observable<IJsonResponse>;
  public apiNskV2BookingPassengersByPassengerKeySeatsByUnitKeyPost(
    passengerKey: string,
    unitKey: string,
    request?: AddSeatRequest,
    observe?: 'response',
    headers?: Headers
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV2BookingPassengersByPassengerKeySeatsByUnitKeyPost(
    passengerKey: string,
    unitKey: string,
    request?: AddSeatRequest,
    observe: any = 'body',
    headers: Headers = {}
  ): Observable<any> {
    if (!passengerKey) {
      throw new Error(
        'Required parameter passengerKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeySeatsByUnitKeyPost.'
      );
    }

    if (!unitKey) {
      throw new Error(
        'Required parameter unitKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeySeatsByUnitKeyPost.'
      );
    }

    const response: Observable<HttpResponse<
      IJsonResponse
    >> = this.httpClient.post(
      `${this.basePath}/api/nsk/v2/booking/passengers/${encodeURIComponent(
        String(passengerKey)
      )}/seats/${encodeURIComponent(String(unitKey))}`,
      request,
      headers
    );
    if (observe == 'body') {
      return response.pipe(
        map(httpResponse => <IJsonResponse>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Gets all seats associated with a passenger.
     * 
     * @param passengerKey Passengers to get seats for.
     
     */
  public apiNskV2BookingPassengersByPassengerKeySeatsGet(
    passengerKey: string,
    observe?: 'body',
    headers?: Headers
  ): Observable<Array<PassengerSeat>>;
  public apiNskV2BookingPassengersByPassengerKeySeatsGet(
    passengerKey: string,
    observe?: 'response',
    headers?: Headers
  ): Observable<HttpResponse<Array<PassengerSeat>>>;
  public apiNskV2BookingPassengersByPassengerKeySeatsGet(
    passengerKey: string,
    observe: any = 'body',
    headers: Headers = {}
  ): Observable<any> {
    if (!passengerKey) {
      throw new Error(
        'Required parameter passengerKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeySeatsGet.'
      );
    }

    const response: Observable<HttpResponse<
      Array<PassengerSeat>
    >> = this.httpClient.get(
      `${this.basePath}/api/nsk/v2/booking/passengers/${encodeURIComponent(
        String(passengerKey)
      )}/seats`,
      headers
    );
    if (observe == 'body') {
      return response.pipe(
        map(httpResponse => <Array<PassengerSeat>>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Creates an infant on a specific passenger.
     * 
     * @param passengerKey The unique passenger key.
     * @param request The new infant.
     
     */
  public apiNskV3BookingPassengersByPassengerKeyInfantPost(
    passengerKey: string,
    request?: PassengerInfantCreateRequest,
    observe?: 'body',
    headers?: Headers
  ): Observable<IJsonResponse>;
  public apiNskV3BookingPassengersByPassengerKeyInfantPost(
    passengerKey: string,
    request?: PassengerInfantCreateRequest,
    observe?: 'response',
    headers?: Headers
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV3BookingPassengersByPassengerKeyInfantPost(
    passengerKey: string,
    request?: PassengerInfantCreateRequest,
    observe: any = 'body',
    headers: Headers = {}
  ): Observable<any> {
    if (!passengerKey) {
      throw new Error(
        'Required parameter passengerKey was null or undefined when calling apiNskV3BookingPassengersByPassengerKeyInfantPost.'
      );
    }

    const response: Observable<HttpResponse<
      IJsonResponse
    >> = this.httpClient.post(
      `${this.basePath}/api/nsk/v3/booking/passengers/${encodeURIComponent(
        String(passengerKey)
      )}/infant`,
      request,
      headers
    );
    if (observe == 'body') {
      return response.pipe(
        map(httpResponse => <IJsonResponse>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Updates an infant on a specific passenger.
     * 
     * @param passengerKey The unique passenger key
     * @param request The modified infant.
     
     */
  public apiNskV3BookingPassengersByPassengerKeyInfantPut(
    passengerKey: string,
    request?: Infant,
    observe?: 'body',
    headers?: Headers
  ): Observable<IJsonResponse>;
  public apiNskV3BookingPassengersByPassengerKeyInfantPut(
    passengerKey: string,
    request?: Infant,
    observe?: 'response',
    headers?: Headers
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV3BookingPassengersByPassengerKeyInfantPut(
    passengerKey: string,
    request?: Infant,
    observe: any = 'body',
    headers: Headers = {}
  ): Observable<any> {
    if (!passengerKey) {
      throw new Error(
        'Required parameter passengerKey was null or undefined when calling apiNskV3BookingPassengersByPassengerKeyInfantPut.'
      );
    }

    const response: Observable<HttpResponse<
      IJsonResponse
    >> = this.httpClient.put(
      `${this.basePath}/api/nsk/v3/booking/passengers/${encodeURIComponent(
        String(passengerKey)
      )}/infant`,
      request,
      headers
    );
    if (observe == 'body') {
      return response.pipe(
        map(httpResponse => <IJsonResponse>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Patches a specific passenger on the booking.
     * 
     * @param passengerKey The unique passenger key.
     * @param waiveNameChangeFees Waive the name change fee.
     * @param request The patched passenger request.
     
     */
  public apiNskV3BookingPassengersByPassengerKeyPatch(
    passengerKey: string,
    waiveNameChangeFees?: boolean,
    request?: DeltaMapperPassengerBase,
    observe?: 'body',
    headers?: Headers
  ): Observable<IJsonResponse>;
  public apiNskV3BookingPassengersByPassengerKeyPatch(
    passengerKey: string,
    waiveNameChangeFees?: boolean,
    request?: DeltaMapperPassengerBase,
    observe?: 'response',
    headers?: Headers
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV3BookingPassengersByPassengerKeyPatch(
    passengerKey: string,
    waiveNameChangeFees?: boolean,
    request?: DeltaMapperPassengerBase,
    observe: any = 'body',
    headers: Headers = {}
  ): Observable<any> {
    if (!passengerKey) {
      throw new Error(
        'Required parameter passengerKey was null or undefined when calling apiNskV3BookingPassengersByPassengerKeyPatch.'
      );
    }

    let queryParameters: string[] = [];
    if (waiveNameChangeFees !== undefined) {
      queryParameters.push(
        'waiveNameChangeFees=' + encodeURIComponent(String(waiveNameChangeFees))
      );
    }

    const response: Observable<HttpResponse<
      IJsonResponse
    >> = this.httpClient.patch(
      `${this.basePath}/api/nsk/v3/booking/passengers/${encodeURIComponent(
        String(passengerKey)
      )}?${queryParameters.join('&')}`,
      request,
      headers
    );
    if (observe == 'body') {
      return response.pipe(
        map(httpResponse => <IJsonResponse>httpResponse.response)
      );
    }
    return response;
  }

  /**
     * Updates a specific passenger on the booking.
     * 
     * @param passengerKey The unique passenger key.
     * @param waiveNameChangeFees Waive the name change fees.
     * @param request The modified passenger request.
     
     */
  public apiNskV3BookingPassengersByPassengerKeyPut(
    passengerKey: string,
    waiveNameChangeFees?: boolean,
    request?: PassengerBase,
    observe?: 'body',
    headers?: Headers
  ): Observable<IJsonResponse>;
  public apiNskV3BookingPassengersByPassengerKeyPut(
    passengerKey: string,
    waiveNameChangeFees?: boolean,
    request?: PassengerBase,
    observe?: 'response',
    headers?: Headers
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV3BookingPassengersByPassengerKeyPut(
    passengerKey: string,
    waiveNameChangeFees?: boolean,
    request?: PassengerBase,
    observe: any = 'body',
    headers: Headers = {}
  ): Observable<any> {
    if (!passengerKey) {
      throw new Error(
        'Required parameter passengerKey was null or undefined when calling apiNskV3BookingPassengersByPassengerKeyPut.'
      );
    }

    let queryParameters: string[] = [];
    if (waiveNameChangeFees !== undefined) {
      queryParameters.push(
        'waiveNameChangeFees=' + encodeURIComponent(String(waiveNameChangeFees))
      );
    }

    const response: Observable<HttpResponse<
      IJsonResponse
    >> = this.httpClient.put(
      `${this.basePath}/api/nsk/v3/booking/passengers/${encodeURIComponent(
        String(passengerKey)
      )}?${queryParameters.join('&')}`,
      request,
      headers
    );
    if (observe == 'body') {
      return response.pipe(
        map(httpResponse => <IJsonResponse>httpResponse.response)
      );
    }
    return response;
  }
}
