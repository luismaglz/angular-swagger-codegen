/**
 * API - Current Routes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: trunk
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from "rxjs/Observable";
import { map, toPromise } from "rxjs";
import IHttpClient from "../IHttpClient";
import { inject, injectable } from "inversify";
import { Headers } from "../Headers";
import HttpResponse from "../HttpResponse";
import {
    Account 
    DeltaMapperPersonAddressEditRequest 
    DeltaMapperPersonAliasRequest 
    DeltaMapperPersonCommentRequest 
    DeltaMapperPersonCustomerProgramEditRequest 
    DeltaMapperPersonEditRequest 
    DeltaMapperPersonEmailEditRequest 
    DeltaMapperPersonInformationEditRequest 
    DeltaMapperPersonPhoneNumberRequest 
    DeltaMapperPersonPreferenceEditRequest 
    DeltaMapperPersonStoredPaymentUpdateRequest 
    DeltaMapperTravelDocumentEditRequestv2 
    DeltaMapperTravelNotificationEditRequest 
    IJsonResponse 
    NotificationEvent 
    NotificationEventCreateRequest 
    NotificationTimedEvent 
    NotificationTimedEventCreateRequest 
    NotificationTimedEventEditRequest 
    Person 
    PersonAddress 
    PersonAddressCreateRequest 
    PersonAddressEditRequest 
    PersonAlias 
    PersonAliasRequest 
    PersonComment 
    PersonCommentRequest 
    PersonCustomerProgram 
    PersonCustomerProgramCreateRequest 
    PersonCustomerProgramEditRequest 
    PersonEditRequest 
    PersonEmail 
    PersonEmailCreateRequest 
    PersonEmailEditRequest 
    PersonInformation 
    PersonInformationCreateRequest 
    PersonInformationEditRequest 
    PersonPhoneNumber 
    PersonPhoneNumberRequest 
    PersonPreference 
    PersonPreferenceCreateRequest 
    PersonPreferenceEditRequest 
    PersonStoredPayment 
    PersonStoredPaymentRequest 
    PersonStoredPaymentUpdateRequest 
    PersonTravelDocument 
    PersonTravelDocumentRequest 
    Transaction 
    TravelDocumentEditRequestv2 
    TravelNotification 
    TravelNotificationCreateRequest 
    TravelNotificationEditRequest 
} from 'api-models';

import {
        apiNskV1UserPersonAccountCollectionByAccountCollectionKeyTransactionsGet
        apiNskV1UserPersonAccountGet
        apiNskV1UserPersonAccountTransactionsGet
        apiNskV1UserPersonAddressesByPersonAddressKeyDelete
        apiNskV1UserPersonAddressesByPersonAddressKeyGet
        apiNskV1UserPersonAddressesByPersonAddressKeyPatch
        apiNskV1UserPersonAddressesByPersonAddressKeyPut
        apiNskV1UserPersonAddressesGet
        apiNskV1UserPersonAddressesPost
        apiNskV1UserPersonAliasesByPersonAliasKeyDelete
        apiNskV1UserPersonAliasesByPersonAliasKeyGet
        apiNskV1UserPersonAliasesByPersonAliasKeyPatch
        apiNskV1UserPersonAliasesByPersonAliasKeyPut
        apiNskV1UserPersonAliasesGet
        apiNskV1UserPersonAliasesPost
        apiNskV1UserPersonCommentsByPersonCommentKeyDelete
        apiNskV1UserPersonCommentsByPersonCommentKeyGet
        apiNskV1UserPersonCommentsByPersonCommentKeyPatch
        apiNskV1UserPersonCommentsByPersonCommentKeyPut
        apiNskV1UserPersonCommentsGet
        apiNskV1UserPersonCommentsPost
        apiNskV1UserPersonEmailsByPersonEmailAddressKeyDelete
        apiNskV1UserPersonEmailsByPersonEmailAddressKeyGet
        apiNskV1UserPersonEmailsByPersonEmailAddressKeyPatch
        apiNskV1UserPersonEmailsByPersonEmailAddressKeyPut
        apiNskV1UserPersonEmailsGet
        apiNskV1UserPersonEmailsPost
        apiNskV1UserPersonGet
        apiNskV1UserPersonInformationByPersonInformationKeyDelete
        apiNskV1UserPersonInformationByPersonInformationKeyGet
        apiNskV1UserPersonInformationByPersonInformationKeyPatch
        apiNskV1UserPersonInformationByPersonInformationKeyPut
        apiNskV1UserPersonInformationGet
        apiNskV1UserPersonInformationPost
        apiNskV1UserPersonPatch
        apiNskV1UserPersonPhoneNumbersByPersonPhoneNumberKeyDelete
        apiNskV1UserPersonPhoneNumbersByPersonPhoneNumberKeyGet
        apiNskV1UserPersonPhoneNumbersByPersonPhoneNumberKeyPatch
        apiNskV1UserPersonPhoneNumbersByPersonPhoneNumberKeyPut
        apiNskV1UserPersonPhoneNumbersGet
        apiNskV1UserPersonPhoneNumbersPost
        apiNskV1UserPersonPreferencesByPersonPreferenceKeyDelete
        apiNskV1UserPersonPreferencesByPersonPreferenceKeyGet
        apiNskV1UserPersonPreferencesByPersonPreferenceKeyPatch
        apiNskV1UserPersonPreferencesByPersonPreferenceKeyPut
        apiNskV1UserPersonPreferencesGet
        apiNskV1UserPersonPreferencesPost
        apiNskV1UserPersonProgramsByPersonProgramKeyDelete
        apiNskV1UserPersonProgramsByPersonProgramKeyGet
        apiNskV1UserPersonProgramsByPersonProgramKeyPatch
        apiNskV1UserPersonProgramsByPersonProgramKeyPut
        apiNskV1UserPersonProgramsGet
        apiNskV1UserPersonProgramsPost
        apiNskV1UserPersonPut
        apiNskV1UserPersonStoredPaymentsByPersonStoredPaymentKeyDelete
        apiNskV1UserPersonStoredPaymentsByPersonStoredPaymentKeyGet
        apiNskV1UserPersonStoredPaymentsByPersonStoredPaymentKeyPatch
        apiNskV1UserPersonStoredPaymentsByPersonStoredPaymentKeyPut
        apiNskV1UserPersonStoredPaymentsGet
        apiNskV1UserPersonStoredPaymentsPost
        apiNskV1UserPersonTravelDocumentsByPersonTravelDocumentKeyDelete
        apiNskV1UserPersonTravelDocumentsByPersonTravelDocumentKeyGet
        apiNskV1UserPersonTravelDocumentsGet
        apiNskV1UserPersonTravelDocumentsPost
        apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyDelete
        apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyEventsByEventTypeDelete
        apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyEventsByEventTypeGet
        apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyEventsGet
        apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyEventsPost
        apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyGet
        apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyPatch
        apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyPut
        apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeDelete
        apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeGet
        apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypePut
        apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyTimedEventsGet
        apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyTimedEventsPost
        apiNskV1UserPersonTravelNotificationsGet
        apiNskV1UserPersonTravelNotificationsPost
        apiNskV2UserPersonTravelDocumentsByPersonTravelDocumentKeyPatch
        apiNskV2UserPersonTravelDocumentsByPersonTravelDocumentKeyPut
} from '../base/api'




@injectable()
export class StoreUserpersonService {

    constructor(@inject("Store") private store: Store<any>) {}

    /**
     * Retrieves the currently logged in person&#39;s account collection transactions.
     * 
     */
    public store_apiNskV1UserPersonAccountCollectionByAccountCollectionKeyTransactionsGet(accountCollectionKey: string, startTime: Date, sortByNewest: boolean, endTime?: Date, pageSize?: number, pageIndex?: number,  headers?: Headers): Promise<Array<Transaction>>
    {
        const response = await apiNskV1UserPersonAccountCollectionByAccountCollectionKeyTransactionsGet(accountCollectionKey,startTime,sortByNewest,endTime,pageSize,pageIndex,'body', headers);
        // TODO: Implement apiNskV1UserPersonAccountCollectionByAccountCollectionKeyTransactionsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the currently logged in person&#39;s account and collections.
     * 
     */
    public store_apiNskV1UserPersonAccountGet( headers?: Headers): Promise<Account>
    {
        const response = await apiNskV1UserPersonAccountGet('body', headers);
        // TODO: Implement apiNskV1UserPersonAccountGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves all transactions for all collections for the currently logged in person.
     * 
     */
    public store_apiNskV1UserPersonAccountTransactionsGet(startTime: Date, sortByNewest: boolean, endTime?: Date, pageSize?: number, pageIndex?: number,  headers?: Headers): Promise<Array<Transaction>>
    {
        const response = await apiNskV1UserPersonAccountTransactionsGet(startTime,sortByNewest,endTime,pageSize,pageIndex,'body', headers);
        // TODO: Implement apiNskV1UserPersonAccountTransactionsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Deletes a specific address on the logged in users person.
     * 
     */
    public store_apiNskV1UserPersonAddressesByPersonAddressKeyDelete(personAddressKey: string,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UserPersonAddressesByPersonAddressKeyDelete(personAddressKey,'body', headers);
        // TODO: Implement apiNskV1UserPersonAddressesByPersonAddressKeyDelete
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets a specific address from the logged in users person.
     * 
     */
    public store_apiNskV1UserPersonAddressesByPersonAddressKeyGet(personAddressKey: string,  headers?: Headers): Promise<PersonAddress>
    {
        const response = await apiNskV1UserPersonAddressesByPersonAddressKeyGet(personAddressKey,'body', headers);
        // TODO: Implement apiNskV1UserPersonAddressesByPersonAddressKeyGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Patches a specific address on the logged in users person.
     * 
     */
    public store_apiNskV1UserPersonAddressesByPersonAddressKeyPatch(personAddressKey: string, request?: DeltaMapperPersonAddressEditRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UserPersonAddressesByPersonAddressKeyPatch(personAddressKey,request,'body', headers);
        // TODO: Implement apiNskV1UserPersonAddressesByPersonAddressKeyPatch
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Updates a specific address on the logged in users person.
     * 
     */
    public store_apiNskV1UserPersonAddressesByPersonAddressKeyPut(personAddressKey: string, request?: PersonAddressEditRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UserPersonAddressesByPersonAddressKeyPut(personAddressKey,request,'body', headers);
        // TODO: Implement apiNskV1UserPersonAddressesByPersonAddressKeyPut
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets all addresses from the logged in users person.
     * 
     */
    public store_apiNskV1UserPersonAddressesGet( headers?: Headers): Promise<Array<PersonAddress>>
    {
        const response = await apiNskV1UserPersonAddressesGet('body', headers);
        // TODO: Implement apiNskV1UserPersonAddressesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Creates a new address on the logged in users person.
     * 
     */
    public store_apiNskV1UserPersonAddressesPost(request?: PersonAddressCreateRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UserPersonAddressesPost(request,'body', headers);
        // TODO: Implement apiNskV1UserPersonAddressesPost
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Deletes a specific alias on the logged in users person.
     * 
     */
    public store_apiNskV1UserPersonAliasesByPersonAliasKeyDelete(personAliasKey: string,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UserPersonAliasesByPersonAliasKeyDelete(personAliasKey,'body', headers);
        // TODO: Implement apiNskV1UserPersonAliasesByPersonAliasKeyDelete
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets a specific alias from the logged in users person.
     * 
     */
    public store_apiNskV1UserPersonAliasesByPersonAliasKeyGet(personAliasKey: string,  headers?: Headers): Promise<PersonAlias>
    {
        const response = await apiNskV1UserPersonAliasesByPersonAliasKeyGet(personAliasKey,'body', headers);
        // TODO: Implement apiNskV1UserPersonAliasesByPersonAliasKeyGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Patches a specific alias on the logged in users person.
     * 
     */
    public store_apiNskV1UserPersonAliasesByPersonAliasKeyPatch(personAliasKey: string, request?: DeltaMapperPersonAliasRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UserPersonAliasesByPersonAliasKeyPatch(personAliasKey,request,'body', headers);
        // TODO: Implement apiNskV1UserPersonAliasesByPersonAliasKeyPatch
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Updates a specific alias on the logged in users person.
     * 
     */
    public store_apiNskV1UserPersonAliasesByPersonAliasKeyPut(personAliasKey: string, request?: PersonAliasRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UserPersonAliasesByPersonAliasKeyPut(personAliasKey,request,'body', headers);
        // TODO: Implement apiNskV1UserPersonAliasesByPersonAliasKeyPut
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets all aliases from the logged in users person.
     * 
     */
    public store_apiNskV1UserPersonAliasesGet( headers?: Headers): Promise<Array<PersonAlias>>
    {
        const response = await apiNskV1UserPersonAliasesGet('body', headers);
        // TODO: Implement apiNskV1UserPersonAliasesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Creates a new alias on the logged in users person.
     * 
     */
    public store_apiNskV1UserPersonAliasesPost(request?: PersonAliasRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UserPersonAliasesPost(request,'body', headers);
        // TODO: Implement apiNskV1UserPersonAliasesPost
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Deletes a specific comment on the logged in users person.
     * 
     */
    public store_apiNskV1UserPersonCommentsByPersonCommentKeyDelete(personCommentKey: string,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UserPersonCommentsByPersonCommentKeyDelete(personCommentKey,'body', headers);
        // TODO: Implement apiNskV1UserPersonCommentsByPersonCommentKeyDelete
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets a specific comment from the logged in users person.
     * 
     */
    public store_apiNskV1UserPersonCommentsByPersonCommentKeyGet(personCommentKey: string,  headers?: Headers): Promise<PersonComment>
    {
        const response = await apiNskV1UserPersonCommentsByPersonCommentKeyGet(personCommentKey,'body', headers);
        // TODO: Implement apiNskV1UserPersonCommentsByPersonCommentKeyGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Patches a specific comment on the logged in users person.
     * 
     */
    public store_apiNskV1UserPersonCommentsByPersonCommentKeyPatch(personCommentKey: string, request?: DeltaMapperPersonCommentRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UserPersonCommentsByPersonCommentKeyPatch(personCommentKey,request,'body', headers);
        // TODO: Implement apiNskV1UserPersonCommentsByPersonCommentKeyPatch
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Updates a specific comment on the logged in users person.
     * 
     */
    public store_apiNskV1UserPersonCommentsByPersonCommentKeyPut(personCommentKey: string, request?: PersonCommentRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UserPersonCommentsByPersonCommentKeyPut(personCommentKey,request,'body', headers);
        // TODO: Implement apiNskV1UserPersonCommentsByPersonCommentKeyPut
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets all comments from the logged in users person.
     * 
     */
    public store_apiNskV1UserPersonCommentsGet( headers?: Headers): Promise<Array<PersonComment>>
    {
        const response = await apiNskV1UserPersonCommentsGet('body', headers);
        // TODO: Implement apiNskV1UserPersonCommentsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Creates a new comment on the logged in users person.
     * 
     */
    public store_apiNskV1UserPersonCommentsPost(request?: PersonCommentRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UserPersonCommentsPost(request,'body', headers);
        // TODO: Implement apiNskV1UserPersonCommentsPost
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Deletes a specific email address on the logged in user&#39;s person.
     * 
     */
    public store_apiNskV1UserPersonEmailsByPersonEmailAddressKeyDelete(personEmailAddressKey: string,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UserPersonEmailsByPersonEmailAddressKeyDelete(personEmailAddressKey,'body', headers);
        // TODO: Implement apiNskV1UserPersonEmailsByPersonEmailAddressKeyDelete
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets a specific email address from the logged in user&#39;s person.
     * 
     */
    public store_apiNskV1UserPersonEmailsByPersonEmailAddressKeyGet(personEmailAddressKey: string,  headers?: Headers): Promise<PersonEmail>
    {
        const response = await apiNskV1UserPersonEmailsByPersonEmailAddressKeyGet(personEmailAddressKey,'body', headers);
        // TODO: Implement apiNskV1UserPersonEmailsByPersonEmailAddressKeyGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Patches a specific email address on the logged in user&#39;s person.
     * 
     */
    public store_apiNskV1UserPersonEmailsByPersonEmailAddressKeyPatch(personEmailAddressKey: string, request?: DeltaMapperPersonEmailEditRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UserPersonEmailsByPersonEmailAddressKeyPatch(personEmailAddressKey,request,'body', headers);
        // TODO: Implement apiNskV1UserPersonEmailsByPersonEmailAddressKeyPatch
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Updates a specific email address on the logged in user&#39;s person.
     * 
     */
    public store_apiNskV1UserPersonEmailsByPersonEmailAddressKeyPut(personEmailAddressKey: string, request?: PersonEmailEditRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UserPersonEmailsByPersonEmailAddressKeyPut(personEmailAddressKey,request,'body', headers);
        // TODO: Implement apiNskV1UserPersonEmailsByPersonEmailAddressKeyPut
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets all email addresses from the logged in user&#39;s person.
     * 
     */
    public store_apiNskV1UserPersonEmailsGet( headers?: Headers): Promise<Array<PersonEmail>>
    {
        const response = await apiNskV1UserPersonEmailsGet('body', headers);
        // TODO: Implement apiNskV1UserPersonEmailsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Creates a new email address on the logged in user&#39;s person.
     * 
     */
    public store_apiNskV1UserPersonEmailsPost(request?: PersonEmailCreateRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UserPersonEmailsPost(request,'body', headers);
        // TODO: Implement apiNskV1UserPersonEmailsPost
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the current logged in person.
     * 
     */
    public store_apiNskV1UserPersonGet( headers?: Headers): Promise<Person>
    {
        const response = await apiNskV1UserPersonGet('body', headers);
        // TODO: Implement apiNskV1UserPersonGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Deletes a specific information on the logged in user&#39;s person.
     * 
     */
    public store_apiNskV1UserPersonInformationByPersonInformationKeyDelete(personInformationKey: string,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UserPersonInformationByPersonInformationKeyDelete(personInformationKey,'body', headers);
        // TODO: Implement apiNskV1UserPersonInformationByPersonInformationKeyDelete
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets a specific information from the logged in user&#39;s person.
     * 
     */
    public store_apiNskV1UserPersonInformationByPersonInformationKeyGet(personInformationKey: string,  headers?: Headers): Promise<PersonInformation>
    {
        const response = await apiNskV1UserPersonInformationByPersonInformationKeyGet(personInformationKey,'body', headers);
        // TODO: Implement apiNskV1UserPersonInformationByPersonInformationKeyGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Patches a specific information on the logged in user&#39;s person.
     * 
     */
    public store_apiNskV1UserPersonInformationByPersonInformationKeyPatch(personInformationKey: string, request?: DeltaMapperPersonInformationEditRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UserPersonInformationByPersonInformationKeyPatch(personInformationKey,request,'body', headers);
        // TODO: Implement apiNskV1UserPersonInformationByPersonInformationKeyPatch
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Updates a specific information on the logged in user&#39;s person.
     * 
     */
    public store_apiNskV1UserPersonInformationByPersonInformationKeyPut(personInformationKey: string, request?: PersonInformationEditRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UserPersonInformationByPersonInformationKeyPut(personInformationKey,request,'body', headers);
        // TODO: Implement apiNskV1UserPersonInformationByPersonInformationKeyPut
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets all information from the logged in user&#39;s person.
     * 
     */
    public store_apiNskV1UserPersonInformationGet( headers?: Headers): Promise<Array<PersonInformation>>
    {
        const response = await apiNskV1UserPersonInformationGet('body', headers);
        // TODO: Implement apiNskV1UserPersonInformationGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Creates a new information on the logged in user&#39;s person.
     * 
     */
    public store_apiNskV1UserPersonInformationPost(request?: PersonInformationCreateRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UserPersonInformationPost(request,'body', headers);
        // TODO: Implement apiNskV1UserPersonInformationPost
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Patches the current logged in person records basic information.
     * 
     */
    public store_apiNskV1UserPersonPatch(request?: DeltaMapperPersonEditRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UserPersonPatch(request,'body', headers);
        // TODO: Implement apiNskV1UserPersonPatch
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Deletes a specific phone number on the logged in users person.
     * 
     */
    public store_apiNskV1UserPersonPhoneNumbersByPersonPhoneNumberKeyDelete(personPhoneNumberKey: string,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UserPersonPhoneNumbersByPersonPhoneNumberKeyDelete(personPhoneNumberKey,'body', headers);
        // TODO: Implement apiNskV1UserPersonPhoneNumbersByPersonPhoneNumberKeyDelete
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets a specific phone number from the logged in users person.
     * 
     */
    public store_apiNskV1UserPersonPhoneNumbersByPersonPhoneNumberKeyGet(personPhoneNumberKey: string,  headers?: Headers): Promise<PersonPhoneNumber>
    {
        const response = await apiNskV1UserPersonPhoneNumbersByPersonPhoneNumberKeyGet(personPhoneNumberKey,'body', headers);
        // TODO: Implement apiNskV1UserPersonPhoneNumbersByPersonPhoneNumberKeyGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Patches a specific phone number on the logged in users person.
     * 
     */
    public store_apiNskV1UserPersonPhoneNumbersByPersonPhoneNumberKeyPatch(personPhoneNumberKey: string, request?: DeltaMapperPersonPhoneNumberRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UserPersonPhoneNumbersByPersonPhoneNumberKeyPatch(personPhoneNumberKey,request,'body', headers);
        // TODO: Implement apiNskV1UserPersonPhoneNumbersByPersonPhoneNumberKeyPatch
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Updates a specific phone number on the logged in users person.
     * 
     */
    public store_apiNskV1UserPersonPhoneNumbersByPersonPhoneNumberKeyPut(personPhoneNumberKey: string, request?: PersonPhoneNumberRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UserPersonPhoneNumbersByPersonPhoneNumberKeyPut(personPhoneNumberKey,request,'body', headers);
        // TODO: Implement apiNskV1UserPersonPhoneNumbersByPersonPhoneNumberKeyPut
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets all phone numbers from the logged in users person.
     * 
     */
    public store_apiNskV1UserPersonPhoneNumbersGet( headers?: Headers): Promise<Array<PersonPhoneNumber>>
    {
        const response = await apiNskV1UserPersonPhoneNumbersGet('body', headers);
        // TODO: Implement apiNskV1UserPersonPhoneNumbersGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Creates a new phone number on the logged in users person.
     * 
     */
    public store_apiNskV1UserPersonPhoneNumbersPost(request?: PersonPhoneNumberRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UserPersonPhoneNumbersPost(request,'body', headers);
        // TODO: Implement apiNskV1UserPersonPhoneNumbersPost
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Deletes a specific preference on the logged in users person.
     * 
     */
    public store_apiNskV1UserPersonPreferencesByPersonPreferenceKeyDelete(personPreferenceKey: string,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UserPersonPreferencesByPersonPreferenceKeyDelete(personPreferenceKey,'body', headers);
        // TODO: Implement apiNskV1UserPersonPreferencesByPersonPreferenceKeyDelete
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets a specific preference from the logged in users person.
     * 
     */
    public store_apiNskV1UserPersonPreferencesByPersonPreferenceKeyGet(personPreferenceKey: string,  headers?: Headers): Promise<PersonPreference>
    {
        const response = await apiNskV1UserPersonPreferencesByPersonPreferenceKeyGet(personPreferenceKey,'body', headers);
        // TODO: Implement apiNskV1UserPersonPreferencesByPersonPreferenceKeyGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Patches a specific preference on the logged in users person.
     * 
     */
    public store_apiNskV1UserPersonPreferencesByPersonPreferenceKeyPatch(personPreferenceKey: string, request?: DeltaMapperPersonPreferenceEditRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UserPersonPreferencesByPersonPreferenceKeyPatch(personPreferenceKey,request,'body', headers);
        // TODO: Implement apiNskV1UserPersonPreferencesByPersonPreferenceKeyPatch
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Updates a specific preference on the logged in users person.
     * 
     */
    public store_apiNskV1UserPersonPreferencesByPersonPreferenceKeyPut(personPreferenceKey: string, request?: PersonPreferenceEditRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UserPersonPreferencesByPersonPreferenceKeyPut(personPreferenceKey,request,'body', headers);
        // TODO: Implement apiNskV1UserPersonPreferencesByPersonPreferenceKeyPut
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets all preferences from the logged in users person.
     * 
     */
    public store_apiNskV1UserPersonPreferencesGet( headers?: Headers): Promise<Array<PersonPreference>>
    {
        const response = await apiNskV1UserPersonPreferencesGet('body', headers);
        // TODO: Implement apiNskV1UserPersonPreferencesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Creates a new preference on the logged in users person.
     * 
     */
    public store_apiNskV1UserPersonPreferencesPost(request?: PersonPreferenceCreateRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UserPersonPreferencesPost(request,'body', headers);
        // TODO: Implement apiNskV1UserPersonPreferencesPost
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Deletes a specific program on the logged in users person.
     * 
     */
    public store_apiNskV1UserPersonProgramsByPersonProgramKeyDelete(personProgramKey: string,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UserPersonProgramsByPersonProgramKeyDelete(personProgramKey,'body', headers);
        // TODO: Implement apiNskV1UserPersonProgramsByPersonProgramKeyDelete
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets a specific program from the logged in users person.
     * 
     */
    public store_apiNskV1UserPersonProgramsByPersonProgramKeyGet(personProgramKey: string,  headers?: Headers): Promise<PersonCustomerProgram>
    {
        const response = await apiNskV1UserPersonProgramsByPersonProgramKeyGet(personProgramKey,'body', headers);
        // TODO: Implement apiNskV1UserPersonProgramsByPersonProgramKeyGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Patches a specific program on the logged in users person.
     * 
     */
    public store_apiNskV1UserPersonProgramsByPersonProgramKeyPatch(personProgramKey: string, request?: DeltaMapperPersonCustomerProgramEditRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UserPersonProgramsByPersonProgramKeyPatch(personProgramKey,request,'body', headers);
        // TODO: Implement apiNskV1UserPersonProgramsByPersonProgramKeyPatch
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Updates a specific program on the logged in users person.
     * 
     */
    public store_apiNskV1UserPersonProgramsByPersonProgramKeyPut(personProgramKey: string, request?: PersonCustomerProgramEditRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UserPersonProgramsByPersonProgramKeyPut(personProgramKey,request,'body', headers);
        // TODO: Implement apiNskV1UserPersonProgramsByPersonProgramKeyPut
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets all programs from the logged in users person.
     * 
     */
    public store_apiNskV1UserPersonProgramsGet( headers?: Headers): Promise<Array<PersonCustomerProgram>>
    {
        const response = await apiNskV1UserPersonProgramsGet('body', headers);
        // TODO: Implement apiNskV1UserPersonProgramsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Creates a new program on the logged in users person.
     * 
     */
    public store_apiNskV1UserPersonProgramsPost(request?: PersonCustomerProgramCreateRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UserPersonProgramsPost(request,'body', headers);
        // TODO: Implement apiNskV1UserPersonProgramsPost
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Updates the current logged in person record basic information.
     * 
     */
    public store_apiNskV1UserPersonPut(request?: PersonEditRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UserPersonPut(request,'body', headers);
        // TODO: Implement apiNskV1UserPersonPut
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Deletes a specific stored payment on the logged in users person.
     * 
     */
    public store_apiNskV1UserPersonStoredPaymentsByPersonStoredPaymentKeyDelete(personStoredPaymentKey: string,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UserPersonStoredPaymentsByPersonStoredPaymentKeyDelete(personStoredPaymentKey,'body', headers);
        // TODO: Implement apiNskV1UserPersonStoredPaymentsByPersonStoredPaymentKeyDelete
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets a specific stored payment from the logged in users person.
     * 
     */
    public store_apiNskV1UserPersonStoredPaymentsByPersonStoredPaymentKeyGet(personStoredPaymentKey: string,  headers?: Headers): Promise<PersonStoredPayment>
    {
        const response = await apiNskV1UserPersonStoredPaymentsByPersonStoredPaymentKeyGet(personStoredPaymentKey,'body', headers);
        // TODO: Implement apiNskV1UserPersonStoredPaymentsByPersonStoredPaymentKeyGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Patches a specific stored payment on the logged in users person.
     * 
     */
    public store_apiNskV1UserPersonStoredPaymentsByPersonStoredPaymentKeyPatch(personStoredPaymentKey: string, request?: DeltaMapperPersonStoredPaymentUpdateRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UserPersonStoredPaymentsByPersonStoredPaymentKeyPatch(personStoredPaymentKey,request,'body', headers);
        // TODO: Implement apiNskV1UserPersonStoredPaymentsByPersonStoredPaymentKeyPatch
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Updates a specific stored payment on the logged in users person.
     * 
     */
    public store_apiNskV1UserPersonStoredPaymentsByPersonStoredPaymentKeyPut(personStoredPaymentKey: string, request?: PersonStoredPaymentUpdateRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UserPersonStoredPaymentsByPersonStoredPaymentKeyPut(personStoredPaymentKey,request,'body', headers);
        // TODO: Implement apiNskV1UserPersonStoredPaymentsByPersonStoredPaymentKeyPut
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets all stored payments from the logged in users person.
     * 
     */
    public store_apiNskV1UserPersonStoredPaymentsGet( headers?: Headers): Promise<Array<PersonStoredPayment>>
    {
        const response = await apiNskV1UserPersonStoredPaymentsGet('body', headers);
        // TODO: Implement apiNskV1UserPersonStoredPaymentsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Creates a new stored payment on the logged in users person.
     * 
     */
    public store_apiNskV1UserPersonStoredPaymentsPost(request?: PersonStoredPaymentRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UserPersonStoredPaymentsPost(request,'body', headers);
        // TODO: Implement apiNskV1UserPersonStoredPaymentsPost
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Deletes a specific travel document on the logged in users person.
     * 
     */
    public store_apiNskV1UserPersonTravelDocumentsByPersonTravelDocumentKeyDelete(personTravelDocumentKey: string,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UserPersonTravelDocumentsByPersonTravelDocumentKeyDelete(personTravelDocumentKey,'body', headers);
        // TODO: Implement apiNskV1UserPersonTravelDocumentsByPersonTravelDocumentKeyDelete
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets a specific travel document from the logged in users person.
     * 
     */
    public store_apiNskV1UserPersonTravelDocumentsByPersonTravelDocumentKeyGet(personTravelDocumentKey: string,  headers?: Headers): Promise<PersonTravelDocument>
    {
        const response = await apiNskV1UserPersonTravelDocumentsByPersonTravelDocumentKeyGet(personTravelDocumentKey,'body', headers);
        // TODO: Implement apiNskV1UserPersonTravelDocumentsByPersonTravelDocumentKeyGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets all travel documents from the logged in users person.
     * 
     */
    public store_apiNskV1UserPersonTravelDocumentsGet( headers?: Headers): Promise<Array<PersonTravelDocument>>
    {
        const response = await apiNskV1UserPersonTravelDocumentsGet('body', headers);
        // TODO: Implement apiNskV1UserPersonTravelDocumentsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Creates a new travel document on the logged in users person.
     * 
     */
    public store_apiNskV1UserPersonTravelDocumentsPost(request?: PersonTravelDocumentRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UserPersonTravelDocumentsPost(request,'body', headers);
        // TODO: Implement apiNskV1UserPersonTravelDocumentsPost
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Deletes a person travel notification for the logged in user&#39;s person.
     * 
     */
    public store_apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyDelete(travelNotificationKey: string,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyDelete(travelNotificationKey,'body', headers);
        // TODO: Implement apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyDelete
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Deletes a notification event from a person travel notification for the logged in user&#39;s person.
     * 
     */
    public store_apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyEventsByEventTypeDelete(travelNotificationKey: string, eventType: 'DepartureDelay' | 'ArrivalDelay' | 'ScheduleChange' | 'CheckIn',  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyEventsByEventTypeDelete(travelNotificationKey,eventType,'body', headers);
        // TODO: Implement apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyEventsByEventTypeDelete
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets a notification event for a person travel notification for the logged in user&#39;s person.
     * 
     */
    public store_apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyEventsByEventTypeGet(travelNotificationKey: string, eventType: 'DepartureDelay' | 'ArrivalDelay' | 'ScheduleChange' | 'CheckIn',  headers?: Headers): Promise<NotificationEvent>
    {
        const response = await apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyEventsByEventTypeGet(travelNotificationKey,eventType,'body', headers);
        // TODO: Implement apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyEventsByEventTypeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets notification events for a person travel notification for the logged in user&#39;s person.
     * 
     */
    public store_apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyEventsGet(travelNotificationKey: string,  headers?: Headers): Promise<Array<NotificationEvent>>
    {
        const response = await apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyEventsGet(travelNotificationKey,'body', headers);
        // TODO: Implement apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyEventsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Creates a notification event for a person travel notification for the logged in user&#39;s person.
     * 
     */
    public store_apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyEventsPost(travelNotificationKey: string, request?: NotificationEventCreateRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyEventsPost(travelNotificationKey,request,'body', headers);
        // TODO: Implement apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyEventsPost
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets a person travel notification for the logged in user&#39;s person.
     * 
     */
    public store_apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyGet(travelNotificationKey: string,  headers?: Headers): Promise<TravelNotification>
    {
        const response = await apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyGet(travelNotificationKey,'body', headers);
        // TODO: Implement apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Patches a person travel notification for the logged in user&#39;s person.
     * 
     */
    public store_apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyPatch(travelNotificationKey: string, request?: DeltaMapperTravelNotificationEditRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyPatch(travelNotificationKey,request,'body', headers);
        // TODO: Implement apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyPatch
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Updates a person travel notification for the logged in user&#39;s person.
     * 
     */
    public store_apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyPut(travelNotificationKey: string, request?: TravelNotificationEditRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyPut(travelNotificationKey,request,'body', headers);
        // TODO: Implement apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyPut
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Deletes a notification timed event from a person travel notification for the logged in user&#39;s person.
     * 
     */
    public store_apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeDelete(travelNotificationKey: string, timedEventType: 'Departure' | 'Arrival',  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeDelete(travelNotificationKey,timedEventType,'body', headers);
        // TODO: Implement apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeDelete
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets a notification timed event for a person travel notification for the logged in user&#39;s person.
     * 
     */
    public store_apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeGet(travelNotificationKey: string, timedEventType: 'Departure' | 'Arrival',  headers?: Headers): Promise<NotificationTimedEvent>
    {
        const response = await apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeGet(travelNotificationKey,timedEventType,'body', headers);
        // TODO: Implement apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Updates a notification timed event for a person travel notification for the logged in user&#39;s person.
     * 
     */
    public store_apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypePut(travelNotificationKey: string, timedEventType: 'Departure' | 'Arrival', request?: NotificationTimedEventEditRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypePut(travelNotificationKey,timedEventType,request,'body', headers);
        // TODO: Implement apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypePut
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets notification timed events for a person travel notification for the logged in user&#39;s person.
     * 
     */
    public store_apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyTimedEventsGet(travelNotificationKey: string,  headers?: Headers): Promise<Array<NotificationTimedEvent>>
    {
        const response = await apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyTimedEventsGet(travelNotificationKey,'body', headers);
        // TODO: Implement apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyTimedEventsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Creates a notification timed event for a person travel notification for the logged in user&#39;s person.
     * 
     */
    public store_apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyTimedEventsPost(travelNotificationKey: string, request?: NotificationTimedEventCreateRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyTimedEventsPost(travelNotificationKey,request,'body', headers);
        // TODO: Implement apiNskV1UserPersonTravelNotificationsByTravelNotificationKeyTimedEventsPost
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets person travel notifications for the logged in user&#39;s person.
     * 
     */
    public store_apiNskV1UserPersonTravelNotificationsGet( headers?: Headers): Promise<Array<TravelNotification>>
    {
        const response = await apiNskV1UserPersonTravelNotificationsGet('body', headers);
        // TODO: Implement apiNskV1UserPersonTravelNotificationsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Creates a person travel notification for the logged in user&#39;s person.
     * 
     */
    public store_apiNskV1UserPersonTravelNotificationsPost(request?: TravelNotificationCreateRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UserPersonTravelNotificationsPost(request,'body', headers);
        // TODO: Implement apiNskV1UserPersonTravelNotificationsPost
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Patches a specific travel document on the logged in users person.
     * 
     */
    public store_apiNskV2UserPersonTravelDocumentsByPersonTravelDocumentKeyPatch(personTravelDocumentKey: string, request?: DeltaMapperTravelDocumentEditRequestv2,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV2UserPersonTravelDocumentsByPersonTravelDocumentKeyPatch(personTravelDocumentKey,request,'body', headers);
        // TODO: Implement apiNskV2UserPersonTravelDocumentsByPersonTravelDocumentKeyPatch
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Updates a specific travel document on the logged in users person.
     * 
     */
    public store_apiNskV2UserPersonTravelDocumentsByPersonTravelDocumentKeyPut(personTravelDocumentKey: string, request?: TravelDocumentEditRequestv2,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV2UserPersonTravelDocumentsByPersonTravelDocumentKeyPut(personTravelDocumentKey,request,'body', headers);
        // TODO: Implement apiNskV2UserPersonTravelDocumentsByPersonTravelDocumentKeyPut
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }

}
