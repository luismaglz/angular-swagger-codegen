/**
 * API - Current Routes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: trunk
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from "rxjs/Observable";
import { map, toPromise } from "rxjs";
import IHttpClient from "../IHttpClient";
import { inject, injectable } from "inversify";
import { Headers } from "../Headers";
import HttpResponse from "../HttpResponse";
import {
    BookingSearchResult 
    BookingTripResult 
    DeltaMapperPersonAddressEditRequest 
    DeltaMapperPersonAliasRequest 
    DeltaMapperPersonCommentRequest 
    DeltaMapperPersonCustomerProgramEditRequest 
    DeltaMapperPersonEditRequest 
    DeltaMapperPersonEmailEditRequest 
    DeltaMapperPersonInformationEditRequest 
    DeltaMapperPersonPhoneNumberRequest 
    DeltaMapperPersonPreferenceEditRequest 
    DeltaMapperPersonStoredPaymentUpdateRequest 
    DeltaMapperTravelDocumentEditRequestv2 
    DeltaMapperTravelNotificationEditRequest 
    DeltaMapperUserRequest 
    DeltaMapperUserRolePatchRequest 
    IJsonResponse 
    NotificationEvent 
    NotificationEventCreateRequest 
    NotificationTimedEvent 
    NotificationTimedEventCreateRequest 
    NotificationTimedEventEditRequest 
    Person 
    PersonAddress 
    PersonAddressCreateRequest 
    PersonAddressEditRequest 
    PersonAlias 
    PersonAliasRequest 
    PersonComment 
    PersonCommentRequest 
    PersonCustomerProgram 
    PersonCustomerProgramCreateRequest 
    PersonCustomerProgramEditRequest 
    PersonEditRequest 
    PersonEmail 
    PersonEmailCreateRequest 
    PersonEmailEditRequest 
    PersonInformation 
    PersonInformationCreateRequest 
    PersonInformationEditRequest 
    PersonPhoneNumber 
    PersonPhoneNumberRequest 
    PersonPreference 
    PersonPreferenceCreateRequest 
    PersonPreferenceEditRequest 
    PersonStoredPayment 
    PersonStoredPaymentRequest 
    PersonStoredPaymentUpdateRequest 
    PersonTravelDocument 
    PersonTravelDocumentRequest 
    TravelDocumentEditRequestv2 
    TravelNotification 
    TravelNotificationCreateRequest 
    TravelNotificationEditRequest 
    User 
    UserChangePasswordRequestBase 
    UserCreateRequest 
    UserCreateRequestv2 
    UserRecord 
    UserRequest 
    UserRole 
    UserRoleCreateRequest 
    UserRoleEditRequest 
} from 'api-models';

import {
        apiNskV1UsersByUserKeyBookingsByPassengerGet
        apiNskV1UsersByUserKeyBookingsGet
        apiNskV1UsersByUserKeyDelete
        apiNskV1UsersByUserKeyGet
        apiNskV1UsersByUserKeyPasswordChangePost
        apiNskV1UsersByUserKeyPasswordResetPost
        apiNskV1UsersByUserKeyPatch
        apiNskV1UsersByUserKeyPersonAddressesByPersonAddressKeyDelete
        apiNskV1UsersByUserKeyPersonAddressesByPersonAddressKeyGet
        apiNskV1UsersByUserKeyPersonAddressesByPersonAddressKeyPatch
        apiNskV1UsersByUserKeyPersonAddressesByPersonAddressKeyPut
        apiNskV1UsersByUserKeyPersonAddressesGet
        apiNskV1UsersByUserKeyPersonAddressesPost
        apiNskV1UsersByUserKeyPersonAliasesByPersonAliasKeyDelete
        apiNskV1UsersByUserKeyPersonAliasesByPersonAliasKeyGet
        apiNskV1UsersByUserKeyPersonAliasesByPersonAliasKeyPatch
        apiNskV1UsersByUserKeyPersonAliasesByPersonAliasKeyPut
        apiNskV1UsersByUserKeyPersonAliasesGet
        apiNskV1UsersByUserKeyPersonAliasesPost
        apiNskV1UsersByUserKeyPersonCommentsByPersonCommentKeyDelete
        apiNskV1UsersByUserKeyPersonCommentsByPersonCommentKeyGet
        apiNskV1UsersByUserKeyPersonCommentsByPersonCommentKeyPatch
        apiNskV1UsersByUserKeyPersonCommentsByPersonCommentKeyPut
        apiNskV1UsersByUserKeyPersonCommentsGet
        apiNskV1UsersByUserKeyPersonCommentsPost
        apiNskV1UsersByUserKeyPersonEmailsByPersonEmailAddressKeyDelete
        apiNskV1UsersByUserKeyPersonEmailsByPersonEmailAddressKeyGet
        apiNskV1UsersByUserKeyPersonEmailsByPersonEmailAddressKeyPatch
        apiNskV1UsersByUserKeyPersonEmailsByPersonEmailAddressKeyPost
        apiNskV1UsersByUserKeyPersonEmailsByPersonEmailAddressKeyPut
        apiNskV1UsersByUserKeyPersonEmailsGet
        apiNskV1UsersByUserKeyPersonGet
        apiNskV1UsersByUserKeyPersonInformationByPersonInformationKeyDelete
        apiNskV1UsersByUserKeyPersonInformationByPersonInformationKeyGet
        apiNskV1UsersByUserKeyPersonInformationByPersonInformationKeyPatch
        apiNskV1UsersByUserKeyPersonInformationByPersonInformationKeyPut
        apiNskV1UsersByUserKeyPersonInformationGet
        apiNskV1UsersByUserKeyPersonInformationPost
        apiNskV1UsersByUserKeyPersonPatch
        apiNskV1UsersByUserKeyPersonPhoneNumbersByPersonPhoneNumberKeyDelete
        apiNskV1UsersByUserKeyPersonPhoneNumbersByPersonPhoneNumberKeyGet
        apiNskV1UsersByUserKeyPersonPhoneNumbersByPersonPhoneNumberKeyPatch
        apiNskV1UsersByUserKeyPersonPhoneNumbersByPersonPhoneNumberKeyPut
        apiNskV1UsersByUserKeyPersonPhoneNumbersGet
        apiNskV1UsersByUserKeyPersonPhoneNumbersPost
        apiNskV1UsersByUserKeyPersonPreferencesByPersonPreferenceKeyDelete
        apiNskV1UsersByUserKeyPersonPreferencesByPersonPreferenceKeyGet
        apiNskV1UsersByUserKeyPersonPreferencesByPersonPreferenceKeyPatch
        apiNskV1UsersByUserKeyPersonPreferencesByPersonPreferenceKeyPut
        apiNskV1UsersByUserKeyPersonPreferencesGet
        apiNskV1UsersByUserKeyPersonPreferencesPost
        apiNskV1UsersByUserKeyPersonProgramsByPersonProgramKeyDelete
        apiNskV1UsersByUserKeyPersonProgramsByPersonProgramKeyGet
        apiNskV1UsersByUserKeyPersonProgramsByPersonProgramKeyPatch
        apiNskV1UsersByUserKeyPersonProgramsByPersonProgramKeyPut
        apiNskV1UsersByUserKeyPersonProgramsGet
        apiNskV1UsersByUserKeyPersonProgramsPost
        apiNskV1UsersByUserKeyPersonPut
        apiNskV1UsersByUserKeyPersonStoredPaymentsByPersonStoredPaymentKeyDelete
        apiNskV1UsersByUserKeyPersonStoredPaymentsByPersonStoredPaymentKeyGet
        apiNskV1UsersByUserKeyPersonStoredPaymentsByPersonStoredPaymentKeyPatch
        apiNskV1UsersByUserKeyPersonStoredPaymentsByPersonStoredPaymentKeyPut
        apiNskV1UsersByUserKeyPersonStoredPaymentsGet
        apiNskV1UsersByUserKeyPersonStoredPaymentsPost
        apiNskV1UsersByUserKeyPersonTravelDocumentsByPersonTravelDocumentKeyDelete
        apiNskV1UsersByUserKeyPersonTravelDocumentsByPersonTravelDocumentKeyGet
        apiNskV1UsersByUserKeyPersonTravelDocumentsGet
        apiNskV1UsersByUserKeyPersonTravelDocumentsPost
        apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyDelete
        apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyEventsByEventTypeDelete
        apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyEventsByEventTypeGet
        apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyEventsGet
        apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyEventsPost
        apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyGet
        apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyPatch
        apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyPut
        apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeDelete
        apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeGet
        apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypePut
        apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyTimedEventsGet
        apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyTimedEventsPost
        apiNskV1UsersByUserKeyPersonTravelNotificationsGet
        apiNskV1UsersByUserKeyPersonTravelNotificationsPost
        apiNskV1UsersByUserKeyPut
        apiNskV1UsersByUserKeyRolesByUserRoleKeyDelete
        apiNskV1UsersByUserKeyRolesByUserRoleKeyGet
        apiNskV1UsersByUserKeyRolesByUserRoleKeyPatch
        apiNskV1UsersByUserKeyRolesByUserRoleKeyPut
        apiNskV1UsersByUserKeyRolesGet
        apiNskV1UsersByUserKeyRolesPost
        apiNskV1UsersPost
        apiNskV2UsersByUserKeyPersonTravelDocumentsByPersonTravelDocumentKeyPatch
        apiNskV2UsersByUserKeyPersonTravelDocumentsByPersonTravelDocumentKeyPut
        apiNskV2UsersGet
        apiNskV2UsersPost
} from '../base/api'




@injectable()
export class StoreUsersService {

    constructor(@inject("Store") private store: Store<any>) {}

    /**
     * Searches the specific user upcoming and past bookings by passenger.
     * This is similar to the user booking endpoint but returns more focused trip information.  This endpoint will only return data where a bookings passenger customer number matches the current logged in user.  Bookings made by the user but where the passenger customer are not assigned are ignored.
     */
    public store_apiNskV1UsersByUserKeyBookingsByPassengerGet(userKey: string, startDate?: Date, endDate?: Date,  headers?: Headers): Promise<Array<BookingTripResult>>
    {
        const response = await apiNskV1UsersByUserKeyBookingsByPassengerGet(userKey,startDate,endDate,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyBookingsByPassengerGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Searches the specific user for upcoming and past bookings.
     * 
     */
    public store_apiNskV1UsersByUserKeyBookingsGet(userKey: string, returnCount: number, associatedFirstName?: string, associatedLastName?: string, phoneticSearch?: boolean, tripIdentifier?: string, origin?: string, destination?: string, searchArchive?: boolean, tripDate?: Date, startDate?: Date, endDate?: Date, searchByCustomerNumber?: boolean, lastBookingKey?: string,  headers?: Headers): Promise<Array<BookingSearchResult>>
    {
        const response = await apiNskV1UsersByUserKeyBookingsGet(userKey,returnCount,associatedFirstName,associatedLastName,phoneticSearch,tripIdentifier,origin,destination,searchArchive,tripDate,startDate,endDate,searchByCustomerNumber,lastBookingKey,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyBookingsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Delete the user.
     * This is a soft delete by setting the user record status to terminated.
     */
    public store_apiNskV1UsersByUserKeyDelete(userKey: string,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UsersByUserKeyDelete(userKey,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyDelete
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the a specific user.
     * 
     */
    public store_apiNskV1UsersByUserKeyGet(userKey: string,  headers?: Headers): Promise<User>
    {
        const response = await apiNskV1UsersByUserKeyGet(userKey,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Changes a specifics user&#39;s password.
     * 
     */
    public store_apiNskV1UsersByUserKeyPasswordChangePost(userKey: string, request?: UserChangePasswordRequestBase,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UsersByUserKeyPasswordChangePost(userKey,request,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyPasswordChangePost
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Invokes the forgot password reset for a specific user.
     * 
     */
    public store_apiNskV1UsersByUserKeyPasswordResetPost(userKey: string,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UsersByUserKeyPasswordResetPost(userKey,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyPasswordResetPost
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Patches the current logged in user.
     * 
     */
    public store_apiNskV1UsersByUserKeyPatch(userKey: string, request?: DeltaMapperUserRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UsersByUserKeyPatch(userKey,request,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyPatch
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Deletes a specific address on the specific user&#39;s person.
     * 
     */
    public store_apiNskV1UsersByUserKeyPersonAddressesByPersonAddressKeyDelete(userKey: string, personAddressKey: string,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UsersByUserKeyPersonAddressesByPersonAddressKeyDelete(userKey,personAddressKey,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyPersonAddressesByPersonAddressKeyDelete
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets a specific address from the specific user&#39;s person.
     * 
     */
    public store_apiNskV1UsersByUserKeyPersonAddressesByPersonAddressKeyGet(userKey: string, personAddressKey: string,  headers?: Headers): Promise<PersonAddress>
    {
        const response = await apiNskV1UsersByUserKeyPersonAddressesByPersonAddressKeyGet(userKey,personAddressKey,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyPersonAddressesByPersonAddressKeyGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Patches a specific address on the specific user&#39;s person.
     * 
     */
    public store_apiNskV1UsersByUserKeyPersonAddressesByPersonAddressKeyPatch(userKey: string, personAddressKey: string, request?: DeltaMapperPersonAddressEditRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UsersByUserKeyPersonAddressesByPersonAddressKeyPatch(userKey,personAddressKey,request,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyPersonAddressesByPersonAddressKeyPatch
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Updates a specific address on the specific user&#39;s person.
     * 
     */
    public store_apiNskV1UsersByUserKeyPersonAddressesByPersonAddressKeyPut(userKey: string, personAddressKey: string, request?: PersonAddressEditRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UsersByUserKeyPersonAddressesByPersonAddressKeyPut(userKey,personAddressKey,request,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyPersonAddressesByPersonAddressKeyPut
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets all addresses from the specific user&#39;s person.
     * 
     */
    public store_apiNskV1UsersByUserKeyPersonAddressesGet(userKey: string,  headers?: Headers): Promise<Array<PersonAddress>>
    {
        const response = await apiNskV1UsersByUserKeyPersonAddressesGet(userKey,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyPersonAddressesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Creates a new address on the specific user&#39;s person.
     * 
     */
    public store_apiNskV1UsersByUserKeyPersonAddressesPost(userKey: string, request?: PersonAddressCreateRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UsersByUserKeyPersonAddressesPost(userKey,request,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyPersonAddressesPost
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Deletes a specific alias on the specific user&#39;s person.
     * 
     */
    public store_apiNskV1UsersByUserKeyPersonAliasesByPersonAliasKeyDelete(userKey: string, personAliasKey: string,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UsersByUserKeyPersonAliasesByPersonAliasKeyDelete(userKey,personAliasKey,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyPersonAliasesByPersonAliasKeyDelete
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets a specific alias from the specific user&#39;s person.
     * 
     */
    public store_apiNskV1UsersByUserKeyPersonAliasesByPersonAliasKeyGet(userKey: string, personAliasKey: string,  headers?: Headers): Promise<PersonAlias>
    {
        const response = await apiNskV1UsersByUserKeyPersonAliasesByPersonAliasKeyGet(userKey,personAliasKey,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyPersonAliasesByPersonAliasKeyGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Patches a specific alias on the specific user&#39;s person.
     * 
     */
    public store_apiNskV1UsersByUserKeyPersonAliasesByPersonAliasKeyPatch(userKey: string, personAliasKey: string, request?: DeltaMapperPersonAliasRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UsersByUserKeyPersonAliasesByPersonAliasKeyPatch(userKey,personAliasKey,request,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyPersonAliasesByPersonAliasKeyPatch
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Updates a specific alias on the specific user&#39;s person.
     * 
     */
    public store_apiNskV1UsersByUserKeyPersonAliasesByPersonAliasKeyPut(userKey: string, personAliasKey: string, request?: PersonAliasRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UsersByUserKeyPersonAliasesByPersonAliasKeyPut(userKey,personAliasKey,request,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyPersonAliasesByPersonAliasKeyPut
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets all aliases from the specific user&#39;s person.
     * 
     */
    public store_apiNskV1UsersByUserKeyPersonAliasesGet(userKey: string,  headers?: Headers): Promise<Array<PersonAlias>>
    {
        const response = await apiNskV1UsersByUserKeyPersonAliasesGet(userKey,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyPersonAliasesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Creates a new alias on the specific user&#39;s person.
     * 
     */
    public store_apiNskV1UsersByUserKeyPersonAliasesPost(userKey: string, request?: PersonAliasRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UsersByUserKeyPersonAliasesPost(userKey,request,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyPersonAliasesPost
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Deletes a specific comment on the specific user&#39;s person.
     * 
     */
    public store_apiNskV1UsersByUserKeyPersonCommentsByPersonCommentKeyDelete(userKey: string, personCommentKey: string,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UsersByUserKeyPersonCommentsByPersonCommentKeyDelete(userKey,personCommentKey,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyPersonCommentsByPersonCommentKeyDelete
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets a specific comment from the specific user&#39;s person.
     * 
     */
    public store_apiNskV1UsersByUserKeyPersonCommentsByPersonCommentKeyGet(userKey: string, personCommentKey: string,  headers?: Headers): Promise<PersonComment>
    {
        const response = await apiNskV1UsersByUserKeyPersonCommentsByPersonCommentKeyGet(userKey,personCommentKey,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyPersonCommentsByPersonCommentKeyGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Patches a specific comment on the specific user&#39;s person.
     * 
     */
    public store_apiNskV1UsersByUserKeyPersonCommentsByPersonCommentKeyPatch(userKey: string, personCommentKey: string, request?: DeltaMapperPersonCommentRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UsersByUserKeyPersonCommentsByPersonCommentKeyPatch(userKey,personCommentKey,request,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyPersonCommentsByPersonCommentKeyPatch
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Updates a specific comment on the specific user&#39;s person.
     * 
     */
    public store_apiNskV1UsersByUserKeyPersonCommentsByPersonCommentKeyPut(userKey: string, personCommentKey: string, request?: PersonCommentRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UsersByUserKeyPersonCommentsByPersonCommentKeyPut(userKey,personCommentKey,request,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyPersonCommentsByPersonCommentKeyPut
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets all comments from the specific user&#39;s person.
     * 
     */
    public store_apiNskV1UsersByUserKeyPersonCommentsGet(userKey: string,  headers?: Headers): Promise<Array<PersonComment>>
    {
        const response = await apiNskV1UsersByUserKeyPersonCommentsGet(userKey,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyPersonCommentsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Creates a new comment on the specific user&#39;s person.
     * 
     */
    public store_apiNskV1UsersByUserKeyPersonCommentsPost(userKey: string, request?: PersonCommentRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UsersByUserKeyPersonCommentsPost(userKey,request,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyPersonCommentsPost
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Deletes a specific email address on the specific user&#39;s person.
     * 
     */
    public store_apiNskV1UsersByUserKeyPersonEmailsByPersonEmailAddressKeyDelete(userKey: string, personEmailAddressKey: string,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UsersByUserKeyPersonEmailsByPersonEmailAddressKeyDelete(userKey,personEmailAddressKey,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyPersonEmailsByPersonEmailAddressKeyDelete
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets a specific email address from the specific user&#39;s person.
     * 
     */
    public store_apiNskV1UsersByUserKeyPersonEmailsByPersonEmailAddressKeyGet(userKey: string, personEmailAddressKey: string,  headers?: Headers): Promise<PersonEmail>
    {
        const response = await apiNskV1UsersByUserKeyPersonEmailsByPersonEmailAddressKeyGet(userKey,personEmailAddressKey,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyPersonEmailsByPersonEmailAddressKeyGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Patches a specific email address on the specific user&#39;s person.
     * 
     */
    public store_apiNskV1UsersByUserKeyPersonEmailsByPersonEmailAddressKeyPatch(userKey: string, personEmailAddressKey: string, request?: DeltaMapperPersonEmailEditRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UsersByUserKeyPersonEmailsByPersonEmailAddressKeyPatch(userKey,personEmailAddressKey,request,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyPersonEmailsByPersonEmailAddressKeyPatch
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Creates a new email address on the specific user&#39;s person.
     * 
     */
    public store_apiNskV1UsersByUserKeyPersonEmailsByPersonEmailAddressKeyPost(userKey: string, personEmailAddressKey: string, request?: PersonEmailCreateRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UsersByUserKeyPersonEmailsByPersonEmailAddressKeyPost(userKey,personEmailAddressKey,request,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyPersonEmailsByPersonEmailAddressKeyPost
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Updates a specific email address on the specific user&#39;s person.
     * 
     */
    public store_apiNskV1UsersByUserKeyPersonEmailsByPersonEmailAddressKeyPut(userKey: string, personEmailAddressKey: string, request?: PersonEmailEditRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UsersByUserKeyPersonEmailsByPersonEmailAddressKeyPut(userKey,personEmailAddressKey,request,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyPersonEmailsByPersonEmailAddressKeyPut
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets all email addresses from the specific user&#39;s person.
     * 
     */
    public store_apiNskV1UsersByUserKeyPersonEmailsGet(userKey: string,  headers?: Headers): Promise<Array<PersonEmail>>
    {
        const response = await apiNskV1UsersByUserKeyPersonEmailsGet(userKey,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyPersonEmailsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the a specific user&#39;s person.
     * 
     */
    public store_apiNskV1UsersByUserKeyPersonGet(userKey: string,  headers?: Headers): Promise<Person>
    {
        const response = await apiNskV1UsersByUserKeyPersonGet(userKey,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyPersonGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Deletes a specific information on the logged in user&#39;s person.
     * 
     */
    public store_apiNskV1UsersByUserKeyPersonInformationByPersonInformationKeyDelete(userKey: string, personInformationKey: string,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UsersByUserKeyPersonInformationByPersonInformationKeyDelete(userKey,personInformationKey,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyPersonInformationByPersonInformationKeyDelete
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets a specific information from the logged in user&#39;s person.
     * 
     */
    public store_apiNskV1UsersByUserKeyPersonInformationByPersonInformationKeyGet(userKey: string, personInformationKey: string,  headers?: Headers): Promise<PersonInformation>
    {
        const response = await apiNskV1UsersByUserKeyPersonInformationByPersonInformationKeyGet(userKey,personInformationKey,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyPersonInformationByPersonInformationKeyGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Patches a specific information on the logged in user&#39;s person.
     * 
     */
    public store_apiNskV1UsersByUserKeyPersonInformationByPersonInformationKeyPatch(userKey: string, personInformationKey: string, request?: DeltaMapperPersonInformationEditRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UsersByUserKeyPersonInformationByPersonInformationKeyPatch(userKey,personInformationKey,request,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyPersonInformationByPersonInformationKeyPatch
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Updates a specific information on the logged in user&#39;s person.
     * 
     */
    public store_apiNskV1UsersByUserKeyPersonInformationByPersonInformationKeyPut(userKey: string, personInformationKey: string, request?: PersonInformationEditRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UsersByUserKeyPersonInformationByPersonInformationKeyPut(userKey,personInformationKey,request,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyPersonInformationByPersonInformationKeyPut
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets all information from the logged in user&#39;s person.
     * 
     */
    public store_apiNskV1UsersByUserKeyPersonInformationGet(userKey: string,  headers?: Headers): Promise<Array<PersonInformation>>
    {
        const response = await apiNskV1UsersByUserKeyPersonInformationGet(userKey,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyPersonInformationGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Creates a new information on the logged in user&#39;s person.
     * 
     */
    public store_apiNskV1UsersByUserKeyPersonInformationPost(userKey: string, request?: PersonInformationCreateRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UsersByUserKeyPersonInformationPost(userKey,request,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyPersonInformationPost
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Patches the specific user&#39;s person records basic information.
     * 
     */
    public store_apiNskV1UsersByUserKeyPersonPatch(userKey: string, request?: DeltaMapperPersonEditRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UsersByUserKeyPersonPatch(userKey,request,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyPersonPatch
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Deletes a specific phone number on the specific user&#39;s person.
     * 
     */
    public store_apiNskV1UsersByUserKeyPersonPhoneNumbersByPersonPhoneNumberKeyDelete(userKey: string, personPhoneNumberKey: string,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UsersByUserKeyPersonPhoneNumbersByPersonPhoneNumberKeyDelete(userKey,personPhoneNumberKey,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyPersonPhoneNumbersByPersonPhoneNumberKeyDelete
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets a specific phone number from the specific user&#39;s person.
     * 
     */
    public store_apiNskV1UsersByUserKeyPersonPhoneNumbersByPersonPhoneNumberKeyGet(userKey: string, personPhoneNumberKey: string,  headers?: Headers): Promise<PersonPhoneNumber>
    {
        const response = await apiNskV1UsersByUserKeyPersonPhoneNumbersByPersonPhoneNumberKeyGet(userKey,personPhoneNumberKey,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyPersonPhoneNumbersByPersonPhoneNumberKeyGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Patches a specific phone number on the specific user&#39;s person.
     * 
     */
    public store_apiNskV1UsersByUserKeyPersonPhoneNumbersByPersonPhoneNumberKeyPatch(userKey: string, personPhoneNumberKey: string, request?: DeltaMapperPersonPhoneNumberRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UsersByUserKeyPersonPhoneNumbersByPersonPhoneNumberKeyPatch(userKey,personPhoneNumberKey,request,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyPersonPhoneNumbersByPersonPhoneNumberKeyPatch
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Updates a specific phone number on the specific user&#39;s person.
     * 
     */
    public store_apiNskV1UsersByUserKeyPersonPhoneNumbersByPersonPhoneNumberKeyPut(userKey: string, personPhoneNumberKey: string, request?: PersonPhoneNumberRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UsersByUserKeyPersonPhoneNumbersByPersonPhoneNumberKeyPut(userKey,personPhoneNumberKey,request,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyPersonPhoneNumbersByPersonPhoneNumberKeyPut
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets all phone numbers from the specific user&#39;s person.
     * 
     */
    public store_apiNskV1UsersByUserKeyPersonPhoneNumbersGet(userKey: string,  headers?: Headers): Promise<Array<PersonPhoneNumber>>
    {
        const response = await apiNskV1UsersByUserKeyPersonPhoneNumbersGet(userKey,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyPersonPhoneNumbersGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Creates a new phone number on the specific user&#39;s person.
     * 
     */
    public store_apiNskV1UsersByUserKeyPersonPhoneNumbersPost(userKey: string, request?: PersonPhoneNumberRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UsersByUserKeyPersonPhoneNumbersPost(userKey,request,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyPersonPhoneNumbersPost
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Deletes a specific preference for a specific user&#39;s person.
     * 
     */
    public store_apiNskV1UsersByUserKeyPersonPreferencesByPersonPreferenceKeyDelete(userKey: string, personPreferenceKey: string,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UsersByUserKeyPersonPreferencesByPersonPreferenceKeyDelete(userKey,personPreferenceKey,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyPersonPreferencesByPersonPreferenceKeyDelete
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets a specific preference for a specific user&#39;s person.
     * 
     */
    public store_apiNskV1UsersByUserKeyPersonPreferencesByPersonPreferenceKeyGet(userKey: string, personPreferenceKey: string,  headers?: Headers): Promise<PersonPreference>
    {
        const response = await apiNskV1UsersByUserKeyPersonPreferencesByPersonPreferenceKeyGet(userKey,personPreferenceKey,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyPersonPreferencesByPersonPreferenceKeyGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Patches a specific preference for a specific user&#39;s person.
     * 
     */
    public store_apiNskV1UsersByUserKeyPersonPreferencesByPersonPreferenceKeyPatch(userKey: string, personPreferenceKey: string, request?: DeltaMapperPersonPreferenceEditRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UsersByUserKeyPersonPreferencesByPersonPreferenceKeyPatch(userKey,personPreferenceKey,request,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyPersonPreferencesByPersonPreferenceKeyPatch
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Updates a specific preference for a specific user&#39;s person.
     * 
     */
    public store_apiNskV1UsersByUserKeyPersonPreferencesByPersonPreferenceKeyPut(userKey: string, personPreferenceKey: string, request?: PersonPreferenceEditRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UsersByUserKeyPersonPreferencesByPersonPreferenceKeyPut(userKey,personPreferenceKey,request,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyPersonPreferencesByPersonPreferenceKeyPut
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets all preferences for a specific user&#39;s person.
     * 
     */
    public store_apiNskV1UsersByUserKeyPersonPreferencesGet(userKey: string,  headers?: Headers): Promise<Array<PersonPreference>>
    {
        const response = await apiNskV1UsersByUserKeyPersonPreferencesGet(userKey,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyPersonPreferencesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Creates a new preference for a specific user&#39;s person.
     * 
     */
    public store_apiNskV1UsersByUserKeyPersonPreferencesPost(userKey: string, request?: PersonPreferenceCreateRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UsersByUserKeyPersonPreferencesPost(userKey,request,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyPersonPreferencesPost
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Deletes a specific program on the specific user&#39;s person.
     * 
     */
    public store_apiNskV1UsersByUserKeyPersonProgramsByPersonProgramKeyDelete(userKey: string, personProgramKey: string,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UsersByUserKeyPersonProgramsByPersonProgramKeyDelete(userKey,personProgramKey,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyPersonProgramsByPersonProgramKeyDelete
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets a specific program from the specific user&#39;s person.
     * 
     */
    public store_apiNskV1UsersByUserKeyPersonProgramsByPersonProgramKeyGet(userKey: string, personProgramKey: string,  headers?: Headers): Promise<PersonCustomerProgram>
    {
        const response = await apiNskV1UsersByUserKeyPersonProgramsByPersonProgramKeyGet(userKey,personProgramKey,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyPersonProgramsByPersonProgramKeyGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Patches a specific program on the specific user&#39;s person.
     * 
     */
    public store_apiNskV1UsersByUserKeyPersonProgramsByPersonProgramKeyPatch(userKey: string, personProgramKey: string, request?: DeltaMapperPersonCustomerProgramEditRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UsersByUserKeyPersonProgramsByPersonProgramKeyPatch(userKey,personProgramKey,request,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyPersonProgramsByPersonProgramKeyPatch
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Updates a specific program on the specific user&#39;s person.
     * 
     */
    public store_apiNskV1UsersByUserKeyPersonProgramsByPersonProgramKeyPut(userKey: string, personProgramKey: string, request?: PersonCustomerProgramEditRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UsersByUserKeyPersonProgramsByPersonProgramKeyPut(userKey,personProgramKey,request,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyPersonProgramsByPersonProgramKeyPut
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets all programs from the specific user&#39;s person.
     * 
     */
    public store_apiNskV1UsersByUserKeyPersonProgramsGet(userKey: string,  headers?: Headers): Promise<Array<PersonCustomerProgram>>
    {
        const response = await apiNskV1UsersByUserKeyPersonProgramsGet(userKey,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyPersonProgramsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Creates a new program on the specific user&#39;s person.
     * 
     */
    public store_apiNskV1UsersByUserKeyPersonProgramsPost(userKey: string, request?: PersonCustomerProgramCreateRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UsersByUserKeyPersonProgramsPost(userKey,request,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyPersonProgramsPost
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Updates the specific user&#39;s person record basic information.
     * 
     */
    public store_apiNskV1UsersByUserKeyPersonPut(userKey: string, request?: PersonEditRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UsersByUserKeyPersonPut(userKey,request,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyPersonPut
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Deletes a specific stored payment on the specific user&#39;s person.
     * 
     */
    public store_apiNskV1UsersByUserKeyPersonStoredPaymentsByPersonStoredPaymentKeyDelete(userKey: string, personStoredPaymentKey: string,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UsersByUserKeyPersonStoredPaymentsByPersonStoredPaymentKeyDelete(userKey,personStoredPaymentKey,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyPersonStoredPaymentsByPersonStoredPaymentKeyDelete
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets a specific stored payment from the specific user&#39;s person.
     * 
     */
    public store_apiNskV1UsersByUserKeyPersonStoredPaymentsByPersonStoredPaymentKeyGet(userKey: string, personStoredPaymentKey: string,  headers?: Headers): Promise<PersonStoredPayment>
    {
        const response = await apiNskV1UsersByUserKeyPersonStoredPaymentsByPersonStoredPaymentKeyGet(userKey,personStoredPaymentKey,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyPersonStoredPaymentsByPersonStoredPaymentKeyGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Patches a specific stored payment on the specific user&#39;s person.
     * 
     */
    public store_apiNskV1UsersByUserKeyPersonStoredPaymentsByPersonStoredPaymentKeyPatch(userKey: string, personStoredPaymentKey: string, request?: DeltaMapperPersonStoredPaymentUpdateRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UsersByUserKeyPersonStoredPaymentsByPersonStoredPaymentKeyPatch(userKey,personStoredPaymentKey,request,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyPersonStoredPaymentsByPersonStoredPaymentKeyPatch
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Updates a specific stored payment on the specific user&#39;s person.
     * 
     */
    public store_apiNskV1UsersByUserKeyPersonStoredPaymentsByPersonStoredPaymentKeyPut(userKey: string, personStoredPaymentKey: string, request?: PersonStoredPaymentUpdateRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UsersByUserKeyPersonStoredPaymentsByPersonStoredPaymentKeyPut(userKey,personStoredPaymentKey,request,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyPersonStoredPaymentsByPersonStoredPaymentKeyPut
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets all stored payments from the specific user&#39;s person.
     * 
     */
    public store_apiNskV1UsersByUserKeyPersonStoredPaymentsGet(userKey: string,  headers?: Headers): Promise<Array<PersonStoredPayment>>
    {
        const response = await apiNskV1UsersByUserKeyPersonStoredPaymentsGet(userKey,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyPersonStoredPaymentsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Creates a new stored payment on the specific user&#39;s person.
     * 
     */
    public store_apiNskV1UsersByUserKeyPersonStoredPaymentsPost(userKey: string, request?: PersonStoredPaymentRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UsersByUserKeyPersonStoredPaymentsPost(userKey,request,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyPersonStoredPaymentsPost
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Deletes a specific travel document on the specific user&#39;s person.
     * 
     */
    public store_apiNskV1UsersByUserKeyPersonTravelDocumentsByPersonTravelDocumentKeyDelete(userKey: string, personTravelDocumentKey: string,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UsersByUserKeyPersonTravelDocumentsByPersonTravelDocumentKeyDelete(userKey,personTravelDocumentKey,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyPersonTravelDocumentsByPersonTravelDocumentKeyDelete
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets a specific travel document from the specific user&#39;s person.
     * 
     */
    public store_apiNskV1UsersByUserKeyPersonTravelDocumentsByPersonTravelDocumentKeyGet(userKey: string, personTravelDocumentKey: string,  headers?: Headers): Promise<PersonTravelDocument>
    {
        const response = await apiNskV1UsersByUserKeyPersonTravelDocumentsByPersonTravelDocumentKeyGet(userKey,personTravelDocumentKey,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyPersonTravelDocumentsByPersonTravelDocumentKeyGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets all travel documents from the specific user&#39;s person.
     * 
     */
    public store_apiNskV1UsersByUserKeyPersonTravelDocumentsGet(userKey: string,  headers?: Headers): Promise<Array<PersonTravelDocument>>
    {
        const response = await apiNskV1UsersByUserKeyPersonTravelDocumentsGet(userKey,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyPersonTravelDocumentsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Creates a new travel document on the specific user&#39;s person.
     * 
     */
    public store_apiNskV1UsersByUserKeyPersonTravelDocumentsPost(userKey: string, request?: PersonTravelDocumentRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UsersByUserKeyPersonTravelDocumentsPost(userKey,request,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyPersonTravelDocumentsPost
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Deletes a person travel notification for a user&#39;s person.
     * 
     */
    public store_apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyDelete(userKey: string, travelNotificationKey: string,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyDelete(userKey,travelNotificationKey,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyDelete
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Deletes a notification event from a person travel notification for a user&#39;s person.
     * 
     */
    public store_apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyEventsByEventTypeDelete(userKey: string, travelNotificationKey: string, eventType: 'DepartureDelay' | 'ArrivalDelay' | 'ScheduleChange' | 'CheckIn',  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyEventsByEventTypeDelete(userKey,travelNotificationKey,eventType,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyEventsByEventTypeDelete
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets a notification event for a person travel notification for a user&#39;s person.
     * 
     */
    public store_apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyEventsByEventTypeGet(userKey: string, travelNotificationKey: string, eventType: 'DepartureDelay' | 'ArrivalDelay' | 'ScheduleChange' | 'CheckIn',  headers?: Headers): Promise<NotificationEvent>
    {
        const response = await apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyEventsByEventTypeGet(userKey,travelNotificationKey,eventType,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyEventsByEventTypeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets notification events for a person travel notification for a user&#39;s person.
     * 
     */
    public store_apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyEventsGet(userKey: string, travelNotificationKey: string,  headers?: Headers): Promise<Array<NotificationEvent>>
    {
        const response = await apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyEventsGet(userKey,travelNotificationKey,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyEventsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Creates a notification event for a person travel notification for a user&#39;s person.
     * 
     */
    public store_apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyEventsPost(userKey: string, travelNotificationKey: string, request?: NotificationEventCreateRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyEventsPost(userKey,travelNotificationKey,request,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyEventsPost
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets a person travel notification for a user&#39;s person.
     * 
     */
    public store_apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyGet(userKey: string, travelNotificationKey: string,  headers?: Headers): Promise<TravelNotification>
    {
        const response = await apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyGet(userKey,travelNotificationKey,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Patches a person travel notification for a user&#39;s person.
     * 
     */
    public store_apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyPatch(userKey: string, travelNotificationKey: string, request?: DeltaMapperTravelNotificationEditRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyPatch(userKey,travelNotificationKey,request,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyPatch
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Updates a person travel notification for a user&#39;s person.
     * 
     */
    public store_apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyPut(userKey: string, travelNotificationKey: string, request?: TravelNotificationEditRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyPut(userKey,travelNotificationKey,request,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyPut
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Deletes a notification timed event from a person travel notification for a user&#39;s person.
     * 
     */
    public store_apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeDelete(userKey: string, travelNotificationKey: string, timedEventType: 'Departure' | 'Arrival',  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeDelete(userKey,travelNotificationKey,timedEventType,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeDelete
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets a notification timed event for a person travel notification for a user&#39;s person.
     * 
     */
    public store_apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeGet(userKey: string, travelNotificationKey: string, timedEventType: 'Departure' | 'Arrival',  headers?: Headers): Promise<NotificationTimedEvent>
    {
        const response = await apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeGet(userKey,travelNotificationKey,timedEventType,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Updates a notification timed event for a person travel notification for a user&#39;s person.
     * 
     */
    public store_apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypePut(userKey: string, travelNotificationKey: string, timedEventType: 'Departure' | 'Arrival', request?: NotificationTimedEventEditRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypePut(userKey,travelNotificationKey,timedEventType,request,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypePut
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets notification timed events for a person travel notification for a user&#39;s person.
     * 
     */
    public store_apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyTimedEventsGet(userKey: string, travelNotificationKey: string,  headers?: Headers): Promise<Array<NotificationTimedEvent>>
    {
        const response = await apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyTimedEventsGet(userKey,travelNotificationKey,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyTimedEventsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Creates a notification timed event for a person travel notification for a user&#39;s person.
     * 
     */
    public store_apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyTimedEventsPost(userKey: string, travelNotificationKey: string, request?: NotificationTimedEventCreateRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyTimedEventsPost(userKey,travelNotificationKey,request,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyPersonTravelNotificationsByTravelNotificationKeyTimedEventsPost
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets person travel notifications for a user&#39;s person.
     * 
     */
    public store_apiNskV1UsersByUserKeyPersonTravelNotificationsGet(userKey: string,  headers?: Headers): Promise<Array<TravelNotification>>
    {
        const response = await apiNskV1UsersByUserKeyPersonTravelNotificationsGet(userKey,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyPersonTravelNotificationsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Creates a person travel notification for a user&#39;s person.
     * 
     */
    public store_apiNskV1UsersByUserKeyPersonTravelNotificationsPost(userKey: string, request?: TravelNotificationCreateRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UsersByUserKeyPersonTravelNotificationsPost(userKey,request,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyPersonTravelNotificationsPost
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Updates the specific user.
     * 
     */
    public store_apiNskV1UsersByUserKeyPut(userKey: string, request?: UserRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UsersByUserKeyPut(userKey,request,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyPut
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Delets a specific role for a specific user.
     * 
     */
    public store_apiNskV1UsersByUserKeyRolesByUserRoleKeyDelete(userKey: string, userRoleKey: string,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UsersByUserKeyRolesByUserRoleKeyDelete(userKey,userRoleKey,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyRolesByUserRoleKeyDelete
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets a specific role for a specific user.
     * 
     */
    public store_apiNskV1UsersByUserKeyRolesByUserRoleKeyGet(userKey: string, userRoleKey: string,  headers?: Headers): Promise<UserRole>
    {
        const response = await apiNskV1UsersByUserKeyRolesByUserRoleKeyGet(userKey,userRoleKey,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyRolesByUserRoleKeyGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Patches a specific role for a specific user.
     * 
     */
    public store_apiNskV1UsersByUserKeyRolesByUserRoleKeyPatch(userKey: string, userRoleKey: string, request?: DeltaMapperUserRolePatchRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UsersByUserKeyRolesByUserRoleKeyPatch(userKey,userRoleKey,request,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyRolesByUserRoleKeyPatch
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Updates a specific role for a specific user.
     * 
     */
    public store_apiNskV1UsersByUserKeyRolesByUserRoleKeyPut(userKey: string, userRoleKey: string, request?: UserRoleEditRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UsersByUserKeyRolesByUserRoleKeyPut(userKey,userRoleKey,request,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyRolesByUserRoleKeyPut
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets all roles for a specific user.
     * 
     */
    public store_apiNskV1UsersByUserKeyRolesGet(userKey: string,  headers?: Headers): Promise<Array<UserRole>>
    {
        const response = await apiNskV1UsersByUserKeyRolesGet(userKey,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyRolesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Creates a new role for a specific user.
     * 
     */
    public store_apiNskV1UsersByUserKeyRolesPost(userKey: string, request?: UserRoleCreateRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UsersByUserKeyRolesPost(userKey,request,'body', headers);
        // TODO: Implement apiNskV1UsersByUserKeyRolesPost
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Creates a new user and person (used by agents to create other users).
     * This method is used by agents to create other users (either agents or customers).  Use this method when you want to create both a user and a person at the same time.
     */
    public store_apiNskV1UsersPost(request?: UserCreateRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1UsersPost(request,'body', headers);
        // TODO: Implement apiNskV1UsersPost
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Patches a specific travel document on the specific user&#39;s person.
     * 
     */
    public store_apiNskV2UsersByUserKeyPersonTravelDocumentsByPersonTravelDocumentKeyPatch(userKey: string, personTravelDocumentKey: string, request?: DeltaMapperTravelDocumentEditRequestv2,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV2UsersByUserKeyPersonTravelDocumentsByPersonTravelDocumentKeyPatch(userKey,personTravelDocumentKey,request,'body', headers);
        // TODO: Implement apiNskV2UsersByUserKeyPersonTravelDocumentsByPersonTravelDocumentKeyPatch
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Updates a specific travel document on the specific user&#39;s person.
     * 
     */
    public store_apiNskV2UsersByUserKeyPersonTravelDocumentsByPersonTravelDocumentKeyPut(userKey: string, personTravelDocumentKey: string, request?: TravelDocumentEditRequestv2,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV2UsersByUserKeyPersonTravelDocumentsByPersonTravelDocumentKeyPut(userKey,personTravelDocumentKey,request,'body', headers);
        // TODO: Implement apiNskV2UsersByUserKeyPersonTravelDocumentsByPersonTravelDocumentKeyPut
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Search user records.
     * 
     */
    public store_apiNskV2UsersGet(organizationCode?: string, locationGroupCode?: string, domainCode?: string, username?: string, usernameMatching?: 'StartsWith' | 'EndsWith' | 'Contains' | 'ExactMatch', firstName?: string, firstNameMatching?: 'StartsWith' | 'EndsWith' | 'Contains' | 'ExactMatch', lastName?: string, roleCode?: string, status?: 'Default' | 'Active' | 'Pending' | 'Suspended' | 'Terminated', returnCount?: number, lastIndex?: number,  headers?: Headers): Promise<Array<UserRecord>>
    {
        const response = await apiNskV2UsersGet(organizationCode,locationGroupCode,domainCode,username,usernameMatching,firstName,firstNameMatching,lastName,roleCode,status,returnCount,lastIndex,'body', headers);
        // TODO: Implement apiNskV2UsersGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Creates a new user for a person (used by agents to create other users).
     * This method is used by agents to create other users (either agents or customers) and connect them with an existing  person.  Use this method when a person already exists and you want to create a user for them.
     */
    public store_apiNskV2UsersPost(request?: UserCreateRequestv2,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV2UsersPost(request,'body', headers);
        // TODO: Implement apiNskV2UsersPost
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }

}
