/**
 * API - Current Routes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: trunk
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from "rxjs/Observable";
import { map, toPromise } from "rxjs";
import IHttpClient from "../IHttpClient";
import { inject, injectable } from "inversify";
import { Headers } from "../Headers";
import HttpResponse from "../HttpResponse";
import {
    Account 
    ActivityProduct 
    AddOn 
    AddOnAllowedPayments 
    AddOnSettings 
    AutoAssignRequest 
    Booking 
    BookingComment 
    BookingMessageHistory 
    BookingNotificationHistory 
    BookingPointOfSaleEditRequest 
    BookingQueueRequest 
    BundleAvailability 
    BundleAvailabilityRequest 
    CarProduct 
    CommitPassengerFeeRequest 
    CommitRequestv2 
    Consumer 
    DeltaMapperBookingPointOfSaleEditRequest 
    DeltaMapperConsumer 
    DeltaMapperOrderParticipantUpdateRequest 
    DeltaMapperRecordLocatorEditRequest 
    DivideRequestv2 
    FareOverrideRequest 
    FareRule 
    FeeRequestBase 
    FlightMoveHistoryResponse 
    HistoryResponse 
    HotelProduct 
    IActionResult 
    IJsonResponse 
    InlineResponse200 
    InlineResponse2001 
    InlineResponse2002 
    InsuranceProduct 
    OrderParticipantUpdateRequest 
    OrderPaymentBase 
    PreCancelDetail 
    PromotionRequest 
    RecordLocator 
    RecordLocatorCreateRequest 
    RecordLocatorEditRequest 
    SeatAssignmentHistoryResponse 
    SeatMapAvailability 
    SegmentChangeHistoryResponse 
    SellInsuranceRequest 
    ServiceCharge 
    Transaction 
} from 'api-models';

import {
        apiNskV1BookingAccountCollectionByAccountCollectionKeyTransactionsGet
        apiNskV1BookingAccountGet
        apiNskV1BookingAccountTransactionsGet
        apiNskV1BookingAddOnsActivitiesGet
        apiNskV1BookingAddOnsCarsGet
        apiNskV1BookingAddOnsHotelsGet
        apiNskV1BookingAddOnsInsuranceGet
        apiNskV1BookingAddOnsInsurancePost
        apiNskV1BookingAddonsByAddOnKeyCustomerPatch
        apiNskV1BookingAddonsByAddOnKeyCustomerPut
        apiNskV1BookingAddonsByAddOnKeyDelete
        apiNskV1BookingAddonsByAddOnKeyGet
        apiNskV1BookingAddonsByAddOnKeyParticipantsByParticipantKeyPatch
        apiNskV1BookingAddonsByAddOnKeyParticipantsByParticipantKeyPut
        apiNskV1BookingAddonsByAddOnKeyPaymentsGet
        apiNskV1BookingAddonsByAddOnKeyPaymentsPost
        apiNskV1BookingAddonsByAddOnKeyPreCancelGet
        apiNskV1BookingAddonsByAddOnKeySyncPut
        apiNskV1BookingAddonsByAddOnKeyValidationGet
        apiNskV1BookingAddonsGet
        apiNskV1BookingAddonsPaymentsGet
        apiNskV1BookingBaggageAllowancesGet
        apiNskV1BookingBundleAvailabilityPost
        apiNskV1BookingCommentsGet
        apiNskV1BookingFareOverrideJourneyByJourneyKeyPost
        apiNskV1BookingFareRulesFareByFareKeyGet
        apiNskV1BookingFareRulesGet
        apiNskV1BookingFareRulesJourneyByJourneyKeyGet
        apiNskV1BookingFareRulesSegmentBySegmentKeyGet
        apiNskV1BookingFeeByFeeKeyDelete
        apiNskV1BookingFeeByFeeKeyPut
        apiNskV1BookingFeeGet
        apiNskV1BookingFeePost
        apiNskV1BookingGet
        apiNskV1BookingHistoryFlightMoveGet
        apiNskV1BookingHistoryGet
        apiNskV1BookingHistoryMessageGet
        apiNskV1BookingHistoryNotificationGet
        apiNskV1BookingHistorySeatAssignmentGet
        apiNskV1BookingHistorySegmentChangeGet
        apiNskV1BookingPointOfSalePatch
        apiNskV1BookingPointOfSalePut
        apiNskV1BookingPromotionDelete
        apiNskV1BookingPromotionPost
        apiNskV1BookingPromotionPut
        apiNskV1BookingQueueDelete
        apiNskV1BookingQueuePost
        apiNskV1BookingRecordLocatorsByRecordLocatorKeyDelete
        apiNskV1BookingRecordLocatorsByRecordLocatorKeyGet
        apiNskV1BookingRecordLocatorsByRecordLocatorKeyPatch
        apiNskV1BookingRecordLocatorsByRecordLocatorKeyPut
        apiNskV1BookingRecordLocatorsDelete
        apiNskV1BookingRecordLocatorsGet
        apiNskV1BookingRecordLocatorsPost
        apiNskV1BookingResetDelete
        apiNskV1BookingSalesChannelPut
        apiNskV1BookingSeatsAutoByPrimaryPassengerKeyJourneyByJourneyKeyPost
        apiNskV1BookingSeatsAutoByPrimaryPassengerKeyPost
        apiNskV1BookingSeatsAutoByPrimaryPassengerKeySegmentBySegmentKeyPost
        apiNskV1BookingSegmentsBySegmentKeyDelete
        apiNskV2BookingCommentsByCommentKeyDelete
        apiNskV2BookingDividePost
        apiNskV2BookingHoldAvailableGet
        apiNskV2BookingSeatmapsGet
        apiNskV2BookingSeatmapsSegmentBySegmentKeyGet
        apiNskV2BookingStatusGet
        apiNskV3BookingPost
        apiNskV3BookingPut
        apiNskV3BookingSeatmapsJourneyByJourneyKeyGet
} from '../base/api'




@injectable()
export class Store_BookingService {

    constructor(@inject("Store") private store: Store<any>) {}

    /**
     * Retrieves the account collection transactions for the booking in state.
     * 
     */
    public store_apiNskV1BookingAccountCollectionByAccountCollectionKeyTransactionsGet(accountCollectionKey: string, startTime: Date, sortByNewest: boolean, endTime?: Date, pageSize?: number, pageIndex?: number,  headers?: Headers): Promise<Array<Transaction>>
    {
        const response = await apiNskV1BookingAccountCollectionByAccountCollectionKeyTransactionsGet(accountCollectionKey,startTime,sortByNewest,endTime,pageSize,pageIndex,'body', headers);
        // TODO: Implement apiNskV1BookingAccountCollectionByAccountCollectionKeyTransactionsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the account and collections for the booking in state.
     * 
     */
    public store_apiNskV1BookingAccountGet( headers?: Headers): Promise<Account>
    {
        const response = await apiNskV1BookingAccountGet('body', headers);
        // TODO: Implement apiNskV1BookingAccountGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves all of the transactions for all of the collections for the booking in state.
     * 
     */
    public store_apiNskV1BookingAccountTransactionsGet(startTime: Date, sortByNewest: boolean, endTime?: Date, pageSize?: number, pageIndex?: number,  headers?: Headers): Promise<Array<Transaction>>
    {
        const response = await apiNskV1BookingAccountTransactionsGet(startTime,sortByNewest,endTime,pageSize,pageIndex,'body', headers);
        // TODO: Implement apiNskV1BookingAccountTransactionsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets default availability using details from the booking in state.  Requires a valid booking in state.
     * 
     */
    public store_apiNskV1BookingAddOnsActivitiesGet(vendorCode?: string, cultureCode?: string,  headers?: Headers): Promise<Array<ActivityProduct>>
    {
        const response = await apiNskV1BookingAddOnsActivitiesGet(vendorCode,cultureCode,'body', headers);
        // TODO: Implement apiNskV1BookingAddOnsActivitiesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets default availability using details from the booking in state.  Requires a valid booking in state.
     * 
     */
    public store_apiNskV1BookingAddOnsCarsGet(vendorCode?: string, cultureCode?: string,  headers?: Headers): Promise<Array<CarProduct>>
    {
        const response = await apiNskV1BookingAddOnsCarsGet(vendorCode,cultureCode,'body', headers);
        // TODO: Implement apiNskV1BookingAddOnsCarsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets default availability using details from the booking in state.  Requires a valid booking in state.
     * 
     */
    public store_apiNskV1BookingAddOnsHotelsGet(vendorCode?: string, cultureCode?: string,  headers?: Headers): Promise<Array<HotelProduct>>
    {
        const response = await apiNskV1BookingAddOnsHotelsGet(vendorCode,cultureCode,'body', headers);
        // TODO: Implement apiNskV1BookingAddOnsHotelsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets default availability using details from the booking in state.  Requires a valid booking in state.
     * 
     */
    public store_apiNskV1BookingAddOnsInsuranceGet(vendorCode?: string, cultureCode?: string,  headers?: Headers): Promise<Array<InsuranceProduct>>
    {
        const response = await apiNskV1BookingAddOnsInsuranceGet(vendorCode,cultureCode,'body', headers);
        // TODO: Implement apiNskV1BookingAddOnsInsuranceGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Sells new insurance items.
     * 
     */
    public store_apiNskV1BookingAddOnsInsurancePost(request?: SellInsuranceRequest,  headers?: Headers): Promise<IActionResult>
    {
        const response = await apiNskV1BookingAddOnsInsurancePost(request,'body', headers);
        // TODO: Implement apiNskV1BookingAddOnsInsurancePost
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Updates an order customer for a specific add-on on the booking.
     * 
     */
    public store_apiNskV1BookingAddonsByAddOnKeyCustomerPatch(addOnKey: string, request?: DeltaMapperConsumer,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1BookingAddonsByAddOnKeyCustomerPatch(addOnKey,request,'body', headers);
        // TODO: Implement apiNskV1BookingAddonsByAddOnKeyCustomerPatch
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Updates an order customer for a specific add-on on the booking.
     * 
     */
    public store_apiNskV1BookingAddonsByAddOnKeyCustomerPut(addOnKey: string, request?: Consumer,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1BookingAddonsByAddOnKeyCustomerPut(addOnKey,request,'body', headers);
        // TODO: Implement apiNskV1BookingAddonsByAddOnKeyCustomerPut
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Deletes a specific add-on on the booking in state.
     * 
     */
    public store_apiNskV1BookingAddonsByAddOnKeyDelete(addOnKey: string,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1BookingAddonsByAddOnKeyDelete(addOnKey,'body', headers);
        // TODO: Implement apiNskV1BookingAddonsByAddOnKeyDelete
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets a specific add-on from the booking in state.
     * 
     */
    public store_apiNskV1BookingAddonsByAddOnKeyGet(addOnKey: string,  headers?: Headers): Promise<AddOn>
    {
        const response = await apiNskV1BookingAddonsByAddOnKeyGet(addOnKey,'body', headers);
        // TODO: Implement apiNskV1BookingAddonsByAddOnKeyGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Updates a single participant for a specific add-on on the booking.
     * 
     */
    public store_apiNskV1BookingAddonsByAddOnKeyParticipantsByParticipantKeyPatch(addOnKey: string, participantKey: string, request?: DeltaMapperOrderParticipantUpdateRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1BookingAddonsByAddOnKeyParticipantsByParticipantKeyPatch(addOnKey,participantKey,request,'body', headers);
        // TODO: Implement apiNskV1BookingAddonsByAddOnKeyParticipantsByParticipantKeyPatch
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Updates a single participant for a specific add-on on the booking.
     * 
     */
    public store_apiNskV1BookingAddonsByAddOnKeyParticipantsByParticipantKeyPut(addOnKey: string, participantKey: string, request?: OrderParticipantUpdateRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1BookingAddonsByAddOnKeyParticipantsByParticipantKeyPut(addOnKey,participantKey,request,'body', headers);
        // TODO: Implement apiNskV1BookingAddonsByAddOnKeyParticipantsByParticipantKeyPut
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets a specific add-on&#39;s allowed payment methods.
     * If the add on&#39;s payment required flag is set to true, this endpoint  will return the allowed payment options for the add on.  If set to  false, null will be returned.
     */
    public store_apiNskV1BookingAddonsByAddOnKeyPaymentsGet(addOnKey: string,  headers?: Headers): Promise<AddOnAllowedPayments>
    {
        const response = await apiNskV1BookingAddonsByAddOnKeyPaymentsGet(addOnKey,'body', headers);
        // TODO: Implement apiNskV1BookingAddonsByAddOnKeyPaymentsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Adds a payment to a specific add-on on the booking.
     * 
     */
    public store_apiNskV1BookingAddonsByAddOnKeyPaymentsPost(addOnKey: string, request?: OrderPaymentBase,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1BookingAddonsByAddOnKeyPaymentsPost(addOnKey,request,'body', headers);
        // TODO: Implement apiNskV1BookingAddonsByAddOnKeyPaymentsPost
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Pre cancels a specific add-on on the booking in state.
     * 
     */
    public store_apiNskV1BookingAddonsByAddOnKeyPreCancelGet(addOnKey: string,  headers?: Headers): Promise<PreCancelDetail>
    {
        const response = await apiNskV1BookingAddonsByAddOnKeyPreCancelGet(addOnKey,'body', headers);
        // TODO: Implement apiNskV1BookingAddonsByAddOnKeyPreCancelGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Syncs the specific add-on on the booking.
     * 
     */
    public store_apiNskV1BookingAddonsByAddOnKeySyncPut(addOnKey: string,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1BookingAddonsByAddOnKeySyncPut(addOnKey,'body', headers);
        // TODO: Implement apiNskV1BookingAddonsByAddOnKeySyncPut
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the field validation for a specific add-on on the booking.
     * 
     */
    public store_apiNskV1BookingAddonsByAddOnKeyValidationGet(addOnKey: string,  headers?: Headers): Promise<AddOnSettings>
    {
        const response = await apiNskV1BookingAddonsByAddOnKeyValidationGet(addOnKey,'body', headers);
        // TODO: Implement apiNskV1BookingAddonsByAddOnKeyValidationGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets all the add-ons on the booking in state.
     * 
     */
    public store_apiNskV1BookingAddonsGet( headers?: Headers): Promise<InlineResponse200>
    {
        const response = await apiNskV1BookingAddonsGet('body', headers);
        // TODO: Implement apiNskV1BookingAddonsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets all the available add-ons allowed payment methods for all the add-ons on the booking in state.
     * 
     */
    public store_apiNskV1BookingAddonsPaymentsGet( headers?: Headers): Promise<InlineResponse2001>
    {
        const response = await apiNskV1BookingAddonsPaymentsGet('body', headers);
        // TODO: Implement apiNskV1BookingAddonsPaymentsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets the baggage allowances for the current booking in state.  Baggage usage details will only be returned if includeUsageDetails  is flagged true AND the allowance behavior is NOT Default.
     * 
     */
    public store_apiNskV1BookingBaggageAllowancesGet(includeUsageDetails?: boolean,  headers?: Headers): Promise<InlineResponse2002>
    {
        const response = await apiNskV1BookingBaggageAllowancesGet(includeUsageDetails,'body', headers);
        // TODO: Implement apiNskV1BookingBaggageAllowancesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the bundle and ssr availability for the booking in-state.
     * Although this endpoint behaves like a GET, POST reduces the limitations resulting from URL length issues.
     */
    public store_apiNskV1BookingBundleAvailabilityPost(request?: BundleAvailabilityRequest,  headers?: Headers): Promise<Array<BundleAvailability>>
    {
        const response = await apiNskV1BookingBundleAvailabilityPost(request,'body', headers);
        // TODO: Implement apiNskV1BookingBundleAvailabilityPost
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets the list of comments on the in-state booking.
     * 
     */
    public store_apiNskV1BookingCommentsGet( headers?: Headers): Promise<Array<BookingComment>>
    {
        const response = await apiNskV1BookingCommentsGet('body', headers);
        // TODO: Implement apiNskV1BookingCommentsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Replaces an existing fare price with an amount specified.
     * 
     */
    public store_apiNskV1BookingFareOverrideJourneyByJourneyKeyPost(journeyKey: string, request?: FareOverrideRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1BookingFareOverrideJourneyByJourneyKeyPost(journeyKey,request,'body', headers);
        // TODO: Implement apiNskV1BookingFareOverrideJourneyByJourneyKeyPost
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves a fare rule from the current booking in state based on  the specific fare key.
     * 
     */
    public store_apiNskV1BookingFareRulesFareByFareKeyGet(fareKey: string,  headers?: Headers): Promise<FareRule>
    {
        const response = await apiNskV1BookingFareRulesFareByFareKeyGet(fareKey,'body', headers);
        // TODO: Implement apiNskV1BookingFareRulesFareByFareKeyGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of all fare rules from the current booking in state.
     * 
     */
    public store_apiNskV1BookingFareRulesGet( headers?: Headers): Promise<Array<FareRule>>
    {
        const response = await apiNskV1BookingFareRulesGet('body', headers);
        // TODO: Implement apiNskV1BookingFareRulesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of all fare rules from the current booking in state  for the specific journey key.
     * 
     */
    public store_apiNskV1BookingFareRulesJourneyByJourneyKeyGet(journeyKey: string,  headers?: Headers): Promise<Array<FareRule>>
    {
        const response = await apiNskV1BookingFareRulesJourneyByJourneyKeyGet(journeyKey,'body', headers);
        // TODO: Implement apiNskV1BookingFareRulesJourneyByJourneyKeyGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of all fare rules from the current booking in state for the specific segment key.
     * 
     */
    public store_apiNskV1BookingFareRulesSegmentBySegmentKeyGet(segmentKey: string,  headers?: Headers): Promise<Array<FareRule>>
    {
        const response = await apiNskV1BookingFareRulesSegmentBySegmentKeyGet(segmentKey,'body', headers);
        // TODO: Implement apiNskV1BookingFareRulesSegmentBySegmentKeyGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Deletes a fee.
     * 
     */
    public store_apiNskV1BookingFeeByFeeKeyDelete(feeKey: string,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1BookingFeeByFeeKeyDelete(feeKey,'body', headers);
        // TODO: Implement apiNskV1BookingFeeByFeeKeyDelete
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Overrides a fee amount.
     * 
     */
    public store_apiNskV1BookingFeeByFeeKeyPut(feeKey: string, request?: FeeRequestBase,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1BookingFeeByFeeKeyPut(feeKey,request,'body', headers);
        // TODO: Implement apiNskV1BookingFeeByFeeKeyPut
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets the fee price.
     * Only service and penalty fee types support a price that is configured by the booking in state.  Depending on the configuration, the passenger key will be needed.  For other fee types the price amount is manually provided.
     */
    public store_apiNskV1BookingFeeGet(feeCode: string, passengerKey?: string, origin?: string, collectedCurrencyCode?: string,  headers?: Headers): Promise<Array<ServiceCharge>>
    {
        const response = await apiNskV1BookingFeeGet(feeCode,passengerKey,origin,collectedCurrencyCode,'body', headers);
        // TODO: Implement apiNskV1BookingFeeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Manually adds a new fee.
     * Penalty fees, spoilage fees, and service fees can be created manually. Other types are automatically created by  the system.  Depending on the configuration, the passenger key will be needed.
     */
    public store_apiNskV1BookingFeePost(request?: CommitPassengerFeeRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1BookingFeePost(request,'body', headers);
        // TODO: Implement apiNskV1BookingFeePost
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Get the current booking in state.
     * 
     */
    public store_apiNskV1BookingGet( headers?: Headers): Promise<Booking>
    {
        const response = await apiNskV1BookingGet('body', headers);
        // TODO: Implement apiNskV1BookingGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets the current flight move history in state.
     * 
     */
    public store_apiNskV1BookingHistoryFlightMoveGet(lastPageKey?: string, pageSize?: number,  headers?: Headers): Promise<FlightMoveHistoryResponse>
    {
        const response = await apiNskV1BookingHistoryFlightMoveGet(lastPageKey,pageSize,'body', headers);
        // TODO: Implement apiNskV1BookingHistoryFlightMoveGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets the current booking history in state.
     * 
     */
    public store_apiNskV1BookingHistoryGet(event?: 'Unknown' | 'ConvertedHistory' | 'FlightTimeChange' | 'FlightDesignatorChange' | 'AssignedSeat' | 'RemoveSeat' | 'AddedFlight' | 'DeletedFlight' | 'DeletedPassenger' | 'NameChange' | 'GroupNameChange' | 'CancelledTicketing' | 'ScheduleChange' | 'AddedPayment' | 'ServiceFee' | 'QueuedPnr' | 'UnqueuedPnr' | 'DeletedComment' | 'Divided' | 'CheckedIn' | 'CheckedOut' | 'FareOverride' | 'AddedBaggage' | 'ChangedBaggageWeight' | 'CheckedBaggage' | 'RemovedBaggage' | 'BoardedPassenger' | 'UnboardedPassenger' | 'ManualAuthorization' | 'ManualDecline' | 'UndoCancel' | 'ItinerarySent' | 'ContactChange' | 'SsrAdded' | 'FlightMoved' | 'VerifiedDocument' | 'RemovedVerifiedDocument' | 'Promotion' | 'BookingComment' | 'CancelledSchedule' | 'CancelServiceFee' | 'OverrideServiceFee' | 'AddedRecordLocator' | 'DeletedRecordLocator' | 'UpgradeClassOfService' | 'DowngradeClassOfService' | 'StandbyPriorityChange' | 'AssignedTicketNumber' | 'DeletedTicketNumber' | 'ConfirmSegmentStatusCodeChange' | 'CodeshareFlightChanged' | 'PdsCancel' | 'PdsPending' | 'PdsConfirm' | 'PdsFinalized' | 'PdsDeclined' | 'PdsException' | 'PdsCancelRefused' | 'PdsCancelUnsuccessful' | 'Apps' | 'InhibitedOverride' | 'PrintedBagTag' | 'SelfPrintedBagTag' | 'PrintedBoardingPass' | 'AddCustomerId' | 'DeleteCustomerId' | 'HoldCreated' | 'HoldRemoved' | 'HoldChanged' | 'OverrideCoupon' | 'PdsSynchronized' | 'PdsItemremoved' | 'Reprice' | 'ChannelOverride' | 'EmdCreated' | 'EmdRemoved' | 'EmdChanged' | 'ServiceBundle' | 'PublishedFareOverride' | 'FareClassRealignment', lastPageKey?: string, pageSize?: number,  headers?: Headers): Promise<HistoryResponse>
    {
        const response = await apiNskV1BookingHistoryGet(event,lastPageKey,pageSize,'body', headers);
        // TODO: Implement apiNskV1BookingHistoryGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets the current message history in state.
     * 
     */
    public store_apiNskV1BookingHistoryMessageGet( headers?: Headers): Promise<Array<BookingMessageHistory>>
    {
        const response = await apiNskV1BookingHistoryMessageGet('body', headers);
        // TODO: Implement apiNskV1BookingHistoryMessageGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets the current notification history in state.
     * 
     */
    public store_apiNskV1BookingHistoryNotificationGet( headers?: Headers): Promise<Array<BookingNotificationHistory>>
    {
        const response = await apiNskV1BookingHistoryNotificationGet('body', headers);
        // TODO: Implement apiNskV1BookingHistoryNotificationGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets the current seat assignment history in state.
     * 
     */
    public store_apiNskV1BookingHistorySeatAssignmentGet(event: 'AssignedSeat' | 'RemoveSeat', lastPageKey?: string, pageSize?: number,  headers?: Headers): Promise<SeatAssignmentHistoryResponse>
    {
        const response = await apiNskV1BookingHistorySeatAssignmentGet(event,lastPageKey,pageSize,'body', headers);
        // TODO: Implement apiNskV1BookingHistorySeatAssignmentGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets the current segment change history in state.
     * 
     */
    public store_apiNskV1BookingHistorySegmentChangeGet(event: 'AddedFlight' | 'DeletedFlight', lastPageKey?: string, pageSize?: number,  headers?: Headers): Promise<SegmentChangeHistoryResponse>
    {
        const response = await apiNskV1BookingHistorySegmentChangeGet(event,lastPageKey,pageSize,'body', headers);
        // TODO: Implement apiNskV1BookingHistorySegmentChangeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Updates the booking point of sale.
     * The ISO country code cannot be updated for a committed booking.  This value can only be  updated on an uncommitted booking.
     */
    public store_apiNskV1BookingPointOfSalePatch(request?: DeltaMapperBookingPointOfSaleEditRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1BookingPointOfSalePatch(request,'body', headers);
        // TODO: Implement apiNskV1BookingPointOfSalePatch
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Updates the booking point of sale.
     * The ISO country code cannot be updated for a committed booking.  This value can only be  updated on an uncommitted booking.
     */
    public store_apiNskV1BookingPointOfSalePut(request?: BookingPointOfSaleEditRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1BookingPointOfSalePut(request,'body', headers);
        // TODO: Implement apiNskV1BookingPointOfSalePut
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Deletes the promotion code on the booking in state.
     * 
     */
    public store_apiNskV1BookingPromotionDelete( headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1BookingPromotionDelete('body', headers);
        // TODO: Implement apiNskV1BookingPromotionDelete
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Sets a promotion code to a booking in state.
     * 
     */
    public store_apiNskV1BookingPromotionPost(request?: PromotionRequest,  headers?: Headers): Promise<any>
    {
        const response = await apiNskV1BookingPromotionPost(request,'body', headers);
        // TODO: Implement apiNskV1BookingPromotionPost
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Updates a promotion code to a booking in state.
     * 
     */
    public store_apiNskV1BookingPromotionPut(request?: PromotionRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1BookingPromotionPut(request,'body', headers);
        // TODO: Implement apiNskV1BookingPromotionPut
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Removes the booking in state from a booking queue.
     * 
     */
    public store_apiNskV1BookingQueueDelete(request?: BookingQueueRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1BookingQueueDelete(request,'body', headers);
        // TODO: Implement apiNskV1BookingQueueDelete
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Adds the booking from state to a booking queue.
     * 
     */
    public store_apiNskV1BookingQueuePost(request?: BookingQueueRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1BookingQueuePost(request,'body', headers);
        // TODO: Implement apiNskV1BookingQueuePost
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Deletes a record locator from the booking.
     * 
     */
    public store_apiNskV1BookingRecordLocatorsByRecordLocatorKeyDelete(recordLocatorKey: string,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1BookingRecordLocatorsByRecordLocatorKeyDelete(recordLocatorKey,'body', headers);
        // TODO: Implement apiNskV1BookingRecordLocatorsByRecordLocatorKeyDelete
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets the record locator associated with the record locator key for  the in-state booking.
     * 
     */
    public store_apiNskV1BookingRecordLocatorsByRecordLocatorKeyGet(recordLocatorKey: string,  headers?: Headers): Promise<RecordLocator>
    {
        const response = await apiNskV1BookingRecordLocatorsByRecordLocatorKeyGet(recordLocatorKey,'body', headers);
        // TODO: Implement apiNskV1BookingRecordLocatorsByRecordLocatorKeyGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Patches the data of a third party record locator on the booking.
     * 
     */
    public store_apiNskV1BookingRecordLocatorsByRecordLocatorKeyPatch(recordLocatorKey: string, request?: DeltaMapperRecordLocatorEditRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1BookingRecordLocatorsByRecordLocatorKeyPatch(recordLocatorKey,request,'body', headers);
        // TODO: Implement apiNskV1BookingRecordLocatorsByRecordLocatorKeyPatch
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Replaces the data of a third party record locator on the booking.
     * 
     */
    public store_apiNskV1BookingRecordLocatorsByRecordLocatorKeyPut(recordLocatorKey: string, request?: RecordLocatorEditRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1BookingRecordLocatorsByRecordLocatorKeyPut(recordLocatorKey,request,'body', headers);
        // TODO: Implement apiNskV1BookingRecordLocatorsByRecordLocatorKeyPut
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Deletes all record locators from the booking.
     * 
     */
    public store_apiNskV1BookingRecordLocatorsDelete( headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1BookingRecordLocatorsDelete('body', headers);
        // TODO: Implement apiNskV1BookingRecordLocatorsDelete
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets all of the record locators on the in-state booking.
     * 
     */
    public store_apiNskV1BookingRecordLocatorsGet( headers?: Headers): Promise<Array<RecordLocator>>
    {
        const response = await apiNskV1BookingRecordLocatorsGet('body', headers);
        // TODO: Implement apiNskV1BookingRecordLocatorsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Adds a third party record locator to the booking.
     * 
     */
    public store_apiNskV1BookingRecordLocatorsPost(request?: RecordLocatorCreateRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1BookingRecordLocatorsPost(request,'body', headers);
        // TODO: Implement apiNskV1BookingRecordLocatorsPost
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Clears the current booking state.
     * 
     */
    public store_apiNskV1BookingResetDelete( headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1BookingResetDelete('body', headers);
        // TODO: Implement apiNskV1BookingResetDelete
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Overrides the effective sales channel for the booking in state.
     * For the overriden channel to be implemented, the booking in state must be committed after calling this endpoint.
     */
    public store_apiNskV1BookingSalesChannelPut(channelType?: 'Direct' | 'Web' | 'Api',  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1BookingSalesChannelPut(channelType,'body', headers);
        // TODO: Implement apiNskV1BookingSalesChannelPut
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Auto assigns seats to all passengers that do not have them for a specific journey.
     * 
     */
    public store_apiNskV1BookingSeatsAutoByPrimaryPassengerKeyJourneyByJourneyKeyPost(primaryPassengerKey: string, journeyKey: string, request?: AutoAssignRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1BookingSeatsAutoByPrimaryPassengerKeyJourneyByJourneyKeyPost(primaryPassengerKey,journeyKey,request,'body', headers);
        // TODO: Implement apiNskV1BookingSeatsAutoByPrimaryPassengerKeyJourneyByJourneyKeyPost
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Auto assigns seats to all selected passengers that do not have them for every journey on the booking.
     * 
     */
    public store_apiNskV1BookingSeatsAutoByPrimaryPassengerKeyPost(primaryPassengerKey: string, request?: AutoAssignRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1BookingSeatsAutoByPrimaryPassengerKeyPost(primaryPassengerKey,request,'body', headers);
        // TODO: Implement apiNskV1BookingSeatsAutoByPrimaryPassengerKeyPost
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Auto assigns seats to all passengers that do not have them for a specific journey&#39;s segment.
     * 
     */
    public store_apiNskV1BookingSeatsAutoByPrimaryPassengerKeySegmentBySegmentKeyPost(primaryPassengerKey: string, segmentKey: string, request?: AutoAssignRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1BookingSeatsAutoByPrimaryPassengerKeySegmentBySegmentKeyPost(primaryPassengerKey,segmentKey,request,'body', headers);
        // TODO: Implement apiNskV1BookingSeatsAutoByPrimaryPassengerKeySegmentBySegmentKeyPost
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Cancels the specific segment from the booking in state.
     * Calling this method will alter the existing journeyKey. If you are cancelling the only segment in a journey,  this method will behave the same as calling DELETE on /api/nsk/v1/booking/journeys/{journeyKey}.   If there are segments remaining after the delete, the Location response header will be set with   the location of the modified journey with its new key.
     */
    public store_apiNskV1BookingSegmentsBySegmentKeyDelete(segmentKey: string,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1BookingSegmentsBySegmentKeyDelete(segmentKey,'body', headers);
        // TODO: Implement apiNskV1BookingSegmentsBySegmentKeyDelete
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Deletes a comment from the booking.
     * 
     */
    public store_apiNskV2BookingCommentsByCommentKeyDelete(commentKey: string,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV2BookingCommentsByCommentKeyDelete(commentKey,'body', headers);
        // TODO: Implement apiNskV2BookingCommentsByCommentKeyDelete
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Divides the current booking.
     * A valid user must be logged in to divide a booking.
     */
    public store_apiNskV2BookingDividePost(request?: DivideRequestv2,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV2BookingDividePost(request,'body', headers);
        // TODO: Implement apiNskV2BookingDividePost
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the recommended hold date if hold is available.
     * 
     */
    public store_apiNskV2BookingHoldAvailableGet( headers?: Headers): Promise<Date>
    {
        const response = await apiNskV2BookingHoldAvailableGet('body', headers);
        // TODO: Implement apiNskV2BookingHoldAvailableGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets the list of seat maps for all the journeys for the booking in state.
     * 
     */
    public store_apiNskV2BookingSeatmapsGet(includePropertyLookup?: boolean, cultureCode?: string,  headers?: Headers): Promise<Array<SeatMapAvailability>>
    {
        const response = await apiNskV2BookingSeatmapsGet(includePropertyLookup,cultureCode,'body', headers);
        // TODO: Implement apiNskV2BookingSeatmapsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets the list of seat maps for a specific journey&#39;s segment.
     * 
     */
    public store_apiNskV2BookingSeatmapsSegmentBySegmentKeyGet(segmentKey: string, includePropertyLookup?: boolean, cultureCode?: string,  headers?: Headers): Promise<Array<SeatMapAvailability>>
    {
        const response = await apiNskV2BookingSeatmapsSegmentBySegmentKeyGet(segmentKey,includePropertyLookup,cultureCode,'body', headers);
        // TODO: Implement apiNskV2BookingSeatmapsSegmentBySegmentKeyGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets the status of the booking commit and returns the booking.
     * There are certain booking data that are not saved to state, such as payment   attachments. This endpoint will return the booking data so that non persisted   information is returned when and only when the status code is 200. This is the   only time the data will be available.
     */
    public store_apiNskV2BookingStatusGet( headers?: Headers): Promise<Booking>
    {
        const response = await apiNskV2BookingStatusGet('body', headers);
        // TODO: Implement apiNskV2BookingStatusGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Commits stateful changes made and processes the booking.
     * 
     */
    public store_apiNskV3BookingPost(request?: CommitRequestv2,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV3BookingPost(request,'body', headers);
        // TODO: Implement apiNskV3BookingPost
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Commits stateful changes made and processes the booking.
     * 
     */
    public store_apiNskV3BookingPut(request?: CommitRequestv2,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV3BookingPut(request,'body', headers);
        // TODO: Implement apiNskV3BookingPut
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets the list of seat maps for an entire journey.
     * 
     */
    public store_apiNskV3BookingSeatmapsJourneyByJourneyKeyGet(journeyKey: string, includePropertyLookup?: boolean, cultureCode?: string,  headers?: Headers): Promise<Array<SeatMapAvailability>>
    {
        const response = await apiNskV3BookingSeatmapsJourneyByJourneyKeyGet(journeyKey,includePropertyLookup,cultureCode,'body', headers);
        // TODO: Implement apiNskV3BookingSeatmapsJourneyByJourneyKeyGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }

}
