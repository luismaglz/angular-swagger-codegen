/**
 * API - Current Routes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: trunk
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from "rxjs/Observable";
import { map, toPromise } from "rxjs";
import IHttpClient from "../IHttpClient";
import { inject, injectable } from "inversify";
import { Headers } from "../Headers";
import HttpResponse from "../HttpResponse";
import {
    IJsonResponse, 
    MessageBase, 
} from 'api-models';

import {
        apiNskV1MessagesByMessageKeyDelete,
        apiNskV1MessagesByMessageKeyGet,
        apiNskV1MessagesGet,
        apiNskV1MessagesPost,
} from '../base/api'




@injectable()
export class StoreMessagesService {

    constructor(@inject("Store") private store: Store<any>) {}

    /**
     * Deletes a message item.
     * 
     */
    public store_apiNskV1MessagesByMessageKeyDelete(messageKey: string,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1MessagesByMessageKeyDelete(messageKey,'body', headers);
        // TODO: Implement apiNskV1MessagesByMessageKeyDelete
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves a specific message item.
     * 
     */
    public store_apiNskV1MessagesByMessageKeyGet(messageKey: string,  headers?: Headers): Promise<MessageBase>
    {
        const response = await apiNskV1MessagesByMessageKeyGet(messageKey,'body', headers);
        // TODO: Implement apiNskV1MessagesByMessageKeyGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves a collection of messages based on search criteria.
     * 
     */
    public store_apiNskV1MessagesGet(searchType: 'StartsWith' | 'EndsWith' | 'Contains' | 'ExactMatch', messageTypeCode?: string, searchStartDate?: Date, searchEndDate?: Date, pageSize?: number, lastIndex?: number, searchValue?: string,  headers?: Headers): Promise<Array<MessageBase>>
    {
        const response = await apiNskV1MessagesGet(searchType,messageTypeCode,searchStartDate,searchEndDate,pageSize,lastIndex,searchValue,'body', headers);
        // TODO: Implement apiNskV1MessagesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Adds a new message item.
     * 
     */
    public store_apiNskV1MessagesPost(request?: MessageBase,  headers?: Headers): Promise<MessageBase>
    {
        const response = await apiNskV1MessagesPost(request,'body', headers);
        // TODO: Implement apiNskV1MessagesPost
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }

}
