/**
 * API - Current Routes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: trunk
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';
import { inject, injectable } from 'inversify';
import { Store } from 'redux';
import {
  AgencyCreationSettings,
  BookingPaymentSettingsv2,
  CheckInSettings,
  CodesSettings,
  ContactSettings,
  CustomerAccountSettings,
  CustomerCreationSettings,
  FeeSettings,
  FlightSearchSettings,
  GeneralSettings,
  IJsonResponse,
  ItinerarySettings,
  LogonSettings,
  PassengerSettings,
  PaymentSettings,
  PremiumServicesSettingsv2,
  ReserveFlightsSettings,
  SessionSettings,
  SkySpeedSettingsv2
} from 'api-models';

import { SettingsService } from '../../base/api/index';

import { IHttpClient } from '../../base/IHttpClient';
import { IAPIConfiguration } from '../../base/IAPIConfiguration';
import { HttpResponse } from '../../base/HttpResponse';
import { Headers } from '../../base/Headers';

@injectable()
export class StoreSettingsService {
  constructor(
    @inject('Store') protected store: Store<any>,
    @inject('SettingsService') protected baseService: SettingsService
  ) {}

  /**
   * Get the checkin settings.
   *
   */
  public async store_apiNskV1SettingsBookingCheckinGet(
    eTag?: string,
    roleCode?: string,
    headers?: Headers
  ): Promise<CheckInSettings> {
    const response = await this.baseService
      .apiNskV1SettingsBookingCheckinGet(eTag, roleCode, 'body', headers)
      .toPromise();
    // TODO: Implement apiNskV1SettingsBookingCheckinGet
    // addResponsetoStore(this.store, response.data, true, true);
    return response;
  }

  /**
   * Get the contact settings.
   *
   */
  public async store_apiNskV1SettingsBookingContactGet(
    eTag?: string,
    roleCode?: string,
    headers?: Headers
  ): Promise<ContactSettings> {
    const response = await this.baseService
      .apiNskV1SettingsBookingContactGet(eTag, roleCode, 'body', headers)
      .toPromise();
    // TODO: Implement apiNskV1SettingsBookingContactGet
    // addResponsetoStore(this.store, response.data, true, true);
    return response;
  }

  /**
   * Get the custom account settings.
   *
   */
  public async store_apiNskV1SettingsBookingCustomerAccountGet(
    eTag?: string,
    roleCode?: string,
    headers?: Headers
  ): Promise<CustomerAccountSettings> {
    const response = await this.baseService
      .apiNskV1SettingsBookingCustomerAccountGet(
        eTag,
        roleCode,
        'body',
        headers
      )
      .toPromise();
    // TODO: Implement apiNskV1SettingsBookingCustomerAccountGet
    // addResponsetoStore(this.store, response.data, true, true);
    return response;
  }

  /**
   * Get the fee settings.
   *
   */
  public async store_apiNskV1SettingsBookingFeeGet(
    eTag?: string,
    roleCode?: string,
    headers?: Headers
  ): Promise<FeeSettings> {
    const response = await this.baseService
      .apiNskV1SettingsBookingFeeGet(eTag, roleCode, 'body', headers)
      .toPromise();
    // TODO: Implement apiNskV1SettingsBookingFeeGet
    // addResponsetoStore(this.store, response.data, true, true);
    return response;
  }

  /**
   * Get the flight search settings.
   *
   */
  public async store_apiNskV1SettingsBookingFlightSearchGet(
    eTag?: string,
    roleCode?: string,
    headers?: Headers
  ): Promise<FlightSearchSettings> {
    const response = await this.baseService
      .apiNskV1SettingsBookingFlightSearchGet(eTag, roleCode, 'body', headers)
      .toPromise();
    // TODO: Implement apiNskV1SettingsBookingFlightSearchGet
    // addResponsetoStore(this.store, response.data, true, true);
    return response;
  }

  /**
   * Get the general settings.
   *
   */
  public async store_apiNskV1SettingsBookingGet(
    eTag?: string,
    roleCode?: string,
    headers?: Headers
  ): Promise<GeneralSettings> {
    const response = await this.baseService
      .apiNskV1SettingsBookingGet(eTag, roleCode, 'body', headers)
      .toPromise();
    // TODO: Implement apiNskV1SettingsBookingGet
    // addResponsetoStore(this.store, response.data, true, true);
    return response;
  }

  /**
   * Get the passenger settings.
   *
   */
  public async store_apiNskV1SettingsBookingPassengerGet(
    eTag?: string,
    roleCode?: string,
    headers?: Headers
  ): Promise<PassengerSettings> {
    const response = await this.baseService
      .apiNskV1SettingsBookingPassengerGet(eTag, roleCode, 'body', headers)
      .toPromise();
    // TODO: Implement apiNskV1SettingsBookingPassengerGet
    // addResponsetoStore(this.store, response.data, true, true);
    return response;
  }

  /**
   * Get the reserve flight settings.
   *
   */
  public async store_apiNskV1SettingsBookingReserveFlightsGet(
    eTag?: string,
    roleCode?: string,
    headers?: Headers
  ): Promise<ReserveFlightsSettings> {
    const response = await this.baseService
      .apiNskV1SettingsBookingReserveFlightsGet(eTag, roleCode, 'body', headers)
      .toPromise();
    // TODO: Implement apiNskV1SettingsBookingReserveFlightsGet
    // addResponsetoStore(this.store, response.data, true, true);
    return response;
  }

  /**
   * Retrieves the logon settings.
   *
   */
  public async store_apiNskV1SettingsGeneralApplicationLogonGet(
    eTag?: string,
    roleCode?: string,
    headers?: Headers
  ): Promise<LogonSettings> {
    const response = await this.baseService
      .apiNskV1SettingsGeneralApplicationLogonGet(
        eTag,
        roleCode,
        'body',
        headers
      )
      .toPromise();
    // TODO: Implement apiNskV1SettingsGeneralApplicationLogonGet
    // addResponsetoStore(this.store, response.data, true, true);
    return response;
  }

  /**
   * Retrieves the codes settings.
   *
   */
  public async store_apiNskV1SettingsGeneralCodesGet(
    eTag?: string,
    roleCode?: string,
    headers?: Headers
  ): Promise<CodesSettings> {
    const response = await this.baseService
      .apiNskV1SettingsGeneralCodesGet(eTag, roleCode, 'body', headers)
      .toPromise();
    // TODO: Implement apiNskV1SettingsGeneralCodesGet
    // addResponsetoStore(this.store, response.data, true, true);
    return response;
  }

  /**
   * Retrieves the session settings.
   *
   */
  public async store_apiNskV1SettingsGeneralSessionGet(
    eTag?: string,
    roleCode?: string,
    headers?: Headers
  ): Promise<SessionSettings> {
    const response = await this.baseService
      .apiNskV1SettingsGeneralSessionGet(eTag, roleCode, 'body', headers)
      .toPromise();
    // TODO: Implement apiNskV1SettingsGeneralSessionGet
    // addResponsetoStore(this.store, response.data, true, true);
    return response;
  }

  /**
   * Retrieves the itinerary settings.
   *
   */
  public async store_apiNskV1SettingsItineraryGet(
    eTag?: string,
    headers?: Headers
  ): Promise<ItinerarySettings> {
    const response = await this.baseService
      .apiNskV1SettingsItineraryGet(eTag, 'body', headers)
      .toPromise();
    // TODO: Implement apiNskV1SettingsItineraryGet
    // addResponsetoStore(this.store, response.data, true, true);
    return response;
  }

  /**
   * Get the non role based payment settings.
   *
   */
  public async store_apiNskV1SettingsPaymentGet(
    eTag?: string,
    headers?: Headers
  ): Promise<PaymentSettings> {
    const response = await this.baseService
      .apiNskV1SettingsPaymentGet(eTag, 'body', headers)
      .toPromise();
    // TODO: Implement apiNskV1SettingsPaymentGet
    // addResponsetoStore(this.store, response.data, true, true);
    return response;
  }

  /**
   * Retrieves the agency creation settings.
   *
   */
  public async store_apiNskV1SettingsUserAgencyCreationGet(
    eTag?: string,
    headers?: Headers
  ): Promise<AgencyCreationSettings> {
    const response = await this.baseService
      .apiNskV1SettingsUserAgencyCreationGet(eTag, 'body', headers)
      .toPromise();
    // TODO: Implement apiNskV1SettingsUserAgencyCreationGet
    // addResponsetoStore(this.store, response.data, true, true);
    return response;
  }

  /**
   * Retrieves the customer creation settings.
   *
   */
  public async store_apiNskV1SettingsUserCustomerCreationGet(
    eTag?: string,
    headers?: Headers
  ): Promise<CustomerCreationSettings> {
    const response = await this.baseService
      .apiNskV1SettingsUserCustomerCreationGet(eTag, 'body', headers)
      .toPromise();
    // TODO: Implement apiNskV1SettingsUserCustomerCreationGet
    // addResponsetoStore(this.store, response.data, true, true);
    return response;
  }

  /**
   * Get the role based booking payment settings.
   *
   */
  public async store_apiNskV2SettingsBookingPaymentGet(
    eTag?: string,
    roleCode?: string,
    headers?: Headers
  ): Promise<BookingPaymentSettingsv2> {
    const response = await this.baseService
      .apiNskV2SettingsBookingPaymentGet(eTag, roleCode, 'body', headers)
      .toPromise();
    // TODO: Implement apiNskV2SettingsBookingPaymentGet
    // addResponsetoStore(this.store, response.data, true, true);
    return response;
  }

  /**
   * Retrieves the premium services settings.
   *
   */
  public async store_apiNskV2SettingsPremiumServicesGet(
    eTag?: string,
    headers?: Headers
  ): Promise<PremiumServicesSettingsv2> {
    const response = await this.baseService
      .apiNskV2SettingsPremiumServicesGet(eTag, 'body', headers)
      .toPromise();
    // TODO: Implement apiNskV2SettingsPremiumServicesGet
    // addResponsetoStore(this.store, response.data, true, true);
    return response;
  }

  /**
   * Retrieves the SkySpeed settings.
   *
   */
  public async store_apiNskV2SettingsSkySpeedGet(
    eTag?: string,
    roleCode?: string,
    headers?: Headers
  ): Promise<SkySpeedSettingsv2> {
    const response = await this.baseService
      .apiNskV2SettingsSkySpeedGet(eTag, roleCode, 'body', headers)
      .toPromise();
    // TODO: Implement apiNskV2SettingsSkySpeedGet
    // addResponsetoStore(this.store, response.data, true, true);
    return response;
  }
}
