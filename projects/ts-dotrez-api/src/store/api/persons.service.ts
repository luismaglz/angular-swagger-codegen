/**
 * API - Current Routes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: trunk
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from "rxjs/Observable";
import { map, toPromise } from "rxjs";
import { inject, injectable } from "inversify";

import {
    HttpResponse,
    Headers,
    IHttpClient,
    Account, 
    AccountCollectionRequest, 
    CreateAccountRequest, 
    DeltaMapperPersonAddressEditRequest, 
    DeltaMapperPersonAliasRequest, 
    DeltaMapperPersonCommentRequest, 
    DeltaMapperPersonCustomerProgramEditRequest, 
    DeltaMapperPersonEditRequest, 
    DeltaMapperPersonEmailEditRequest, 
    DeltaMapperPersonInformationEditRequest, 
    DeltaMapperPersonPhoneNumberRequest, 
    DeltaMapperPersonPreferenceEditRequest, 
    DeltaMapperPersonStoredPaymentUpdateRequest, 
    DeltaMapperTravelDocumentEditRequestv2, 
    DeltaMapperTravelNotificationEditRequest, 
    IJsonResponse, 
    NotificationEvent, 
    NotificationEventCreateRequest, 
    NotificationTimedEvent, 
    NotificationTimedEventCreateRequest, 
    NotificationTimedEventEditRequest, 
    Person, 
    PersonAddress, 
    PersonAddressCreateRequest, 
    PersonAddressEditRequest, 
    PersonAlias, 
    PersonAliasRequest, 
    PersonComment, 
    PersonCommentRequest, 
    PersonCreateRequest, 
    PersonCustomerProgram, 
    PersonCustomerProgramCreateRequest, 
    PersonCustomerProgramEditRequest, 
    PersonEditRequest, 
    PersonEmail, 
    PersonEmailCreateRequest, 
    PersonEmailEditRequest, 
    PersonInformation, 
    PersonInformationCreateRequest, 
    PersonInformationEditRequest, 
    PersonPhoneNumber, 
    PersonPhoneNumberRequest, 
    PersonPreference, 
    PersonPreferenceCreateRequest, 
    PersonPreferenceEditRequest, 
    PersonRecord, 
    PersonStoredPayment, 
    PersonStoredPaymentRequest, 
    PersonTravelDocument, 
    PersonTravelDocumentRequest, 
    Transaction, 
    TransactionRequest, 
    TravelDocumentEditRequestv2, 
    TravelNotification, 
    TravelNotificationCreateRequest, 
    TravelNotificationEditRequest, 
} from 'api-models';

import {
        apiNskV1PersonsByPersonKeyAccountCollectionByAccountCollectionKeyTransactionsGet,
        apiNskV1PersonsByPersonKeyAccountCollectionByAccountCollectionKeyTransactionsPost,
        apiNskV1PersonsByPersonKeyAccountCollectionPost,
        apiNskV1PersonsByPersonKeyAccountGet,
        apiNskV1PersonsByPersonKeyAccountPost,
        apiNskV1PersonsByPersonKeyAccountStatusPut,
        apiNskV1PersonsByPersonKeyAccountTransactionsGet,
        apiNskV1PersonsByPersonKeyAddressesByPersonAddressKeyDelete,
        apiNskV1PersonsByPersonKeyAddressesByPersonAddressKeyGet,
        apiNskV1PersonsByPersonKeyAddressesByPersonAddressKeyPatch,
        apiNskV1PersonsByPersonKeyAddressesByPersonAddressKeyPut,
        apiNskV1PersonsByPersonKeyAddressesGet,
        apiNskV1PersonsByPersonKeyAddressesPost,
        apiNskV1PersonsByPersonKeyAliasesByPersonAliasKeyDelete,
        apiNskV1PersonsByPersonKeyAliasesByPersonAliasKeyGet,
        apiNskV1PersonsByPersonKeyAliasesByPersonAliasKeyPatch,
        apiNskV1PersonsByPersonKeyAliasesByPersonAliasKeyPut,
        apiNskV1PersonsByPersonKeyAliasesGet,
        apiNskV1PersonsByPersonKeyAliasesPost,
        apiNskV1PersonsByPersonKeyCommentsByPersonCommentKeyDelete,
        apiNskV1PersonsByPersonKeyCommentsByPersonCommentKeyGet,
        apiNskV1PersonsByPersonKeyCommentsByPersonCommentKeyPatch,
        apiNskV1PersonsByPersonKeyCommentsByPersonCommentKeyPut,
        apiNskV1PersonsByPersonKeyCommentsGet,
        apiNskV1PersonsByPersonKeyCommentsPost,
        apiNskV1PersonsByPersonKeyDelete,
        apiNskV1PersonsByPersonKeyEmailsByPersonEmailAddressKeyDelete,
        apiNskV1PersonsByPersonKeyEmailsByPersonEmailAddressKeyGet,
        apiNskV1PersonsByPersonKeyEmailsByPersonEmailAddressKeyPatch,
        apiNskV1PersonsByPersonKeyEmailsByPersonEmailAddressKeyPut,
        apiNskV1PersonsByPersonKeyEmailsGet,
        apiNskV1PersonsByPersonKeyEmailsPost,
        apiNskV1PersonsByPersonKeyGet,
        apiNskV1PersonsByPersonKeyInformationByPersonInformationKeyDelete,
        apiNskV1PersonsByPersonKeyInformationByPersonInformationKeyGet,
        apiNskV1PersonsByPersonKeyInformationByPersonInformationKeyPatch,
        apiNskV1PersonsByPersonKeyInformationByPersonInformationKeyPut,
        apiNskV1PersonsByPersonKeyInformationGet,
        apiNskV1PersonsByPersonKeyInformationPost,
        apiNskV1PersonsByPersonKeyPatch,
        apiNskV1PersonsByPersonKeyPhoneNumbersByPersonPhoneNumberKeyDelete,
        apiNskV1PersonsByPersonKeyPhoneNumbersByPersonPhoneNumberKeyGet,
        apiNskV1PersonsByPersonKeyPhoneNumbersByPersonPhoneNumberKeyPatch,
        apiNskV1PersonsByPersonKeyPhoneNumbersByPersonPhoneNumberKeyPut,
        apiNskV1PersonsByPersonKeyPhoneNumbersGet,
        apiNskV1PersonsByPersonKeyPhoneNumbersPost,
        apiNskV1PersonsByPersonKeyPreferencesByPersonPreferenceKeyDelete,
        apiNskV1PersonsByPersonKeyPreferencesByPersonPreferenceKeyGet,
        apiNskV1PersonsByPersonKeyPreferencesByPersonPreferenceKeyPatch,
        apiNskV1PersonsByPersonKeyPreferencesByPersonPreferenceKeyPut,
        apiNskV1PersonsByPersonKeyPreferencesGet,
        apiNskV1PersonsByPersonKeyPreferencesPost,
        apiNskV1PersonsByPersonKeyProgramsByPersonProgramKeyDelete,
        apiNskV1PersonsByPersonKeyProgramsByPersonProgramKeyGet,
        apiNskV1PersonsByPersonKeyProgramsByPersonProgramKeyPatch,
        apiNskV1PersonsByPersonKeyProgramsByPersonProgramKeyPut,
        apiNskV1PersonsByPersonKeyProgramsGet,
        apiNskV1PersonsByPersonKeyProgramsPost,
        apiNskV1PersonsByPersonKeyPut,
        apiNskV1PersonsByPersonKeyStoredPaymentsByPersonStoredPaymentKeyDelete,
        apiNskV1PersonsByPersonKeyStoredPaymentsByPersonStoredPaymentKeyGet,
        apiNskV1PersonsByPersonKeyStoredPaymentsByPersonStoredPaymentKeyPatch,
        apiNskV1PersonsByPersonKeyStoredPaymentsByPersonStoredPaymentKeyPut,
        apiNskV1PersonsByPersonKeyStoredPaymentsGet,
        apiNskV1PersonsByPersonKeyStoredPaymentsPost,
        apiNskV1PersonsByPersonKeyTravelDocumentsByPersonTravelDocumentKeyDelete,
        apiNskV1PersonsByPersonKeyTravelDocumentsByPersonTravelDocumentKeyGet,
        apiNskV1PersonsByPersonKeyTravelDocumentsGet,
        apiNskV1PersonsByPersonKeyTravelDocumentsPost,
        apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyDelete,
        apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyEventsByEventTypeDelete,
        apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyEventsByEventTypeGet,
        apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyEventsGet,
        apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyEventsPost,
        apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyGet,
        apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyPatch,
        apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyPut,
        apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeDelete,
        apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeGet,
        apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypePut,
        apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyTimedEventsGet,
        apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyTimedEventsPost,
        apiNskV1PersonsByPersonKeyTravelNotificationsGet,
        apiNskV1PersonsByPersonKeyTravelNotificationsPost,
        apiNskV1PersonsGet,
        apiNskV1PersonsPost,
        apiNskV2PersonsByPersonKeyTravelDocumentsByPersonTravelDocumentKeyPatch,
        apiNskV2PersonsByPersonKeyTravelDocumentsByPersonTravelDocumentKeyPut,
} from '../base/api'




@injectable()
export class StorePersonsService {

    constructor(@inject("Store") private store: Store<any>) {}

    /**
     * Retrieves the person account collection transactions based on the person key,  the account collection key, and data in the request.
     * 
     */
    public async store_apiNskV1PersonsByPersonKeyAccountCollectionByAccountCollectionKeyTransactionsGet(personKey: string, accountCollectionKey: string, startTime: Date, sortByNewest: boolean, endTime?: Date, pageSize?: number, pageIndex?: number,  headers?: Headers): Promise<Array<Transaction>>
    {
        const response = await apiNskV1PersonsByPersonKeyAccountCollectionByAccountCollectionKeyTransactionsGet(personKey,accountCollectionKey,startTime,sortByNewest,endTime,pageSize,pageIndex,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyAccountCollectionByAccountCollectionKeyTransactionsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Creates an account collection transaction based on the person key, the  account collection key, and data in the request.
     * This endpoint will add a transaction to an existing account collection.  If there are no account collections, or the account collection key does  not match an existing collection, the request will fail.  To add a new account collection, see /api/nsk/v1/persons/{personKey}/account/collection.
     */
    public async store_apiNskV1PersonsByPersonKeyAccountCollectionByAccountCollectionKeyTransactionsPost(personKey: string, accountCollectionKey: string, request?: TransactionRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1PersonsByPersonKeyAccountCollectionByAccountCollectionKeyTransactionsPost(personKey,accountCollectionKey,request,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyAccountCollectionByAccountCollectionKeyTransactionsPost
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Creates an account collection based on the person key and data in the request.
     * This endpoint will create a new account collection and a transaction if no account  transaction exists or no matching collection is found.  An account collection is unique  based on the transaction code and the expiration date.  If a matching account collection  is found, a transaction for that collection is generated and the account collection will  be updated.  See /api/nsk/v1/resources/accountTransactionCodes for a list of available account transaction  codes.
     */
    public async store_apiNskV1PersonsByPersonKeyAccountCollectionPost(personKey: string, request?: AccountCollectionRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1PersonsByPersonKeyAccountCollectionPost(personKey,request,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyAccountCollectionPost
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the person account and credits based on the person key.
     * 
     */
    public async store_apiNskV1PersonsByPersonKeyAccountGet(personKey: string,  headers?: Headers): Promise<Account>
    {
        const response = await apiNskV1PersonsByPersonKeyAccountGet(personKey,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyAccountGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Creates the person account based on the person key and  data in the request.
     * 
     */
    public async store_apiNskV1PersonsByPersonKeyAccountPost(personKey: string, request?: CreateAccountRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1PersonsByPersonKeyAccountPost(personKey,request,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyAccountPost
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Updates the person account status.
     * 
     */
    public async store_apiNskV1PersonsByPersonKeyAccountStatusPut(personKey: string, status: 'Open' | 'Closed' | 'AgencyInactive' | 'Unknown',  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1PersonsByPersonKeyAccountStatusPut(personKey,status,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyAccountStatusPut
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves all transactions for every collection.
     * 
     */
    public async store_apiNskV1PersonsByPersonKeyAccountTransactionsGet(personKey: string, startTime: Date, sortByNewest: boolean, endTime?: Date, pageSize?: number, pageIndex?: number,  headers?: Headers): Promise<Array<Transaction>>
    {
        const response = await apiNskV1PersonsByPersonKeyAccountTransactionsGet(personKey,startTime,sortByNewest,endTime,pageSize,pageIndex,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyAccountTransactionsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Deletes a specific address for a specific person.
     * 
     */
    public async store_apiNskV1PersonsByPersonKeyAddressesByPersonAddressKeyDelete(personKey: string, personAddressKey: string,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1PersonsByPersonKeyAddressesByPersonAddressKeyDelete(personKey,personAddressKey,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyAddressesByPersonAddressKeyDelete
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets a specific address for a specific person.
     * 
     */
    public async store_apiNskV1PersonsByPersonKeyAddressesByPersonAddressKeyGet(personKey: string, personAddressKey: string,  headers?: Headers): Promise<PersonAddress>
    {
        const response = await apiNskV1PersonsByPersonKeyAddressesByPersonAddressKeyGet(personKey,personAddressKey,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyAddressesByPersonAddressKeyGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Patches a specific address for a specific person.
     * 
     */
    public async store_apiNskV1PersonsByPersonKeyAddressesByPersonAddressKeyPatch(personKey: string, personAddressKey: string, request?: DeltaMapperPersonAddressEditRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1PersonsByPersonKeyAddressesByPersonAddressKeyPatch(personKey,personAddressKey,request,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyAddressesByPersonAddressKeyPatch
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Updates a specific address for a specific person.
     * 
     */
    public async store_apiNskV1PersonsByPersonKeyAddressesByPersonAddressKeyPut(personKey: string, personAddressKey: string, request?: PersonAddressEditRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1PersonsByPersonKeyAddressesByPersonAddressKeyPut(personKey,personAddressKey,request,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyAddressesByPersonAddressKeyPut
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets the collection of addresses for a specific person.
     * 
     */
    public async store_apiNskV1PersonsByPersonKeyAddressesGet(personKey: string,  headers?: Headers): Promise<Array<PersonAddress>>
    {
        const response = await apiNskV1PersonsByPersonKeyAddressesGet(personKey,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyAddressesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Creates a new address for a specific person.
     * 
     */
    public async store_apiNskV1PersonsByPersonKeyAddressesPost(personKey: string, request?: PersonAddressCreateRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1PersonsByPersonKeyAddressesPost(personKey,request,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyAddressesPost
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Deletes a specific alias for a specific person.
     * 
     */
    public async store_apiNskV1PersonsByPersonKeyAliasesByPersonAliasKeyDelete(personKey: string, personAliasKey: string,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1PersonsByPersonKeyAliasesByPersonAliasKeyDelete(personKey,personAliasKey,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyAliasesByPersonAliasKeyDelete
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets a specific alias for a specific person.
     * 
     */
    public async store_apiNskV1PersonsByPersonKeyAliasesByPersonAliasKeyGet(personKey: string, personAliasKey: string,  headers?: Headers): Promise<PersonAlias>
    {
        const response = await apiNskV1PersonsByPersonKeyAliasesByPersonAliasKeyGet(personKey,personAliasKey,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyAliasesByPersonAliasKeyGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Patches a specific alias for a specific person.
     * 
     */
    public async store_apiNskV1PersonsByPersonKeyAliasesByPersonAliasKeyPatch(personKey: string, personAliasKey: string, request?: DeltaMapperPersonAliasRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1PersonsByPersonKeyAliasesByPersonAliasKeyPatch(personKey,personAliasKey,request,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyAliasesByPersonAliasKeyPatch
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Updates a specific alias for a specific person.
     * 
     */
    public async store_apiNskV1PersonsByPersonKeyAliasesByPersonAliasKeyPut(personKey: string, personAliasKey: string, request?: PersonAliasRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1PersonsByPersonKeyAliasesByPersonAliasKeyPut(personKey,personAliasKey,request,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyAliasesByPersonAliasKeyPut
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets the collection of aliases for a specific person.
     * 
     */
    public async store_apiNskV1PersonsByPersonKeyAliasesGet(personKey: string,  headers?: Headers): Promise<Array<PersonAlias>>
    {
        const response = await apiNskV1PersonsByPersonKeyAliasesGet(personKey,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyAliasesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Creates a new alias for a specific person.
     * 
     */
    public async store_apiNskV1PersonsByPersonKeyAliasesPost(personKey: string, request?: PersonAliasRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1PersonsByPersonKeyAliasesPost(personKey,request,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyAliasesPost
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Deletes a specific comment for a specific person.
     * 
     */
    public async store_apiNskV1PersonsByPersonKeyCommentsByPersonCommentKeyDelete(personKey: string, personCommentKey: string,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1PersonsByPersonKeyCommentsByPersonCommentKeyDelete(personKey,personCommentKey,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyCommentsByPersonCommentKeyDelete
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets a specific comment for a specific person.
     * 
     */
    public async store_apiNskV1PersonsByPersonKeyCommentsByPersonCommentKeyGet(personKey: string, personCommentKey: string,  headers?: Headers): Promise<PersonComment>
    {
        const response = await apiNskV1PersonsByPersonKeyCommentsByPersonCommentKeyGet(personKey,personCommentKey,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyCommentsByPersonCommentKeyGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Patches a specific comment for a specific person.
     * 
     */
    public async store_apiNskV1PersonsByPersonKeyCommentsByPersonCommentKeyPatch(personKey: string, personCommentKey: string, request?: DeltaMapperPersonCommentRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1PersonsByPersonKeyCommentsByPersonCommentKeyPatch(personKey,personCommentKey,request,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyCommentsByPersonCommentKeyPatch
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Updates a specific comment for a specific person.
     * 
     */
    public async store_apiNskV1PersonsByPersonKeyCommentsByPersonCommentKeyPut(personKey: string, personCommentKey: string, request?: PersonCommentRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1PersonsByPersonKeyCommentsByPersonCommentKeyPut(personKey,personCommentKey,request,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyCommentsByPersonCommentKeyPut
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets the collection of comments for a specific person.
     * 
     */
    public async store_apiNskV1PersonsByPersonKeyCommentsGet(personKey: string,  headers?: Headers): Promise<Array<PersonComment>>
    {
        const response = await apiNskV1PersonsByPersonKeyCommentsGet(personKey,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyCommentsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Creates a new comment for a specific person.
     * 
     */
    public async store_apiNskV1PersonsByPersonKeyCommentsPost(personKey: string, request?: PersonCommentRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1PersonsByPersonKeyCommentsPost(personKey,request,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyCommentsPost
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Deletes a person by setting the record to terminated.
     * 
     */
    public async store_apiNskV1PersonsByPersonKeyDelete(personKey: string,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1PersonsByPersonKeyDelete(personKey,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyDelete
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Deletes a specific email address for a specific person.
     * 
     */
    public async store_apiNskV1PersonsByPersonKeyEmailsByPersonEmailAddressKeyDelete(personKey: string, personEmailAddressKey: string,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1PersonsByPersonKeyEmailsByPersonEmailAddressKeyDelete(personKey,personEmailAddressKey,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyEmailsByPersonEmailAddressKeyDelete
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets a specific email address for a specific person.
     * 
     */
    public async store_apiNskV1PersonsByPersonKeyEmailsByPersonEmailAddressKeyGet(personKey: string, personEmailAddressKey: string,  headers?: Headers): Promise<PersonEmail>
    {
        const response = await apiNskV1PersonsByPersonKeyEmailsByPersonEmailAddressKeyGet(personKey,personEmailAddressKey,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyEmailsByPersonEmailAddressKeyGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Patches a specific email address for a specific person.
     * 
     */
    public async store_apiNskV1PersonsByPersonKeyEmailsByPersonEmailAddressKeyPatch(personKey: string, personEmailAddressKey: string, request?: DeltaMapperPersonEmailEditRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1PersonsByPersonKeyEmailsByPersonEmailAddressKeyPatch(personKey,personEmailAddressKey,request,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyEmailsByPersonEmailAddressKeyPatch
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Updates a specific email address for a specific person.
     * 
     */
    public async store_apiNskV1PersonsByPersonKeyEmailsByPersonEmailAddressKeyPut(personKey: string, personEmailAddressKey: string, request?: PersonEmailEditRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1PersonsByPersonKeyEmailsByPersonEmailAddressKeyPut(personKey,personEmailAddressKey,request,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyEmailsByPersonEmailAddressKeyPut
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets the collection of email addresses for a specific person.
     * 
     */
    public async store_apiNskV1PersonsByPersonKeyEmailsGet(personKey: string,  headers?: Headers): Promise<Array<PersonEmail>>
    {
        const response = await apiNskV1PersonsByPersonKeyEmailsGet(personKey,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyEmailsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Creates a new email address for a specific person.
     * 
     */
    public async store_apiNskV1PersonsByPersonKeyEmailsPost(personKey: string, request?: PersonEmailCreateRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1PersonsByPersonKeyEmailsPost(personKey,request,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyEmailsPost
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves a specific person by key.
     * 
     */
    public async store_apiNskV1PersonsByPersonKeyGet(personKey: string,  headers?: Headers): Promise<Person>
    {
        const response = await apiNskV1PersonsByPersonKeyGet(personKey,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Deletes a specific information on the logged in user&#39;s person.
     * 
     */
    public async store_apiNskV1PersonsByPersonKeyInformationByPersonInformationKeyDelete(personKey: string, personInformationKey: string,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1PersonsByPersonKeyInformationByPersonInformationKeyDelete(personKey,personInformationKey,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyInformationByPersonInformationKeyDelete
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets a specific information from the logged in user&#39;s person.
     * 
     */
    public async store_apiNskV1PersonsByPersonKeyInformationByPersonInformationKeyGet(personKey: string, personInformationKey: string,  headers?: Headers): Promise<PersonInformation>
    {
        const response = await apiNskV1PersonsByPersonKeyInformationByPersonInformationKeyGet(personKey,personInformationKey,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyInformationByPersonInformationKeyGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Patches a specific information on the logged in user&#39;s person.
     * 
     */
    public async store_apiNskV1PersonsByPersonKeyInformationByPersonInformationKeyPatch(personKey: string, personInformationKey: string, request?: DeltaMapperPersonInformationEditRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1PersonsByPersonKeyInformationByPersonInformationKeyPatch(personKey,personInformationKey,request,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyInformationByPersonInformationKeyPatch
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Updates a specific information on the logged in user&#39;s person.
     * 
     */
    public async store_apiNskV1PersonsByPersonKeyInformationByPersonInformationKeyPut(personKey: string, personInformationKey: string, request?: PersonInformationEditRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1PersonsByPersonKeyInformationByPersonInformationKeyPut(personKey,personInformationKey,request,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyInformationByPersonInformationKeyPut
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets all information from the logged in user&#39;s person.
     * 
     */
    public async store_apiNskV1PersonsByPersonKeyInformationGet(personKey: string,  headers?: Headers): Promise<Array<PersonInformation>>
    {
        const response = await apiNskV1PersonsByPersonKeyInformationGet(personKey,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyInformationGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Creates a new information on the logged in user&#39;s person.
     * 
     */
    public async store_apiNskV1PersonsByPersonKeyInformationPost(personKey: string, request?: PersonInformationCreateRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1PersonsByPersonKeyInformationPost(personKey,request,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyInformationPost
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Patches the person records basic information.
     * Only need to send in the data that is being requested to be updated.
     */
    public async store_apiNskV1PersonsByPersonKeyPatch(personKey: string, request?: DeltaMapperPersonEditRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1PersonsByPersonKeyPatch(personKey,request,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyPatch
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Deletes a specific phone number for a specific person.
     * 
     */
    public async store_apiNskV1PersonsByPersonKeyPhoneNumbersByPersonPhoneNumberKeyDelete(personKey: string, personPhoneNumberKey: string,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1PersonsByPersonKeyPhoneNumbersByPersonPhoneNumberKeyDelete(personKey,personPhoneNumberKey,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyPhoneNumbersByPersonPhoneNumberKeyDelete
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets a specific phone number for a specific person.
     * 
     */
    public async store_apiNskV1PersonsByPersonKeyPhoneNumbersByPersonPhoneNumberKeyGet(personKey: string, personPhoneNumberKey: string,  headers?: Headers): Promise<PersonPhoneNumber>
    {
        const response = await apiNskV1PersonsByPersonKeyPhoneNumbersByPersonPhoneNumberKeyGet(personKey,personPhoneNumberKey,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyPhoneNumbersByPersonPhoneNumberKeyGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Patches a specific phone number for a specific person.
     * 
     */
    public async store_apiNskV1PersonsByPersonKeyPhoneNumbersByPersonPhoneNumberKeyPatch(personKey: string, personPhoneNumberKey: string, request?: DeltaMapperPersonPhoneNumberRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1PersonsByPersonKeyPhoneNumbersByPersonPhoneNumberKeyPatch(personKey,personPhoneNumberKey,request,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyPhoneNumbersByPersonPhoneNumberKeyPatch
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Updates a specific phone number for a specific person.
     * 
     */
    public async store_apiNskV1PersonsByPersonKeyPhoneNumbersByPersonPhoneNumberKeyPut(personKey: string, personPhoneNumberKey: string, request?: PersonPhoneNumberRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1PersonsByPersonKeyPhoneNumbersByPersonPhoneNumberKeyPut(personKey,personPhoneNumberKey,request,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyPhoneNumbersByPersonPhoneNumberKeyPut
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets the collection of phone numbers for a specific person.
     * 
     */
    public async store_apiNskV1PersonsByPersonKeyPhoneNumbersGet(personKey: string,  headers?: Headers): Promise<Array<PersonPhoneNumber>>
    {
        const response = await apiNskV1PersonsByPersonKeyPhoneNumbersGet(personKey,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyPhoneNumbersGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Creates a new phone number for a specific person.
     * 
     */
    public async store_apiNskV1PersonsByPersonKeyPhoneNumbersPost(personKey: string, request?: PersonPhoneNumberRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1PersonsByPersonKeyPhoneNumbersPost(personKey,request,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyPhoneNumbersPost
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Deletes a specific preference for a specific person.
     * 
     */
    public async store_apiNskV1PersonsByPersonKeyPreferencesByPersonPreferenceKeyDelete(personKey: string, personPreferenceKey: string,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1PersonsByPersonKeyPreferencesByPersonPreferenceKeyDelete(personKey,personPreferenceKey,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyPreferencesByPersonPreferenceKeyDelete
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets a specific preference for a specific person.
     * 
     */
    public async store_apiNskV1PersonsByPersonKeyPreferencesByPersonPreferenceKeyGet(personKey: string, personPreferenceKey: string,  headers?: Headers): Promise<PersonPreference>
    {
        const response = await apiNskV1PersonsByPersonKeyPreferencesByPersonPreferenceKeyGet(personKey,personPreferenceKey,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyPreferencesByPersonPreferenceKeyGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Patches a specific preference for a specific person.
     * 
     */
    public async store_apiNskV1PersonsByPersonKeyPreferencesByPersonPreferenceKeyPatch(personKey: string, personPreferenceKey: string, request?: DeltaMapperPersonPreferenceEditRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1PersonsByPersonKeyPreferencesByPersonPreferenceKeyPatch(personKey,personPreferenceKey,request,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyPreferencesByPersonPreferenceKeyPatch
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Updates a specific preference for a specific person.
     * 
     */
    public async store_apiNskV1PersonsByPersonKeyPreferencesByPersonPreferenceKeyPut(personKey: string, personPreferenceKey: string, request?: PersonPreferenceEditRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1PersonsByPersonKeyPreferencesByPersonPreferenceKeyPut(personKey,personPreferenceKey,request,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyPreferencesByPersonPreferenceKeyPut
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets all preferences for a specific person.
     * 
     */
    public async store_apiNskV1PersonsByPersonKeyPreferencesGet(personKey: string,  headers?: Headers): Promise<Array<PersonPreference>>
    {
        const response = await apiNskV1PersonsByPersonKeyPreferencesGet(personKey,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyPreferencesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Creates a new preference for a specific person.
     * 
     */
    public async store_apiNskV1PersonsByPersonKeyPreferencesPost(personKey: string, request?: PersonPreferenceCreateRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1PersonsByPersonKeyPreferencesPost(personKey,request,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyPreferencesPost
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Deletes a specific program for a specific person.
     * 
     */
    public async store_apiNskV1PersonsByPersonKeyProgramsByPersonProgramKeyDelete(personKey: string, personProgramKey: string,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1PersonsByPersonKeyProgramsByPersonProgramKeyDelete(personKey,personProgramKey,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyProgramsByPersonProgramKeyDelete
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets a specific program for a specific person.
     * 
     */
    public async store_apiNskV1PersonsByPersonKeyProgramsByPersonProgramKeyGet(personKey: string, personProgramKey: string,  headers?: Headers): Promise<PersonCustomerProgram>
    {
        const response = await apiNskV1PersonsByPersonKeyProgramsByPersonProgramKeyGet(personKey,personProgramKey,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyProgramsByPersonProgramKeyGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Patches a specific program for a specific person.
     * 
     */
    public async store_apiNskV1PersonsByPersonKeyProgramsByPersonProgramKeyPatch(personKey: string, personProgramKey: string, request?: DeltaMapperPersonCustomerProgramEditRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1PersonsByPersonKeyProgramsByPersonProgramKeyPatch(personKey,personProgramKey,request,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyProgramsByPersonProgramKeyPatch
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Updates a specific program for a specific person.
     * 
     */
    public async store_apiNskV1PersonsByPersonKeyProgramsByPersonProgramKeyPut(personKey: string, personProgramKey: string, request?: PersonCustomerProgramEditRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1PersonsByPersonKeyProgramsByPersonProgramKeyPut(personKey,personProgramKey,request,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyProgramsByPersonProgramKeyPut
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets the collection of programs for a specific person.
     * 
     */
    public async store_apiNskV1PersonsByPersonKeyProgramsGet(personKey: string,  headers?: Headers): Promise<Array<PersonCustomerProgram>>
    {
        const response = await apiNskV1PersonsByPersonKeyProgramsGet(personKey,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyProgramsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Creates a new program for a specific person.
     * 
     */
    public async store_apiNskV1PersonsByPersonKeyProgramsPost(personKey: string, request?: PersonCustomerProgramCreateRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1PersonsByPersonKeyProgramsPost(personKey,request,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyProgramsPost
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Updates the person record basic information.
     * 
     */
    public async store_apiNskV1PersonsByPersonKeyPut(personKey: string, request?: PersonEditRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1PersonsByPersonKeyPut(personKey,request,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyPut
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Deletes a specific stored payment for a specific person.
     * 
     */
    public async store_apiNskV1PersonsByPersonKeyStoredPaymentsByPersonStoredPaymentKeyDelete(personKey: string, personStoredPaymentKey: string,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1PersonsByPersonKeyStoredPaymentsByPersonStoredPaymentKeyDelete(personKey,personStoredPaymentKey,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyStoredPaymentsByPersonStoredPaymentKeyDelete
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets a specific stored payment for a specific person.
     * 
     */
    public async store_apiNskV1PersonsByPersonKeyStoredPaymentsByPersonStoredPaymentKeyGet(personKey: string, personStoredPaymentKey: string,  headers?: Headers): Promise<PersonStoredPayment>
    {
        const response = await apiNskV1PersonsByPersonKeyStoredPaymentsByPersonStoredPaymentKeyGet(personKey,personStoredPaymentKey,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyStoredPaymentsByPersonStoredPaymentKeyGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Patches a specific stored payment for a specific person.
     * 
     */
    public async store_apiNskV1PersonsByPersonKeyStoredPaymentsByPersonStoredPaymentKeyPatch(personKey: string, personStoredPaymentKey: string, request?: DeltaMapperPersonStoredPaymentUpdateRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1PersonsByPersonKeyStoredPaymentsByPersonStoredPaymentKeyPatch(personKey,personStoredPaymentKey,request,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyStoredPaymentsByPersonStoredPaymentKeyPatch
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Updates a specific stored payment for a specific person.
     * 
     */
    public async store_apiNskV1PersonsByPersonKeyStoredPaymentsByPersonStoredPaymentKeyPut(personKey: string, personStoredPaymentKey: string, request?: PersonStoredPaymentRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1PersonsByPersonKeyStoredPaymentsByPersonStoredPaymentKeyPut(personKey,personStoredPaymentKey,request,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyStoredPaymentsByPersonStoredPaymentKeyPut
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets the collection of stored payments for a specific person.
     * 
     */
    public async store_apiNskV1PersonsByPersonKeyStoredPaymentsGet(personKey: string,  headers?: Headers): Promise<Array<PersonStoredPayment>>
    {
        const response = await apiNskV1PersonsByPersonKeyStoredPaymentsGet(personKey,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyStoredPaymentsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Creates a new stored payment for a specific person.
     * 
     */
    public async store_apiNskV1PersonsByPersonKeyStoredPaymentsPost(personKey: string, request?: PersonStoredPaymentRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1PersonsByPersonKeyStoredPaymentsPost(personKey,request,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyStoredPaymentsPost
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Deletes a specific travel document for a specific person.
     * 
     */
    public async store_apiNskV1PersonsByPersonKeyTravelDocumentsByPersonTravelDocumentKeyDelete(personKey: string, personTravelDocumentKey: string,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1PersonsByPersonKeyTravelDocumentsByPersonTravelDocumentKeyDelete(personKey,personTravelDocumentKey,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyTravelDocumentsByPersonTravelDocumentKeyDelete
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets a specific travel document for a specific person.
     * 
     */
    public async store_apiNskV1PersonsByPersonKeyTravelDocumentsByPersonTravelDocumentKeyGet(personKey: string, personTravelDocumentKey: string,  headers?: Headers): Promise<PersonTravelDocument>
    {
        const response = await apiNskV1PersonsByPersonKeyTravelDocumentsByPersonTravelDocumentKeyGet(personKey,personTravelDocumentKey,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyTravelDocumentsByPersonTravelDocumentKeyGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets the collection of travel documents for a specific person.
     * 
     */
    public async store_apiNskV1PersonsByPersonKeyTravelDocumentsGet(personKey: string,  headers?: Headers): Promise<Array<PersonTravelDocument>>
    {
        const response = await apiNskV1PersonsByPersonKeyTravelDocumentsGet(personKey,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyTravelDocumentsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Creates a new travel document for a specific person.
     * 
     */
    public async store_apiNskV1PersonsByPersonKeyTravelDocumentsPost(personKey: string, request?: PersonTravelDocumentRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1PersonsByPersonKeyTravelDocumentsPost(personKey,request,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyTravelDocumentsPost
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Deletes a person travel notification for a person.
     * 
     */
    public async store_apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyDelete(personKey: string, travelNotificationKey: string,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyDelete(personKey,travelNotificationKey,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyDelete
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Deletes a notification event from a person travel notification for a person.
     * 
     */
    public async store_apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyEventsByEventTypeDelete(personKey: string, travelNotificationKey: string, eventType: 'DepartureDelay' | 'ArrivalDelay' | 'ScheduleChange' | 'CheckIn',  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyEventsByEventTypeDelete(personKey,travelNotificationKey,eventType,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyEventsByEventTypeDelete
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets a notification event for a person travel notification for a person.
     * 
     */
    public async store_apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyEventsByEventTypeGet(personKey: string, travelNotificationKey: string, eventType: 'DepartureDelay' | 'ArrivalDelay' | 'ScheduleChange' | 'CheckIn',  headers?: Headers): Promise<NotificationEvent>
    {
        const response = await apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyEventsByEventTypeGet(personKey,travelNotificationKey,eventType,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyEventsByEventTypeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets notification events for a person travel notification for a person.
     * 
     */
    public async store_apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyEventsGet(personKey: string, travelNotificationKey: string,  headers?: Headers): Promise<Array<NotificationEvent>>
    {
        const response = await apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyEventsGet(personKey,travelNotificationKey,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyEventsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Creates a notification event for a person travel notification for a person.
     * 
     */
    public async store_apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyEventsPost(personKey: string, travelNotificationKey: string, request?: NotificationEventCreateRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyEventsPost(personKey,travelNotificationKey,request,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyEventsPost
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets a person travel notification for a person.
     * 
     */
    public async store_apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyGet(personKey: string, travelNotificationKey: string,  headers?: Headers): Promise<TravelNotification>
    {
        const response = await apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyGet(personKey,travelNotificationKey,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Patches a person travel notification for a person.
     * 
     */
    public async store_apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyPatch(personKey: string, travelNotificationKey: string, request?: DeltaMapperTravelNotificationEditRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyPatch(personKey,travelNotificationKey,request,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyPatch
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Updates a person travel notification for a person.
     * 
     */
    public async store_apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyPut(personKey: string, travelNotificationKey: string, request?: TravelNotificationEditRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyPut(personKey,travelNotificationKey,request,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyPut
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Deletes a notification timed event from a person travel notification for a person.
     * 
     */
    public async store_apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeDelete(personKey: string, travelNotificationKey: string, timedEventType: 'Departure' | 'Arrival',  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeDelete(personKey,travelNotificationKey,timedEventType,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeDelete
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets a notification timed event for a person travel notification for a person.
     * 
     */
    public async store_apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeGet(personKey: string, travelNotificationKey: string, timedEventType: 'Departure' | 'Arrival',  headers?: Headers): Promise<NotificationTimedEvent>
    {
        const response = await apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeGet(personKey,travelNotificationKey,timedEventType,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Updates a notification timed event for a person travel notification for a person.
     * 
     */
    public async store_apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypePut(personKey: string, travelNotificationKey: string, timedEventType: 'Departure' | 'Arrival', request?: NotificationTimedEventEditRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypePut(personKey,travelNotificationKey,timedEventType,request,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypePut
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets notification timed events for a person travel notification for a person.
     * 
     */
    public async store_apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyTimedEventsGet(personKey: string, travelNotificationKey: string,  headers?: Headers): Promise<Array<NotificationTimedEvent>>
    {
        const response = await apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyTimedEventsGet(personKey,travelNotificationKey,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyTimedEventsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Creates a notification timed event for a person travel notification for a person.
     * 
     */
    public async store_apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyTimedEventsPost(personKey: string, travelNotificationKey: string, request?: NotificationTimedEventCreateRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyTimedEventsPost(personKey,travelNotificationKey,request,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyTravelNotificationsByTravelNotificationKeyTimedEventsPost
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets person travel notifications for a person.
     * 
     */
    public async store_apiNskV1PersonsByPersonKeyTravelNotificationsGet(personKey: string,  headers?: Headers): Promise<Array<TravelNotification>>
    {
        const response = await apiNskV1PersonsByPersonKeyTravelNotificationsGet(personKey,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyTravelNotificationsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Creates a person travel notification for a person.
     * 
     */
    public async store_apiNskV1PersonsByPersonKeyTravelNotificationsPost(personKey: string, request?: TravelNotificationCreateRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1PersonsByPersonKeyTravelNotificationsPost(personKey,request,'body', headers);
        // TODO: Implement apiNskV1PersonsByPersonKeyTravelNotificationsPost
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Search person records.
     * 
     */
    public async store_apiNskV1PersonsGet(activeOnly: boolean, firstName?: string, lastName?: string, firstNameMatching?: 'StartsWith' | 'EndsWith' | 'Contains' | 'ExactMatch', customerNumber?: string, phoneNumber?: string, emailAddress?: string, programNumber?: string, programCode?: string, type?: 'None' | 'Customer' | 'Agent', nationalIdNumber?: string, nationalIdNumberMatching?: 'StartsWith' | 'EndsWith' | 'Contains' | 'ExactMatch', returnCount?: number, lastPersonKey?: string,  headers?: Headers): Promise<Array<PersonRecord>>
    {
        const response = await apiNskV1PersonsGet(activeOnly,firstName,lastName,firstNameMatching,customerNumber,phoneNumber,emailAddress,programNumber,programCode,type,nationalIdNumber,nationalIdNumberMatching,returnCount,lastPersonKey,'body', headers);
        // TODO: Implement apiNskV1PersonsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Creates a new person record.
     * 
     */
    public async store_apiNskV1PersonsPost(request?: PersonCreateRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV1PersonsPost(request,'body', headers);
        // TODO: Implement apiNskV1PersonsPost
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Patches a specific travel document for a specific person.
     * 
     */
    public async store_apiNskV2PersonsByPersonKeyTravelDocumentsByPersonTravelDocumentKeyPatch(personKey: string, personTravelDocumentKey: string, request?: DeltaMapperTravelDocumentEditRequestv2,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV2PersonsByPersonKeyTravelDocumentsByPersonTravelDocumentKeyPatch(personKey,personTravelDocumentKey,request,'body', headers);
        // TODO: Implement apiNskV2PersonsByPersonKeyTravelDocumentsByPersonTravelDocumentKeyPatch
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Updates a specific travel document for a specific person.
     * 
     */
    public async store_apiNskV2PersonsByPersonKeyTravelDocumentsByPersonTravelDocumentKeyPut(personKey: string, personTravelDocumentKey: string, request?: TravelDocumentEditRequestv2,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await apiNskV2PersonsByPersonKeyTravelDocumentsByPersonTravelDocumentKeyPut(personKey,personTravelDocumentKey,request,'body', headers);
        // TODO: Implement apiNskV2PersonsByPersonKeyTravelDocumentsByPersonTravelDocumentKeyPut
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }

}
