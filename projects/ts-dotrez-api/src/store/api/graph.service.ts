/**
 * API - Current Routes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: trunk
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';
import { inject, injectable } from 'inversify';
import { Store } from 'redux';
import { GraphQlQuery, GraphQlQueryv2 } from 'api-models';

import { GraphService } from '../../base/api/index';

import { IHttpClient } from '../../base/IHttpClient';
import { IAPIConfiguration } from '../../base/IAPIConfiguration';
import { HttpResponse } from '../../base/HttpResponse';
import { Headers } from '../../base/Headers';

@injectable()
export class StoreGraphService {
  constructor(
    @inject('Store') protected store: Store<any>,
    @inject('GraphService') protected baseService: GraphService
  ) {}

  /**
   * Invokes a graph query configured in utilities.
   * When a graph query is configured on the server under Resource Management it allows your payload sizes to be even smaller.
   */
  public async store_apiNskV1GraphByQueryNamePost(
    queryName: string,
    cachedResults: boolean,
    variables?: any,
    headers?: Headers
  ): Promise<any> {
    const response = await this.baseService
      .apiNskV1GraphByQueryNamePost(
        queryName,
        cachedResults,
        variables,
        'body',
        headers
      )
      .toPromise();
    // TODO: Implement apiNskV1GraphByQueryNamePost
    // addResponsetoStore(this.store, response.data, true, true);
    return response;
  }

  /**
   *
   *
   */
  public async store_apiV1GraphPost(
    query?: GraphQlQuery,
    headers?: Headers
  ): Promise<any> {
    const response = await this.baseService
      .apiV1GraphPost(query, 'body', headers)
      .toPromise();
    // TODO: Implement apiV1GraphPost
    // addResponsetoStore(this.store, response.data, true, true);
    return response;
  }

  /**
   *
   *
   */
  public async store_apiV2GraphByQueryNamePost(
    queryName: string,
    query?: GraphQlQueryv2,
    headers?: Headers
  ): Promise<any> {
    const response = await this.baseService
      .apiV2GraphByQueryNamePost(queryName, query, 'body', headers)
      .toPromise();
    // TODO: Implement apiV2GraphByQueryNamePost
    // addResponsetoStore(this.store, response.data, true, true);
    return response;
  }
}
