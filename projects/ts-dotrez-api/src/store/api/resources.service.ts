/**
 * API - Current Routes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: trunk
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from "rxjs";
import { map } from "rxjs/operators";
import { inject, injectable } from "inversify";
import { Store } from 'redux';
import {
    HttpResponse,
    Headers,
    IHttpClient,
    AccountTransactionCode, 
    AddressType, 
    AgentSettingType, 
    Area, 
    BaggageType, 
    BundleApplication, 
    BundleConfiguration, 
    BundleRule, 
    BundleSet, 
    BundleSsrConfiguration, 
    Carrier, 
    City, 
    ClassOfService, 
    CommerceLocation, 
    CommissionRate, 
    ContactType, 
    Countryv2, 
    Culture, 
    Currency, 
    CustomerProgram, 
    CustomerProgramLevel, 
    Delay, 
    Department, 
    DocumentType, 
    Domain, 
    DynamicParameter, 
    EmailType, 
    EnumResource, 
    ExternalRate, 
    FareType, 
    Fee, 
    FeeDetail, 
    HotCardReason, 
    IJsonResponse, 
    IssuanceReason, 
    Location, 
    Mac, 
    Market, 
    Marketv2, 
    MessageType, 
    ParticipantType, 
    PassengerDiscount, 
    PassengerType, 
    PaymentMethod, 
    PersonAttachmentType, 
    PersonInformationType, 
    PhoneType, 
    ProductClass, 
    PromotionSettingType, 
    ProvinceState, 
    QueueCategory, 
    ReminderTime, 
    ResourceCategoryItem, 
    ResourceContentItem, 
    ResourceContentResult, 
    ResourceEntriesCarrier, 
    ResourceEntriesCurrencyv2, 
    ResourceEntriesPersonAttachmentType, 
    ResourceEntriesStationDetail, 
    Role, 
    RoleSettingType, 
    SettingsCategoryRequest, 
    ShoppingAttribute, 
    ShoppingAttributeGroup, 
    SingleSignOnProvider, 
    Source, 
    Ssr, 
    SsrGroup, 
    SsrNest, 
    SsrRestrictionResult, 
    StandByPriority, 
    Station, 
    StationCategory, 
    SubZone, 
    Suffix, 
    TimeZone, 
    Title, 
    TravelClass, 
    Vendor, 
    Vendorv2, 
    Zone, 
} from 'api-models';

import { ResourcesService } from '../base/api/index'




@injectable()
export class StoreResourcesService {

    constructor(@inject("Store") protected store: Store<any>, @inject("ResourcesService") protected baseService:ResourcesService) {}

    /**
     * Retrieves the specific account transaction code resource.
     * 
     */
    public async store_apiNskV1ResourcesAccountTransactionCodesByTransactionCodeGet(transactionCode: string, cultureCode?: string,  headers?: Headers): Promise<AccountTransactionCode>
    {
        const response = await this.baseService.apiNskV1ResourcesAccountTransactionCodesByTransactionCodeGet(transactionCode,cultureCode,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesAccountTransactionCodesByTransactionCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of account transaction code resources.
     * 
     */
    public async store_apiNskV1ResourcesAccountTransactionCodesGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<AccountTransactionCode>>
    {
        const response = await this.baseService.apiNskV1ResourcesAccountTransactionCodesGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesAccountTransactionCodesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets the commerce locations.
     * 
     */
    public async store_apiNskV1ResourcesAddOnsLocationsGet(type: 'Default' | 'Insurance' | 'Activity' | 'Hotel' | 'Car', eTag?: string, vendorCode?: string, cultureCode?: string,  headers?: Headers): Promise<Array<CommerceLocation>>
    {
        const response = await this.baseService.apiNskV1ResourcesAddOnsLocationsGet(type,eTag,vendorCode,cultureCode,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesAddOnsLocationsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets the parameters.
     * 
     */
    public async store_apiNskV1ResourcesAddOnsParametersGet(type: 'Default' | 'Insurance' | 'Activity' | 'Hotel' | 'Car', eTag?: string, vendorCode?: string, cultureCode?: string,  headers?: Headers): Promise<Array<DynamicParameter>>
    {
        const response = await this.baseService.apiNskV1ResourcesAddOnsParametersGet(type,eTag,vendorCode,cultureCode,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesAddOnsParametersGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets the participant types.
     * 
     */
    public async store_apiNskV1ResourcesAddOnsParticipanttypesGet(type: 'Default' | 'Insurance' | 'Activity' | 'Hotel' | 'Car', eTag?: string, vendorCode?: string, cultureCode?: string,  headers?: Headers): Promise<Array<ParticipantType>>
    {
        const response = await this.baseService.apiNskV1ResourcesAddOnsParticipanttypesGet(type,eTag,vendorCode,cultureCode,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesAddOnsParticipanttypesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets the sources by code.
     * 
     */
    public async store_apiNskV1ResourcesAddOnsSourcesBySourceCodeGet(sourceCode: string, cultureCode?: string,  headers?: Headers): Promise<Source>
    {
        const response = await this.baseService.apiNskV1ResourcesAddOnsSourcesBySourceCodeGet(sourceCode,cultureCode,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesAddOnsSourcesBySourceCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets the sources.
     * 
     */
    public async store_apiNskV1ResourcesAddOnsSourcesGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<Source>>
    {
        const response = await this.baseService.apiNskV1ResourcesAddOnsSourcesGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesAddOnsSourcesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets the travel commerce vendors.
     * 
     */
    public async store_apiNskV1ResourcesAddOnsVendorsGet(type: 'Default' | 'Insurance' | 'Activity' | 'Hotel' | 'Car', cultureCode?: string, eTag?: string,  headers?: Headers): Promise<Array<Vendor>>
    {
        const response = await this.baseService.apiNskV1ResourcesAddOnsVendorsGet(type,cultureCode,eTag,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesAddOnsVendorsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific address type resource.
     * 
     */
    public async store_apiNskV1ResourcesAddressTypesByAddressTypeCodeGet(addressTypeCode: string, cultureCode?: string,  headers?: Headers): Promise<AddressType>
    {
        const response = await this.baseService.apiNskV1ResourcesAddressTypesByAddressTypeCodeGet(addressTypeCode,cultureCode,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesAddressTypesByAddressTypeCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of address type resources.
     * 
     */
    public async store_apiNskV1ResourcesAddressTypesGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<AddressType>>
    {
        const response = await this.baseService.apiNskV1ResourcesAddressTypesGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesAddressTypesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific agent setting type resource.
     * 
     */
    public async store_apiNskV1ResourcesAgentSettingTypesByAgentSettingTypeCodeGet(agentSettingTypeCode: string, cultureCode?: string,  headers?: Headers): Promise<AgentSettingType>
    {
        const response = await this.baseService.apiNskV1ResourcesAgentSettingTypesByAgentSettingTypeCodeGet(agentSettingTypeCode,cultureCode,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesAgentSettingTypesByAgentSettingTypeCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of agent setting type resources.
     * 
     */
    public async store_apiNskV1ResourcesAgentSettingTypesGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<AgentSettingType>>
    {
        const response = await this.baseService.apiNskV1ResourcesAgentSettingTypesGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesAgentSettingTypesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the resource.
     * 
     */
    public async store_apiNskV1ResourcesAreasByAreaCodeGet(areaCode: string, cultureCode?: string,  headers?: Headers): Promise<Area>
    {
        const response = await this.baseService.apiNskV1ResourcesAreasByAreaCodeGet(areaCode,cultureCode,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesAreasByAreaCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of area resources.
     * 
     */
    public async store_apiNskV1ResourcesAreasGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<Area>>
    {
        const response = await this.baseService.apiNskV1ResourcesAreasGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesAreasGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific baggage type resource.
     * 
     */
    public async store_apiNskV1ResourcesBaggageTypesByBaggageTypeCodeGet(baggageTypeCode: string, cultureCode?: string,  headers?: Headers): Promise<BaggageType>
    {
        const response = await this.baseService.apiNskV1ResourcesBaggageTypesByBaggageTypeCodeGet(baggageTypeCode,cultureCode,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesBaggageTypesByBaggageTypeCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of baggage type resources.
     * 
     */
    public async store_apiNskV1ResourcesBaggageTypesGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<BaggageType>>
    {
        const response = await this.baseService.apiNskV1ResourcesBaggageTypesGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesBaggageTypesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of bundle application resources.
     * See api/nsk/v1/bundles/application/{bundleApplicationKey}/details to retrieve additional  bundle application details.  The application details consist of three lists: carrier codes,  product classes, and classes of service.
     */
    public async store_apiNskV1ResourcesBundlesApplicationsGet(bundleRuleCode: string, cultureCode?: string, eTag?: string,  headers?: Headers): Promise<Array<BundleApplication>>
    {
        const response = await this.baseService.apiNskV1ResourcesBundlesApplicationsGet(bundleRuleCode,cultureCode,eTag,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesBundlesApplicationsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves a specific bundle configuration based on the bundle code.
     * 
     */
    public async store_apiNskV1ResourcesBundlesByBundleCodeGet(bundleCode: string, cultureCode?: string,  headers?: Headers): Promise<BundleConfiguration>
    {
        const response = await this.baseService.apiNskV1ResourcesBundlesByBundleCodeGet(bundleCode,cultureCode,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesBundlesByBundleCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of bundle configuration resources.
     * 
     */
    public async store_apiNskV1ResourcesBundlesGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<BundleConfiguration>>
    {
        const response = await this.baseService.apiNskV1ResourcesBundlesGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesBundlesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of bundle rule resources.
     * See api/nsk/v1/bundles/rule/{bundleRuleCode}/details to retrieve a list of bundle   applications associated with a specific bundle rule.  Bundle rules are used to control where and how bundle applications are used.
     */
    public async store_apiNskV1ResourcesBundlesRulesGet(eTag?: string,  headers?: Headers): Promise<Array<BundleRule>>
    {
        const response = await this.baseService.apiNskV1ResourcesBundlesRulesGet(eTag,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesBundlesRulesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of bundle set resources.
     * See api/nsk/v1/bundles/set/{bundleSetCode}/details to retrieve a list of bundle   codes associated with a specific bundle set.
     */
    public async store_apiNskV1ResourcesBundlesSetsGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<BundleSet>>
    {
        const response = await this.baseService.apiNskV1ResourcesBundlesSetsGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesBundlesSetsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of bundle ssr configurations associated with  the bundle code.
     * 
     */
    public async store_apiNskV1ResourcesBundlesSsrsGet(bundleCode: string, cultureCode?: string, eTag?: string,  headers?: Headers): Promise<Array<BundleSsrConfiguration>>
    {
        const response = await this.baseService.apiNskV1ResourcesBundlesSsrsGet(bundleCode,cultureCode,eTag,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesBundlesSsrsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves a single carrier.
     * 
     */
    public async store_apiNskV1ResourcesCarriersByCarrierCodeGet(carrierCode: string, cultureCode?: string, eTag?: string,  headers?: Headers): Promise<Carrier>
    {
        const response = await this.baseService.apiNskV1ResourcesCarriersByCarrierCodeGet(carrierCode,cultureCode,eTag,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesCarriersByCarrierCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of carrier resources.
     * 
     */
    public async store_apiNskV1ResourcesCarriersGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<ResourceEntriesCarrier>
    {
        const response = await this.baseService.apiNskV1ResourcesCarriersGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesCarriersGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific city resource.
     * 
     */
    public async store_apiNskV1ResourcesCitiesByCityCodeGet(cityCode: string, cultureCode?: string,  headers?: Headers): Promise<City>
    {
        const response = await this.baseService.apiNskV1ResourcesCitiesByCityCodeGet(cityCode,cultureCode,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesCitiesByCityCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of city resources.
     * 
     */
    public async store_apiNskV1ResourcesCitiesGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<City>>
    {
        const response = await this.baseService.apiNskV1ResourcesCitiesGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesCitiesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the resource.
     * 
     */
    public async store_apiNskV1ResourcesClassOfServicesByClassOfServiceCodeGet(classOfServiceCode: string, cultureCode?: string,  headers?: Headers): Promise<ClassOfService>
    {
        const response = await this.baseService.apiNskV1ResourcesClassOfServicesByClassOfServiceCodeGet(classOfServiceCode,cultureCode,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesClassOfServicesByClassOfServiceCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of class of service resources.
     * 
     */
    public async store_apiNskV1ResourcesClassOfServicesGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<ClassOfService>>
    {
        const response = await this.baseService.apiNskV1ResourcesClassOfServicesGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesClassOfServicesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific commission rate resource.
     * 
     */
    public async store_apiNskV1ResourcesCommissionRatesByCommissionRateCodeGet(commissionRateCode: string, cultureCode?: string,  headers?: Headers): Promise<CommissionRate>
    {
        const response = await this.baseService.apiNskV1ResourcesCommissionRatesByCommissionRateCodeGet(commissionRateCode,cultureCode,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesCommissionRatesByCommissionRateCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of commission rate resources.
     * 
     */
    public async store_apiNskV1ResourcesCommissionRatesGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<CommissionRate>>
    {
        const response = await this.baseService.apiNskV1ResourcesCommissionRatesGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesCommissionRatesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific contact type resource.
     * 
     */
    public async store_apiNskV1ResourcesContactTypesByContactTypeCodeGet(contactTypeCode: string, cultureCode?: string,  headers?: Headers): Promise<ContactType>
    {
        const response = await this.baseService.apiNskV1ResourcesContactTypesByContactTypeCodeGet(contactTypeCode,cultureCode,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesContactTypesByContactTypeCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of contact type resources.
     * 
     */
    public async store_apiNskV1ResourcesContactTypesGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<ContactType>>
    {
        const response = await this.baseService.apiNskV1ResourcesContactTypesGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesContactTypesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves resource setting data based on the accept content type.
     * This is a post to easily allow special path characters.  If the data returned is not in HTML format and convertRtfToHtml is set to true,  the content requested was of an incompatible data type.
     */
    public async store_apiNskV1ResourcesContentsByContentIdDataGet(contentId: number, convertRtfToHtml?: boolean, eTag?: string,  headers?: Headers): Promise<string>
    {
        const response = await this.baseService.apiNskV1ResourcesContentsByContentIdDataGet(contentId,convertRtfToHtml,eTag,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesContentsByContentIdDataGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves a resource setting and its related information.
     * This is a post to easily allow special path characters.  See /resources/settings/data to avoid manually parsing the data.
     */
    public async store_apiNskV1ResourcesContentsByContentIdGet(contentId: number, convertRtfToHtml?: boolean, eTag?: string,  headers?: Headers): Promise<ResourceContentItem>
    {
        const response = await this.baseService.apiNskV1ResourcesContentsByContentIdGet(contentId,convertRtfToHtml,eTag,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesContentsByContentIdGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Searches the contents based on the search criteria provided.
     * 
     */
    public async store_apiNskV1ResourcesContentsGet(type: 'GeneralReference' | 'News' | 'ConsoleHelp' | 'FareRuleReference' | 'ReviewWithCustomer' | 'Notices' | 'Literature' | 'Links' | 'Image' | 'PromotionReference' | 'SubscriptionReference', name?: string, containerId?: number, pageSize?: number, lastContentId?: number,  headers?: Headers): Promise<Array<ResourceContentResult>>
    {
        const response = await this.baseService.apiNskV1ResourcesContentsGet(type,name,containerId,pageSize,lastContentId,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesContentsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the resource.
     * 
     */
    public async store_apiNskV1ResourcesCulturesByCultureCodeGet(cultureCode: string, forCultureCode?: string,  headers?: Headers): Promise<Culture>
    {
        const response = await this.baseService.apiNskV1ResourcesCulturesByCultureCodeGet(cultureCode,forCultureCode,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesCulturesByCultureCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the resources.
     * 
     */
    public async store_apiNskV1ResourcesCulturesGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<Culture>>
    {
        const response = await this.baseService.apiNskV1ResourcesCulturesGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesCulturesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific customer program resource.
     * 
     */
    public async store_apiNskV1ResourcesCustomerProgramsByProgramCodeGet(programCode: string, cultureCode?: string,  headers?: Headers): Promise<CustomerProgram>
    {
        const response = await this.baseService.apiNskV1ResourcesCustomerProgramsByProgramCodeGet(programCode,cultureCode,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesCustomerProgramsByProgramCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific program level.
     * 
     */
    public async store_apiNskV1ResourcesCustomerProgramsByProgramCodeLevelsByProgramLevelCodeGet(programCode: string, programLevelCode: string, cultureCode?: string,  headers?: Headers): Promise<CustomerProgramLevel>
    {
        const response = await this.baseService.apiNskV1ResourcesCustomerProgramsByProgramCodeLevelsByProgramLevelCodeGet(programCode,programLevelCode,cultureCode,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesCustomerProgramsByProgramCodeLevelsByProgramLevelCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of customer program resources.
     * 
     */
    public async store_apiNskV1ResourcesCustomerProgramsGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<CustomerProgram>>
    {
        const response = await this.baseService.apiNskV1ResourcesCustomerProgramsGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesCustomerProgramsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific delay resource.
     * 
     */
    public async store_apiNskV1ResourcesDelaysByDelayCodeGet(delayCode: string, cultureCode?: string,  headers?: Headers): Promise<Delay>
    {
        const response = await this.baseService.apiNskV1ResourcesDelaysByDelayCodeGet(delayCode,cultureCode,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesDelaysByDelayCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of delay resources.
     * 
     */
    public async store_apiNskV1ResourcesDelaysGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<Delay>>
    {
        const response = await this.baseService.apiNskV1ResourcesDelaysGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesDelaysGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific department resource.
     * 
     */
    public async store_apiNskV1ResourcesDepartmentsByDepartmentCodeGet(departmentCode: string, cultureCode?: string,  headers?: Headers): Promise<Department>
    {
        const response = await this.baseService.apiNskV1ResourcesDepartmentsByDepartmentCodeGet(departmentCode,cultureCode,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesDepartmentsByDepartmentCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of department resources.
     * 
     */
    public async store_apiNskV1ResourcesDepartmentsGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<Department>>
    {
        const response = await this.baseService.apiNskV1ResourcesDepartmentsGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesDepartmentsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the localizations.
     * 
     */
    public async store_apiNskV1ResourcesDistributionOptionsGet(cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<EnumResource>>
    {
        const response = await this.baseService.apiNskV1ResourcesDistributionOptionsGet(cultureCode,eTag,startIndex,itemCount,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesDistributionOptionsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific document type resource.
     * 
     */
    public async store_apiNskV1ResourcesDocumentTypesByDocumentTypeCodeGet(documentTypeCode: string, cultureCode?: string,  headers?: Headers): Promise<DocumentType>
    {
        const response = await this.baseService.apiNskV1ResourcesDocumentTypesByDocumentTypeCodeGet(documentTypeCode,cultureCode,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesDocumentTypesByDocumentTypeCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of document type resources.
     * 
     */
    public async store_apiNskV1ResourcesDocumentTypesGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<DocumentType>>
    {
        const response = await this.baseService.apiNskV1ResourcesDocumentTypesGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesDocumentTypesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific domain resource.
     * 
     */
    public async store_apiNskV1ResourcesDomainsByDomainCodeGet(domainCode: string,  headers?: Headers): Promise<Domain>
    {
        const response = await this.baseService.apiNskV1ResourcesDomainsByDomainCodeGet(domainCode,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesDomainsByDomainCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of domain resources.
     * 
     */
    public async store_apiNskV1ResourcesDomainsGet(eTag?: string,  headers?: Headers): Promise<Array<Domain>>
    {
        const response = await this.baseService.apiNskV1ResourcesDomainsGet(eTag,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesDomainsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific email type resource.
     * 
     */
    public async store_apiNskV1ResourcesEmailTypesByEmailTypeCodeGet(emailTypeCode: string, cultureCode?: string,  headers?: Headers): Promise<EmailType>
    {
        const response = await this.baseService.apiNskV1ResourcesEmailTypesByEmailTypeCodeGet(emailTypeCode,cultureCode,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesEmailTypesByEmailTypeCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of email type resources.
     * 
     */
    public async store_apiNskV1ResourcesEmailTypesGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<EmailType>>
    {
        const response = await this.baseService.apiNskV1ResourcesEmailTypesGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesEmailTypesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific external rate resource.
     * 
     */
    public async store_apiNskV1ResourcesExternalRatesByRateIdGet(rateId: string, cultureCode?: string,  headers?: Headers): Promise<ExternalRate>
    {
        const response = await this.baseService.apiNskV1ResourcesExternalRatesByRateIdGet(rateId,cultureCode,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesExternalRatesByRateIdGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of external rate resources.
     * 
     */
    public async store_apiNskV1ResourcesExternalRatesGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<ExternalRate>>
    {
        const response = await this.baseService.apiNskV1ResourcesExternalRatesGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesExternalRatesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific fare type resource.
     * 
     */
    public async store_apiNskV1ResourcesFareTypesByFareTypeCodeGet(fareTypeCode: string, cultureCode?: string,  headers?: Headers): Promise<FareType>
    {
        const response = await this.baseService.apiNskV1ResourcesFareTypesByFareTypeCodeGet(fareTypeCode,cultureCode,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesFareTypesByFareTypeCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of fare type resources.
     * 
     */
    public async store_apiNskV1ResourcesFareTypesGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<FareType>>
    {
        const response = await this.baseService.apiNskV1ResourcesFareTypesGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesFareTypesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets the fee options.
     * Note, this endpoint is not cached like other resource endpoints.
     */
    public async store_apiNskV1ResourcesFeesByFeeCodeDetailsGet(feeCode: string,  headers?: Headers): Promise<Array<FeeDetail>>
    {
        const response = await this.baseService.apiNskV1ResourcesFeesByFeeCodeDetailsGet(feeCode,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesFeesByFeeCodeDetailsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific fee resource.
     * 
     */
    public async store_apiNskV1ResourcesFeesByFeeCodeGet(feeCode: string, cultureCode?: string,  headers?: Headers): Promise<Fee>
    {
        const response = await this.baseService.apiNskV1ResourcesFeesByFeeCodeGet(feeCode,cultureCode,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesFeesByFeeCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of fee resources.
     * 
     */
    public async store_apiNskV1ResourcesFeesGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<Fee>>
    {
        const response = await this.baseService.apiNskV1ResourcesFeesGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesFeesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the localizations.
     * 
     */
    public async store_apiNskV1ResourcesGendersGet(cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<EnumResource>>
    {
        const response = await this.baseService.apiNskV1ResourcesGendersGet(cultureCode,eTag,startIndex,itemCount,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesGendersGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific hot card reason resource.
     * 
     */
    public async store_apiNskV1ResourcesHotCardReasonsByHotCardReasonCodeGet(hotCardReasonCode: string, cultureCode?: string,  headers?: Headers): Promise<HotCardReason>
    {
        const response = await this.baseService.apiNskV1ResourcesHotCardReasonsByHotCardReasonCodeGet(hotCardReasonCode,cultureCode,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesHotCardReasonsByHotCardReasonCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of hot card reason resources.
     * 
     */
    public async store_apiNskV1ResourcesHotCardReasonsGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<HotCardReason>>
    {
        const response = await this.baseService.apiNskV1ResourcesHotCardReasonsGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesHotCardReasonsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific issuance reason resource.
     * 
     */
    public async store_apiNskV1ResourcesIssuanceReasonsByIssuanceReasonCodeGet(issuanceReasonCode: string, cultureCode?: string,  headers?: Headers): Promise<IssuanceReason>
    {
        const response = await this.baseService.apiNskV1ResourcesIssuanceReasonsByIssuanceReasonCodeGet(issuanceReasonCode,cultureCode,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesIssuanceReasonsByIssuanceReasonCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of issuance reason resources.
     * 
     */
    public async store_apiNskV1ResourcesIssuanceReasonsGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<IssuanceReason>>
    {
        const response = await this.baseService.apiNskV1ResourcesIssuanceReasonsGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesIssuanceReasonsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific location resource.
     * 
     */
    public async store_apiNskV1ResourcesLocationsByLocationCodeGet(locationCode: string, cultureCode?: string,  headers?: Headers): Promise<Location>
    {
        const response = await this.baseService.apiNskV1ResourcesLocationsByLocationCodeGet(locationCode,cultureCode,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesLocationsByLocationCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of location resources.
     * 
     */
    public async store_apiNskV1ResourcesLocationsGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<Location>>
    {
        const response = await this.baseService.apiNskV1ResourcesLocationsGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesLocationsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific mac resource.
     * 
     */
    public async store_apiNskV1ResourcesMacsByMacCodeGet(macCode: string,  headers?: Headers): Promise<Mac>
    {
        const response = await this.baseService.apiNskV1ResourcesMacsByMacCodeGet(macCode,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesMacsByMacCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of mac resources.
     * 
     */
    public async store_apiNskV1ResourcesMacsGet(eTag?: string,  headers?: Headers): Promise<Array<Mac>>
    {
        const response = await this.baseService.apiNskV1ResourcesMacsGet(eTag,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesMacsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific message type resource.
     * 
     */
    public async store_apiNskV1ResourcesMessageTypesByMessageTypeCodeGet(messageTypeCode: string, cultureCode?: string,  headers?: Headers): Promise<MessageType>
    {
        const response = await this.baseService.apiNskV1ResourcesMessageTypesByMessageTypeCodeGet(messageTypeCode,cultureCode,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesMessageTypesByMessageTypeCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of message type resources.
     * 
     */
    public async store_apiNskV1ResourcesMessageTypesGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<MessageType>>
    {
        const response = await this.baseService.apiNskV1ResourcesMessageTypesGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesMessageTypesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the localizations.
     * 
     */
    public async store_apiNskV1ResourcesOrganizationStatusesGet(cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<EnumResource>>
    {
        const response = await this.baseService.apiNskV1ResourcesOrganizationStatusesGet(cultureCode,eTag,startIndex,itemCount,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesOrganizationStatusesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific passenger discount resource.
     * 
     */
    public async store_apiNskV1ResourcesPassengerDiscountsByPassengerDiscountCodeGet(passengerDiscountCode: string, cultureCode?: string,  headers?: Headers): Promise<PassengerDiscount>
    {
        const response = await this.baseService.apiNskV1ResourcesPassengerDiscountsByPassengerDiscountCodeGet(passengerDiscountCode,cultureCode,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesPassengerDiscountsByPassengerDiscountCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of passenger discount resources.
     * 
     */
    public async store_apiNskV1ResourcesPassengerDiscountsGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<PassengerDiscount>>
    {
        const response = await this.baseService.apiNskV1ResourcesPassengerDiscountsGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesPassengerDiscountsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific passenger type resource.
     * 
     */
    public async store_apiNskV1ResourcesPassengerTypesByPassengerTypeCodeGet(passengerTypeCode: string, cultureCode?: string,  headers?: Headers): Promise<PassengerType>
    {
        const response = await this.baseService.apiNskV1ResourcesPassengerTypesByPassengerTypeCodeGet(passengerTypeCode,cultureCode,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesPassengerTypesByPassengerTypeCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of passenger type resources.
     * 
     */
    public async store_apiNskV1ResourcesPassengerTypesGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<PassengerType>>
    {
        const response = await this.baseService.apiNskV1ResourcesPassengerTypesGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesPassengerTypesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific payment method resource.
     * 
     */
    public async store_apiNskV1ResourcesPaymentMethodsByPaymentMethodCodeGet(paymentMethodCode: string, cultureCode?: string,  headers?: Headers): Promise<PaymentMethod>
    {
        const response = await this.baseService.apiNskV1ResourcesPaymentMethodsByPaymentMethodCodeGet(paymentMethodCode,cultureCode,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesPaymentMethodsByPaymentMethodCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of payment method resources.
     * 
     */
    public async store_apiNskV1ResourcesPaymentMethodsGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<PaymentMethod>>
    {
        const response = await this.baseService.apiNskV1ResourcesPaymentMethodsGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesPaymentMethodsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific person attachment resource.
     * 
     */
    public async store_apiNskV1ResourcesPersonAttachmentTypesByPersonAttachmentTypeCodeGet(personAttachmentTypeCode: string, cultureCode?: string,  headers?: Headers): Promise<PersonAttachmentType>
    {
        const response = await this.baseService.apiNskV1ResourcesPersonAttachmentTypesByPersonAttachmentTypeCodeGet(personAttachmentTypeCode,cultureCode,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesPersonAttachmentTypesByPersonAttachmentTypeCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of person attachment type resources.
     * 
     */
    public async store_apiNskV1ResourcesPersonAttachmentTypesGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<ResourceEntriesPersonAttachmentType>
    {
        const response = await this.baseService.apiNskV1ResourcesPersonAttachmentTypesGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesPersonAttachmentTypesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific person information type resource.
     * 
     */
    public async store_apiNskV1ResourcesPersonInformationTypesByPersonInformationTypeCodeGet(personInformationTypeCode: string, cultureCode?: string,  headers?: Headers): Promise<PersonInformationType>
    {
        const response = await this.baseService.apiNskV1ResourcesPersonInformationTypesByPersonInformationTypeCodeGet(personInformationTypeCode,cultureCode,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesPersonInformationTypesByPersonInformationTypeCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of person information type resources.
     * 
     */
    public async store_apiNskV1ResourcesPersonInformationTypesGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<PersonInformationType>>
    {
        const response = await this.baseService.apiNskV1ResourcesPersonInformationTypesGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesPersonInformationTypesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific phone number type resource.
     * 
     */
    public async store_apiNskV1ResourcesPhoneTypesByPhoneTypeCodeGet(phoneTypeCode: string, cultureCode?: string,  headers?: Headers): Promise<PhoneType>
    {
        const response = await this.baseService.apiNskV1ResourcesPhoneTypesByPhoneTypeCodeGet(phoneTypeCode,cultureCode,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesPhoneTypesByPhoneTypeCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of phone number type resources.
     * 
     */
    public async store_apiNskV1ResourcesPhoneTypesGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<PhoneType>>
    {
        const response = await this.baseService.apiNskV1ResourcesPhoneTypesGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesPhoneTypesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific product class resource.
     * 
     */
    public async store_apiNskV1ResourcesProductClassesByProductClassCodeGet(productClassCode: string, cultureCode?: string,  headers?: Headers): Promise<ProductClass>
    {
        const response = await this.baseService.apiNskV1ResourcesProductClassesByProductClassCodeGet(productClassCode,cultureCode,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesProductClassesByProductClassCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of product class resources.
     * 
     */
    public async store_apiNskV1ResourcesProductClassesGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<ProductClass>>
    {
        const response = await this.baseService.apiNskV1ResourcesProductClassesGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesProductClassesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific promotion setting type resource.
     * 
     */
    public async store_apiNskV1ResourcesPromotionSettingTypesByPromotionSettingsTypeCodeGet(promotionSettingsTypeCode: string, cultureCode?: string,  headers?: Headers): Promise<PromotionSettingType>
    {
        const response = await this.baseService.apiNskV1ResourcesPromotionSettingTypesByPromotionSettingsTypeCodeGet(promotionSettingsTypeCode,cultureCode,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesPromotionSettingTypesByPromotionSettingsTypeCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of promotion setting type resources.
     * 
     */
    public async store_apiNskV1ResourcesPromotionSettingTypesGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<PromotionSettingType>>
    {
        const response = await this.baseService.apiNskV1ResourcesPromotionSettingTypesGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesPromotionSettingTypesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific province state resource.
     * 
     */
    public async store_apiNskV1ResourcesProvinceStatesByProvinceStateCodeGet(provinceStateCode: string, cultureCode?: string,  headers?: Headers): Promise<ProvinceState>
    {
        const response = await this.baseService.apiNskV1ResourcesProvinceStatesByProvinceStateCodeGet(provinceStateCode,cultureCode,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesProvinceStatesByProvinceStateCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of province state resources.
     * 
     */
    public async store_apiNskV1ResourcesProvinceStatesGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<ProvinceState>>
    {
        const response = await this.baseService.apiNskV1ResourcesProvinceStatesGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesProvinceStatesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets a response with a single QueueCategory that match the given parameters.
     * 
     */
    public async store_apiNskV1ResourcesQueueCategoriesByQueueCategoryCodeGet(queueCategoryCode: string, cultureCode?: string,  headers?: Headers): Promise<QueueCategory>
    {
        const response = await this.baseService.apiNskV1ResourcesQueueCategoriesByQueueCategoryCodeGet(queueCategoryCode,cultureCode,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesQueueCategoriesByQueueCategoryCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets a response with a list of QueueCategories that match the given parameters.
     * 
     */
    public async store_apiNskV1ResourcesQueueCategoriesGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<QueueCategory>>
    {
        const response = await this.baseService.apiNskV1ResourcesQueueCategoriesGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesQueueCategoriesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves a specific reminder time resource that contains valid times for a passenger travel notification timed  event.
     * 
     */
    public async store_apiNskV1ResourcesReminderTimesByTimedEventTypeGet(timedEventType: 'Departure' | 'Arrival',  headers?: Headers): Promise<ProvinceState>
    {
        const response = await this.baseService.apiNskV1ResourcesReminderTimesByTimedEventTypeGet(timedEventType,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesReminderTimesByTimedEventTypeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of reminder time resource that contains valid times for all passenger travel notification  timed events.
     * 
     */
    public async store_apiNskV1ResourcesReminderTimesGet(eTag?: string,  headers?: Headers): Promise<Array<ReminderTime>>
    {
        const response = await this.baseService.apiNskV1ResourcesReminderTimesGet(eTag,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesReminderTimesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific role setting resource.
     * 
     */
    public async store_apiNskV1ResourcesRoleSettingTypesByRoleSettingTypeCodeGet(roleSettingTypeCode: string,  headers?: Headers): Promise<RoleSettingType>
    {
        const response = await this.baseService.apiNskV1ResourcesRoleSettingTypesByRoleSettingTypeCodeGet(roleSettingTypeCode,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesRoleSettingTypesByRoleSettingTypeCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of role setting resources.
     * 
     */
    public async store_apiNskV1ResourcesRoleSettingTypesGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<RoleSettingType>>
    {
        const response = await this.baseService.apiNskV1ResourcesRoleSettingTypesGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesRoleSettingTypesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the resource.
     * 
     */
    public async store_apiNskV1ResourcesRolesByRoleCodeGet(roleCode: string,  headers?: Headers): Promise<Role>
    {
        const response = await this.baseService.apiNskV1ResourcesRolesByRoleCodeGet(roleCode,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesRolesByRoleCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the resources.
     * 
     */
    public async store_apiNskV1ResourcesRolesGet(eTag?: string,  headers?: Headers): Promise<Array<Role>>
    {
        const response = await this.baseService.apiNskV1ResourcesRolesGet(eTag,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesRolesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the localizations.
     * 
     */
    public async store_apiNskV1ResourcesSearchTypesGet(cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<EnumResource>>
    {
        const response = await this.baseService.apiNskV1ResourcesSearchTypesGet(cultureCode,eTag,startIndex,itemCount,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesSearchTypesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves resource setting data based on the accept content type.
     * This is a post to easily allow special path characters.
     */
    public async store_apiNskV1ResourcesSettingsDataPost(request?: SettingsCategoryRequest, eTag?: string,  headers?: Headers): Promise<string>
    {
        const response = await this.baseService.apiNskV1ResourcesSettingsDataPost(request,eTag,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesSettingsDataPost
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves a resource setting and its related information.
     * This is a post to easily allow special path characters.  See /resources/settings/data to avoid manually parsing the data.
     */
    public async store_apiNskV1ResourcesSettingsPost(request?: SettingsCategoryRequest, eTag?: string,  headers?: Headers): Promise<ResourceCategoryItem>
    {
        const response = await this.baseService.apiNskV1ResourcesSettingsPost(request,eTag,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesSettingsPost
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific shopping attribute group resource.
     * 
     */
    public async store_apiNskV1ResourcesShoppingAttributeGroupsByShoppingAttributeGroupCodeGet(shoppingAttributeGroupCode: string, cultureCode?: string,  headers?: Headers): Promise<ShoppingAttributeGroup>
    {
        const response = await this.baseService.apiNskV1ResourcesShoppingAttributeGroupsByShoppingAttributeGroupCodeGet(shoppingAttributeGroupCode,cultureCode,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesShoppingAttributeGroupsByShoppingAttributeGroupCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of shopping attribute group resources.
     * 
     */
    public async store_apiNskV1ResourcesShoppingAttributeGroupsGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<ShoppingAttributeGroup>>
    {
        const response = await this.baseService.apiNskV1ResourcesShoppingAttributeGroupsGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesShoppingAttributeGroupsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific shopping attribute resource.
     * 
     */
    public async store_apiNskV1ResourcesShoppingAttributesByShoppingAttributeCodeGet(shoppingAttributeCode: string, cultureCode?: string,  headers?: Headers): Promise<ShoppingAttribute>
    {
        const response = await this.baseService.apiNskV1ResourcesShoppingAttributesByShoppingAttributeCodeGet(shoppingAttributeCode,cultureCode,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesShoppingAttributesByShoppingAttributeCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of shopping attribute resources.
     * 
     */
    public async store_apiNskV1ResourcesShoppingAttributesGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<ShoppingAttribute>>
    {
        const response = await this.baseService.apiNskV1ResourcesShoppingAttributesGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesShoppingAttributesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves a specific single sign on provider.
     * 
     */
    public async store_apiNskV1ResourcesSingleSignOnProviderByProviderNameGet(providerName: string,  headers?: Headers): Promise<SingleSignOnProvider>
    {
        const response = await this.baseService.apiNskV1ResourcesSingleSignOnProviderByProviderNameGet(providerName,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesSingleSignOnProviderByProviderNameGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves a list of available single sign on providers.
     * 
     */
    public async store_apiNskV1ResourcesSingleSignOnProviderGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<SingleSignOnProvider>>
    {
        const response = await this.baseService.apiNskV1ResourcesSingleSignOnProviderGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesSingleSignOnProviderGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific ssr group resource.
     * 
     */
    public async store_apiNskV1ResourcesSsrGroupsBySsrGroupCodeGet(ssrGroupCode: string, cultureCode?: string,  headers?: Headers): Promise<SsrGroup>
    {
        const response = await this.baseService.apiNskV1ResourcesSsrGroupsBySsrGroupCodeGet(ssrGroupCode,cultureCode,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesSsrGroupsBySsrGroupCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of ssr group resources.
     * 
     */
    public async store_apiNskV1ResourcesSsrGroupsGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<SsrGroup>>
    {
        const response = await this.baseService.apiNskV1ResourcesSsrGroupsGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesSsrGroupsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific ssr nest resource.
     * 
     */
    public async store_apiNskV1ResourcesSsrNestsBySsrNestCodeGet(ssrNestCode: string, cultureCode?: string,  headers?: Headers): Promise<SsrNest>
    {
        const response = await this.baseService.apiNskV1ResourcesSsrNestsBySsrNestCodeGet(ssrNestCode,cultureCode,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesSsrNestsBySsrNestCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of ssr nest resources.
     * 
     */
    public async store_apiNskV1ResourcesSsrNestsGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<SsrNest>>
    {
        const response = await this.baseService.apiNskV1ResourcesSsrNestsGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesSsrNestsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific ssr restriction result. resource.
     * 
     */
    public async store_apiNskV1ResourcesSsrRestrictionResultsBySsrRestrictionResultCodeGet(ssrRestrictionResultCode: string, cultureCode?: string,  headers?: Headers): Promise<SsrRestrictionResult>
    {
        const response = await this.baseService.apiNskV1ResourcesSsrRestrictionResultsBySsrRestrictionResultCodeGet(ssrRestrictionResultCode,cultureCode,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesSsrRestrictionResultsBySsrRestrictionResultCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of ssr restriction result resources.
     * 
     */
    public async store_apiNskV1ResourcesSsrRestrictionResultsGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<SsrRestrictionResult>>
    {
        const response = await this.baseService.apiNskV1ResourcesSsrRestrictionResultsGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesSsrRestrictionResultsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific ssr resource.
     * 
     */
    public async store_apiNskV1ResourcesSsrsBySsrCodeGet(ssrCode: string, cultureCode?: string,  headers?: Headers): Promise<Ssr>
    {
        const response = await this.baseService.apiNskV1ResourcesSsrsBySsrCodeGet(ssrCode,cultureCode,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesSsrsBySsrCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of ssr resources.
     * 
     */
    public async store_apiNskV1ResourcesSsrsGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<Ssr>>
    {
        const response = await this.baseService.apiNskV1ResourcesSsrsGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesSsrsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific standby priority resource.
     * 
     */
    public async store_apiNskV1ResourcesStandByPrioritiesByStandByPriorityCodeGet(standByPriorityCode: string, cultureCode?: string,  headers?: Headers): Promise<StandByPriority>
    {
        const response = await this.baseService.apiNskV1ResourcesStandByPrioritiesByStandByPriorityCodeGet(standByPriorityCode,cultureCode,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesStandByPrioritiesByStandByPriorityCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of standby priority resources.
     * 
     */
    public async store_apiNskV1ResourcesStandByPrioritiesGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<StandByPriority>>
    {
        const response = await this.baseService.apiNskV1ResourcesStandByPrioritiesGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesStandByPrioritiesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific station category resource.
     * 
     */
    public async store_apiNskV1ResourcesStationCategoriesByStationCategoryCodeGet(stationCategoryCode: string, cultureCode?: string,  headers?: Headers): Promise<StationCategory>
    {
        const response = await this.baseService.apiNskV1ResourcesStationCategoriesByStationCategoryCodeGet(stationCategoryCode,cultureCode,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesStationCategoriesByStationCategoryCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of station category resources.
     * 
     */
    public async store_apiNskV1ResourcesStationCategoriesGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<StationCategory>>
    {
        const response = await this.baseService.apiNskV1ResourcesStationCategoriesGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesStationCategoriesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Get the station details.
     * Note this endpoint is not cached like other resource endpoints.
     */
    public async store_apiNskV1ResourcesStationsByStationCodeDetailsGet(stationCode: string,  headers?: Headers): Promise<ResourceEntriesStationDetail>
    {
        const response = await this.baseService.apiNskV1ResourcesStationsByStationCodeDetailsGet(stationCode,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesStationsByStationCodeDetailsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific station resource.
     * 
     */
    public async store_apiNskV1ResourcesStationsByStationCodeGet(stationCode: string, cultureCode?: string, eTag?: string,  headers?: Headers): Promise<Station>
    {
        const response = await this.baseService.apiNskV1ResourcesStationsByStationCodeGet(stationCode,cultureCode,eTag,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesStationsByStationCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets a response with stations filtered by category.
     * This endpoint is resource intensive until cached.
     */
    public async store_apiNskV1ResourcesStationsCategoryByStationCategoryCodeGet(stationCategoryCode: string, activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<Station>>
    {
        const response = await this.baseService.apiNskV1ResourcesStationsCategoryByStationCategoryCodeGet(stationCategoryCode,activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesStationsCategoryByStationCategoryCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of station resources.
     * 
     */
    public async store_apiNskV1ResourcesStationsGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<Station>>
    {
        const response = await this.baseService.apiNskV1ResourcesStationsGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesStationsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific sub zone resource.
     * 
     */
    public async store_apiNskV1ResourcesSubZonesBySubZoneCodeGet(subZoneCode: string, cultureCode?: string,  headers?: Headers): Promise<SubZone>
    {
        const response = await this.baseService.apiNskV1ResourcesSubZonesBySubZoneCodeGet(subZoneCode,cultureCode,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesSubZonesBySubZoneCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of sub zone resources.
     * 
     */
    public async store_apiNskV1ResourcesSubZonesGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<SubZone>>
    {
        const response = await this.baseService.apiNskV1ResourcesSubZonesGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesSubZonesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific suffix resource.
     * 
     */
    public async store_apiNskV1ResourcesSuffixesBySuffixCodeGet(suffixCode: string,  headers?: Headers): Promise<Suffix>
    {
        const response = await this.baseService.apiNskV1ResourcesSuffixesBySuffixCodeGet(suffixCode,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesSuffixesBySuffixCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of suffix resources.
     * 
     */
    public async store_apiNskV1ResourcesSuffixesGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<Suffix>>
    {
        const response = await this.baseService.apiNskV1ResourcesSuffixesGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesSuffixesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific time zone resource.
     * 
     */
    public async store_apiNskV1ResourcesTimeZonesByTimeZoneCodeGet(timeZoneCode: string, cultureCode?: string, eTag?: string,  headers?: Headers): Promise<TimeZone>
    {
        const response = await this.baseService.apiNskV1ResourcesTimeZonesByTimeZoneCodeGet(timeZoneCode,cultureCode,eTag,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesTimeZonesByTimeZoneCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of time zone resources.
     * 
     */
    public async store_apiNskV1ResourcesTimeZonesGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<TimeZone>>
    {
        const response = await this.baseService.apiNskV1ResourcesTimeZonesGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesTimeZonesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific title resource.
     * 
     */
    public async store_apiNskV1ResourcesTitlesByTitleKeyGet(titleKey: string,  headers?: Headers): Promise<Title>
    {
        const response = await this.baseService.apiNskV1ResourcesTitlesByTitleKeyGet(titleKey,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesTitlesByTitleKeyGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of title resources.
     * 
     */
    public async store_apiNskV1ResourcesTitlesGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<Title>>
    {
        const response = await this.baseService.apiNskV1ResourcesTitlesGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesTitlesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific travel class resource.
     * 
     */
    public async store_apiNskV1ResourcesTravelClassesByTravelClassCodeGet(travelClassCode: string, cultureCode?: string,  headers?: Headers): Promise<TravelClass>
    {
        const response = await this.baseService.apiNskV1ResourcesTravelClassesByTravelClassCodeGet(travelClassCode,cultureCode,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesTravelClassesByTravelClassCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of travel class resources.
     * 
     */
    public async store_apiNskV1ResourcesTravelClassesGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<TravelClass>>
    {
        const response = await this.baseService.apiNskV1ResourcesTravelClassesGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesTravelClassesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific zone resource.
     * 
     */
    public async store_apiNskV1ResourcesZonesByZoneCodeGet(zoneCode: string, cultureCode?: string,  headers?: Headers): Promise<Zone>
    {
        const response = await this.baseService.apiNskV1ResourcesZonesByZoneCodeGet(zoneCode,cultureCode,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesZonesByZoneCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of zone resources.
     * 
     */
    public async store_apiNskV1ResourcesZonesGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<Zone>>
    {
        const response = await this.baseService.apiNskV1ResourcesZonesGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers).toPromise();
        // TODO: Implement apiNskV1ResourcesZonesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets the travel commerce vendors.
     * 
     */
    public async store_apiNskV2ResourcesAddOnsVendorsGet(type: 'Default' | 'Insurance' | 'Activity' | 'Hotel' | 'Car', cultureCode?: string, eTag?: string,  headers?: Headers): Promise<Array<Vendorv2>>
    {
        const response = await this.baseService.apiNskV2ResourcesAddOnsVendorsGet(type,cultureCode,eTag,'body', headers).toPromise();
        // TODO: Implement apiNskV2ResourcesAddOnsVendorsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves a specific country resource.
     * 
     */
    public async store_apiNskV2ResourcesCountriesByCountryCodeGet(countryCode: string, cultureCode?: string,  headers?: Headers): Promise<Countryv2>
    {
        const response = await this.baseService.apiNskV2ResourcesCountriesByCountryCodeGet(countryCode,cultureCode,'body', headers).toPromise();
        // TODO: Implement apiNskV2ResourcesCountriesByCountryCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of country resources.
     * 
     */
    public async store_apiNskV2ResourcesCountriesGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<Countryv2>>
    {
        const response = await this.baseService.apiNskV2ResourcesCountriesGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers).toPromise();
        // TODO: Implement apiNskV2ResourcesCountriesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific currency resource.
     * 
     */
    public async store_apiNskV2ResourcesCurrenciesControllerv2ByCurrencyCodeGet(currencyCode: string, cultureCode?: string,  headers?: Headers): Promise<Currency>
    {
        const response = await this.baseService.apiNskV2ResourcesCurrenciesControllerv2ByCurrencyCodeGet(currencyCode,cultureCode,'body', headers).toPromise();
        // TODO: Implement apiNskV2ResourcesCurrenciesControllerv2ByCurrencyCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of currency resources.
     * 
     */
    public async store_apiNskV2ResourcesCurrenciesControllerv2Get(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<ResourceEntriesCurrencyv2>
    {
        const response = await this.baseService.apiNskV2ResourcesCurrenciesControllerv2Get(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers).toPromise();
        // TODO: Implement apiNskV2ResourcesCurrenciesControllerv2Get
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the resource.
     * 
     */
    public async store_apiNskV2ResourcesMarketsByLocationCodeByTravelLocationCodeGet(locationCode: string, travelLocationCode: string, cultureCode?: string,  headers?: Headers): Promise<Market>
    {
        const response = await this.baseService.apiNskV2ResourcesMarketsByLocationCodeByTravelLocationCodeGet(locationCode,travelLocationCode,cultureCode,'body', headers).toPromise();
        // TODO: Implement apiNskV2ResourcesMarketsByLocationCodeByTravelLocationCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves a specific market resource.
     * 
     */
    public async store_apiNskV2ResourcesMarketsByLocationCodeGet(locationCode: string, cultureCode?: string,  headers?: Headers): Promise<Array<Market>>
    {
        const response = await this.baseService.apiNskV2ResourcesMarketsByLocationCodeGet(locationCode,cultureCode,'body', headers).toPromise();
        // TODO: Implement apiNskV2ResourcesMarketsByLocationCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of market resources.
     * 
     */
    public async store_apiNskV2ResourcesMarketsGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<Marketv2>>
    {
        const response = await this.baseService.apiNskV2ResourcesMarketsGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers).toPromise();
        // TODO: Implement apiNskV2ResourcesMarketsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }

}
