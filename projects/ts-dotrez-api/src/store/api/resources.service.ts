/**
 * API - Current Routes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: trunk
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from "rxjs/Observable";
import { map, toPromise } from "rxjs";
import IHttpClient from "../IHttpClient";
import { inject, injectable } from "inversify";
import { Headers } from "../Headers";
import HttpResponse from "../HttpResponse";
import {
    AccountTransactionCode 
    AddressType 
    AgentSettingType 
    Area 
    BaggageType 
    BundleApplication 
    BundleConfiguration 
    BundleRule 
    BundleSet 
    BundleSsrConfiguration 
    Carrier 
    City 
    ClassOfService 
    CommerceLocation 
    CommissionRate 
    ContactType 
    Countryv2 
    Culture 
    Currency 
    CustomerProgram 
    CustomerProgramLevel 
    Delay 
    Department 
    DocumentType 
    Domain 
    DynamicParameter 
    EmailType 
    EnumResource 
    ExternalRate 
    FareType 
    Fee 
    FeeDetail 
    HotCardReason 
    IJsonResponse 
    IssuanceReason 
    Location 
    Mac 
    Market 
    Marketv2 
    MessageType 
    ParticipantType 
    PassengerDiscount 
    PassengerType 
    PaymentMethod 
    PersonAttachmentType 
    PersonInformationType 
    PhoneType 
    ProductClass 
    PromotionSettingType 
    ProvinceState 
    QueueCategory 
    ReminderTime 
    ResourceCategoryItem 
    ResourceContentItem 
    ResourceContentResult 
    ResourceEntriesCarrier 
    ResourceEntriesCurrencyv2 
    ResourceEntriesPersonAttachmentType 
    ResourceEntriesStationDetail 
    Role 
    RoleSettingType 
    SettingsCategoryRequest 
    ShoppingAttribute 
    ShoppingAttributeGroup 
    SingleSignOnProvider 
    Source 
    Ssr 
    SsrGroup 
    SsrNest 
    SsrRestrictionResult 
    StandByPriority 
    Station 
    StationCategory 
    SubZone 
    Suffix 
    TimeZone 
    Title 
    TravelClass 
    Vendor 
    Vendorv2 
    Zone 
} from 'api-models';

import {
        apiNskV1ResourcesAccountTransactionCodesByTransactionCodeGet
        apiNskV1ResourcesAccountTransactionCodesGet
        apiNskV1ResourcesAddOnsLocationsGet
        apiNskV1ResourcesAddOnsParametersGet
        apiNskV1ResourcesAddOnsParticipanttypesGet
        apiNskV1ResourcesAddOnsSourcesBySourceCodeGet
        apiNskV1ResourcesAddOnsSourcesGet
        apiNskV1ResourcesAddOnsVendorsGet
        apiNskV1ResourcesAddressTypesByAddressTypeCodeGet
        apiNskV1ResourcesAddressTypesGet
        apiNskV1ResourcesAgentSettingTypesByAgentSettingTypeCodeGet
        apiNskV1ResourcesAgentSettingTypesGet
        apiNskV1ResourcesAreasByAreaCodeGet
        apiNskV1ResourcesAreasGet
        apiNskV1ResourcesBaggageTypesByBaggageTypeCodeGet
        apiNskV1ResourcesBaggageTypesGet
        apiNskV1ResourcesBundlesApplicationsGet
        apiNskV1ResourcesBundlesByBundleCodeGet
        apiNskV1ResourcesBundlesGet
        apiNskV1ResourcesBundlesRulesGet
        apiNskV1ResourcesBundlesSetsGet
        apiNskV1ResourcesBundlesSsrsGet
        apiNskV1ResourcesCarriersByCarrierCodeGet
        apiNskV1ResourcesCarriersGet
        apiNskV1ResourcesCitiesByCityCodeGet
        apiNskV1ResourcesCitiesGet
        apiNskV1ResourcesClassOfServicesByClassOfServiceCodeGet
        apiNskV1ResourcesClassOfServicesGet
        apiNskV1ResourcesCommissionRatesByCommissionRateCodeGet
        apiNskV1ResourcesCommissionRatesGet
        apiNskV1ResourcesContactTypesByContactTypeCodeGet
        apiNskV1ResourcesContactTypesGet
        apiNskV1ResourcesContentsByContentIdDataGet
        apiNskV1ResourcesContentsByContentIdGet
        apiNskV1ResourcesContentsGet
        apiNskV1ResourcesCulturesByCultureCodeGet
        apiNskV1ResourcesCulturesGet
        apiNskV1ResourcesCustomerProgramsByProgramCodeGet
        apiNskV1ResourcesCustomerProgramsByProgramCodeLevelsByProgramLevelCodeGet
        apiNskV1ResourcesCustomerProgramsGet
        apiNskV1ResourcesDelaysByDelayCodeGet
        apiNskV1ResourcesDelaysGet
        apiNskV1ResourcesDepartmentsByDepartmentCodeGet
        apiNskV1ResourcesDepartmentsGet
        apiNskV1ResourcesDistributionOptionsGet
        apiNskV1ResourcesDocumentTypesByDocumentTypeCodeGet
        apiNskV1ResourcesDocumentTypesGet
        apiNskV1ResourcesDomainsByDomainCodeGet
        apiNskV1ResourcesDomainsGet
        apiNskV1ResourcesEmailTypesByEmailTypeCodeGet
        apiNskV1ResourcesEmailTypesGet
        apiNskV1ResourcesExternalRatesByRateIdGet
        apiNskV1ResourcesExternalRatesGet
        apiNskV1ResourcesFareTypesByFareTypeCodeGet
        apiNskV1ResourcesFareTypesGet
        apiNskV1ResourcesFeesByFeeCodeDetailsGet
        apiNskV1ResourcesFeesByFeeCodeGet
        apiNskV1ResourcesFeesGet
        apiNskV1ResourcesGendersGet
        apiNskV1ResourcesHotCardReasonsByHotCardReasonCodeGet
        apiNskV1ResourcesHotCardReasonsGet
        apiNskV1ResourcesIssuanceReasonsByIssuanceReasonCodeGet
        apiNskV1ResourcesIssuanceReasonsGet
        apiNskV1ResourcesLocationsByLocationCodeGet
        apiNskV1ResourcesLocationsGet
        apiNskV1ResourcesMacsByMacCodeGet
        apiNskV1ResourcesMacsGet
        apiNskV1ResourcesMessageTypesByMessageTypeCodeGet
        apiNskV1ResourcesMessageTypesGet
        apiNskV1ResourcesOrganizationStatusesGet
        apiNskV1ResourcesPassengerDiscountsByPassengerDiscountCodeGet
        apiNskV1ResourcesPassengerDiscountsGet
        apiNskV1ResourcesPassengerTypesByPassengerTypeCodeGet
        apiNskV1ResourcesPassengerTypesGet
        apiNskV1ResourcesPaymentMethodsByPaymentMethodCodeGet
        apiNskV1ResourcesPaymentMethodsGet
        apiNskV1ResourcesPersonAttachmentTypesByPersonAttachmentTypeCodeGet
        apiNskV1ResourcesPersonAttachmentTypesGet
        apiNskV1ResourcesPersonInformationTypesByPersonInformationTypeCodeGet
        apiNskV1ResourcesPersonInformationTypesGet
        apiNskV1ResourcesPhoneTypesByPhoneTypeCodeGet
        apiNskV1ResourcesPhoneTypesGet
        apiNskV1ResourcesProductClassesByProductClassCodeGet
        apiNskV1ResourcesProductClassesGet
        apiNskV1ResourcesPromotionSettingTypesByPromotionSettingsTypeCodeGet
        apiNskV1ResourcesPromotionSettingTypesGet
        apiNskV1ResourcesProvinceStatesByProvinceStateCodeGet
        apiNskV1ResourcesProvinceStatesGet
        apiNskV1ResourcesQueueCategoriesByQueueCategoryCodeGet
        apiNskV1ResourcesQueueCategoriesGet
        apiNskV1ResourcesReminderTimesByTimedEventTypeGet
        apiNskV1ResourcesReminderTimesGet
        apiNskV1ResourcesRoleSettingTypesByRoleSettingTypeCodeGet
        apiNskV1ResourcesRoleSettingTypesGet
        apiNskV1ResourcesRolesByRoleCodeGet
        apiNskV1ResourcesRolesGet
        apiNskV1ResourcesSearchTypesGet
        apiNskV1ResourcesSettingsDataPost
        apiNskV1ResourcesSettingsPost
        apiNskV1ResourcesShoppingAttributeGroupsByShoppingAttributeGroupCodeGet
        apiNskV1ResourcesShoppingAttributeGroupsGet
        apiNskV1ResourcesShoppingAttributesByShoppingAttributeCodeGet
        apiNskV1ResourcesShoppingAttributesGet
        apiNskV1ResourcesSingleSignOnProviderByProviderNameGet
        apiNskV1ResourcesSingleSignOnProviderGet
        apiNskV1ResourcesSsrGroupsBySsrGroupCodeGet
        apiNskV1ResourcesSsrGroupsGet
        apiNskV1ResourcesSsrNestsBySsrNestCodeGet
        apiNskV1ResourcesSsrNestsGet
        apiNskV1ResourcesSsrRestrictionResultsBySsrRestrictionResultCodeGet
        apiNskV1ResourcesSsrRestrictionResultsGet
        apiNskV1ResourcesSsrsBySsrCodeGet
        apiNskV1ResourcesSsrsGet
        apiNskV1ResourcesStandByPrioritiesByStandByPriorityCodeGet
        apiNskV1ResourcesStandByPrioritiesGet
        apiNskV1ResourcesStationCategoriesByStationCategoryCodeGet
        apiNskV1ResourcesStationCategoriesGet
        apiNskV1ResourcesStationsByStationCodeDetailsGet
        apiNskV1ResourcesStationsByStationCodeGet
        apiNskV1ResourcesStationsCategoryByStationCategoryCodeGet
        apiNskV1ResourcesStationsGet
        apiNskV1ResourcesSubZonesBySubZoneCodeGet
        apiNskV1ResourcesSubZonesGet
        apiNskV1ResourcesSuffixesBySuffixCodeGet
        apiNskV1ResourcesSuffixesGet
        apiNskV1ResourcesTimeZonesByTimeZoneCodeGet
        apiNskV1ResourcesTimeZonesGet
        apiNskV1ResourcesTitlesByTitleKeyGet
        apiNskV1ResourcesTitlesGet
        apiNskV1ResourcesTravelClassesByTravelClassCodeGet
        apiNskV1ResourcesTravelClassesGet
        apiNskV1ResourcesZonesByZoneCodeGet
        apiNskV1ResourcesZonesGet
        apiNskV2ResourcesAddOnsVendorsGet
        apiNskV2ResourcesCountriesByCountryCodeGet
        apiNskV2ResourcesCountriesGet
        apiNskV2ResourcesCurrenciesControllerv2ByCurrencyCodeGet
        apiNskV2ResourcesCurrenciesControllerv2Get
        apiNskV2ResourcesMarketsByLocationCodeByTravelLocationCodeGet
        apiNskV2ResourcesMarketsByLocationCodeGet
        apiNskV2ResourcesMarketsGet
} from '../base/api'




@injectable()
export class StoreResourcesService {

    constructor(@inject("Store") private store: Store<any>) {}

    /**
     * Retrieves the specific account transaction code resource.
     * 
     */
    public store_apiNskV1ResourcesAccountTransactionCodesByTransactionCodeGet(transactionCode: string, cultureCode?: string,  headers?: Headers): Promise<AccountTransactionCode>
    {
        const response = await apiNskV1ResourcesAccountTransactionCodesByTransactionCodeGet(transactionCode,cultureCode,'body', headers);
        // TODO: Implement apiNskV1ResourcesAccountTransactionCodesByTransactionCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of account transaction code resources.
     * 
     */
    public store_apiNskV1ResourcesAccountTransactionCodesGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<AccountTransactionCode>>
    {
        const response = await apiNskV1ResourcesAccountTransactionCodesGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers);
        // TODO: Implement apiNskV1ResourcesAccountTransactionCodesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets the commerce locations.
     * 
     */
    public store_apiNskV1ResourcesAddOnsLocationsGet(type: 'Default' | 'Insurance' | 'Activity' | 'Hotel' | 'Car', eTag?: string, vendorCode?: string, cultureCode?: string,  headers?: Headers): Promise<Array<CommerceLocation>>
    {
        const response = await apiNskV1ResourcesAddOnsLocationsGet(type,eTag,vendorCode,cultureCode,'body', headers);
        // TODO: Implement apiNskV1ResourcesAddOnsLocationsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets the parameters.
     * 
     */
    public store_apiNskV1ResourcesAddOnsParametersGet(type: 'Default' | 'Insurance' | 'Activity' | 'Hotel' | 'Car', eTag?: string, vendorCode?: string, cultureCode?: string,  headers?: Headers): Promise<Array<DynamicParameter>>
    {
        const response = await apiNskV1ResourcesAddOnsParametersGet(type,eTag,vendorCode,cultureCode,'body', headers);
        // TODO: Implement apiNskV1ResourcesAddOnsParametersGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets the participant types.
     * 
     */
    public store_apiNskV1ResourcesAddOnsParticipanttypesGet(type: 'Default' | 'Insurance' | 'Activity' | 'Hotel' | 'Car', eTag?: string, vendorCode?: string, cultureCode?: string,  headers?: Headers): Promise<Array<ParticipantType>>
    {
        const response = await apiNskV1ResourcesAddOnsParticipanttypesGet(type,eTag,vendorCode,cultureCode,'body', headers);
        // TODO: Implement apiNskV1ResourcesAddOnsParticipanttypesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets the sources by code.
     * 
     */
    public store_apiNskV1ResourcesAddOnsSourcesBySourceCodeGet(sourceCode: string, cultureCode?: string,  headers?: Headers): Promise<Source>
    {
        const response = await apiNskV1ResourcesAddOnsSourcesBySourceCodeGet(sourceCode,cultureCode,'body', headers);
        // TODO: Implement apiNskV1ResourcesAddOnsSourcesBySourceCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets the sources.
     * 
     */
    public store_apiNskV1ResourcesAddOnsSourcesGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<Source>>
    {
        const response = await apiNskV1ResourcesAddOnsSourcesGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers);
        // TODO: Implement apiNskV1ResourcesAddOnsSourcesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets the travel commerce vendors.
     * 
     */
    public store_apiNskV1ResourcesAddOnsVendorsGet(type: 'Default' | 'Insurance' | 'Activity' | 'Hotel' | 'Car', cultureCode?: string, eTag?: string,  headers?: Headers): Promise<Array<Vendor>>
    {
        const response = await apiNskV1ResourcesAddOnsVendorsGet(type,cultureCode,eTag,'body', headers);
        // TODO: Implement apiNskV1ResourcesAddOnsVendorsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific address type resource.
     * 
     */
    public store_apiNskV1ResourcesAddressTypesByAddressTypeCodeGet(addressTypeCode: string, cultureCode?: string,  headers?: Headers): Promise<AddressType>
    {
        const response = await apiNskV1ResourcesAddressTypesByAddressTypeCodeGet(addressTypeCode,cultureCode,'body', headers);
        // TODO: Implement apiNskV1ResourcesAddressTypesByAddressTypeCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of address type resources.
     * 
     */
    public store_apiNskV1ResourcesAddressTypesGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<AddressType>>
    {
        const response = await apiNskV1ResourcesAddressTypesGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers);
        // TODO: Implement apiNskV1ResourcesAddressTypesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific agent setting type resource.
     * 
     */
    public store_apiNskV1ResourcesAgentSettingTypesByAgentSettingTypeCodeGet(agentSettingTypeCode: string, cultureCode?: string,  headers?: Headers): Promise<AgentSettingType>
    {
        const response = await apiNskV1ResourcesAgentSettingTypesByAgentSettingTypeCodeGet(agentSettingTypeCode,cultureCode,'body', headers);
        // TODO: Implement apiNskV1ResourcesAgentSettingTypesByAgentSettingTypeCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of agent setting type resources.
     * 
     */
    public store_apiNskV1ResourcesAgentSettingTypesGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<AgentSettingType>>
    {
        const response = await apiNskV1ResourcesAgentSettingTypesGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers);
        // TODO: Implement apiNskV1ResourcesAgentSettingTypesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the resource.
     * 
     */
    public store_apiNskV1ResourcesAreasByAreaCodeGet(areaCode: string, cultureCode?: string,  headers?: Headers): Promise<Area>
    {
        const response = await apiNskV1ResourcesAreasByAreaCodeGet(areaCode,cultureCode,'body', headers);
        // TODO: Implement apiNskV1ResourcesAreasByAreaCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of area resources.
     * 
     */
    public store_apiNskV1ResourcesAreasGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<Area>>
    {
        const response = await apiNskV1ResourcesAreasGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers);
        // TODO: Implement apiNskV1ResourcesAreasGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific baggage type resource.
     * 
     */
    public store_apiNskV1ResourcesBaggageTypesByBaggageTypeCodeGet(baggageTypeCode: string, cultureCode?: string,  headers?: Headers): Promise<BaggageType>
    {
        const response = await apiNskV1ResourcesBaggageTypesByBaggageTypeCodeGet(baggageTypeCode,cultureCode,'body', headers);
        // TODO: Implement apiNskV1ResourcesBaggageTypesByBaggageTypeCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of baggage type resources.
     * 
     */
    public store_apiNskV1ResourcesBaggageTypesGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<BaggageType>>
    {
        const response = await apiNskV1ResourcesBaggageTypesGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers);
        // TODO: Implement apiNskV1ResourcesBaggageTypesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of bundle application resources.
     * See api/nsk/v1/bundles/application/{bundleApplicationKey}/details to retrieve additional  bundle application details.  The application details consist of three lists: carrier codes,  product classes, and classes of service.
     */
    public store_apiNskV1ResourcesBundlesApplicationsGet(bundleRuleCode: string, cultureCode?: string, eTag?: string,  headers?: Headers): Promise<Array<BundleApplication>>
    {
        const response = await apiNskV1ResourcesBundlesApplicationsGet(bundleRuleCode,cultureCode,eTag,'body', headers);
        // TODO: Implement apiNskV1ResourcesBundlesApplicationsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves a specific bundle configuration based on the bundle code.
     * 
     */
    public store_apiNskV1ResourcesBundlesByBundleCodeGet(bundleCode: string, cultureCode?: string,  headers?: Headers): Promise<BundleConfiguration>
    {
        const response = await apiNskV1ResourcesBundlesByBundleCodeGet(bundleCode,cultureCode,'body', headers);
        // TODO: Implement apiNskV1ResourcesBundlesByBundleCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of bundle configuration resources.
     * 
     */
    public store_apiNskV1ResourcesBundlesGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<BundleConfiguration>>
    {
        const response = await apiNskV1ResourcesBundlesGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers);
        // TODO: Implement apiNskV1ResourcesBundlesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of bundle rule resources.
     * See api/nsk/v1/bundles/rule/{bundleRuleCode}/details to retrieve a list of bundle   applications associated with a specific bundle rule.  Bundle rules are used to control where and how bundle applications are used.
     */
    public store_apiNskV1ResourcesBundlesRulesGet(eTag?: string,  headers?: Headers): Promise<Array<BundleRule>>
    {
        const response = await apiNskV1ResourcesBundlesRulesGet(eTag,'body', headers);
        // TODO: Implement apiNskV1ResourcesBundlesRulesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of bundle set resources.
     * See api/nsk/v1/bundles/set/{bundleSetCode}/details to retrieve a list of bundle   codes associated with a specific bundle set.
     */
    public store_apiNskV1ResourcesBundlesSetsGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<BundleSet>>
    {
        const response = await apiNskV1ResourcesBundlesSetsGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers);
        // TODO: Implement apiNskV1ResourcesBundlesSetsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of bundle ssr configurations associated with  the bundle code.
     * 
     */
    public store_apiNskV1ResourcesBundlesSsrsGet(bundleCode: string, cultureCode?: string, eTag?: string,  headers?: Headers): Promise<Array<BundleSsrConfiguration>>
    {
        const response = await apiNskV1ResourcesBundlesSsrsGet(bundleCode,cultureCode,eTag,'body', headers);
        // TODO: Implement apiNskV1ResourcesBundlesSsrsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves a single carrier.
     * 
     */
    public store_apiNskV1ResourcesCarriersByCarrierCodeGet(carrierCode: string, cultureCode?: string, eTag?: string,  headers?: Headers): Promise<Carrier>
    {
        const response = await apiNskV1ResourcesCarriersByCarrierCodeGet(carrierCode,cultureCode,eTag,'body', headers);
        // TODO: Implement apiNskV1ResourcesCarriersByCarrierCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of carrier resources.
     * 
     */
    public store_apiNskV1ResourcesCarriersGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<ResourceEntriesCarrier>
    {
        const response = await apiNskV1ResourcesCarriersGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers);
        // TODO: Implement apiNskV1ResourcesCarriersGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific city resource.
     * 
     */
    public store_apiNskV1ResourcesCitiesByCityCodeGet(cityCode: string, cultureCode?: string,  headers?: Headers): Promise<City>
    {
        const response = await apiNskV1ResourcesCitiesByCityCodeGet(cityCode,cultureCode,'body', headers);
        // TODO: Implement apiNskV1ResourcesCitiesByCityCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of city resources.
     * 
     */
    public store_apiNskV1ResourcesCitiesGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<City>>
    {
        const response = await apiNskV1ResourcesCitiesGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers);
        // TODO: Implement apiNskV1ResourcesCitiesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the resource.
     * 
     */
    public store_apiNskV1ResourcesClassOfServicesByClassOfServiceCodeGet(classOfServiceCode: string, cultureCode?: string,  headers?: Headers): Promise<ClassOfService>
    {
        const response = await apiNskV1ResourcesClassOfServicesByClassOfServiceCodeGet(classOfServiceCode,cultureCode,'body', headers);
        // TODO: Implement apiNskV1ResourcesClassOfServicesByClassOfServiceCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of class of service resources.
     * 
     */
    public store_apiNskV1ResourcesClassOfServicesGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<ClassOfService>>
    {
        const response = await apiNskV1ResourcesClassOfServicesGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers);
        // TODO: Implement apiNskV1ResourcesClassOfServicesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific commission rate resource.
     * 
     */
    public store_apiNskV1ResourcesCommissionRatesByCommissionRateCodeGet(commissionRateCode: string, cultureCode?: string,  headers?: Headers): Promise<CommissionRate>
    {
        const response = await apiNskV1ResourcesCommissionRatesByCommissionRateCodeGet(commissionRateCode,cultureCode,'body', headers);
        // TODO: Implement apiNskV1ResourcesCommissionRatesByCommissionRateCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of commission rate resources.
     * 
     */
    public store_apiNskV1ResourcesCommissionRatesGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<CommissionRate>>
    {
        const response = await apiNskV1ResourcesCommissionRatesGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers);
        // TODO: Implement apiNskV1ResourcesCommissionRatesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific contact type resource.
     * 
     */
    public store_apiNskV1ResourcesContactTypesByContactTypeCodeGet(contactTypeCode: string, cultureCode?: string,  headers?: Headers): Promise<ContactType>
    {
        const response = await apiNskV1ResourcesContactTypesByContactTypeCodeGet(contactTypeCode,cultureCode,'body', headers);
        // TODO: Implement apiNskV1ResourcesContactTypesByContactTypeCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of contact type resources.
     * 
     */
    public store_apiNskV1ResourcesContactTypesGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<ContactType>>
    {
        const response = await apiNskV1ResourcesContactTypesGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers);
        // TODO: Implement apiNskV1ResourcesContactTypesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves resource setting data based on the accept content type.
     * This is a post to easily allow special path characters.  If the data returned is not in HTML format and convertRtfToHtml is set to true,  the content requested was of an incompatible data type.
     */
    public store_apiNskV1ResourcesContentsByContentIdDataGet(contentId: number, convertRtfToHtml?: boolean, eTag?: string,  headers?: Headers): Promise<string>
    {
        const response = await apiNskV1ResourcesContentsByContentIdDataGet(contentId,convertRtfToHtml,eTag,'body', headers);
        // TODO: Implement apiNskV1ResourcesContentsByContentIdDataGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves a resource setting and its related information.
     * This is a post to easily allow special path characters.  See /resources/settings/data to avoid manually parsing the data.
     */
    public store_apiNskV1ResourcesContentsByContentIdGet(contentId: number, convertRtfToHtml?: boolean, eTag?: string,  headers?: Headers): Promise<ResourceContentItem>
    {
        const response = await apiNskV1ResourcesContentsByContentIdGet(contentId,convertRtfToHtml,eTag,'body', headers);
        // TODO: Implement apiNskV1ResourcesContentsByContentIdGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Searches the contents based on the search criteria provided.
     * 
     */
    public store_apiNskV1ResourcesContentsGet(type: 'GeneralReference' | 'News' | 'ConsoleHelp' | 'FareRuleReference' | 'ReviewWithCustomer' | 'Notices' | 'Literature' | 'Links' | 'Image' | 'PromotionReference' | 'SubscriptionReference', name?: string, containerId?: number, pageSize?: number, lastContentId?: number,  headers?: Headers): Promise<Array<ResourceContentResult>>
    {
        const response = await apiNskV1ResourcesContentsGet(type,name,containerId,pageSize,lastContentId,'body', headers);
        // TODO: Implement apiNskV1ResourcesContentsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the resource.
     * 
     */
    public store_apiNskV1ResourcesCulturesByCultureCodeGet(cultureCode: string, forCultureCode?: string,  headers?: Headers): Promise<Culture>
    {
        const response = await apiNskV1ResourcesCulturesByCultureCodeGet(cultureCode,forCultureCode,'body', headers);
        // TODO: Implement apiNskV1ResourcesCulturesByCultureCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the resources.
     * 
     */
    public store_apiNskV1ResourcesCulturesGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<Culture>>
    {
        const response = await apiNskV1ResourcesCulturesGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers);
        // TODO: Implement apiNskV1ResourcesCulturesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific customer program resource.
     * 
     */
    public store_apiNskV1ResourcesCustomerProgramsByProgramCodeGet(programCode: string, cultureCode?: string,  headers?: Headers): Promise<CustomerProgram>
    {
        const response = await apiNskV1ResourcesCustomerProgramsByProgramCodeGet(programCode,cultureCode,'body', headers);
        // TODO: Implement apiNskV1ResourcesCustomerProgramsByProgramCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific program level.
     * 
     */
    public store_apiNskV1ResourcesCustomerProgramsByProgramCodeLevelsByProgramLevelCodeGet(programCode: string, programLevelCode: string, cultureCode?: string,  headers?: Headers): Promise<CustomerProgramLevel>
    {
        const response = await apiNskV1ResourcesCustomerProgramsByProgramCodeLevelsByProgramLevelCodeGet(programCode,programLevelCode,cultureCode,'body', headers);
        // TODO: Implement apiNskV1ResourcesCustomerProgramsByProgramCodeLevelsByProgramLevelCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of customer program resources.
     * 
     */
    public store_apiNskV1ResourcesCustomerProgramsGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<CustomerProgram>>
    {
        const response = await apiNskV1ResourcesCustomerProgramsGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers);
        // TODO: Implement apiNskV1ResourcesCustomerProgramsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific delay resource.
     * 
     */
    public store_apiNskV1ResourcesDelaysByDelayCodeGet(delayCode: string, cultureCode?: string,  headers?: Headers): Promise<Delay>
    {
        const response = await apiNskV1ResourcesDelaysByDelayCodeGet(delayCode,cultureCode,'body', headers);
        // TODO: Implement apiNskV1ResourcesDelaysByDelayCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of delay resources.
     * 
     */
    public store_apiNskV1ResourcesDelaysGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<Delay>>
    {
        const response = await apiNskV1ResourcesDelaysGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers);
        // TODO: Implement apiNskV1ResourcesDelaysGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific department resource.
     * 
     */
    public store_apiNskV1ResourcesDepartmentsByDepartmentCodeGet(departmentCode: string, cultureCode?: string,  headers?: Headers): Promise<Department>
    {
        const response = await apiNskV1ResourcesDepartmentsByDepartmentCodeGet(departmentCode,cultureCode,'body', headers);
        // TODO: Implement apiNskV1ResourcesDepartmentsByDepartmentCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of department resources.
     * 
     */
    public store_apiNskV1ResourcesDepartmentsGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<Department>>
    {
        const response = await apiNskV1ResourcesDepartmentsGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers);
        // TODO: Implement apiNskV1ResourcesDepartmentsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the localizations.
     * 
     */
    public store_apiNskV1ResourcesDistributionOptionsGet(cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<EnumResource>>
    {
        const response = await apiNskV1ResourcesDistributionOptionsGet(cultureCode,eTag,startIndex,itemCount,'body', headers);
        // TODO: Implement apiNskV1ResourcesDistributionOptionsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific document type resource.
     * 
     */
    public store_apiNskV1ResourcesDocumentTypesByDocumentTypeCodeGet(documentTypeCode: string, cultureCode?: string,  headers?: Headers): Promise<DocumentType>
    {
        const response = await apiNskV1ResourcesDocumentTypesByDocumentTypeCodeGet(documentTypeCode,cultureCode,'body', headers);
        // TODO: Implement apiNskV1ResourcesDocumentTypesByDocumentTypeCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of document type resources.
     * 
     */
    public store_apiNskV1ResourcesDocumentTypesGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<DocumentType>>
    {
        const response = await apiNskV1ResourcesDocumentTypesGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers);
        // TODO: Implement apiNskV1ResourcesDocumentTypesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific domain resource.
     * 
     */
    public store_apiNskV1ResourcesDomainsByDomainCodeGet(domainCode: string,  headers?: Headers): Promise<Domain>
    {
        const response = await apiNskV1ResourcesDomainsByDomainCodeGet(domainCode,'body', headers);
        // TODO: Implement apiNskV1ResourcesDomainsByDomainCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of domain resources.
     * 
     */
    public store_apiNskV1ResourcesDomainsGet(eTag?: string,  headers?: Headers): Promise<Array<Domain>>
    {
        const response = await apiNskV1ResourcesDomainsGet(eTag,'body', headers);
        // TODO: Implement apiNskV1ResourcesDomainsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific email type resource.
     * 
     */
    public store_apiNskV1ResourcesEmailTypesByEmailTypeCodeGet(emailTypeCode: string, cultureCode?: string,  headers?: Headers): Promise<EmailType>
    {
        const response = await apiNskV1ResourcesEmailTypesByEmailTypeCodeGet(emailTypeCode,cultureCode,'body', headers);
        // TODO: Implement apiNskV1ResourcesEmailTypesByEmailTypeCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of email type resources.
     * 
     */
    public store_apiNskV1ResourcesEmailTypesGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<EmailType>>
    {
        const response = await apiNskV1ResourcesEmailTypesGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers);
        // TODO: Implement apiNskV1ResourcesEmailTypesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific external rate resource.
     * 
     */
    public store_apiNskV1ResourcesExternalRatesByRateIdGet(rateId: string, cultureCode?: string,  headers?: Headers): Promise<ExternalRate>
    {
        const response = await apiNskV1ResourcesExternalRatesByRateIdGet(rateId,cultureCode,'body', headers);
        // TODO: Implement apiNskV1ResourcesExternalRatesByRateIdGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of external rate resources.
     * 
     */
    public store_apiNskV1ResourcesExternalRatesGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<ExternalRate>>
    {
        const response = await apiNskV1ResourcesExternalRatesGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers);
        // TODO: Implement apiNskV1ResourcesExternalRatesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific fare type resource.
     * 
     */
    public store_apiNskV1ResourcesFareTypesByFareTypeCodeGet(fareTypeCode: string, cultureCode?: string,  headers?: Headers): Promise<FareType>
    {
        const response = await apiNskV1ResourcesFareTypesByFareTypeCodeGet(fareTypeCode,cultureCode,'body', headers);
        // TODO: Implement apiNskV1ResourcesFareTypesByFareTypeCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of fare type resources.
     * 
     */
    public store_apiNskV1ResourcesFareTypesGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<FareType>>
    {
        const response = await apiNskV1ResourcesFareTypesGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers);
        // TODO: Implement apiNskV1ResourcesFareTypesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets the fee options.
     * Note, this endpoint is not cached like other resource endpoints.
     */
    public store_apiNskV1ResourcesFeesByFeeCodeDetailsGet(feeCode: string,  headers?: Headers): Promise<Array<FeeDetail>>
    {
        const response = await apiNskV1ResourcesFeesByFeeCodeDetailsGet(feeCode,'body', headers);
        // TODO: Implement apiNskV1ResourcesFeesByFeeCodeDetailsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific fee resource.
     * 
     */
    public store_apiNskV1ResourcesFeesByFeeCodeGet(feeCode: string, cultureCode?: string,  headers?: Headers): Promise<Fee>
    {
        const response = await apiNskV1ResourcesFeesByFeeCodeGet(feeCode,cultureCode,'body', headers);
        // TODO: Implement apiNskV1ResourcesFeesByFeeCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of fee resources.
     * 
     */
    public store_apiNskV1ResourcesFeesGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<Fee>>
    {
        const response = await apiNskV1ResourcesFeesGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers);
        // TODO: Implement apiNskV1ResourcesFeesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the localizations.
     * 
     */
    public store_apiNskV1ResourcesGendersGet(cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<EnumResource>>
    {
        const response = await apiNskV1ResourcesGendersGet(cultureCode,eTag,startIndex,itemCount,'body', headers);
        // TODO: Implement apiNskV1ResourcesGendersGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific hot card reason resource.
     * 
     */
    public store_apiNskV1ResourcesHotCardReasonsByHotCardReasonCodeGet(hotCardReasonCode: string, cultureCode?: string,  headers?: Headers): Promise<HotCardReason>
    {
        const response = await apiNskV1ResourcesHotCardReasonsByHotCardReasonCodeGet(hotCardReasonCode,cultureCode,'body', headers);
        // TODO: Implement apiNskV1ResourcesHotCardReasonsByHotCardReasonCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of hot card reason resources.
     * 
     */
    public store_apiNskV1ResourcesHotCardReasonsGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<HotCardReason>>
    {
        const response = await apiNskV1ResourcesHotCardReasonsGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers);
        // TODO: Implement apiNskV1ResourcesHotCardReasonsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific issuance reason resource.
     * 
     */
    public store_apiNskV1ResourcesIssuanceReasonsByIssuanceReasonCodeGet(issuanceReasonCode: string, cultureCode?: string,  headers?: Headers): Promise<IssuanceReason>
    {
        const response = await apiNskV1ResourcesIssuanceReasonsByIssuanceReasonCodeGet(issuanceReasonCode,cultureCode,'body', headers);
        // TODO: Implement apiNskV1ResourcesIssuanceReasonsByIssuanceReasonCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of issuance reason resources.
     * 
     */
    public store_apiNskV1ResourcesIssuanceReasonsGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<IssuanceReason>>
    {
        const response = await apiNskV1ResourcesIssuanceReasonsGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers);
        // TODO: Implement apiNskV1ResourcesIssuanceReasonsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific location resource.
     * 
     */
    public store_apiNskV1ResourcesLocationsByLocationCodeGet(locationCode: string, cultureCode?: string,  headers?: Headers): Promise<Location>
    {
        const response = await apiNskV1ResourcesLocationsByLocationCodeGet(locationCode,cultureCode,'body', headers);
        // TODO: Implement apiNskV1ResourcesLocationsByLocationCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of location resources.
     * 
     */
    public store_apiNskV1ResourcesLocationsGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<Location>>
    {
        const response = await apiNskV1ResourcesLocationsGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers);
        // TODO: Implement apiNskV1ResourcesLocationsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific mac resource.
     * 
     */
    public store_apiNskV1ResourcesMacsByMacCodeGet(macCode: string,  headers?: Headers): Promise<Mac>
    {
        const response = await apiNskV1ResourcesMacsByMacCodeGet(macCode,'body', headers);
        // TODO: Implement apiNskV1ResourcesMacsByMacCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of mac resources.
     * 
     */
    public store_apiNskV1ResourcesMacsGet(eTag?: string,  headers?: Headers): Promise<Array<Mac>>
    {
        const response = await apiNskV1ResourcesMacsGet(eTag,'body', headers);
        // TODO: Implement apiNskV1ResourcesMacsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific message type resource.
     * 
     */
    public store_apiNskV1ResourcesMessageTypesByMessageTypeCodeGet(messageTypeCode: string, cultureCode?: string,  headers?: Headers): Promise<MessageType>
    {
        const response = await apiNskV1ResourcesMessageTypesByMessageTypeCodeGet(messageTypeCode,cultureCode,'body', headers);
        // TODO: Implement apiNskV1ResourcesMessageTypesByMessageTypeCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of message type resources.
     * 
     */
    public store_apiNskV1ResourcesMessageTypesGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<MessageType>>
    {
        const response = await apiNskV1ResourcesMessageTypesGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers);
        // TODO: Implement apiNskV1ResourcesMessageTypesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the localizations.
     * 
     */
    public store_apiNskV1ResourcesOrganizationStatusesGet(cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<EnumResource>>
    {
        const response = await apiNskV1ResourcesOrganizationStatusesGet(cultureCode,eTag,startIndex,itemCount,'body', headers);
        // TODO: Implement apiNskV1ResourcesOrganizationStatusesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific passenger discount resource.
     * 
     */
    public store_apiNskV1ResourcesPassengerDiscountsByPassengerDiscountCodeGet(passengerDiscountCode: string, cultureCode?: string,  headers?: Headers): Promise<PassengerDiscount>
    {
        const response = await apiNskV1ResourcesPassengerDiscountsByPassengerDiscountCodeGet(passengerDiscountCode,cultureCode,'body', headers);
        // TODO: Implement apiNskV1ResourcesPassengerDiscountsByPassengerDiscountCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of passenger discount resources.
     * 
     */
    public store_apiNskV1ResourcesPassengerDiscountsGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<PassengerDiscount>>
    {
        const response = await apiNskV1ResourcesPassengerDiscountsGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers);
        // TODO: Implement apiNskV1ResourcesPassengerDiscountsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific passenger type resource.
     * 
     */
    public store_apiNskV1ResourcesPassengerTypesByPassengerTypeCodeGet(passengerTypeCode: string, cultureCode?: string,  headers?: Headers): Promise<PassengerType>
    {
        const response = await apiNskV1ResourcesPassengerTypesByPassengerTypeCodeGet(passengerTypeCode,cultureCode,'body', headers);
        // TODO: Implement apiNskV1ResourcesPassengerTypesByPassengerTypeCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of passenger type resources.
     * 
     */
    public store_apiNskV1ResourcesPassengerTypesGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<PassengerType>>
    {
        const response = await apiNskV1ResourcesPassengerTypesGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers);
        // TODO: Implement apiNskV1ResourcesPassengerTypesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific payment method resource.
     * 
     */
    public store_apiNskV1ResourcesPaymentMethodsByPaymentMethodCodeGet(paymentMethodCode: string, cultureCode?: string,  headers?: Headers): Promise<PaymentMethod>
    {
        const response = await apiNskV1ResourcesPaymentMethodsByPaymentMethodCodeGet(paymentMethodCode,cultureCode,'body', headers);
        // TODO: Implement apiNskV1ResourcesPaymentMethodsByPaymentMethodCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of payment method resources.
     * 
     */
    public store_apiNskV1ResourcesPaymentMethodsGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<PaymentMethod>>
    {
        const response = await apiNskV1ResourcesPaymentMethodsGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers);
        // TODO: Implement apiNskV1ResourcesPaymentMethodsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific person attachment resource.
     * 
     */
    public store_apiNskV1ResourcesPersonAttachmentTypesByPersonAttachmentTypeCodeGet(personAttachmentTypeCode: string, cultureCode?: string,  headers?: Headers): Promise<PersonAttachmentType>
    {
        const response = await apiNskV1ResourcesPersonAttachmentTypesByPersonAttachmentTypeCodeGet(personAttachmentTypeCode,cultureCode,'body', headers);
        // TODO: Implement apiNskV1ResourcesPersonAttachmentTypesByPersonAttachmentTypeCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of person attachment type resources.
     * 
     */
    public store_apiNskV1ResourcesPersonAttachmentTypesGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<ResourceEntriesPersonAttachmentType>
    {
        const response = await apiNskV1ResourcesPersonAttachmentTypesGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers);
        // TODO: Implement apiNskV1ResourcesPersonAttachmentTypesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific person information type resource.
     * 
     */
    public store_apiNskV1ResourcesPersonInformationTypesByPersonInformationTypeCodeGet(personInformationTypeCode: string, cultureCode?: string,  headers?: Headers): Promise<PersonInformationType>
    {
        const response = await apiNskV1ResourcesPersonInformationTypesByPersonInformationTypeCodeGet(personInformationTypeCode,cultureCode,'body', headers);
        // TODO: Implement apiNskV1ResourcesPersonInformationTypesByPersonInformationTypeCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of person information type resources.
     * 
     */
    public store_apiNskV1ResourcesPersonInformationTypesGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<PersonInformationType>>
    {
        const response = await apiNskV1ResourcesPersonInformationTypesGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers);
        // TODO: Implement apiNskV1ResourcesPersonInformationTypesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific phone number type resource.
     * 
     */
    public store_apiNskV1ResourcesPhoneTypesByPhoneTypeCodeGet(phoneTypeCode: string, cultureCode?: string,  headers?: Headers): Promise<PhoneType>
    {
        const response = await apiNskV1ResourcesPhoneTypesByPhoneTypeCodeGet(phoneTypeCode,cultureCode,'body', headers);
        // TODO: Implement apiNskV1ResourcesPhoneTypesByPhoneTypeCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of phone number type resources.
     * 
     */
    public store_apiNskV1ResourcesPhoneTypesGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<PhoneType>>
    {
        const response = await apiNskV1ResourcesPhoneTypesGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers);
        // TODO: Implement apiNskV1ResourcesPhoneTypesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific product class resource.
     * 
     */
    public store_apiNskV1ResourcesProductClassesByProductClassCodeGet(productClassCode: string, cultureCode?: string,  headers?: Headers): Promise<ProductClass>
    {
        const response = await apiNskV1ResourcesProductClassesByProductClassCodeGet(productClassCode,cultureCode,'body', headers);
        // TODO: Implement apiNskV1ResourcesProductClassesByProductClassCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of product class resources.
     * 
     */
    public store_apiNskV1ResourcesProductClassesGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<ProductClass>>
    {
        const response = await apiNskV1ResourcesProductClassesGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers);
        // TODO: Implement apiNskV1ResourcesProductClassesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific promotion setting type resource.
     * 
     */
    public store_apiNskV1ResourcesPromotionSettingTypesByPromotionSettingsTypeCodeGet(promotionSettingsTypeCode: string, cultureCode?: string,  headers?: Headers): Promise<PromotionSettingType>
    {
        const response = await apiNskV1ResourcesPromotionSettingTypesByPromotionSettingsTypeCodeGet(promotionSettingsTypeCode,cultureCode,'body', headers);
        // TODO: Implement apiNskV1ResourcesPromotionSettingTypesByPromotionSettingsTypeCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of promotion setting type resources.
     * 
     */
    public store_apiNskV1ResourcesPromotionSettingTypesGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<PromotionSettingType>>
    {
        const response = await apiNskV1ResourcesPromotionSettingTypesGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers);
        // TODO: Implement apiNskV1ResourcesPromotionSettingTypesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific province state resource.
     * 
     */
    public store_apiNskV1ResourcesProvinceStatesByProvinceStateCodeGet(provinceStateCode: string, cultureCode?: string,  headers?: Headers): Promise<ProvinceState>
    {
        const response = await apiNskV1ResourcesProvinceStatesByProvinceStateCodeGet(provinceStateCode,cultureCode,'body', headers);
        // TODO: Implement apiNskV1ResourcesProvinceStatesByProvinceStateCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of province state resources.
     * 
     */
    public store_apiNskV1ResourcesProvinceStatesGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<ProvinceState>>
    {
        const response = await apiNskV1ResourcesProvinceStatesGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers);
        // TODO: Implement apiNskV1ResourcesProvinceStatesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets a response with a single QueueCategory that match the given parameters.
     * 
     */
    public store_apiNskV1ResourcesQueueCategoriesByQueueCategoryCodeGet(queueCategoryCode: string, cultureCode?: string,  headers?: Headers): Promise<QueueCategory>
    {
        const response = await apiNskV1ResourcesQueueCategoriesByQueueCategoryCodeGet(queueCategoryCode,cultureCode,'body', headers);
        // TODO: Implement apiNskV1ResourcesQueueCategoriesByQueueCategoryCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets a response with a list of QueueCategories that match the given parameters.
     * 
     */
    public store_apiNskV1ResourcesQueueCategoriesGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<QueueCategory>>
    {
        const response = await apiNskV1ResourcesQueueCategoriesGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers);
        // TODO: Implement apiNskV1ResourcesQueueCategoriesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves a specific reminder time resource that contains valid times for a passenger travel notification timed  event.
     * 
     */
    public store_apiNskV1ResourcesReminderTimesByTimedEventTypeGet(timedEventType: 'Departure' | 'Arrival',  headers?: Headers): Promise<ProvinceState>
    {
        const response = await apiNskV1ResourcesReminderTimesByTimedEventTypeGet(timedEventType,'body', headers);
        // TODO: Implement apiNskV1ResourcesReminderTimesByTimedEventTypeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of reminder time resource that contains valid times for all passenger travel notification  timed events.
     * 
     */
    public store_apiNskV1ResourcesReminderTimesGet(eTag?: string,  headers?: Headers): Promise<Array<ReminderTime>>
    {
        const response = await apiNskV1ResourcesReminderTimesGet(eTag,'body', headers);
        // TODO: Implement apiNskV1ResourcesReminderTimesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific role setting resource.
     * 
     */
    public store_apiNskV1ResourcesRoleSettingTypesByRoleSettingTypeCodeGet(roleSettingTypeCode: string,  headers?: Headers): Promise<RoleSettingType>
    {
        const response = await apiNskV1ResourcesRoleSettingTypesByRoleSettingTypeCodeGet(roleSettingTypeCode,'body', headers);
        // TODO: Implement apiNskV1ResourcesRoleSettingTypesByRoleSettingTypeCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of role setting resources.
     * 
     */
    public store_apiNskV1ResourcesRoleSettingTypesGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<RoleSettingType>>
    {
        const response = await apiNskV1ResourcesRoleSettingTypesGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers);
        // TODO: Implement apiNskV1ResourcesRoleSettingTypesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the resource.
     * 
     */
    public store_apiNskV1ResourcesRolesByRoleCodeGet(roleCode: string,  headers?: Headers): Promise<Role>
    {
        const response = await apiNskV1ResourcesRolesByRoleCodeGet(roleCode,'body', headers);
        // TODO: Implement apiNskV1ResourcesRolesByRoleCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the resources.
     * 
     */
    public store_apiNskV1ResourcesRolesGet(eTag?: string,  headers?: Headers): Promise<Array<Role>>
    {
        const response = await apiNskV1ResourcesRolesGet(eTag,'body', headers);
        // TODO: Implement apiNskV1ResourcesRolesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the localizations.
     * 
     */
    public store_apiNskV1ResourcesSearchTypesGet(cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<EnumResource>>
    {
        const response = await apiNskV1ResourcesSearchTypesGet(cultureCode,eTag,startIndex,itemCount,'body', headers);
        // TODO: Implement apiNskV1ResourcesSearchTypesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves resource setting data based on the accept content type.
     * This is a post to easily allow special path characters.
     */
    public store_apiNskV1ResourcesSettingsDataPost(request?: SettingsCategoryRequest, eTag?: string,  headers?: Headers): Promise<string>
    {
        const response = await apiNskV1ResourcesSettingsDataPost(request,eTag,'body', headers);
        // TODO: Implement apiNskV1ResourcesSettingsDataPost
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves a resource setting and its related information.
     * This is a post to easily allow special path characters.  See /resources/settings/data to avoid manually parsing the data.
     */
    public store_apiNskV1ResourcesSettingsPost(request?: SettingsCategoryRequest, eTag?: string,  headers?: Headers): Promise<ResourceCategoryItem>
    {
        const response = await apiNskV1ResourcesSettingsPost(request,eTag,'body', headers);
        // TODO: Implement apiNskV1ResourcesSettingsPost
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific shopping attribute group resource.
     * 
     */
    public store_apiNskV1ResourcesShoppingAttributeGroupsByShoppingAttributeGroupCodeGet(shoppingAttributeGroupCode: string, cultureCode?: string,  headers?: Headers): Promise<ShoppingAttributeGroup>
    {
        const response = await apiNskV1ResourcesShoppingAttributeGroupsByShoppingAttributeGroupCodeGet(shoppingAttributeGroupCode,cultureCode,'body', headers);
        // TODO: Implement apiNskV1ResourcesShoppingAttributeGroupsByShoppingAttributeGroupCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of shopping attribute group resources.
     * 
     */
    public store_apiNskV1ResourcesShoppingAttributeGroupsGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<ShoppingAttributeGroup>>
    {
        const response = await apiNskV1ResourcesShoppingAttributeGroupsGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers);
        // TODO: Implement apiNskV1ResourcesShoppingAttributeGroupsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific shopping attribute resource.
     * 
     */
    public store_apiNskV1ResourcesShoppingAttributesByShoppingAttributeCodeGet(shoppingAttributeCode: string, cultureCode?: string,  headers?: Headers): Promise<ShoppingAttribute>
    {
        const response = await apiNskV1ResourcesShoppingAttributesByShoppingAttributeCodeGet(shoppingAttributeCode,cultureCode,'body', headers);
        // TODO: Implement apiNskV1ResourcesShoppingAttributesByShoppingAttributeCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of shopping attribute resources.
     * 
     */
    public store_apiNskV1ResourcesShoppingAttributesGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<ShoppingAttribute>>
    {
        const response = await apiNskV1ResourcesShoppingAttributesGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers);
        // TODO: Implement apiNskV1ResourcesShoppingAttributesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves a specific single sign on provider.
     * 
     */
    public store_apiNskV1ResourcesSingleSignOnProviderByProviderNameGet(providerName: string,  headers?: Headers): Promise<SingleSignOnProvider>
    {
        const response = await apiNskV1ResourcesSingleSignOnProviderByProviderNameGet(providerName,'body', headers);
        // TODO: Implement apiNskV1ResourcesSingleSignOnProviderByProviderNameGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves a list of available single sign on providers.
     * 
     */
    public store_apiNskV1ResourcesSingleSignOnProviderGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<SingleSignOnProvider>>
    {
        const response = await apiNskV1ResourcesSingleSignOnProviderGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers);
        // TODO: Implement apiNskV1ResourcesSingleSignOnProviderGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific ssr group resource.
     * 
     */
    public store_apiNskV1ResourcesSsrGroupsBySsrGroupCodeGet(ssrGroupCode: string, cultureCode?: string,  headers?: Headers): Promise<SsrGroup>
    {
        const response = await apiNskV1ResourcesSsrGroupsBySsrGroupCodeGet(ssrGroupCode,cultureCode,'body', headers);
        // TODO: Implement apiNskV1ResourcesSsrGroupsBySsrGroupCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of ssr group resources.
     * 
     */
    public store_apiNskV1ResourcesSsrGroupsGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<SsrGroup>>
    {
        const response = await apiNskV1ResourcesSsrGroupsGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers);
        // TODO: Implement apiNskV1ResourcesSsrGroupsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific ssr nest resource.
     * 
     */
    public store_apiNskV1ResourcesSsrNestsBySsrNestCodeGet(ssrNestCode: string, cultureCode?: string,  headers?: Headers): Promise<SsrNest>
    {
        const response = await apiNskV1ResourcesSsrNestsBySsrNestCodeGet(ssrNestCode,cultureCode,'body', headers);
        // TODO: Implement apiNskV1ResourcesSsrNestsBySsrNestCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of ssr nest resources.
     * 
     */
    public store_apiNskV1ResourcesSsrNestsGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<SsrNest>>
    {
        const response = await apiNskV1ResourcesSsrNestsGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers);
        // TODO: Implement apiNskV1ResourcesSsrNestsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific ssr restriction result. resource.
     * 
     */
    public store_apiNskV1ResourcesSsrRestrictionResultsBySsrRestrictionResultCodeGet(ssrRestrictionResultCode: string, cultureCode?: string,  headers?: Headers): Promise<SsrRestrictionResult>
    {
        const response = await apiNskV1ResourcesSsrRestrictionResultsBySsrRestrictionResultCodeGet(ssrRestrictionResultCode,cultureCode,'body', headers);
        // TODO: Implement apiNskV1ResourcesSsrRestrictionResultsBySsrRestrictionResultCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of ssr restriction result resources.
     * 
     */
    public store_apiNskV1ResourcesSsrRestrictionResultsGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<SsrRestrictionResult>>
    {
        const response = await apiNskV1ResourcesSsrRestrictionResultsGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers);
        // TODO: Implement apiNskV1ResourcesSsrRestrictionResultsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific ssr resource.
     * 
     */
    public store_apiNskV1ResourcesSsrsBySsrCodeGet(ssrCode: string, cultureCode?: string,  headers?: Headers): Promise<Ssr>
    {
        const response = await apiNskV1ResourcesSsrsBySsrCodeGet(ssrCode,cultureCode,'body', headers);
        // TODO: Implement apiNskV1ResourcesSsrsBySsrCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of ssr resources.
     * 
     */
    public store_apiNskV1ResourcesSsrsGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<Ssr>>
    {
        const response = await apiNskV1ResourcesSsrsGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers);
        // TODO: Implement apiNskV1ResourcesSsrsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific standby priority resource.
     * 
     */
    public store_apiNskV1ResourcesStandByPrioritiesByStandByPriorityCodeGet(standByPriorityCode: string, cultureCode?: string,  headers?: Headers): Promise<StandByPriority>
    {
        const response = await apiNskV1ResourcesStandByPrioritiesByStandByPriorityCodeGet(standByPriorityCode,cultureCode,'body', headers);
        // TODO: Implement apiNskV1ResourcesStandByPrioritiesByStandByPriorityCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of standby priority resources.
     * 
     */
    public store_apiNskV1ResourcesStandByPrioritiesGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<StandByPriority>>
    {
        const response = await apiNskV1ResourcesStandByPrioritiesGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers);
        // TODO: Implement apiNskV1ResourcesStandByPrioritiesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific station category resource.
     * 
     */
    public store_apiNskV1ResourcesStationCategoriesByStationCategoryCodeGet(stationCategoryCode: string, cultureCode?: string,  headers?: Headers): Promise<StationCategory>
    {
        const response = await apiNskV1ResourcesStationCategoriesByStationCategoryCodeGet(stationCategoryCode,cultureCode,'body', headers);
        // TODO: Implement apiNskV1ResourcesStationCategoriesByStationCategoryCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of station category resources.
     * 
     */
    public store_apiNskV1ResourcesStationCategoriesGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<StationCategory>>
    {
        const response = await apiNskV1ResourcesStationCategoriesGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers);
        // TODO: Implement apiNskV1ResourcesStationCategoriesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Get the station details.
     * Note this endpoint is not cached like other resource endpoints.
     */
    public store_apiNskV1ResourcesStationsByStationCodeDetailsGet(stationCode: string,  headers?: Headers): Promise<ResourceEntriesStationDetail>
    {
        const response = await apiNskV1ResourcesStationsByStationCodeDetailsGet(stationCode,'body', headers);
        // TODO: Implement apiNskV1ResourcesStationsByStationCodeDetailsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific station resource.
     * 
     */
    public store_apiNskV1ResourcesStationsByStationCodeGet(stationCode: string, cultureCode?: string, eTag?: string,  headers?: Headers): Promise<Station>
    {
        const response = await apiNskV1ResourcesStationsByStationCodeGet(stationCode,cultureCode,eTag,'body', headers);
        // TODO: Implement apiNskV1ResourcesStationsByStationCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets a response with stations filtered by category.
     * This endpoint is resource intensive until cached.
     */
    public store_apiNskV1ResourcesStationsCategoryByStationCategoryCodeGet(stationCategoryCode: string, activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<Station>>
    {
        const response = await apiNskV1ResourcesStationsCategoryByStationCategoryCodeGet(stationCategoryCode,activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers);
        // TODO: Implement apiNskV1ResourcesStationsCategoryByStationCategoryCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of station resources.
     * 
     */
    public store_apiNskV1ResourcesStationsGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<Station>>
    {
        const response = await apiNskV1ResourcesStationsGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers);
        // TODO: Implement apiNskV1ResourcesStationsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific sub zone resource.
     * 
     */
    public store_apiNskV1ResourcesSubZonesBySubZoneCodeGet(subZoneCode: string, cultureCode?: string,  headers?: Headers): Promise<SubZone>
    {
        const response = await apiNskV1ResourcesSubZonesBySubZoneCodeGet(subZoneCode,cultureCode,'body', headers);
        // TODO: Implement apiNskV1ResourcesSubZonesBySubZoneCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of sub zone resources.
     * 
     */
    public store_apiNskV1ResourcesSubZonesGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<SubZone>>
    {
        const response = await apiNskV1ResourcesSubZonesGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers);
        // TODO: Implement apiNskV1ResourcesSubZonesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific suffix resource.
     * 
     */
    public store_apiNskV1ResourcesSuffixesBySuffixCodeGet(suffixCode: string,  headers?: Headers): Promise<Suffix>
    {
        const response = await apiNskV1ResourcesSuffixesBySuffixCodeGet(suffixCode,'body', headers);
        // TODO: Implement apiNskV1ResourcesSuffixesBySuffixCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of suffix resources.
     * 
     */
    public store_apiNskV1ResourcesSuffixesGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<Suffix>>
    {
        const response = await apiNskV1ResourcesSuffixesGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers);
        // TODO: Implement apiNskV1ResourcesSuffixesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific time zone resource.
     * 
     */
    public store_apiNskV1ResourcesTimeZonesByTimeZoneCodeGet(timeZoneCode: string, cultureCode?: string, eTag?: string,  headers?: Headers): Promise<TimeZone>
    {
        const response = await apiNskV1ResourcesTimeZonesByTimeZoneCodeGet(timeZoneCode,cultureCode,eTag,'body', headers);
        // TODO: Implement apiNskV1ResourcesTimeZonesByTimeZoneCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of time zone resources.
     * 
     */
    public store_apiNskV1ResourcesTimeZonesGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<TimeZone>>
    {
        const response = await apiNskV1ResourcesTimeZonesGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers);
        // TODO: Implement apiNskV1ResourcesTimeZonesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific title resource.
     * 
     */
    public store_apiNskV1ResourcesTitlesByTitleKeyGet(titleKey: string,  headers?: Headers): Promise<Title>
    {
        const response = await apiNskV1ResourcesTitlesByTitleKeyGet(titleKey,'body', headers);
        // TODO: Implement apiNskV1ResourcesTitlesByTitleKeyGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of title resources.
     * 
     */
    public store_apiNskV1ResourcesTitlesGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<Title>>
    {
        const response = await apiNskV1ResourcesTitlesGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers);
        // TODO: Implement apiNskV1ResourcesTitlesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific travel class resource.
     * 
     */
    public store_apiNskV1ResourcesTravelClassesByTravelClassCodeGet(travelClassCode: string, cultureCode?: string,  headers?: Headers): Promise<TravelClass>
    {
        const response = await apiNskV1ResourcesTravelClassesByTravelClassCodeGet(travelClassCode,cultureCode,'body', headers);
        // TODO: Implement apiNskV1ResourcesTravelClassesByTravelClassCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of travel class resources.
     * 
     */
    public store_apiNskV1ResourcesTravelClassesGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<TravelClass>>
    {
        const response = await apiNskV1ResourcesTravelClassesGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers);
        // TODO: Implement apiNskV1ResourcesTravelClassesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific zone resource.
     * 
     */
    public store_apiNskV1ResourcesZonesByZoneCodeGet(zoneCode: string, cultureCode?: string,  headers?: Headers): Promise<Zone>
    {
        const response = await apiNskV1ResourcesZonesByZoneCodeGet(zoneCode,cultureCode,'body', headers);
        // TODO: Implement apiNskV1ResourcesZonesByZoneCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of zone resources.
     * 
     */
    public store_apiNskV1ResourcesZonesGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<Zone>>
    {
        const response = await apiNskV1ResourcesZonesGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers);
        // TODO: Implement apiNskV1ResourcesZonesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets the travel commerce vendors.
     * 
     */
    public store_apiNskV2ResourcesAddOnsVendorsGet(type: 'Default' | 'Insurance' | 'Activity' | 'Hotel' | 'Car', cultureCode?: string, eTag?: string,  headers?: Headers): Promise<Array<Vendorv2>>
    {
        const response = await apiNskV2ResourcesAddOnsVendorsGet(type,cultureCode,eTag,'body', headers);
        // TODO: Implement apiNskV2ResourcesAddOnsVendorsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves a specific country resource.
     * 
     */
    public store_apiNskV2ResourcesCountriesByCountryCodeGet(countryCode: string, cultureCode?: string,  headers?: Headers): Promise<Countryv2>
    {
        const response = await apiNskV2ResourcesCountriesByCountryCodeGet(countryCode,cultureCode,'body', headers);
        // TODO: Implement apiNskV2ResourcesCountriesByCountryCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of country resources.
     * 
     */
    public store_apiNskV2ResourcesCountriesGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<Countryv2>>
    {
        const response = await apiNskV2ResourcesCountriesGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers);
        // TODO: Implement apiNskV2ResourcesCountriesGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the specific currency resource.
     * 
     */
    public store_apiNskV2ResourcesCurrenciesControllerv2ByCurrencyCodeGet(currencyCode: string, cultureCode?: string,  headers?: Headers): Promise<Currency>
    {
        const response = await apiNskV2ResourcesCurrenciesControllerv2ByCurrencyCodeGet(currencyCode,cultureCode,'body', headers);
        // TODO: Implement apiNskV2ResourcesCurrenciesControllerv2ByCurrencyCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of currency resources.
     * 
     */
    public store_apiNskV2ResourcesCurrenciesControllerv2Get(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<ResourceEntriesCurrencyv2>
    {
        const response = await apiNskV2ResourcesCurrenciesControllerv2Get(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers);
        // TODO: Implement apiNskV2ResourcesCurrenciesControllerv2Get
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the resource.
     * 
     */
    public store_apiNskV2ResourcesMarketsByLocationCodeByTravelLocationCodeGet(locationCode: string, travelLocationCode: string, cultureCode?: string,  headers?: Headers): Promise<Market>
    {
        const response = await apiNskV2ResourcesMarketsByLocationCodeByTravelLocationCodeGet(locationCode,travelLocationCode,cultureCode,'body', headers);
        // TODO: Implement apiNskV2ResourcesMarketsByLocationCodeByTravelLocationCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves a specific market resource.
     * 
     */
    public store_apiNskV2ResourcesMarketsByLocationCodeGet(locationCode: string, cultureCode?: string,  headers?: Headers): Promise<Array<Market>>
    {
        const response = await apiNskV2ResourcesMarketsByLocationCodeGet(locationCode,cultureCode,'body', headers);
        // TODO: Implement apiNskV2ResourcesMarketsByLocationCodeGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Retrieves the collection of market resources.
     * 
     */
    public store_apiNskV2ResourcesMarketsGet(activeOnly: boolean, cultureCode?: string, eTag?: string, startIndex?: number, itemCount?: number,  headers?: Headers): Promise<Array<Marketv2>>
    {
        const response = await apiNskV2ResourcesMarketsGet(activeOnly,cultureCode,eTag,startIndex,itemCount,'body', headers);
        // TODO: Implement apiNskV2ResourcesMarketsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }

}
