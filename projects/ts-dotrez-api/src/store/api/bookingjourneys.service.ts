/**
 * API - Current Routes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: trunk
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from "rxjs";
import { map } from "rxjs/operators";
import { inject, injectable } from "inversify";
import { Store } from 'redux';
import {
    HttpResponse,
    Headers,
    IHttpClient,
    BundleSellRequest, 
    CancelJourneyRequest, 
    IJsonResponse, 
    Journey, 
    PassengerBag, 
    PassengerBagRequest, 
    TravelDocumentRequirements, 
} from 'api-models';

import { BookingjourneysService } from '../base/api/index'




@injectable()
export class StoreBookingjourneysService {

    constructor(@inject("Store") protected store: Store<any>, @inject("BookingjourneysService") protected baseService:BookingjourneysService) {}

    /**
     * Sells a service bundle for one or more passengers on a journey.
     * 
     */
    public async store_apiNskV1BookingJourneysByJourneyKeyBundlesPost(journeyKey: string, request?: BundleSellRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await this.baseService.apiNskV1BookingJourneysByJourneyKeyBundlesPost(journeyKey,request,'body', headers).toPromise();
        // TODO: Implement apiNskV1BookingJourneysByJourneyKeyBundlesPost
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Cancels the specific journey from the booking in state.
     * 
     */
    public async store_apiNskV1BookingJourneysByJourneyKeyDelete(journeyKey: string, request?: CancelJourneyRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await this.baseService.apiNskV1BookingJourneysByJourneyKeyDelete(journeyKey,request,'body', headers).toPromise();
        // TODO: Implement apiNskV1BookingJourneysByJourneyKeyDelete
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets a single journey by the key.
     * 
     */
    public async store_apiNskV1BookingJourneysByJourneyKeyGet(journeyKey: string,  headers?: Headers): Promise<Journey>
    {
        const response = await this.baseService.apiNskV1BookingJourneysByJourneyKeyGet(journeyKey,'body', headers).toPromise();
        // TODO: Implement apiNskV1BookingJourneysByJourneyKeyGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets the passenger or associated infant&#39;s destination address requirements for a specific journey for the booking in-state.
     * This endpoint will determine if the passenger or the associated infant requires a destination address for the  given journey.                This does not determine if the passenger already has a qualifying address, only if the destination address  is required.
     */
    public async store_apiNskV1BookingJourneysByJourneyKeyPassengersByPassengerKeyAddressRequirementsGet(journeyKey: string, passengerKey: string,  headers?: Headers): Promise<boolean>
    {
        const response = await this.baseService.apiNskV1BookingJourneysByJourneyKeyPassengersByPassengerKeyAddressRequirementsGet(journeyKey,passengerKey,'body', headers).toPromise();
        // TODO: Implement apiNskV1BookingJourneysByJourneyKeyPassengersByPassengerKeyAddressRequirementsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Removes baggage from the booking.
     * 
     */
    public async store_apiNskV1BookingJourneysByJourneyKeyPassengersByPassengerKeyBaggageByBaggageKeyDelete(journeyKey: string, passengerKey: string, baggageKey: string,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await this.baseService.apiNskV1BookingJourneysByJourneyKeyPassengersByPassengerKeyBaggageByBaggageKeyDelete(journeyKey,passengerKey,baggageKey,'body', headers).toPromise();
        // TODO: Implement apiNskV1BookingJourneysByJourneyKeyPassengersByPassengerKeyBaggageByBaggageKeyDelete
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets a single bag from a passenger on a journey.
     * 
     */
    public async store_apiNskV1BookingJourneysByJourneyKeyPassengersByPassengerKeyBaggageByBaggageKeyGet(journeyKey: string, passengerKey: string, baggageKey: string,  headers?: Headers): Promise<Array<PassengerBag>>
    {
        const response = await this.baseService.apiNskV1BookingJourneysByJourneyKeyPassengersByPassengerKeyBaggageByBaggageKeyGet(journeyKey,passengerKey,baggageKey,'body', headers).toPromise();
        // TODO: Implement apiNskV1BookingJourneysByJourneyKeyPassengersByPassengerKeyBaggageByBaggageKeyGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets all baggage for a passenger on a specific journey.
     * 
     */
    public async store_apiNskV1BookingJourneysByJourneyKeyPassengersByPassengerKeyBaggageGet(journeyKey: string, passengerKey: string,  headers?: Headers): Promise<Array<PassengerBag>>
    {
        const response = await this.baseService.apiNskV1BookingJourneysByJourneyKeyPassengersByPassengerKeyBaggageGet(journeyKey,passengerKey,'body', headers).toPromise();
        // TODO: Implement apiNskV1BookingJourneysByJourneyKeyPassengersByPassengerKeyBaggageGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Adds baggage to the booking.
     * 
     */
    public async store_apiNskV1BookingJourneysByJourneyKeyPassengersByPassengerKeyBaggagePost(journeyKey: string, passengerKey: string, request?: PassengerBagRequest,  headers?: Headers): Promise<IJsonResponse>
    {
        const response = await this.baseService.apiNskV1BookingJourneysByJourneyKeyPassengersByPassengerKeyBaggagePost(journeyKey,passengerKey,request,'body', headers).toPromise();
        // TODO: Implement apiNskV1BookingJourneysByJourneyKeyPassengersByPassengerKeyBaggagePost
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets the travel document requirements for a specific journey for the booking in-state.
     * This endpoint will return a response containing a collection of travel document type codes that could fulfill  a travel document requirement.  If the \&quot;AtLeastOneDocumentRequired\&quot; value is true, then one or more documents  in the list are required.  However, it does not mean that every document in the list is required.  If  \&quot;AtLeastOneDocumentRequired\&quot; is false, then the list of document type codes represents a list of acceptable  travel documents, but nothing is required.                This endpoint does not determine if any passengers already have required travel documents.
     */
    public async store_apiNskV1BookingJourneysByJourneyKeyTravelDocumentRequirementsGet(journeyKey: string,  headers?: Headers): Promise<TravelDocumentRequirements>
    {
        const response = await this.baseService.apiNskV1BookingJourneysByJourneyKeyTravelDocumentRequirementsGet(journeyKey,'body', headers).toPromise();
        // TODO: Implement apiNskV1BookingJourneysByJourneyKeyTravelDocumentRequirementsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Cancels all the journeys on the current booking in state.
     * 
     */
    public async store_apiNskV1BookingJourneysDelete( headers?: Headers): Promise<IJsonResponse>
    {
        const response = await this.baseService.apiNskV1BookingJourneysDelete('body', headers).toPromise();
        // TODO: Implement apiNskV1BookingJourneysDelete
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets the collection of journeys on the booking in state.
     * 
     */
    public async store_apiNskV1BookingJourneysGet( headers?: Headers): Promise<Array<Journey>>
    {
        const response = await this.baseService.apiNskV1BookingJourneysGet('body', headers).toPromise();
        // TODO: Implement apiNskV1BookingJourneysGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets the passenger or associated infant&#39;s destination address requirements for all journeys for the booking in-state.
     * This endpoint will determine if the passenger or the associated infant requires a destination address.  If a  destination address is required for the passenger or associated infant for any journey, then this will return  true.                 This does not determine if the passenger already has a qualifying address, only if the destination address  is required.
     */
    public async store_apiNskV1BookingJourneysPassengersByPassengerKeyAddressRequirementsGet(passengerKey: string,  headers?: Headers): Promise<boolean>
    {
        const response = await this.baseService.apiNskV1BookingJourneysPassengersByPassengerKeyAddressRequirementsGet(passengerKey,'body', headers).toPromise();
        // TODO: Implement apiNskV1BookingJourneysPassengersByPassengerKeyAddressRequirementsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }


    /**
     * Gets the travel document requirements for all journeys for the booking in-state.
     * This endpoint will return a response containing a collection of travel document type codes that could fulfill  a travel document requirement.  If the \&quot;AtLeastOneDocumentRequired\&quot; value is true, then one or more documents  in the list are required.  However, it does not mean that every document in the list is required.  If  \&quot;AtLeastOneDocumentRequired\&quot; is false, then the list of document type codes represents a list of acceptable  travel documents, but nothing is required.                This endpoint does not determine if any passengers already have required travel documents.
     */
    public async store_apiNskV1BookingJourneysTravelDocumentRequirementsGet( headers?: Headers): Promise<TravelDocumentRequirements>
    {
        const response = await this.baseService.apiNskV1BookingJourneysTravelDocumentRequirementsGet('body', headers).toPromise();
        // TODO: Implement apiNskV1BookingJourneysTravelDocumentRequirementsGet
        // addResponsetoStore(this.store, response.data, true, true);
        return response;
    }

}
