/**
 * API - Current Routes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: trunk
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from "rxjs/Observable";
import { map, toPromise } from "rxjs";
import IHttpClient from "../IHttpClient";
import { inject, injectable } from "inversify";
import { IAPIConfiguration } from "../IAPIConfiguration";
import { Headers } from "../Headers";
import HttpResponse from "../HttpResponse";

import { IJsonResponse } from '../model/iJsonResponse';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class UtilitiesService {
    private basePath: string = 'https://localhost';

    constructor(@inject("IApiHttpClient") private httpClient: IHttpClient,
        @inject("IAPIConfiguration") private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * Retrieves the station local time.
     * 
     * @param stationCode The station code.
     
     */
    public apiNskV1UtilitiesStationLocalTimeByStationCodeGet(stationCode: string, observe?: 'body', headers?: Headers): Observable<Date>;
    public apiNskV1UtilitiesStationLocalTimeByStationCodeGet(stationCode: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Date>>;
    public apiNskV1UtilitiesStationLocalTimeByStationCodeGet(stationCode: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!stationCode){
            throw new Error('Required parameter stationCode was null or undefined when calling apiNskV1UtilitiesStationLocalTimeByStationCodeGet.');
        }


        const response: Observable<HttpResponse<Date>> = this.httpClient.get(`${this.basePath}/api/nsk/v1/utilities/stationLocalTime/${encodeURIComponent(String(stationCode))}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Date>(httpResponse.response));
        }
        return response;
    }

}
