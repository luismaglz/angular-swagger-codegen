/**
 * API - Current Routes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: trunk
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { PaymentMethodPaymentMethodFields } from './paymentMethodPaymentMethodFields';


/**
 * The payment method model.
 */
export interface PaymentMethod { 
    /**
     * The payment method code for this payment method.
     */
    paymentMethodCode: string;
    /**
     * The allow deposit flag for this payment method.
     */
    allowDeposit?: boolean;
    /**
     * <b>Deprecated</b> - Please use api/nsk/v1/settings/general/codes endpoint to verify role based access instead.
     */
    allowed?: boolean;
    /**
     * The allow zero amount flag for this payment method.
     */
    allowZeroAmount?: boolean;
    /**
     * The commissionable flag for this payment method.
     */
    commissionable?: boolean;
    /**
     * The DCC type for this payment method.
     */
    dccType?: PaymentMethod.DccTypeEnum;
    /**
     * The disallow partial refund flag for this payment method.
     */
    disallowPartialRefund?: boolean;
    /**
     * The fee code for this payment method.
     */
    feeCode?: string;
    /**
     * The inactive flag for this payment method.
     */
    inActive?: boolean;
    /**
     * The max installments for this payment method.
     */
    maxInstallments?: number;
    /**
     * The name for this payment method.
     */
    name: string;
    paymentMethodFields?: PaymentMethodPaymentMethodFields;
    /**
     * The payment method type for this payment method.
     */
    paymentMethodType?: PaymentMethod.PaymentMethodTypeEnum;
    /**
     * The payment refund type for this payment method.
     */
    paymentRefundType?: PaymentMethod.PaymentRefundTypeEnum;
    /**
     * The proportional refund flag for this payment method.
     */
    proportionalRefund?: boolean;
    /**
     * The refundable by agent flag for this payment method.
     */
    refundableByAgent?: boolean;
    /**
     * The refund currency control for this payment method.
     */
    refundCurrencyControl?: PaymentMethod.RefundCurrencyControlEnum;
    /**
     * The hours of restriction for this payment method.
     */
    restrictionHours?: number;
    /**
     * The system controlled flag for this payment method.
     */
    systemControlled?: boolean;
    /**
     * The trace queue code for this payment method.
     */
    traceQueueCode?: string;
    /**
     * The validation required flag for this payment method.
     */
    validationRequired?: boolean;
}
export namespace PaymentMethod {
    export type DccTypeEnum = 'None' | 'ZeroRate' | 'FullAmount';
    export const DccTypeEnum = {
        None: 'None' as DccTypeEnum,
        ZeroRate: 'ZeroRate' as DccTypeEnum,
        FullAmount: 'FullAmount' as DccTypeEnum
    }
    export type PaymentMethodTypeEnum = 'ExternalAccount' | 'PrePaid' | 'AgencyAccount' | 'CustomerAccount' | 'Voucher' | 'Loyalty';
    export const PaymentMethodTypeEnum = {
        ExternalAccount: 'ExternalAccount' as PaymentMethodTypeEnum,
        PrePaid: 'PrePaid' as PaymentMethodTypeEnum,
        AgencyAccount: 'AgencyAccount' as PaymentMethodTypeEnum,
        CustomerAccount: 'CustomerAccount' as PaymentMethodTypeEnum,
        Voucher: 'Voucher' as PaymentMethodTypeEnum,
        Loyalty: 'Loyalty' as PaymentMethodTypeEnum
    }
    export type PaymentRefundTypeEnum = 'NotAllowed' | 'LineItemLevel' | 'AccountLevel' | 'BookingLevel';
    export const PaymentRefundTypeEnum = {
        NotAllowed: 'NotAllowed' as PaymentRefundTypeEnum,
        LineItemLevel: 'LineItemLevel' as PaymentRefundTypeEnum,
        AccountLevel: 'AccountLevel' as PaymentRefundTypeEnum,
        BookingLevel: 'BookingLevel' as PaymentRefundTypeEnum
    }
    export type RefundCurrencyControlEnum = 'UseCollectedCurrency' | 'UseQuotedCurrency';
    export const RefundCurrencyControlEnum = {
        UseCollectedCurrency: 'UseCollectedCurrency' as RefundCurrencyControlEnum,
        UseQuotedCurrency: 'UseQuotedCurrency' as RefundCurrencyControlEnum
    }
}
