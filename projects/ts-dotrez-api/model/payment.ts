/**
 * API - Current Routes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: trunk
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { DirectCurrencyConversion } from './directCurrencyConversion';
import { PaymentAmounts } from './paymentAmounts';
import { PaymentAttachment } from './paymentAttachment';
import { PaymentDetails } from './paymentDetails';
import { PaymentVoucherDetails } from './paymentVoucherDetails';
import { PointOfSale } from './pointOfSale';
import { ThreeDSecure } from './threeDSecure';


/**
 * Defines an applied payment on the booking.
 */
export interface Payment { 
    /**
     * The payment key that uniquely identifies the payment.
     */
    paymentKey?: string;
    /**
     * The payment method code.
     */
    code?: string;
    /**
     * Date when the card/payment is approved in the database.
     */
    approvalDate?: Date;
    /**
     * The payment detail information.
     */
    details?: PaymentDetails;
    /**
     * The payment amounts and currency codes.
     */
    amounts?: PaymentAmounts;
    /**
     * The banks auth code when funds are released.
     */
    authorizationCode?: string;
    /**
     * The real payment status that should never be exposed to the end user unless a agent.
     */
    authorizationStatus?: Payment.AuthorizationStatusEnum;
    /**
     * The date restriction for a payment (when funds will be there).
     */
    fundedDate?: Date;
    /**
     * Used for credit shell payments and how to compute the expiration of the credit.
     */
    transactionCode?: string;
    /**
     * DCC payment details.
     */
    dcc?: DirectCurrencyConversion;
    /**
     * 3DS payment details.
     */
    threeDSecure?: ThreeDSecure;
    /**
     * The list of payment attachments.
     */
    attachments?: Array<PaymentAttachment>;
    /**
     * The date the payment was created on.
     */
    createdDate?: Date;
    /**
     * The date the payment was modified.
     */
    modifiedDate?: Date;
    /**
     * The payment method type.
     */
    type?: Payment.TypeEnum;
    /**
     * The status of the booking (this is the safe status).
     */
    status?: Payment.StatusEnum;
    /**
     * Flag that indicates if the payment is a result of a divide.
     */
    transferred?: boolean;
    /**
     * The channel type that the payment was made through.
     */
    channelType?: Payment.ChannelTypeEnum;
    /**
     * The payments point of sale information.
     */
    pointOfSale?: PointOfSale;
    /**
     * The payments source point of sale information.
     */
    sourcePointOfSale?: PointOfSale;
    /**
     * Flag indicating if the payment is a deposit.
     */
    deposit?: boolean;
    /**
     * Used to identify a credit shell, credit file and agency payments.
     */
    accountId?: number;
    /**
     * The applied voucher details.
     */
    voucher?: PaymentVoucherDetails;
    /**
     * Flag indicating if the payment has been added to state or not.
     */
    addedToState?: boolean;
    /**
     * The created agents ID.
     */
    createdAgentId?: number;
    /**
     * The modified agents ID.
     */
    modifiedAgentId?: number;
    /**
     * The reference to the payment.
     */
    reference?: number;
}
export namespace Payment {
    export type AuthorizationStatusEnum = 'Unknown' | 'Acknowledged' | 'Pending' | 'InProcess' | 'Approved' | 'Declined' | 'Referral' | 'PickUpCard' | 'HotCard' | 'Voided' | 'Retrieval' | 'ChargedBack' | 'Error' | 'ValidationFailed' | 'Address' | 'VerificationCode' | 'FraudPrevention' | 'ForcedApproval' | 'ForcedDecline';
    export const AuthorizationStatusEnum = {
        Unknown: 'Unknown' as AuthorizationStatusEnum,
        Acknowledged: 'Acknowledged' as AuthorizationStatusEnum,
        Pending: 'Pending' as AuthorizationStatusEnum,
        InProcess: 'InProcess' as AuthorizationStatusEnum,
        Approved: 'Approved' as AuthorizationStatusEnum,
        Declined: 'Declined' as AuthorizationStatusEnum,
        Referral: 'Referral' as AuthorizationStatusEnum,
        PickUpCard: 'PickUpCard' as AuthorizationStatusEnum,
        HotCard: 'HotCard' as AuthorizationStatusEnum,
        Voided: 'Voided' as AuthorizationStatusEnum,
        Retrieval: 'Retrieval' as AuthorizationStatusEnum,
        ChargedBack: 'ChargedBack' as AuthorizationStatusEnum,
        Error: 'Error' as AuthorizationStatusEnum,
        ValidationFailed: 'ValidationFailed' as AuthorizationStatusEnum,
        Address: 'Address' as AuthorizationStatusEnum,
        VerificationCode: 'VerificationCode' as AuthorizationStatusEnum,
        FraudPrevention: 'FraudPrevention' as AuthorizationStatusEnum,
        ForcedApproval: 'ForcedApproval' as AuthorizationStatusEnum,
        ForcedDecline: 'ForcedDecline' as AuthorizationStatusEnum
    }
    export type TypeEnum = 'ExternalAccount' | 'PrePaid' | 'AgencyAccount' | 'CustomerAccount' | 'Voucher' | 'Loyalty';
    export const TypeEnum = {
        ExternalAccount: 'ExternalAccount' as TypeEnum,
        PrePaid: 'PrePaid' as TypeEnum,
        AgencyAccount: 'AgencyAccount' as TypeEnum,
        CustomerAccount: 'CustomerAccount' as TypeEnum,
        Voucher: 'Voucher' as TypeEnum,
        Loyalty: 'Loyalty' as TypeEnum
    }
    export type StatusEnum = 'New' | 'Received' | 'Pending' | 'Approved' | 'Declined' | 'Unknown' | 'PendingCustomerAction';
    export const StatusEnum = {
        New: 'New' as StatusEnum,
        Received: 'Received' as StatusEnum,
        Pending: 'Pending' as StatusEnum,
        Approved: 'Approved' as StatusEnum,
        Declined: 'Declined' as StatusEnum,
        Unknown: 'Unknown' as StatusEnum,
        PendingCustomerAction: 'PendingCustomerAction' as StatusEnum
    }
    export type ChannelTypeEnum = 'Default' | 'Direct' | 'Web' | 'Gds' | 'Api';
    export const ChannelTypeEnum = {
        Default: 'Default' as ChannelTypeEnum,
        Direct: 'Direct' as ChannelTypeEnum,
        Web: 'Web' as ChannelTypeEnum,
        Gds: 'Gds' as ChannelTypeEnum,
        Api: 'Api' as ChannelTypeEnum
    }
}
