/**
 * API - Current Routes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: trunk
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


/**
 * Defines all the different ways the availability response can be filtered.
 */
export interface AvailabilityCriteriaFilter { 
    /**
     * Defines the type of fares to be included in the response.
     */
    fareInclusionType?: AvailabilityCriteriaFilter.FareInclusionTypeEnum;
    /**
     * The class compression type.
     */
    compressionType?: AvailabilityCriteriaFilter.CompressionTypeEnum;
    /**
     * The max fare price.
     */
    maxPrice?: number;
    /**
     * The min fare price.
     */
    minPrice?: number;
    /**
     * Filters fares based on loyalty.
     */
    loyalty?: AvailabilityCriteriaFilter.LoyaltyEnum;
    /**
     * Flag indicating to include allotted fare classes of service.
     */
    includeAllotments?: boolean;
    /**
     * Filters the type of journeys to return.
     */
    exclusionType?: AvailabilityCriteriaFilter.ExclusionTypeEnum;
    /**
     * The list of inventory journey sort options, used for filtering journeys on the response.
     */
    sortOptions?: Array<AvailabilityCriteriaFilter.SortOptionsEnum>;
    /**
     * The list of product class codes to filter with.
     */
    productClasses?: Array<string>;
    /**
     * The list of travel class codes to filter with.
     */
    travelClasses?: Array<string>;
    /**
     * The list of fare types.
     */
    fareTypes?: Array<string>;
    /**
     * The list of classes of service.
     */
    classesOfService?: Array<string>;
    /**
     * The desired carrier code.
     */
    carrierCode?: string;
    /**
     * The desired identifier number.
     */
    identifier?: string;
    /**
     * The type filtering based on connections.
     */
    type?: AvailabilityCriteriaFilter.TypeEnum;
    /**
     * Specifies the type of sold as connection when segment connects with passive segment.
     */
    connectionType?: AvailabilityCriteriaFilter.ConnectionTypeEnum;
    /**
     * The number of max connections.
     */
    maxConnections?: number;
}
export namespace AvailabilityCriteriaFilter {
    export type FareInclusionTypeEnum = 'Default' | 'Standby' | 'Overbook' | 'NoPricing';
    export const FareInclusionTypeEnum = {
        Default: 'Default' as FareInclusionTypeEnum,
        Standby: 'Standby' as FareInclusionTypeEnum,
        Overbook: 'Overbook' as FareInclusionTypeEnum,
        NoPricing: 'NoPricing' as FareInclusionTypeEnum
    }
    export type CompressionTypeEnum = 'LowestFareClass' | 'CompressByProductClass' | 'Default';
    export const CompressionTypeEnum = {
        LowestFareClass: 'LowestFareClass' as CompressionTypeEnum,
        CompressByProductClass: 'CompressByProductClass' as CompressionTypeEnum,
        Default: 'Default' as CompressionTypeEnum
    }
    export type LoyaltyEnum = 'MonetaryOnly' | 'PointsOnly' | 'PointsAndMonetary' | 'PreserveCurrent';
    export const LoyaltyEnum = {
        MonetaryOnly: 'MonetaryOnly' as LoyaltyEnum,
        PointsOnly: 'PointsOnly' as LoyaltyEnum,
        PointsAndMonetary: 'PointsAndMonetary' as LoyaltyEnum,
        PreserveCurrent: 'PreserveCurrent' as LoyaltyEnum
    }
    export type ExclusionTypeEnum = 'Default' | 'ExcludeDeparted' | 'ExcludeImminent' | 'ExcludeUnavailable';
    export const ExclusionTypeEnum = {
        Default: 'Default' as ExclusionTypeEnum,
        ExcludeDeparted: 'ExcludeDeparted' as ExclusionTypeEnum,
        ExcludeImminent: 'ExcludeImminent' as ExclusionTypeEnum,
        ExcludeUnavailable: 'ExcludeUnavailable' as ExclusionTypeEnum
    }
    export type SortOptionsEnum = 'ServiceType' | 'ShortestTravelTime' | 'LowestFare' | 'HighestFare' | 'EarliestDeparture' | 'LatestDeparture' | 'EarliestArrival' | 'LatestArrival' | 'NoSort' | 'BiasOnlineCommercialDuplicates' | 'JourneyNumber';
    export const SortOptionsEnum = {
        ServiceType: 'ServiceType' as SortOptionsEnum,
        ShortestTravelTime: 'ShortestTravelTime' as SortOptionsEnum,
        LowestFare: 'LowestFare' as SortOptionsEnum,
        HighestFare: 'HighestFare' as SortOptionsEnum,
        EarliestDeparture: 'EarliestDeparture' as SortOptionsEnum,
        LatestDeparture: 'LatestDeparture' as SortOptionsEnum,
        EarliestArrival: 'EarliestArrival' as SortOptionsEnum,
        LatestArrival: 'LatestArrival' as SortOptionsEnum,
        NoSort: 'NoSort' as SortOptionsEnum,
        BiasOnlineCommercialDuplicates: 'BiasOnlineCommercialDuplicates' as SortOptionsEnum,
        JourneyNumber: 'JourneyNumber' as SortOptionsEnum
    }
    export type TypeEnum = 'None' | 'NonStop' | 'Through' | 'Direct' | 'Connect' | 'All';
    export const TypeEnum = {
        None: 'None' as TypeEnum,
        NonStop: 'NonStop' as TypeEnum,
        Through: 'Through' as TypeEnum,
        Direct: 'Direct' as TypeEnum,
        Connect: 'Connect' as TypeEnum,
        All: 'All' as TypeEnum
    }
    export type ConnectionTypeEnum = 'None' | 'Domestic' | 'International' | 'Both';
    export const ConnectionTypeEnum = {
        None: 'None' as ConnectionTypeEnum,
        Domestic: 'Domestic' as ConnectionTypeEnum,
        International: 'International' as ConnectionTypeEnum,
        Both: 'Both' as ConnectionTypeEnum
    }
}
