/**
 * API - Current Routes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: trunk
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


/**
 * The booking general settings.
 */
export interface GeneralSettings { 
    /**
     * The flag allowing adding and removing SSRs on a checked-in passenger.
     */
    allowChangeSsrOnCheckedInPassenger?: boolean;
    /**
     * The flag allowing blocked seat assignment.
     */
    allowBlockedSeatAssignment?: boolean;
    /**
     * The flag allowing changing the booking on a restricted flight.
     */
    allowChangeOnRestrictedFlight?: boolean;
    /**
     * The flag allowing promo codes.
     */
    allowPromoCodes?: boolean;
    /**
     * The flag allowing changes on a booking made through the API channel.
     */
    allowEditableApiChannel?: boolean;
    /**
     * The flag allowing changes on a booking made through the direct channel.
     */
    allowEditableDirectChannel?: boolean;
    /**
     * The flag allowing the current role to edit GDS bookings with TA payments.
     */
    allowEditableGdsBookingWithTaPayment?: boolean;
    /**
     * The flag allowing the current role to edit bookings created through GDS.
     */
    allowEditableGdsChannel?: boolean;
    /**
     * The flag allowing the current role to edit bookings created through the web channel.
     */
    allowEditableWebChannel?: boolean;
    /**
     * The flag allowing group names to be updated on non-GDS flights.
     */
    allowGroupNameUpdates?: boolean;
    /**
     * The flag allowing manifest retrieval on Unblocked flight lines
     */
    allowManifestRetrievalOnUnblockedFlightLines?: boolean;
    /**
     * The flag allowing overbooking SSRs on Move.
     */
    allowOverbookingSsrOnMove?: boolean;
    /**
     * The flag allowing queuing GDS booking with TA FOP for ETicket Reissues.
     */
    allowQueueingGdsBookingWithTaFopForETicketReissue?: boolean;
    /**
     * The flag allowing restricted seat assignments.
     */
    allowRestrictedSeatAssignment?: boolean;
    /**
     * The seat assignment rules for this role.
     */
    allowSeatAssignment?: GeneralSettings.AllowSeatAssignmentEnum;
    /**
     * The booking access allowed on this role.
     */
    bookingAccessControl?: GeneralSettings.BookingAccessControlEnum;
    /**
     * The highest organization that the role can view bookings for.
     */
    viewBookingsByControl?: GeneralSettings.ViewBookingsByControlEnum;
    /**
     * The highest organization that the role can edit bookings for.
     */
    editBookingsByControl?: GeneralSettings.EditBookingsByControlEnum;
    /**
     * The mandatory booking comment.
     */
    defaultBookingComment?: string;
    /**
     * The flag to not include unit properties in notification itinerary.
     */
    doNotIncludeUnitProperties?: boolean;
    /**
     * The timespan where duplicate bookings are watched for on this role.
     */
    duplicateBookingDetectionTimeSpan?: string;
    /**
     * The flag allowing automatic seat assignment on this role.
     */
    enableAutomaticSeatAssignment?: boolean;
    /**
     * The option to highlight the fare override on this role.
     */
    highlightFareOverride?: GeneralSettings.HighlightFareOverrideEnum;
    /**
     * The option to highlight IROP information on this role.
     */
    highlightIrop?: GeneralSettings.HighlightIropEnum;
    /**
     * The option to highlight schedule changes on this role.
     */
    highlightScheduleChange?: GeneralSettings.HighlightScheduleChangeEnum;
    /**
     * The option to highlight standbys on this role.
     */
    highlightStandby?: GeneralSettings.HighlightStandbyEnum;
    /**
     * The option to highlight upgrades on this role.
     */
    highlightUpgrade?: GeneralSettings.HighlightUpgradeEnum;
    /**
     * The flag to allow managing passive segments on this role.
     */
    managePassiveSegments?: boolean;
    /**
     * The reassign seat behavior for this role.
     */
    reassignSeatingBehavior?: GeneralSettings.ReassignSeatingBehaviorEnum;
    /**
     * Gets or sets a list of restricted external system codes for this role.
     */
    restrictedExternalSystemCodes?: Array<string>;
    /**
     * The time display style for this role.
     */
    timeDisplay?: GeneralSettings.TimeDisplayEnum;
    /**
     * The allow seat group restriction override flag.
     */
    allowSeatGroupRestrictionOverride?: boolean;
}
export namespace GeneralSettings {
    export type AllowSeatAssignmentEnum = 'Never' | 'OnlyOnUnheldBookings' | 'Always';
    export const AllowSeatAssignmentEnum = {
        Never: 'Never' as AllowSeatAssignmentEnum,
        OnlyOnUnheldBookings: 'OnlyOnUnheldBookings' as AllowSeatAssignmentEnum,
        Always: 'Always' as AllowSeatAssignmentEnum
    };
    export type BookingAccessControlEnum = 'None' | 'ScheduleOnly' | 'Availability' | 'View' | 'ModifyNoCommit' | 'Create' | 'Change' | 'CreateAndChange';
    export const BookingAccessControlEnum = {
        None: 'None' as BookingAccessControlEnum,
        ScheduleOnly: 'ScheduleOnly' as BookingAccessControlEnum,
        Availability: 'Availability' as BookingAccessControlEnum,
        View: 'View' as BookingAccessControlEnum,
        ModifyNoCommit: 'ModifyNoCommit' as BookingAccessControlEnum,
        Create: 'Create' as BookingAccessControlEnum,
        Change: 'Change' as BookingAccessControlEnum,
        CreateAndChange: 'CreateAndChange' as BookingAccessControlEnum
    };
    export type ViewBookingsByControlEnum = 'Agent' | 'Organization' | 'OrganizationGroup' | 'All';
    export const ViewBookingsByControlEnum = {
        Agent: 'Agent' as ViewBookingsByControlEnum,
        Organization: 'Organization' as ViewBookingsByControlEnum,
        OrganizationGroup: 'OrganizationGroup' as ViewBookingsByControlEnum,
        All: 'All' as ViewBookingsByControlEnum
    };
    export type EditBookingsByControlEnum = 'Agent' | 'Organization' | 'OrganizationGroup' | 'All';
    export const EditBookingsByControlEnum = {
        Agent: 'Agent' as EditBookingsByControlEnum,
        Organization: 'Organization' as EditBookingsByControlEnum,
        OrganizationGroup: 'OrganizationGroup' as EditBookingsByControlEnum,
        All: 'All' as EditBookingsByControlEnum
    };
    export type HighlightFareOverrideEnum = 'None' | 'Highlight';
    export const HighlightFareOverrideEnum = {
        None: 'None' as HighlightFareOverrideEnum,
        Highlight: 'Highlight' as HighlightFareOverrideEnum
    };
    export type HighlightIropEnum = 'None' | 'Highlight';
    export const HighlightIropEnum = {
        None: 'None' as HighlightIropEnum,
        Highlight: 'Highlight' as HighlightIropEnum
    };
    export type HighlightScheduleChangeEnum = 'None' | 'Highlight';
    export const HighlightScheduleChangeEnum = {
        None: 'None' as HighlightScheduleChangeEnum,
        Highlight: 'Highlight' as HighlightScheduleChangeEnum
    };
    export type HighlightStandbyEnum = 'None' | 'Highlight';
    export const HighlightStandbyEnum = {
        None: 'None' as HighlightStandbyEnum,
        Highlight: 'Highlight' as HighlightStandbyEnum
    };
    export type HighlightUpgradeEnum = 'None' | 'Highlight';
    export const HighlightUpgradeEnum = {
        None: 'None' as HighlightUpgradeEnum,
        Highlight: 'Highlight' as HighlightUpgradeEnum
    };
    export type ReassignSeatingBehaviorEnum = 'DropSeats' | 'LikeForLike' | 'Algorithm';
    export const ReassignSeatingBehaviorEnum = {
        DropSeats: 'DropSeats' as ReassignSeatingBehaviorEnum,
        LikeForLike: 'LikeForLike' as ReassignSeatingBehaviorEnum,
        Algorithm: 'Algorithm' as ReassignSeatingBehaviorEnum
    };
    export type TimeDisplayEnum = 'Default' | 'AmPm' | 'TwentyFourHour';
    export const TimeDisplayEnum = {
        Default: 'Default' as TimeDisplayEnum,
        AmPm: 'AmPm' as TimeDisplayEnum,
        TwentyFourHour: 'TwentyFourHour' as TimeDisplayEnum
    };
}
