/**
 * API - Current Routes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: trunk
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


/**
 * Fee Model.
 */
export interface Fee { 
    /**
     * Returns true if this fee can be manually added.
     */
    readonly canBeManuallyAdded?: boolean;
    /**
     * Returns true if this fee can be queried to check the default price.
     */
    readonly hasDefaultFeePrice?: boolean;
    /**
     * Returns true if the given fee code is charged per segment/leg.
     */
    readonly isFeeChargedPerSegment?: boolean;
    /**
     * <b>Deprecated</b> - Please use api/nsk/v1/settings/general/codes endpoint to verify role based access instead.
     */
    allowed?: boolean;
    /**
     * Gets or sets the charge limit of this fee.
     */
    chargeLimit?: number;
    /**
     * Gets or sets when the charge limit is applied to this fee.
     */
    chargeLimitMode?: Fee.ChargeLimitModeEnum;
    /**
     * Gets or sets the charge limit for the travel component associated with this fee.
     */
    chargeLimitTravelComponent?: Fee.ChargeLimitTravelComponentEnum;
    /**
     * Gets or sets the commissionable flag for this fee.
     */
    commissionable?: boolean;
    /**
     * Gets or sets the country code for this fee.
     */
    countryCode?: string;
    /**
     * Gets or sets the description for this fee.
     */
    description?: string;
    /**
     * Gets or sets the display code for this fee.
     */
    displayCode?: string;
    /**
     * Gets or sets how this fee is applied.
     */
    feeApplication?: Fee.FeeApplicationEnum;
    /**
     * Gets or sets the code for this fee.
     */
    feeCode?: string;
    /**
     * Gets or sets the fee option mode for this fee.
     */
    feeOptionMode?: Fee.FeeOptionModeEnum;
    /**
     * Gets or sets the fee type for this fee.
     */
    feeType?: Fee.FeeTypeEnum;
    /**
     * Gets or sets the inactive flag for this fee.
     */
    inActive?: boolean;
    /**
     * Gets or sets the itemizable flag for this fee.
     */
    itemizable?: boolean;
    /**
     * Gets or sets the MinStopover of this fee.
     */
    minStopover?: number;
    /**
     * Gets or sets the International MinStopover of this fee.
     */
    minStopoverInternational?: number;
    /**
     * Gets or sets the name of this fee.
     */
    name?: string;
    /**
     * Gets or sets how the taxes are applied for this fee.
     */
    taxApplication?: Fee.TaxApplicationEnum;
    /**
     * Gets or sets the ticketable flag for this fee.
     */
    ticketable?: boolean;
    /**
     * Gets or sets the travel component associated with this fee.
     */
    travelComponent?: Fee.TravelComponentEnum;
}
export namespace Fee {
    export type ChargeLimitModeEnum = 'FirstOccurrences' | 'LastOccurrences' | 'FirstOutLastInOccurrences';
    export type ChargeLimitTravelComponentEnum = 'Unknown' | 'Itinerary' | 'Trip' | 'Journey' | 'Segment' | 'Leg' | 'ItineraryWithJourneySalesDate' | 'TripWithJourneySalesDate' | 'JourneyWithBookingSalesDate' | 'JourneyWithJourneySalesDate' | 'SegmentWithJourneySalesDate' | 'LegWithJourneySalesDate' | 'Fare';
    export type FeeApplicationEnum = 'Pnr' | 'TravelComponent' | 'EachPassenger' | 'EachPassengerTravelComponent' | 'SpecifyPassenger' | 'AllPaxCheckingBagsTogether' | 'PerBookingNoLimit';
    export type FeeOptionModeEnum = 'Default' | 'All' | 'LowestCost' | 'HighestCost';
    export type FeeTypeEnum = 'All' | 'Tax' | 'TravelFee' | 'ServiceFee' | 'PaymentFee' | 'PenaltyFee' | 'SsrFee' | 'NonFlightServiceFee' | 'UpgradeFee' | 'SeatFee' | 'BaseFare' | 'SpoilageFee' | 'NameChangeFee' | 'ConvenienceFee' | 'BaggageFee' | 'FareSurcharge' | 'PromotionDiscount' | 'ServiceBundle' | 'ExtraBagFee' | 'ATPCOBagFee';
    export type TaxApplicationEnum = 'Unknown' | 'Taxable' | 'TaxableLocal' | 'NonTaxable' | 'NonTaxableApplyToBaseFareOnly' | 'TaxableByTrip' | 'TaxableByItinerary';
    export type TravelComponentEnum = 'Unknown' | 'Itinerary' | 'Trip' | 'Journey' | 'Segment' | 'Leg' | 'ItineraryWithJourneySalesDate' | 'TripWithJourneySalesDate' | 'JourneyWithBookingSalesDate' | 'JourneyWithJourneySalesDate' | 'SegmentWithJourneySalesDate' | 'LegWithJourneySalesDate' | 'Fare';
}
