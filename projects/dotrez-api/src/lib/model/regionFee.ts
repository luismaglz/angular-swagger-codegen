/**
 * API - Current Routes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: trunk
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { RegionFeeBaggage } from "./regionFeeBaggage";
import { RegionRate } from "./regionRate";

/**
 * Region fee model.
 */
export interface RegionFee {
  /**
   * Gets or sets the control limit of this region fee.
   */
  controlLimit?: number;
  /**
   * Gets or sets the country code of this region fee.
   */
  countryCode?: string;
  /**
   * Gets or sets the deducted flag of this region fee.
   */
  deducted?: boolean;
  /**
   * Gets or sets the deduction type of this region fee.
   */
  deductionType?: RegionFee.DeductionTypeEnum;
  /**
   * Gets or sets the default currency code of this region fee.
   */
  defaultCurrencyCode?: string;
  /**
   * Gets or sets the directionality of this region fee.
   */
  directionality?: RegionFee.DirectionalityEnum;
  /**
   * Gets or sets the discontinue date of this region fee.
   */
  discontinueDate?: Date;
  /**
   * Gets or sets the fee option number for this region fee.
   */
  feeOptionNumber?: number;
  /**
   * Gets or sets the rate percent for this region fee.
   */
  ratePercent?: number;
  /**
   * Gets or sets the region code for this region fee.
   */
  regionCode?: string;
  /**
   * Gets or sets the baggage for this region fee.
   */
  baggage?: RegionFeeBaggage;
  /**
   * Gets or sets the id for this region fee.
   */
  id?: number;
  /**
   * Gets or sets the list for region rates for this region fee.
   */
  regionRates?: Array<RegionRate>;
  /**
   * Gets or sets the region type for this region fee.
   */
  regionType?: RegionFee.RegionTypeEnum;
  /**
   * Gets or sets the release date for this region fee.
   */
  releaseDate?: Date;
  /**
   * Gets or sets the travel country code for this region fee.
   */
  travelCountryCode?: string;
  /**
   * Gets or sets the travel discount date for this region fee.
   */
  travelDiscontinueDate?: Date;
  /**
   * Gets or sets the travel region code for this region.
   */
  travelRegionCode?: string;
  /**
   * Gets or sets the travel region type for this region.
   */
  travelRegionType?: RegionFee.TravelRegionTypeEnum;
  /**
   * Gets or sets the travel release date for this region.
   */
  travelReleaseDate?: Date;
  /**
   * Gets or sets the travel segment indicator for this region.
   */
  travelSegmentIndicator?: RegionFee.TravelSegmentIndicatorEnum;
}
export namespace RegionFee {
  export type DeductionTypeEnum =
    | "All"
    | "First"
    | "Last"
    | "ExceptForFirst"
    | "ExceptForLast"
    | "None";
  export type DirectionalityEnum = "None" | "To" | "From" | "Between";
  export type RegionTypeEnum =
    | "Default"
    | "Station"
    | "City"
    | "ProvinceState"
    | "Country"
    | "FeeZone"
    | "SubZone"
    | "Area"
    | "All"
    | "Mac";
  export type TravelRegionTypeEnum =
    | "Default"
    | "Station"
    | "City"
    | "ProvinceState"
    | "Country"
    | "FeeZone"
    | "SubZone"
    | "Area"
    | "All"
    | "Mac";
  export type TravelSegmentIndicatorEnum =
    | "None"
    | "CheckAgainstJourney"
    | "CheckAgainstTrip"
    | "Departure"
    | "DepartureOfTripOrigin"
    | "DepartureAtConnection"
    | "DepartureWithinStopoverTime"
    | "DepartureAtPointOfTurnaround"
    | "DepartureOfTransOceanicSegment"
    | "DepartureFromGateway"
    | "DepartureOfLastSegment"
    | "DepartureExceedsStopoverTime"
    | "NotDepartingViaConnection"
    | "GroundTimeBeforeDepartureOfJourneyWithin"
    | "GroundTimeBeforeDepartureOfJourneyExceeds"
    | "Arrival"
    | "ArrivalOfTransOceanicSegment"
    | "ArrivalAtGateway"
    | "ArrivalAtPointOfTurnaround"
    | "ArrivalAtConnection"
    | "ArrivalAtTripOrigin"
    | "NotDepartingViaConnectionOnSameCalendarDay"
    | "CheckAgainstItinerary"
    | "GroundTimeAfterArrivalAtConnectionWithin"
    | "GroundTimeAfterArrivalAtConnectionExceeds"
    | "GroundTimeAfterArrivalOfJourneyWithin"
    | "GroundTimeAfterArrivalOfJourneyExceeds";
}
