/**
 * API - Current Routes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: trunk
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { RegionFeeBaggage } from './regionFeeBaggage';
import { RegionRate } from './regionRate';


/**
 * Region fee model.
 */
export interface RegionFee { 
    /**
     * Gets or sets the control limit of this region fee.
     */
    controlLimit?: number;
    /**
     * Gets or sets the country code of this region fee.
     */
    countryCode?: string;
    /**
     * Gets or sets the deducted flag of this region fee.
     */
    deducted?: boolean;
    /**
     * Gets or sets the deduction type of this region fee.
     */
    deductionType?: RegionFee.DeductionTypeEnum;
    /**
     * Gets or sets the default currency code of this region fee.
     */
    defaultCurrencyCode?: string;
    /**
     * Gets or sets the directionality of this region fee.
     */
    directionality?: RegionFee.DirectionalityEnum;
    /**
     * Gets or sets the discontinue date of this region fee.
     */
    discontinueDate?: Date;
    /**
     * Gets or sets the fee option number for this region fee.
     */
    feeOptionNumber?: number;
    /**
     * Gets or sets the rate percent for this region fee.
     */
    ratePercent?: number;
    /**
     * Gets or sets the region code for this region fee.
     */
    regionCode?: string;
    /**
     * Gets or sets the baggage for this region fee.
     */
    baggage?: RegionFeeBaggage;
    /**
     * Gets or sets the id for this region fee.
     */
    id?: number;
    /**
     * Gets or sets the list for region rates for this region fee.
     */
    regionRates?: Array<RegionRate>;
    /**
     * Gets or sets the region type for this region fee.
     */
    regionType?: RegionFee.RegionTypeEnum;
    /**
     * Gets or sets the release date for this region fee.
     */
    releaseDate?: Date;
    /**
     * Gets or sets the travel country code for this region fee.
     */
    travelCountryCode?: string;
    /**
     * Gets or sets the travel discount date for this region fee.
     */
    travelDiscontinueDate?: Date;
    /**
     * Gets or sets the travel region code for this region.
     */
    travelRegionCode?: string;
    /**
     * Gets or sets the travel region type for this region.
     */
    travelRegionType?: RegionFee.TravelRegionTypeEnum;
    /**
     * Gets or sets the travel release date for this region.
     */
    travelReleaseDate?: Date;
    /**
     * Gets or sets the travel segment indicator for this region.
     */
    travelSegmentIndicator?: RegionFee.TravelSegmentIndicatorEnum;
}
export namespace RegionFee {
    export type DeductionTypeEnum = 'All' | 'First' | 'Last' | 'ExceptForFirst' | 'ExceptForLast' | 'None';
    export const DeductionTypeEnum = {
        All: 'All' as DeductionTypeEnum,
        First: 'First' as DeductionTypeEnum,
        Last: 'Last' as DeductionTypeEnum,
        ExceptForFirst: 'ExceptForFirst' as DeductionTypeEnum,
        ExceptForLast: 'ExceptForLast' as DeductionTypeEnum,
        None: 'None' as DeductionTypeEnum
    };
    export type DirectionalityEnum = 'None' | 'To' | 'From' | 'Between';
    export const DirectionalityEnum = {
        None: 'None' as DirectionalityEnum,
        To: 'To' as DirectionalityEnum,
        From: 'From' as DirectionalityEnum,
        Between: 'Between' as DirectionalityEnum
    };
    export type RegionTypeEnum = 'Default' | 'Station' | 'City' | 'ProvinceState' | 'Country' | 'FeeZone' | 'SubZone' | 'Area' | 'All' | 'Mac';
    export const RegionTypeEnum = {
        Default: 'Default' as RegionTypeEnum,
        Station: 'Station' as RegionTypeEnum,
        City: 'City' as RegionTypeEnum,
        ProvinceState: 'ProvinceState' as RegionTypeEnum,
        Country: 'Country' as RegionTypeEnum,
        FeeZone: 'FeeZone' as RegionTypeEnum,
        SubZone: 'SubZone' as RegionTypeEnum,
        Area: 'Area' as RegionTypeEnum,
        All: 'All' as RegionTypeEnum,
        Mac: 'Mac' as RegionTypeEnum
    };
    export type TravelRegionTypeEnum = 'Default' | 'Station' | 'City' | 'ProvinceState' | 'Country' | 'FeeZone' | 'SubZone' | 'Area' | 'All' | 'Mac';
    export const TravelRegionTypeEnum = {
        Default: 'Default' as TravelRegionTypeEnum,
        Station: 'Station' as TravelRegionTypeEnum,
        City: 'City' as TravelRegionTypeEnum,
        ProvinceState: 'ProvinceState' as TravelRegionTypeEnum,
        Country: 'Country' as TravelRegionTypeEnum,
        FeeZone: 'FeeZone' as TravelRegionTypeEnum,
        SubZone: 'SubZone' as TravelRegionTypeEnum,
        Area: 'Area' as TravelRegionTypeEnum,
        All: 'All' as TravelRegionTypeEnum,
        Mac: 'Mac' as TravelRegionTypeEnum
    };
    export type TravelSegmentIndicatorEnum = 'None' | 'CheckAgainstJourney' | 'CheckAgainstTrip' | 'Departure' | 'DepartureOfTripOrigin' | 'DepartureAtConnection' | 'DepartureWithinStopoverTime' | 'DepartureAtPointOfTurnaround' | 'DepartureOfTransOceanicSegment' | 'DepartureFromGateway' | 'DepartureOfLastSegment' | 'DepartureExceedsStopoverTime' | 'NotDepartingViaConnection' | 'GroundTimeBeforeDepartureOfJourneyWithin' | 'GroundTimeBeforeDepartureOfJourneyExceeds' | 'Arrival' | 'ArrivalOfTransOceanicSegment' | 'ArrivalAtGateway' | 'ArrivalAtPointOfTurnaround' | 'ArrivalAtConnection' | 'ArrivalAtTripOrigin' | 'NotDepartingViaConnectionOnSameCalendarDay' | 'CheckAgainstItinerary' | 'GroundTimeAfterArrivalAtConnectionWithin' | 'GroundTimeAfterArrivalAtConnectionExceeds' | 'GroundTimeAfterArrivalOfJourneyWithin' | 'GroundTimeAfterArrivalOfJourneyExceeds';
    export const TravelSegmentIndicatorEnum = {
        None: 'None' as TravelSegmentIndicatorEnum,
        CheckAgainstJourney: 'CheckAgainstJourney' as TravelSegmentIndicatorEnum,
        CheckAgainstTrip: 'CheckAgainstTrip' as TravelSegmentIndicatorEnum,
        Departure: 'Departure' as TravelSegmentIndicatorEnum,
        DepartureOfTripOrigin: 'DepartureOfTripOrigin' as TravelSegmentIndicatorEnum,
        DepartureAtConnection: 'DepartureAtConnection' as TravelSegmentIndicatorEnum,
        DepartureWithinStopoverTime: 'DepartureWithinStopoverTime' as TravelSegmentIndicatorEnum,
        DepartureAtPointOfTurnaround: 'DepartureAtPointOfTurnaround' as TravelSegmentIndicatorEnum,
        DepartureOfTransOceanicSegment: 'DepartureOfTransOceanicSegment' as TravelSegmentIndicatorEnum,
        DepartureFromGateway: 'DepartureFromGateway' as TravelSegmentIndicatorEnum,
        DepartureOfLastSegment: 'DepartureOfLastSegment' as TravelSegmentIndicatorEnum,
        DepartureExceedsStopoverTime: 'DepartureExceedsStopoverTime' as TravelSegmentIndicatorEnum,
        NotDepartingViaConnection: 'NotDepartingViaConnection' as TravelSegmentIndicatorEnum,
        GroundTimeBeforeDepartureOfJourneyWithin: 'GroundTimeBeforeDepartureOfJourneyWithin' as TravelSegmentIndicatorEnum,
        GroundTimeBeforeDepartureOfJourneyExceeds: 'GroundTimeBeforeDepartureOfJourneyExceeds' as TravelSegmentIndicatorEnum,
        Arrival: 'Arrival' as TravelSegmentIndicatorEnum,
        ArrivalOfTransOceanicSegment: 'ArrivalOfTransOceanicSegment' as TravelSegmentIndicatorEnum,
        ArrivalAtGateway: 'ArrivalAtGateway' as TravelSegmentIndicatorEnum,
        ArrivalAtPointOfTurnaround: 'ArrivalAtPointOfTurnaround' as TravelSegmentIndicatorEnum,
        ArrivalAtConnection: 'ArrivalAtConnection' as TravelSegmentIndicatorEnum,
        ArrivalAtTripOrigin: 'ArrivalAtTripOrigin' as TravelSegmentIndicatorEnum,
        NotDepartingViaConnectionOnSameCalendarDay: 'NotDepartingViaConnectionOnSameCalendarDay' as TravelSegmentIndicatorEnum,
        CheckAgainstItinerary: 'CheckAgainstItinerary' as TravelSegmentIndicatorEnum,
        GroundTimeAfterArrivalAtConnectionWithin: 'GroundTimeAfterArrivalAtConnectionWithin' as TravelSegmentIndicatorEnum,
        GroundTimeAfterArrivalAtConnectionExceeds: 'GroundTimeAfterArrivalAtConnectionExceeds' as TravelSegmentIndicatorEnum,
        GroundTimeAfterArrivalOfJourneyWithin: 'GroundTimeAfterArrivalOfJourneyWithin' as TravelSegmentIndicatorEnum,
        GroundTimeAfterArrivalOfJourneyExceeds: 'GroundTimeAfterArrivalOfJourneyExceeds' as TravelSegmentIndicatorEnum
    };
}
