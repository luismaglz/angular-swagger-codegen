/**
 * API - Current Routes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: trunk
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { ChildAccountTransactionsRequest } from '../model/childAccountTransactionsRequest';
import { CreateOrganizationAccountRequest } from '../model/createOrganizationAccountRequest';
import { DeltaMapperOrganizationEditRequest } from '../model/deltaMapperOrganizationEditRequest';
import { IJsonResponse } from '../model/iJsonResponse';
import { OrganizationAccount } from '../model/organizationAccount';
import { OrganizationCommissionRate } from '../model/organizationCommissionRate';
import { OrganizationCreateRequest } from '../model/organizationCreateRequest';
import { OrganizationEditRequest } from '../model/organizationEditRequest';
import { OrganizationExternalAccountRequest } from '../model/organizationExternalAccountRequest';
import { OrganizationExternalAccountv2 } from '../model/organizationExternalAccountv2';
import { OrganizationRecord } from '../model/organizationRecord';
import { OrganizationRegisterRequest } from '../model/organizationRegisterRequest';
import { OrganizationTransactionRequest } from '../model/organizationTransactionRequest';
import { Organizationv2 } from '../model/organizationv2';
import { PhoneNumber } from '../model/phoneNumber';
import { PhoneNumberBase } from '../model/phoneNumberBase';
import { Transaction } from '../model/transaction';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class Organizations2Service {

    protected basePath = 'https://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Adjust the available amount of a child account.
     * The known list of parent-child relations are as follows:  - Dependent accounts are not supported.  - A parent&#39;s account of type credit may have children of type supplemental or credit.  - A parent&#39;s account of type prepaid may have children of type prepaid.  - No other combination of parent-child relations are supported.
     * @param organizationCode The account reference number for the child organization.
     * @param request The child account transaction request.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1Organizations2ByOrganizationCodeAccountChildAccountTransactionsPost(organizationCode: string, request?: ChildAccountTransactionsRequest, observe?: 'body', reportProgress?: boolean): Observable<IJsonResponse>;
    public apiNskV1Organizations2ByOrganizationCodeAccountChildAccountTransactionsPost(organizationCode: string, request?: ChildAccountTransactionsRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1Organizations2ByOrganizationCodeAccountChildAccountTransactionsPost(organizationCode: string, request?: ChildAccountTransactionsRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IJsonResponse>>;
    public apiNskV1Organizations2ByOrganizationCodeAccountChildAccountTransactionsPost(organizationCode: string, request?: ChildAccountTransactionsRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (organizationCode === null || organizationCode === undefined) {
            throw new Error('Required parameter organizationCode was null or undefined when calling apiNskV1Organizations2ByOrganizationCodeAccountChildAccountTransactionsPost.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<IJsonResponse>(`${this.basePath}/api/nsk/v1/organizations2/${encodeURIComponent(String(organizationCode))}/account/childAccountTransactions`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Adjust the credit limit of a child account.
     * The known list of parent-child relations are as follows:  - Dependent accounts are not supported.  - A parent&#39;s account of type credit may have children of type supplemental or credit.  - A parent&#39;s account of type prepaid may have children of type prepaid.  - No other combination of parent-child relations are supported.
     * @param organizationCode The account reference number for the child organization.
     * @param request The child account transaction request.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1Organizations2ByOrganizationCodeAccountChildAccountTransactionsPut(organizationCode: string, request?: ChildAccountTransactionsRequest, observe?: 'body', reportProgress?: boolean): Observable<IJsonResponse>;
    public apiNskV1Organizations2ByOrganizationCodeAccountChildAccountTransactionsPut(organizationCode: string, request?: ChildAccountTransactionsRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1Organizations2ByOrganizationCodeAccountChildAccountTransactionsPut(organizationCode: string, request?: ChildAccountTransactionsRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IJsonResponse>>;
    public apiNskV1Organizations2ByOrganizationCodeAccountChildAccountTransactionsPut(organizationCode: string, request?: ChildAccountTransactionsRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (organizationCode === null || organizationCode === undefined) {
            throw new Error('Required parameter organizationCode was null or undefined when calling apiNskV1Organizations2ByOrganizationCodeAccountChildAccountTransactionsPut.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<IJsonResponse>(`${this.basePath}/api/nsk/v1/organizations2/${encodeURIComponent(String(organizationCode))}/account/childAccountTransactions`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves the organization account and collections based on the organization code.
     * 
     * @param organizationCode The organization code.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1Organizations2ByOrganizationCodeAccountGet(organizationCode: string, observe?: 'body', reportProgress?: boolean): Observable<OrganizationAccount>;
    public apiNskV1Organizations2ByOrganizationCodeAccountGet(organizationCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrganizationAccount>>;
    public apiNskV1Organizations2ByOrganizationCodeAccountGet(organizationCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrganizationAccount>>;
    public apiNskV1Organizations2ByOrganizationCodeAccountGet(organizationCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (organizationCode === null || organizationCode === undefined) {
            throw new Error('Required parameter organizationCode was null or undefined when calling apiNskV1Organizations2ByOrganizationCodeAccountGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<OrganizationAccount>(`${this.basePath}/api/nsk/v1/organizations2/${encodeURIComponent(String(organizationCode))}/account`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates an organization account based on the organization code.
     * 
     * @param organizationCode The organization code.
     * @param request The create organization account request.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1Organizations2ByOrganizationCodeAccountPost(organizationCode: string, request?: CreateOrganizationAccountRequest, observe?: 'body', reportProgress?: boolean): Observable<IJsonResponse>;
    public apiNskV1Organizations2ByOrganizationCodeAccountPost(organizationCode: string, request?: CreateOrganizationAccountRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1Organizations2ByOrganizationCodeAccountPost(organizationCode: string, request?: CreateOrganizationAccountRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IJsonResponse>>;
    public apiNskV1Organizations2ByOrganizationCodeAccountPost(organizationCode: string, request?: CreateOrganizationAccountRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (organizationCode === null || organizationCode === undefined) {
            throw new Error('Required parameter organizationCode was null or undefined when calling apiNskV1Organizations2ByOrganizationCodeAccountPost.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<IJsonResponse>(`${this.basePath}/api/nsk/v1/organizations2/${encodeURIComponent(String(organizationCode))}/account`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates the organization account status.
     * 
     * @param organizationCode The organization code.
     * @param status The allowed account status.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1Organizations2ByOrganizationCodeAccountStatusPut(organizationCode: string, status: 'Open' | 'Closed' | 'AgencyInactive' | 'Unknown', observe?: 'body', reportProgress?: boolean): Observable<IJsonResponse>;
    public apiNskV1Organizations2ByOrganizationCodeAccountStatusPut(organizationCode: string, status: 'Open' | 'Closed' | 'AgencyInactive' | 'Unknown', observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1Organizations2ByOrganizationCodeAccountStatusPut(organizationCode: string, status: 'Open' | 'Closed' | 'AgencyInactive' | 'Unknown', observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IJsonResponse>>;
    public apiNskV1Organizations2ByOrganizationCodeAccountStatusPut(organizationCode: string, status: 'Open' | 'Closed' | 'AgencyInactive' | 'Unknown', observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (organizationCode === null || organizationCode === undefined) {
            throw new Error('Required parameter organizationCode was null or undefined when calling apiNskV1Organizations2ByOrganizationCodeAccountStatusPut.');
        }

        if (status === null || status === undefined) {
            throw new Error('Required parameter status was null or undefined when calling apiNskV1Organizations2ByOrganizationCodeAccountStatusPut.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (status !== undefined && status !== null) {
            queryParameters = queryParameters.set('status', <any>status);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.put<IJsonResponse>(`${this.basePath}/api/nsk/v1/organizations2/${encodeURIComponent(String(organizationCode))}/account/status`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves the organization account transactions based on the organization code  and data in the request.
     * 
     * @param organizationCode The organization code.
     * @param startTime The starting date and time of the date range to search in.
     * @param sortByNewest Optional filter to sort results by newest.
     * @param endTime The end date and time of the date range to search in.
     * @param pageSize Used to specify the number of records to return.
     * @param pageIndex Represents the index of the requested paged item.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1Organizations2ByOrganizationCodeAccountTransactionsGet(organizationCode: string, startTime: Date, sortByNewest: boolean, endTime?: Date, pageSize?: number, pageIndex?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Transaction>>;
    public apiNskV1Organizations2ByOrganizationCodeAccountTransactionsGet(organizationCode: string, startTime: Date, sortByNewest: boolean, endTime?: Date, pageSize?: number, pageIndex?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Transaction>>>;
    public apiNskV1Organizations2ByOrganizationCodeAccountTransactionsGet(organizationCode: string, startTime: Date, sortByNewest: boolean, endTime?: Date, pageSize?: number, pageIndex?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Transaction>>>;
    public apiNskV1Organizations2ByOrganizationCodeAccountTransactionsGet(organizationCode: string, startTime: Date, sortByNewest: boolean, endTime?: Date, pageSize?: number, pageIndex?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (organizationCode === null || organizationCode === undefined) {
            throw new Error('Required parameter organizationCode was null or undefined when calling apiNskV1Organizations2ByOrganizationCodeAccountTransactionsGet.');
        }

        if (startTime === null || startTime === undefined) {
            throw new Error('Required parameter startTime was null or undefined when calling apiNskV1Organizations2ByOrganizationCodeAccountTransactionsGet.');
        }

        if (sortByNewest === null || sortByNewest === undefined) {
            throw new Error('Required parameter sortByNewest was null or undefined when calling apiNskV1Organizations2ByOrganizationCodeAccountTransactionsGet.');
        }




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (startTime !== undefined && startTime !== null) {
            queryParameters = queryParameters.set('StartTime', <any>startTime.toISOString());
        }
        if (endTime !== undefined && endTime !== null) {
            queryParameters = queryParameters.set('EndTime', <any>endTime.toISOString());
        }
        if (sortByNewest !== undefined && sortByNewest !== null) {
            queryParameters = queryParameters.set('SortByNewest', <any>sortByNewest);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('PageSize', <any>pageSize);
        }
        if (pageIndex !== undefined && pageIndex !== null) {
            queryParameters = queryParameters.set('PageIndex', <any>pageIndex);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Transaction>>(`${this.basePath}/api/nsk/v1/organizations2/${encodeURIComponent(String(organizationCode))}/account/transactions`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates account transactions based on data in the request and the  organization code.
     * 
     * @param organizationCode The organization code.
     * @param request The transaction request.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1Organizations2ByOrganizationCodeAccountTransactionsPost(organizationCode: string, request?: OrganizationTransactionRequest, observe?: 'body', reportProgress?: boolean): Observable<IJsonResponse>;
    public apiNskV1Organizations2ByOrganizationCodeAccountTransactionsPost(organizationCode: string, request?: OrganizationTransactionRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1Organizations2ByOrganizationCodeAccountTransactionsPost(organizationCode: string, request?: OrganizationTransactionRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IJsonResponse>>;
    public apiNskV1Organizations2ByOrganizationCodeAccountTransactionsPost(organizationCode: string, request?: OrganizationTransactionRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (organizationCode === null || organizationCode === undefined) {
            throw new Error('Required parameter organizationCode was null or undefined when calling apiNskV1Organizations2ByOrganizationCodeAccountTransactionsPost.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<IJsonResponse>(`${this.basePath}/api/nsk/v1/organizations2/${encodeURIComponent(String(organizationCode))}/account/transactions`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete a commission rate.
     * 
     * @param organizationCode 
     * @param commissionRateCode 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1Organizations2ByOrganizationCodeCommissionRatesByCommissionRateCodeDelete(organizationCode: string, commissionRateCode: string, observe?: 'body', reportProgress?: boolean): Observable<IJsonResponse>;
    public apiNskV1Organizations2ByOrganizationCodeCommissionRatesByCommissionRateCodeDelete(organizationCode: string, commissionRateCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1Organizations2ByOrganizationCodeCommissionRatesByCommissionRateCodeDelete(organizationCode: string, commissionRateCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IJsonResponse>>;
    public apiNskV1Organizations2ByOrganizationCodeCommissionRatesByCommissionRateCodeDelete(organizationCode: string, commissionRateCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (organizationCode === null || organizationCode === undefined) {
            throw new Error('Required parameter organizationCode was null or undefined when calling apiNskV1Organizations2ByOrganizationCodeCommissionRatesByCommissionRateCodeDelete.');
        }

        if (commissionRateCode === null || commissionRateCode === undefined) {
            throw new Error('Required parameter commissionRateCode was null or undefined when calling apiNskV1Organizations2ByOrganizationCodeCommissionRatesByCommissionRateCodeDelete.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<IJsonResponse>(`${this.basePath}/api/nsk/v1/organizations2/${encodeURIComponent(String(organizationCode))}/commissionRates/${encodeURIComponent(String(commissionRateCode))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get a commission rate.
     * 
     * @param organizationCode 
     * @param commissionRateCode 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1Organizations2ByOrganizationCodeCommissionRatesByCommissionRateCodeGet(organizationCode: string, commissionRateCode: string, observe?: 'body', reportProgress?: boolean): Observable<OrganizationCommissionRate>;
    public apiNskV1Organizations2ByOrganizationCodeCommissionRatesByCommissionRateCodeGet(organizationCode: string, commissionRateCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrganizationCommissionRate>>;
    public apiNskV1Organizations2ByOrganizationCodeCommissionRatesByCommissionRateCodeGet(organizationCode: string, commissionRateCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrganizationCommissionRate>>;
    public apiNskV1Organizations2ByOrganizationCodeCommissionRatesByCommissionRateCodeGet(organizationCode: string, commissionRateCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (organizationCode === null || organizationCode === undefined) {
            throw new Error('Required parameter organizationCode was null or undefined when calling apiNskV1Organizations2ByOrganizationCodeCommissionRatesByCommissionRateCodeGet.');
        }

        if (commissionRateCode === null || commissionRateCode === undefined) {
            throw new Error('Required parameter commissionRateCode was null or undefined when calling apiNskV1Organizations2ByOrganizationCodeCommissionRatesByCommissionRateCodeGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<OrganizationCommissionRate>(`${this.basePath}/api/nsk/v1/organizations2/${encodeURIComponent(String(organizationCode))}/commissionRates/${encodeURIComponent(String(commissionRateCode))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create a commission rate.
     * 
     * @param organizationCode 
     * @param request 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1Organizations2ByOrganizationCodeCommissionRatesPost(organizationCode: string, request?: OrganizationCommissionRate, observe?: 'body', reportProgress?: boolean): Observable<IJsonResponse>;
    public apiNskV1Organizations2ByOrganizationCodeCommissionRatesPost(organizationCode: string, request?: OrganizationCommissionRate, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1Organizations2ByOrganizationCodeCommissionRatesPost(organizationCode: string, request?: OrganizationCommissionRate, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IJsonResponse>>;
    public apiNskV1Organizations2ByOrganizationCodeCommissionRatesPost(organizationCode: string, request?: OrganizationCommissionRate, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (organizationCode === null || organizationCode === undefined) {
            throw new Error('Required parameter organizationCode was null or undefined when calling apiNskV1Organizations2ByOrganizationCodeCommissionRatesPost.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<IJsonResponse>(`${this.basePath}/api/nsk/v1/organizations2/${encodeURIComponent(String(organizationCode))}/commissionRates`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes a company phone number.
     * 
     * @param organizationCode 
     * @param phoneNumberType 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1Organizations2ByOrganizationCodeCompanyPhoneNumbersByPhoneNumberTypeDelete(organizationCode: string, phoneNumberType: 'Other' | 'Home' | 'Work' | 'Mobile' | 'Fax', observe?: 'body', reportProgress?: boolean): Observable<IJsonResponse>;
    public apiNskV1Organizations2ByOrganizationCodeCompanyPhoneNumbersByPhoneNumberTypeDelete(organizationCode: string, phoneNumberType: 'Other' | 'Home' | 'Work' | 'Mobile' | 'Fax', observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1Organizations2ByOrganizationCodeCompanyPhoneNumbersByPhoneNumberTypeDelete(organizationCode: string, phoneNumberType: 'Other' | 'Home' | 'Work' | 'Mobile' | 'Fax', observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IJsonResponse>>;
    public apiNskV1Organizations2ByOrganizationCodeCompanyPhoneNumbersByPhoneNumberTypeDelete(organizationCode: string, phoneNumberType: 'Other' | 'Home' | 'Work' | 'Mobile' | 'Fax', observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (organizationCode === null || organizationCode === undefined) {
            throw new Error('Required parameter organizationCode was null or undefined when calling apiNskV1Organizations2ByOrganizationCodeCompanyPhoneNumbersByPhoneNumberTypeDelete.');
        }

        if (phoneNumberType === null || phoneNumberType === undefined) {
            throw new Error('Required parameter phoneNumberType was null or undefined when calling apiNskV1Organizations2ByOrganizationCodeCompanyPhoneNumbersByPhoneNumberTypeDelete.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<IJsonResponse>(`${this.basePath}/api/nsk/v1/organizations2/${encodeURIComponent(String(organizationCode))}/company/phoneNumbers/${encodeURIComponent(String(phoneNumberType))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates a company phone number.
     * 
     * @param organizationCode 
     * @param phoneNumberType 
     * @param request 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1Organizations2ByOrganizationCodeCompanyPhoneNumbersByPhoneNumberTypePut(organizationCode: string, phoneNumberType: 'Other' | 'Home' | 'Work' | 'Mobile' | 'Fax', request?: PhoneNumberBase, observe?: 'body', reportProgress?: boolean): Observable<IJsonResponse>;
    public apiNskV1Organizations2ByOrganizationCodeCompanyPhoneNumbersByPhoneNumberTypePut(organizationCode: string, phoneNumberType: 'Other' | 'Home' | 'Work' | 'Mobile' | 'Fax', request?: PhoneNumberBase, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1Organizations2ByOrganizationCodeCompanyPhoneNumbersByPhoneNumberTypePut(organizationCode: string, phoneNumberType: 'Other' | 'Home' | 'Work' | 'Mobile' | 'Fax', request?: PhoneNumberBase, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IJsonResponse>>;
    public apiNskV1Organizations2ByOrganizationCodeCompanyPhoneNumbersByPhoneNumberTypePut(organizationCode: string, phoneNumberType: 'Other' | 'Home' | 'Work' | 'Mobile' | 'Fax', request?: PhoneNumberBase, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (organizationCode === null || organizationCode === undefined) {
            throw new Error('Required parameter organizationCode was null or undefined when calling apiNskV1Organizations2ByOrganizationCodeCompanyPhoneNumbersByPhoneNumberTypePut.');
        }

        if (phoneNumberType === null || phoneNumberType === undefined) {
            throw new Error('Required parameter phoneNumberType was null or undefined when calling apiNskV1Organizations2ByOrganizationCodeCompanyPhoneNumbersByPhoneNumberTypePut.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<IJsonResponse>(`${this.basePath}/api/nsk/v1/organizations2/${encodeURIComponent(String(organizationCode))}/company/phoneNumbers/${encodeURIComponent(String(phoneNumberType))}`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create a company phone number.
     * 
     * @param organizationCode 
     * @param request 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1Organizations2ByOrganizationCodeCompanyPhoneNumbersPost(organizationCode: string, request?: PhoneNumber, observe?: 'body', reportProgress?: boolean): Observable<IJsonResponse>;
    public apiNskV1Organizations2ByOrganizationCodeCompanyPhoneNumbersPost(organizationCode: string, request?: PhoneNumber, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1Organizations2ByOrganizationCodeCompanyPhoneNumbersPost(organizationCode: string, request?: PhoneNumber, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IJsonResponse>>;
    public apiNskV1Organizations2ByOrganizationCodeCompanyPhoneNumbersPost(organizationCode: string, request?: PhoneNumber, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (organizationCode === null || organizationCode === undefined) {
            throw new Error('Required parameter organizationCode was null or undefined when calling apiNskV1Organizations2ByOrganizationCodeCompanyPhoneNumbersPost.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<IJsonResponse>(`${this.basePath}/api/nsk/v1/organizations2/${encodeURIComponent(String(organizationCode))}/company/phoneNumbers`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes a contact phone number.
     * 
     * @param organizationCode 
     * @param phoneNumberType 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1Organizations2ByOrganizationCodeContactPhoneNumbersByPhoneNumberTypeDelete(organizationCode: string, phoneNumberType: 'Other' | 'Home' | 'Work' | 'Mobile' | 'Fax', observe?: 'body', reportProgress?: boolean): Observable<IJsonResponse>;
    public apiNskV1Organizations2ByOrganizationCodeContactPhoneNumbersByPhoneNumberTypeDelete(organizationCode: string, phoneNumberType: 'Other' | 'Home' | 'Work' | 'Mobile' | 'Fax', observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1Organizations2ByOrganizationCodeContactPhoneNumbersByPhoneNumberTypeDelete(organizationCode: string, phoneNumberType: 'Other' | 'Home' | 'Work' | 'Mobile' | 'Fax', observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IJsonResponse>>;
    public apiNskV1Organizations2ByOrganizationCodeContactPhoneNumbersByPhoneNumberTypeDelete(organizationCode: string, phoneNumberType: 'Other' | 'Home' | 'Work' | 'Mobile' | 'Fax', observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (organizationCode === null || organizationCode === undefined) {
            throw new Error('Required parameter organizationCode was null or undefined when calling apiNskV1Organizations2ByOrganizationCodeContactPhoneNumbersByPhoneNumberTypeDelete.');
        }

        if (phoneNumberType === null || phoneNumberType === undefined) {
            throw new Error('Required parameter phoneNumberType was null or undefined when calling apiNskV1Organizations2ByOrganizationCodeContactPhoneNumbersByPhoneNumberTypeDelete.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<IJsonResponse>(`${this.basePath}/api/nsk/v1/organizations2/${encodeURIComponent(String(organizationCode))}/contact/phoneNumbers/${encodeURIComponent(String(phoneNumberType))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates a contact phone number.
     * 
     * @param organizationCode 
     * @param phoneNumberType 
     * @param request 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1Organizations2ByOrganizationCodeContactPhoneNumbersByPhoneNumberTypePut(organizationCode: string, phoneNumberType: 'Other' | 'Home' | 'Work' | 'Mobile' | 'Fax', request?: PhoneNumberBase, observe?: 'body', reportProgress?: boolean): Observable<IJsonResponse>;
    public apiNskV1Organizations2ByOrganizationCodeContactPhoneNumbersByPhoneNumberTypePut(organizationCode: string, phoneNumberType: 'Other' | 'Home' | 'Work' | 'Mobile' | 'Fax', request?: PhoneNumberBase, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1Organizations2ByOrganizationCodeContactPhoneNumbersByPhoneNumberTypePut(organizationCode: string, phoneNumberType: 'Other' | 'Home' | 'Work' | 'Mobile' | 'Fax', request?: PhoneNumberBase, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IJsonResponse>>;
    public apiNskV1Organizations2ByOrganizationCodeContactPhoneNumbersByPhoneNumberTypePut(organizationCode: string, phoneNumberType: 'Other' | 'Home' | 'Work' | 'Mobile' | 'Fax', request?: PhoneNumberBase, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (organizationCode === null || organizationCode === undefined) {
            throw new Error('Required parameter organizationCode was null or undefined when calling apiNskV1Organizations2ByOrganizationCodeContactPhoneNumbersByPhoneNumberTypePut.');
        }

        if (phoneNumberType === null || phoneNumberType === undefined) {
            throw new Error('Required parameter phoneNumberType was null or undefined when calling apiNskV1Organizations2ByOrganizationCodeContactPhoneNumbersByPhoneNumberTypePut.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<IJsonResponse>(`${this.basePath}/api/nsk/v1/organizations2/${encodeURIComponent(String(organizationCode))}/contact/phoneNumbers/${encodeURIComponent(String(phoneNumberType))}`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create a contact phone number.
     * 
     * @param organizationCode 
     * @param request 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1Organizations2ByOrganizationCodeContactPhoneNumbersPost(organizationCode: string, request?: PhoneNumber, observe?: 'body', reportProgress?: boolean): Observable<IJsonResponse>;
    public apiNskV1Organizations2ByOrganizationCodeContactPhoneNumbersPost(organizationCode: string, request?: PhoneNumber, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1Organizations2ByOrganizationCodeContactPhoneNumbersPost(organizationCode: string, request?: PhoneNumber, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IJsonResponse>>;
    public apiNskV1Organizations2ByOrganizationCodeContactPhoneNumbersPost(organizationCode: string, request?: PhoneNumber, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (organizationCode === null || organizationCode === undefined) {
            throw new Error('Required parameter organizationCode was null or undefined when calling apiNskV1Organizations2ByOrganizationCodeContactPhoneNumbersPost.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<IJsonResponse>(`${this.basePath}/api/nsk/v1/organizations2/${encodeURIComponent(String(organizationCode))}/contact/phoneNumbers`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete an external account.
     * 
     * @param organizationCode 
     * @param externalAccountKey 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1Organizations2ByOrganizationCodeExternalAccountsByExternalAccountKeyDelete(organizationCode: string, externalAccountKey: string, observe?: 'body', reportProgress?: boolean): Observable<IJsonResponse>;
    public apiNskV1Organizations2ByOrganizationCodeExternalAccountsByExternalAccountKeyDelete(organizationCode: string, externalAccountKey: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1Organizations2ByOrganizationCodeExternalAccountsByExternalAccountKeyDelete(organizationCode: string, externalAccountKey: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IJsonResponse>>;
    public apiNskV1Organizations2ByOrganizationCodeExternalAccountsByExternalAccountKeyDelete(organizationCode: string, externalAccountKey: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (organizationCode === null || organizationCode === undefined) {
            throw new Error('Required parameter organizationCode was null or undefined when calling apiNskV1Organizations2ByOrganizationCodeExternalAccountsByExternalAccountKeyDelete.');
        }

        if (externalAccountKey === null || externalAccountKey === undefined) {
            throw new Error('Required parameter externalAccountKey was null or undefined when calling apiNskV1Organizations2ByOrganizationCodeExternalAccountsByExternalAccountKeyDelete.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<IJsonResponse>(`${this.basePath}/api/nsk/v1/organizations2/${encodeURIComponent(String(organizationCode))}/externalAccounts/${encodeURIComponent(String(externalAccountKey))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get an external account.
     * 
     * @param organizationCode 
     * @param externalAccountKey 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1Organizations2ByOrganizationCodeExternalAccountsByExternalAccountKeyGet(organizationCode: string, externalAccountKey: string, observe?: 'body', reportProgress?: boolean): Observable<OrganizationExternalAccountv2>;
    public apiNskV1Organizations2ByOrganizationCodeExternalAccountsByExternalAccountKeyGet(organizationCode: string, externalAccountKey: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrganizationExternalAccountv2>>;
    public apiNskV1Organizations2ByOrganizationCodeExternalAccountsByExternalAccountKeyGet(organizationCode: string, externalAccountKey: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrganizationExternalAccountv2>>;
    public apiNskV1Organizations2ByOrganizationCodeExternalAccountsByExternalAccountKeyGet(organizationCode: string, externalAccountKey: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (organizationCode === null || organizationCode === undefined) {
            throw new Error('Required parameter organizationCode was null or undefined when calling apiNskV1Organizations2ByOrganizationCodeExternalAccountsByExternalAccountKeyGet.');
        }

        if (externalAccountKey === null || externalAccountKey === undefined) {
            throw new Error('Required parameter externalAccountKey was null or undefined when calling apiNskV1Organizations2ByOrganizationCodeExternalAccountsByExternalAccountKeyGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<OrganizationExternalAccountv2>(`${this.basePath}/api/nsk/v1/organizations2/${encodeURIComponent(String(organizationCode))}/externalAccounts/${encodeURIComponent(String(externalAccountKey))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create an external account.
     * 
     * @param organizationCode 
     * @param request 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1Organizations2ByOrganizationCodeExternalAccountsPost(organizationCode: string, request?: OrganizationExternalAccountRequest, observe?: 'body', reportProgress?: boolean): Observable<IJsonResponse>;
    public apiNskV1Organizations2ByOrganizationCodeExternalAccountsPost(organizationCode: string, request?: OrganizationExternalAccountRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1Organizations2ByOrganizationCodeExternalAccountsPost(organizationCode: string, request?: OrganizationExternalAccountRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IJsonResponse>>;
    public apiNskV1Organizations2ByOrganizationCodeExternalAccountsPost(organizationCode: string, request?: OrganizationExternalAccountRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (organizationCode === null || organizationCode === undefined) {
            throw new Error('Required parameter organizationCode was null or undefined when calling apiNskV1Organizations2ByOrganizationCodeExternalAccountsPost.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<IJsonResponse>(`${this.basePath}/api/nsk/v1/organizations2/${encodeURIComponent(String(organizationCode))}/externalAccounts`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves the organization.
     * 
     * @param organizationCode 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1Organizations2ByOrganizationCodeGet(organizationCode: string, observe?: 'body', reportProgress?: boolean): Observable<Organizationv2>;
    public apiNskV1Organizations2ByOrganizationCodeGet(organizationCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Organizationv2>>;
    public apiNskV1Organizations2ByOrganizationCodeGet(organizationCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Organizationv2>>;
    public apiNskV1Organizations2ByOrganizationCodeGet(organizationCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (organizationCode === null || organizationCode === undefined) {
            throw new Error('Required parameter organizationCode was null or undefined when calling apiNskV1Organizations2ByOrganizationCodeGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Organizationv2>(`${this.basePath}/api/nsk/v1/organizations2/${encodeURIComponent(String(organizationCode))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates an organization.
     * Requires agent permissions.  The organization code is a generic code for all of the organization types. Each individual type has its own code  and validation.  If the organization status is not pending the organization code should follow these validation rules based on type:  &lt;ul&gt;&lt;li&gt;Third Party: 3 to 10 characters in length with alphanumeric values.&lt;/li&gt;&lt;li&gt;Travel Agency: 7 to 10 characters in length with numeric values.&lt;/li&gt;&lt;li&gt;Carrier: 2 to 3 characters in length with alphanumeric values.&lt;/li&gt;&lt;/ul&gt;
     * @param organizationCode 
     * @param createRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1Organizations2ByOrganizationCodePatch(organizationCode: string, createRequest?: DeltaMapperOrganizationEditRequest, observe?: 'body', reportProgress?: boolean): Observable<Organizationv2>;
    public apiNskV1Organizations2ByOrganizationCodePatch(organizationCode: string, createRequest?: DeltaMapperOrganizationEditRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Organizationv2>>;
    public apiNskV1Organizations2ByOrganizationCodePatch(organizationCode: string, createRequest?: DeltaMapperOrganizationEditRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Organizationv2>>;
    public apiNskV1Organizations2ByOrganizationCodePatch(organizationCode: string, createRequest?: DeltaMapperOrganizationEditRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (organizationCode === null || organizationCode === undefined) {
            throw new Error('Required parameter organizationCode was null or undefined when calling apiNskV1Organizations2ByOrganizationCodePatch.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.patch<Organizationv2>(`${this.basePath}/api/nsk/v1/organizations2/${encodeURIComponent(String(organizationCode))}`,
            createRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates an organization.
     * Requires agent permissions.  The organization code is a generic code for all of the organization types. Each individual type has its own code  and validation.  If the organization status is not pending the organization code should follow these validation rules based on type:  &lt;ul&gt;&lt;li&gt;Third Party: 3 to 10 characters in length with alphanumeric values.&lt;/li&gt;&lt;li&gt;Travel Agency: 7 to 10 characters in length with numeric values.&lt;/li&gt;&lt;li&gt;Carrier: 2 to 3 characters in length with alphanumeric values.&lt;/li&gt;&lt;/ul&gt;
     * @param organizationCode 
     * @param request 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1Organizations2ByOrganizationCodePut(organizationCode: string, request?: OrganizationEditRequest, observe?: 'body', reportProgress?: boolean): Observable<Organizationv2>;
    public apiNskV1Organizations2ByOrganizationCodePut(organizationCode: string, request?: OrganizationEditRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Organizationv2>>;
    public apiNskV1Organizations2ByOrganizationCodePut(organizationCode: string, request?: OrganizationEditRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Organizationv2>>;
    public apiNskV1Organizations2ByOrganizationCodePut(organizationCode: string, request?: OrganizationEditRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (organizationCode === null || organizationCode === undefined) {
            throw new Error('Required parameter organizationCode was null or undefined when calling apiNskV1Organizations2ByOrganizationCodePut.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<Organizationv2>(`${this.basePath}/api/nsk/v1/organizations2/${encodeURIComponent(String(organizationCode))}`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create a new organization.
     * Requires agent permissions.  The organization code is a generic code for all of the organization types. Each individual type has its own code  and validation.  If the organization status is not pending the organization code should follow these validation rules based on type:  &lt;ul&gt;&lt;li&gt;Third Party: 3 to 10 characters in length with alphanumeric values.&lt;/li&gt;&lt;li&gt;Travel Agency: 7 to 10 characters in length with numeric values.&lt;/li&gt;&lt;li&gt;Carrier: 2 to 3 characters in length with alphanumeric values.&lt;/li&gt;&lt;/ul&gt;
     * @param createRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1Organizations2Post(createRequest?: OrganizationCreateRequest, observe?: 'body', reportProgress?: boolean): Observable<Organizationv2>;
    public apiNskV1Organizations2Post(createRequest?: OrganizationCreateRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Organizationv2>>;
    public apiNskV1Organizations2Post(createRequest?: OrganizationCreateRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Organizationv2>>;
    public apiNskV1Organizations2Post(createRequest?: OrganizationCreateRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Organizationv2>(`${this.basePath}/api/nsk/v1/organizations2`,
            createRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Requests to register a new organization.
     * Note: This is only a request. An agent will need to approve the action.
     * @param registerRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1Organizations2RegisterPost(registerRequest?: OrganizationRegisterRequest, observe?: 'body', reportProgress?: boolean): Observable<Organizationv2>;
    public apiNskV1Organizations2RegisterPost(registerRequest?: OrganizationRegisterRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Organizationv2>>;
    public apiNskV1Organizations2RegisterPost(registerRequest?: OrganizationRegisterRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Organizationv2>>;
    public apiNskV1Organizations2RegisterPost(registerRequest?: OrganizationRegisterRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Organizationv2>(`${this.basePath}/api/nsk/v1/organizations2/register`,
            registerRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Searches for organizations.
     * 
     * @param type Organization type.
     * @param status The organization status.
     * @param organizationCode The organization code.
     * @param parentOrganizationCode The parent organization code.
     * @param companyName The organization company name.
     * @param city The organization company city.
     * @param postalCode The organization company postal code.
     * @param pagedItemIndex Used to specify the index for skipping values when paging.
     * @param pageSize Used to specify the maximum results to return.
     * @param matchCriteriaOrganizationCode The type of string search for organization code.
     * @param matchCriteriaParentOrganizationCode The  type of string search for parent organization code.
     * @param matchCriteriaCompanyName The  type of string search for organization company name.
     * @param matchCriteriaCity The  type of string search for organization company city.
     * @param matchCriteriaPostalCode The  type of string search for organization company postal code.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV2Organizations2Get(type: 'Default' | 'Master' | 'Carrier' | 'TravelAgency' | 'ThirdParty', status: 'Default' | 'Active' | 'Cancelled' | 'Pending', organizationCode?: string, parentOrganizationCode?: string, companyName?: string, city?: string, postalCode?: string, pagedItemIndex?: number, pageSize?: number, matchCriteriaOrganizationCode?: 'StartsWith' | 'EndsWith' | 'Contains' | 'ExactMatch', matchCriteriaParentOrganizationCode?: 'StartsWith' | 'EndsWith' | 'Contains' | 'ExactMatch', matchCriteriaCompanyName?: 'StartsWith' | 'EndsWith' | 'Contains' | 'ExactMatch', matchCriteriaCity?: 'StartsWith' | 'EndsWith' | 'Contains' | 'ExactMatch', matchCriteriaPostalCode?: 'StartsWith' | 'EndsWith' | 'Contains' | 'ExactMatch', observe?: 'body', reportProgress?: boolean): Observable<Array<OrganizationRecord>>;
    public apiNskV2Organizations2Get(type: 'Default' | 'Master' | 'Carrier' | 'TravelAgency' | 'ThirdParty', status: 'Default' | 'Active' | 'Cancelled' | 'Pending', organizationCode?: string, parentOrganizationCode?: string, companyName?: string, city?: string, postalCode?: string, pagedItemIndex?: number, pageSize?: number, matchCriteriaOrganizationCode?: 'StartsWith' | 'EndsWith' | 'Contains' | 'ExactMatch', matchCriteriaParentOrganizationCode?: 'StartsWith' | 'EndsWith' | 'Contains' | 'ExactMatch', matchCriteriaCompanyName?: 'StartsWith' | 'EndsWith' | 'Contains' | 'ExactMatch', matchCriteriaCity?: 'StartsWith' | 'EndsWith' | 'Contains' | 'ExactMatch', matchCriteriaPostalCode?: 'StartsWith' | 'EndsWith' | 'Contains' | 'ExactMatch', observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<OrganizationRecord>>>;
    public apiNskV2Organizations2Get(type: 'Default' | 'Master' | 'Carrier' | 'TravelAgency' | 'ThirdParty', status: 'Default' | 'Active' | 'Cancelled' | 'Pending', organizationCode?: string, parentOrganizationCode?: string, companyName?: string, city?: string, postalCode?: string, pagedItemIndex?: number, pageSize?: number, matchCriteriaOrganizationCode?: 'StartsWith' | 'EndsWith' | 'Contains' | 'ExactMatch', matchCriteriaParentOrganizationCode?: 'StartsWith' | 'EndsWith' | 'Contains' | 'ExactMatch', matchCriteriaCompanyName?: 'StartsWith' | 'EndsWith' | 'Contains' | 'ExactMatch', matchCriteriaCity?: 'StartsWith' | 'EndsWith' | 'Contains' | 'ExactMatch', matchCriteriaPostalCode?: 'StartsWith' | 'EndsWith' | 'Contains' | 'ExactMatch', observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<OrganizationRecord>>>;
    public apiNskV2Organizations2Get(type: 'Default' | 'Master' | 'Carrier' | 'TravelAgency' | 'ThirdParty', status: 'Default' | 'Active' | 'Cancelled' | 'Pending', organizationCode?: string, parentOrganizationCode?: string, companyName?: string, city?: string, postalCode?: string, pagedItemIndex?: number, pageSize?: number, matchCriteriaOrganizationCode?: 'StartsWith' | 'EndsWith' | 'Contains' | 'ExactMatch', matchCriteriaParentOrganizationCode?: 'StartsWith' | 'EndsWith' | 'Contains' | 'ExactMatch', matchCriteriaCompanyName?: 'StartsWith' | 'EndsWith' | 'Contains' | 'ExactMatch', matchCriteriaCity?: 'StartsWith' | 'EndsWith' | 'Contains' | 'ExactMatch', matchCriteriaPostalCode?: 'StartsWith' | 'EndsWith' | 'Contains' | 'ExactMatch', observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (type === null || type === undefined) {
            throw new Error('Required parameter type was null or undefined when calling apiNskV2Organizations2Get.');
        }

        if (status === null || status === undefined) {
            throw new Error('Required parameter status was null or undefined when calling apiNskV2Organizations2Get.');
        }













        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (organizationCode !== undefined && organizationCode !== null) {
            queryParameters = queryParameters.set('OrganizationCode', <any>organizationCode);
        }
        if (type !== undefined && type !== null) {
            queryParameters = queryParameters.set('Type', <any>type);
        }
        if (status !== undefined && status !== null) {
            queryParameters = queryParameters.set('Status', <any>status);
        }
        if (parentOrganizationCode !== undefined && parentOrganizationCode !== null) {
            queryParameters = queryParameters.set('ParentOrganizationCode', <any>parentOrganizationCode);
        }
        if (companyName !== undefined && companyName !== null) {
            queryParameters = queryParameters.set('CompanyName', <any>companyName);
        }
        if (city !== undefined && city !== null) {
            queryParameters = queryParameters.set('City', <any>city);
        }
        if (postalCode !== undefined && postalCode !== null) {
            queryParameters = queryParameters.set('PostalCode', <any>postalCode);
        }
        if (pagedItemIndex !== undefined && pagedItemIndex !== null) {
            queryParameters = queryParameters.set('PagedItemIndex', <any>pagedItemIndex);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('PageSize', <any>pageSize);
        }
        if (matchCriteriaOrganizationCode !== undefined && matchCriteriaOrganizationCode !== null) {
            queryParameters = queryParameters.set('MatchCriteria.OrganizationCode', <any>matchCriteriaOrganizationCode);
        }
        if (matchCriteriaParentOrganizationCode !== undefined && matchCriteriaParentOrganizationCode !== null) {
            queryParameters = queryParameters.set('MatchCriteria.ParentOrganizationCode', <any>matchCriteriaParentOrganizationCode);
        }
        if (matchCriteriaCompanyName !== undefined && matchCriteriaCompanyName !== null) {
            queryParameters = queryParameters.set('MatchCriteria.CompanyName', <any>matchCriteriaCompanyName);
        }
        if (matchCriteriaCity !== undefined && matchCriteriaCity !== null) {
            queryParameters = queryParameters.set('MatchCriteria.City', <any>matchCriteriaCity);
        }
        if (matchCriteriaPostalCode !== undefined && matchCriteriaPostalCode !== null) {
            queryParameters = queryParameters.set('MatchCriteria.PostalCode', <any>matchCriteriaPostalCode);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<OrganizationRecord>>(`${this.basePath}/api/nsk/v2/organizations2`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
