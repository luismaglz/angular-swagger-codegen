/**
 * API - Current Routes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: trunk
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import {
  HttpClient,
  HttpEvent,
  HttpHeaders,
  HttpParams,
  HttpResponse
} from "@angular/common/http";
import { Inject, Injectable, Optional } from "@angular/core";
import { Observable } from "rxjs";
import { Configuration } from "../configuration";
import { CustomHttpUrlEncodingCodec } from "../encoder";
import { CurrencyConversion } from "../model/currencyConversion";
import { BASE_PATH } from "../variables";

@Injectable()
export class CurrencyService {
  protected basePath = "https://localhost";
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  constructor(
    protected httpClient: HttpClient,
    @Optional() @Inject(BASE_PATH) basePath: string,
    @Optional() configuration: Configuration
  ) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
      this.basePath = basePath || configuration.basePath || this.basePath;
    }
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = "multipart/form-data";
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }

  /**
   * Calculates currency conversions.
   *
   * @param fromCurrencyCode The currency code that the amount is currently in.
   * @param toCurrencyCode The currency code we want the amount converted to.
   * @param amount The amount to be converted. This will be in the FromCurrencyCode currency.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiNskV1CurrencyConverterGet(
    fromCurrencyCode: string,
    toCurrencyCode: string,
    amount: number,
    observe?: "body",
    reportProgress?: boolean
  ): Observable<CurrencyConversion>;
  public apiNskV1CurrencyConverterGet(
    fromCurrencyCode: string,
    toCurrencyCode: string,
    amount: number,
    observe?: "response",
    reportProgress?: boolean
  ): Observable<HttpResponse<CurrencyConversion>>;
  public apiNskV1CurrencyConverterGet(
    fromCurrencyCode: string,
    toCurrencyCode: string,
    amount: number,
    observe?: "events",
    reportProgress?: boolean
  ): Observable<HttpEvent<CurrencyConversion>>;
  public apiNskV1CurrencyConverterGet(
    fromCurrencyCode: string,
    toCurrencyCode: string,
    amount: number,
    observe: any = "body",
    reportProgress: boolean = false
  ): Observable<any> {
    if (fromCurrencyCode === null || fromCurrencyCode === undefined) {
      throw new Error(
        "Required parameter fromCurrencyCode was null or undefined when calling apiNskV1CurrencyConverterGet."
      );
    }

    if (toCurrencyCode === null || toCurrencyCode === undefined) {
      throw new Error(
        "Required parameter toCurrencyCode was null or undefined when calling apiNskV1CurrencyConverterGet."
      );
    }

    if (amount === null || amount === undefined) {
      throw new Error(
        "Required parameter amount was null or undefined when calling apiNskV1CurrencyConverterGet."
      );
    }

    let queryParameters = new HttpParams({
      encoder: new CustomHttpUrlEncodingCodec()
    });
    if (fromCurrencyCode !== undefined && fromCurrencyCode !== null) {
      queryParameters = queryParameters.set(
        "FromCurrencyCode",
        <any>fromCurrencyCode
      );
    }
    if (toCurrencyCode !== undefined && toCurrencyCode !== null) {
      queryParameters = queryParameters.set(
        "ToCurrencyCode",
        <any>toCurrencyCode
      );
    }
    if (amount !== undefined && amount !== null) {
      queryParameters = queryParameters.set("Amount", <any>amount);
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      "text/plain",
      "application/json",
      "text/json"
    ];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<CurrencyConversion>(
      `${this.basePath}/api/nsk/v1/currency/converter`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }
}
