/**
 * API - Current Routes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: trunk
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { BoardingPassFilterRequest } from '../model/boardingPassFilterRequest';
import { BoardingPassPassengerFilterRequest } from '../model/boardingPassPassengerFilterRequest';
import { BoardingPassesCollectionv2 } from '../model/boardingPassesCollectionv2';
import { BoardingPassesM2D } from '../model/boardingPassesM2D';
import { BoardingPassesS2D } from '../model/boardingPassesS2D';
import { IJsonResponse } from '../model/iJsonResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class BookingboardingpassesService {

    protected basePath = 'https://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Retrieves the specific journeys boarding passes using the M2D barcode type. This endpoint will only give a single  barcode back even if the journey contains multiple segments. Note that if the journey has only one segment the M2D  barcode will look just like the S2D barcode.
     * 
     * @param journeyKey The specific journey to get boarding passes for.
     * @param request The boarding pass passenger filter request.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1BookingBoardingpassesM2dJourneyByJourneyKeyPost(journeyKey: string, request?: BoardingPassPassengerFilterRequest, observe?: 'body', reportProgress?: boolean): Observable<BoardingPassesM2D>;
    public apiNskV1BookingBoardingpassesM2dJourneyByJourneyKeyPost(journeyKey: string, request?: BoardingPassPassengerFilterRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<BoardingPassesM2D>>;
    public apiNskV1BookingBoardingpassesM2dJourneyByJourneyKeyPost(journeyKey: string, request?: BoardingPassPassengerFilterRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<BoardingPassesM2D>>;
    public apiNskV1BookingBoardingpassesM2dJourneyByJourneyKeyPost(journeyKey: string, request?: BoardingPassPassengerFilterRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (journeyKey === null || journeyKey === undefined) {
            throw new Error('Required parameter journeyKey was null or undefined when calling apiNskV1BookingBoardingpassesM2dJourneyByJourneyKeyPost.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<BoardingPassesM2D>(`${this.basePath}/api/nsk/v1/booking/boardingpasses/m2d/journey/${encodeURIComponent(String(journeyKey))}`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves the specific journeys boarding passes for each segment using the S2D barcode type. This endpoint will  provide a single barcode for each segment.
     * 
     * @param journeyKey The specific journey to get boarding passes for.
     * @param request The boarding pass passenger filter request.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1BookingBoardingpassesS2dJourneyByJourneyKeyPost(journeyKey: string, request?: BoardingPassPassengerFilterRequest, observe?: 'body', reportProgress?: boolean): Observable<BoardingPassesS2D>;
    public apiNskV1BookingBoardingpassesS2dJourneyByJourneyKeyPost(journeyKey: string, request?: BoardingPassPassengerFilterRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<BoardingPassesS2D>>;
    public apiNskV1BookingBoardingpassesS2dJourneyByJourneyKeyPost(journeyKey: string, request?: BoardingPassPassengerFilterRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<BoardingPassesS2D>>;
    public apiNskV1BookingBoardingpassesS2dJourneyByJourneyKeyPost(journeyKey: string, request?: BoardingPassPassengerFilterRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (journeyKey === null || journeyKey === undefined) {
            throw new Error('Required parameter journeyKey was null or undefined when calling apiNskV1BookingBoardingpassesS2dJourneyByJourneyKeyPost.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<BoardingPassesS2D>(`${this.basePath}/api/nsk/v1/booking/boardingpasses/s2d/journey/${encodeURIComponent(String(journeyKey))}`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves the version of the boarding passes based on a specific journey.
     * 
     * @param journeyKey The journey to retrieve boarding passes for.
     * @param request The passenger/segment filter request.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV3BookingBoardingpassesJourneyByJourneyKeyPost(journeyKey: string, request?: BoardingPassFilterRequest, observe?: 'body', reportProgress?: boolean): Observable<BoardingPassesCollectionv2>;
    public apiNskV3BookingBoardingpassesJourneyByJourneyKeyPost(journeyKey: string, request?: BoardingPassFilterRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<BoardingPassesCollectionv2>>;
    public apiNskV3BookingBoardingpassesJourneyByJourneyKeyPost(journeyKey: string, request?: BoardingPassFilterRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<BoardingPassesCollectionv2>>;
    public apiNskV3BookingBoardingpassesJourneyByJourneyKeyPost(journeyKey: string, request?: BoardingPassFilterRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (journeyKey === null || journeyKey === undefined) {
            throw new Error('Required parameter journeyKey was null or undefined when calling apiNskV3BookingBoardingpassesJourneyByJourneyKeyPost.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<BoardingPassesCollectionv2>(`${this.basePath}/api/nsk/v3/booking/boardingpasses/journey/${encodeURIComponent(String(journeyKey))}`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves the version of the boarding passes based on a specific segment.
     * 
     * @param segmentKey The segment to retrieve boarding passes for.
     * @param request The passenger filter request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV3BookingBoardingpassesSegmentBySegmentKeyPost(segmentKey: string, request?: BoardingPassPassengerFilterRequest, observe?: 'body', reportProgress?: boolean): Observable<BoardingPassesCollectionv2>;
    public apiNskV3BookingBoardingpassesSegmentBySegmentKeyPost(segmentKey: string, request?: BoardingPassPassengerFilterRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<BoardingPassesCollectionv2>>;
    public apiNskV3BookingBoardingpassesSegmentBySegmentKeyPost(segmentKey: string, request?: BoardingPassPassengerFilterRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<BoardingPassesCollectionv2>>;
    public apiNskV3BookingBoardingpassesSegmentBySegmentKeyPost(segmentKey: string, request?: BoardingPassPassengerFilterRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (segmentKey === null || segmentKey === undefined) {
            throw new Error('Required parameter segmentKey was null or undefined when calling apiNskV3BookingBoardingpassesSegmentBySegmentKeyPost.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<BoardingPassesCollectionv2>(`${this.basePath}/api/nsk/v3/booking/boardingpasses/segment/${encodeURIComponent(String(segmentKey))}`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
