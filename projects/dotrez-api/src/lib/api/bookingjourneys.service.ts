/**
 * API - Current Routes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: trunk
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { BundleSellRequest } from '../model/bundleSellRequest';
import { CancelJourneyRequest } from '../model/cancelJourneyRequest';
import { IJsonResponse } from '../model/iJsonResponse';
import { Journey } from '../model/journey';
import { PassengerBag } from '../model/passengerBag';
import { PassengerBagRequest } from '../model/passengerBagRequest';
import { TravelDocumentRequirements } from '../model/travelDocumentRequirements';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class BookingjourneysService {

    protected basePath = 'https://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Sells a service bundle for one or more passengers on a journey.
     * 
     * @param journeyKey The journey key.
     * @param request The bundle sell request.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1BookingJourneysByJourneyKeyBundlesPost(journeyKey: string, request?: BundleSellRequest, observe?: 'body', reportProgress?: boolean): Observable<IJsonResponse>;
    public apiNskV1BookingJourneysByJourneyKeyBundlesPost(journeyKey: string, request?: BundleSellRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1BookingJourneysByJourneyKeyBundlesPost(journeyKey: string, request?: BundleSellRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IJsonResponse>>;
    public apiNskV1BookingJourneysByJourneyKeyBundlesPost(journeyKey: string, request?: BundleSellRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (journeyKey === null || journeyKey === undefined) {
            throw new Error('Required parameter journeyKey was null or undefined when calling apiNskV1BookingJourneysByJourneyKeyBundlesPost.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<IJsonResponse>(`${this.basePath}/api/nsk/v1/booking/journeys/${encodeURIComponent(String(journeyKey))}/bundles`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Cancels the specific journey from the booking in state.
     * 
     * @param journeyKey The journey key to be canceled.
     * @param request The cancel journey request options.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1BookingJourneysByJourneyKeyDelete(journeyKey: string, request?: CancelJourneyRequest, observe?: 'body', reportProgress?: boolean): Observable<IJsonResponse>;
    public apiNskV1BookingJourneysByJourneyKeyDelete(journeyKey: string, request?: CancelJourneyRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1BookingJourneysByJourneyKeyDelete(journeyKey: string, request?: CancelJourneyRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IJsonResponse>>;
    public apiNskV1BookingJourneysByJourneyKeyDelete(journeyKey: string, request?: CancelJourneyRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (journeyKey === null || journeyKey === undefined) {
            throw new Error('Required parameter journeyKey was null or undefined when calling apiNskV1BookingJourneysByJourneyKeyDelete.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.delete<IJsonResponse>(`${this.basePath}/api/nsk/v1/booking/journeys/${encodeURIComponent(String(journeyKey))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a single journey by the key.
     * 
     * @param journeyKey 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1BookingJourneysByJourneyKeyGet(journeyKey: string, observe?: 'body', reportProgress?: boolean): Observable<Journey>;
    public apiNskV1BookingJourneysByJourneyKeyGet(journeyKey: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Journey>>;
    public apiNskV1BookingJourneysByJourneyKeyGet(journeyKey: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Journey>>;
    public apiNskV1BookingJourneysByJourneyKeyGet(journeyKey: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (journeyKey === null || journeyKey === undefined) {
            throw new Error('Required parameter journeyKey was null or undefined when calling apiNskV1BookingJourneysByJourneyKeyGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Journey>(`${this.basePath}/api/nsk/v1/booking/journeys/${encodeURIComponent(String(journeyKey))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the passenger or associated infant&#39;s destination address requirements for a specific journey for the booking in-state.
     * This endpoint will determine if the passenger or the associated infant requires a destination address for the  given journey.                This does not determine if the passenger already has a qualifying address, only if the destination address  is required.
     * @param journeyKey The journey key to check requirements for.
     * @param passengerKey The passenger key to check requirements for.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1BookingJourneysByJourneyKeyPassengersByPassengerKeyAddressRequirementsGet(journeyKey: string, passengerKey: string, observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public apiNskV1BookingJourneysByJourneyKeyPassengersByPassengerKeyAddressRequirementsGet(journeyKey: string, passengerKey: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public apiNskV1BookingJourneysByJourneyKeyPassengersByPassengerKeyAddressRequirementsGet(journeyKey: string, passengerKey: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public apiNskV1BookingJourneysByJourneyKeyPassengersByPassengerKeyAddressRequirementsGet(journeyKey: string, passengerKey: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (journeyKey === null || journeyKey === undefined) {
            throw new Error('Required parameter journeyKey was null or undefined when calling apiNskV1BookingJourneysByJourneyKeyPassengersByPassengerKeyAddressRequirementsGet.');
        }

        if (passengerKey === null || passengerKey === undefined) {
            throw new Error('Required parameter passengerKey was null or undefined when calling apiNskV1BookingJourneysByJourneyKeyPassengersByPassengerKeyAddressRequirementsGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<boolean>(`${this.basePath}/api/nsk/v1/booking/journeys/${encodeURIComponent(String(journeyKey))}/passengers/${encodeURIComponent(String(passengerKey))}/address/requirements`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Removes baggage from the booking.
     * 
     * @param journeyKey The unique identifier for the journey to remove from.
     * @param passengerKey The specific passenger key.
     * @param baggageKey Unique identifier for the bag to remove.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1BookingJourneysByJourneyKeyPassengersByPassengerKeyBaggageByBaggageKeyDelete(journeyKey: string, passengerKey: string, baggageKey: string, observe?: 'body', reportProgress?: boolean): Observable<IJsonResponse>;
    public apiNskV1BookingJourneysByJourneyKeyPassengersByPassengerKeyBaggageByBaggageKeyDelete(journeyKey: string, passengerKey: string, baggageKey: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1BookingJourneysByJourneyKeyPassengersByPassengerKeyBaggageByBaggageKeyDelete(journeyKey: string, passengerKey: string, baggageKey: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IJsonResponse>>;
    public apiNskV1BookingJourneysByJourneyKeyPassengersByPassengerKeyBaggageByBaggageKeyDelete(journeyKey: string, passengerKey: string, baggageKey: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (journeyKey === null || journeyKey === undefined) {
            throw new Error('Required parameter journeyKey was null or undefined when calling apiNskV1BookingJourneysByJourneyKeyPassengersByPassengerKeyBaggageByBaggageKeyDelete.');
        }

        if (passengerKey === null || passengerKey === undefined) {
            throw new Error('Required parameter passengerKey was null or undefined when calling apiNskV1BookingJourneysByJourneyKeyPassengersByPassengerKeyBaggageByBaggageKeyDelete.');
        }

        if (baggageKey === null || baggageKey === undefined) {
            throw new Error('Required parameter baggageKey was null or undefined when calling apiNskV1BookingJourneysByJourneyKeyPassengersByPassengerKeyBaggageByBaggageKeyDelete.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<IJsonResponse>(`${this.basePath}/api/nsk/v1/booking/journeys/${encodeURIComponent(String(journeyKey))}/passengers/${encodeURIComponent(String(passengerKey))}/baggage/${encodeURIComponent(String(baggageKey))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a single bag from a passenger on a journey.
     * 
     * @param journeyKey The journey key for the journey to retrieve from.
     * @param passengerKey The passenger key for the passenger to retrieve from.
     * @param baggageKey The bag key for the bag to retrieve.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1BookingJourneysByJourneyKeyPassengersByPassengerKeyBaggageByBaggageKeyGet(journeyKey: string, passengerKey: string, baggageKey: string, observe?: 'body', reportProgress?: boolean): Observable<Array<PassengerBag>>;
    public apiNskV1BookingJourneysByJourneyKeyPassengersByPassengerKeyBaggageByBaggageKeyGet(journeyKey: string, passengerKey: string, baggageKey: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<PassengerBag>>>;
    public apiNskV1BookingJourneysByJourneyKeyPassengersByPassengerKeyBaggageByBaggageKeyGet(journeyKey: string, passengerKey: string, baggageKey: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<PassengerBag>>>;
    public apiNskV1BookingJourneysByJourneyKeyPassengersByPassengerKeyBaggageByBaggageKeyGet(journeyKey: string, passengerKey: string, baggageKey: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (journeyKey === null || journeyKey === undefined) {
            throw new Error('Required parameter journeyKey was null or undefined when calling apiNskV1BookingJourneysByJourneyKeyPassengersByPassengerKeyBaggageByBaggageKeyGet.');
        }

        if (passengerKey === null || passengerKey === undefined) {
            throw new Error('Required parameter passengerKey was null or undefined when calling apiNskV1BookingJourneysByJourneyKeyPassengersByPassengerKeyBaggageByBaggageKeyGet.');
        }

        if (baggageKey === null || baggageKey === undefined) {
            throw new Error('Required parameter baggageKey was null or undefined when calling apiNskV1BookingJourneysByJourneyKeyPassengersByPassengerKeyBaggageByBaggageKeyGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<PassengerBag>>(`${this.basePath}/api/nsk/v1/booking/journeys/${encodeURIComponent(String(journeyKey))}/passengers/${encodeURIComponent(String(passengerKey))}/baggage/${encodeURIComponent(String(baggageKey))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets all baggage for a passenger on a specific journey.
     * 
     * @param journeyKey The journey key for the journey to retrieve from.
     * @param passengerKey The passenger key for the passenger to retrieve from.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1BookingJourneysByJourneyKeyPassengersByPassengerKeyBaggageGet(journeyKey: string, passengerKey: string, observe?: 'body', reportProgress?: boolean): Observable<Array<PassengerBag>>;
    public apiNskV1BookingJourneysByJourneyKeyPassengersByPassengerKeyBaggageGet(journeyKey: string, passengerKey: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<PassengerBag>>>;
    public apiNskV1BookingJourneysByJourneyKeyPassengersByPassengerKeyBaggageGet(journeyKey: string, passengerKey: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<PassengerBag>>>;
    public apiNskV1BookingJourneysByJourneyKeyPassengersByPassengerKeyBaggageGet(journeyKey: string, passengerKey: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (journeyKey === null || journeyKey === undefined) {
            throw new Error('Required parameter journeyKey was null or undefined when calling apiNskV1BookingJourneysByJourneyKeyPassengersByPassengerKeyBaggageGet.');
        }

        if (passengerKey === null || passengerKey === undefined) {
            throw new Error('Required parameter passengerKey was null or undefined when calling apiNskV1BookingJourneysByJourneyKeyPassengersByPassengerKeyBaggageGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<PassengerBag>>(`${this.basePath}/api/nsk/v1/booking/journeys/${encodeURIComponent(String(journeyKey))}/passengers/${encodeURIComponent(String(passengerKey))}/baggage`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Adds baggage to the booking.
     * 
     * @param journeyKey The unique identifier for the journey to remove from.
     * @param passengerKey The specific passenger key.
     * @param request A request to add bags to the given passenger.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1BookingJourneysByJourneyKeyPassengersByPassengerKeyBaggagePost(journeyKey: string, passengerKey: string, request?: PassengerBagRequest, observe?: 'body', reportProgress?: boolean): Observable<IJsonResponse>;
    public apiNskV1BookingJourneysByJourneyKeyPassengersByPassengerKeyBaggagePost(journeyKey: string, passengerKey: string, request?: PassengerBagRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1BookingJourneysByJourneyKeyPassengersByPassengerKeyBaggagePost(journeyKey: string, passengerKey: string, request?: PassengerBagRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IJsonResponse>>;
    public apiNskV1BookingJourneysByJourneyKeyPassengersByPassengerKeyBaggagePost(journeyKey: string, passengerKey: string, request?: PassengerBagRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (journeyKey === null || journeyKey === undefined) {
            throw new Error('Required parameter journeyKey was null or undefined when calling apiNskV1BookingJourneysByJourneyKeyPassengersByPassengerKeyBaggagePost.');
        }

        if (passengerKey === null || passengerKey === undefined) {
            throw new Error('Required parameter passengerKey was null or undefined when calling apiNskV1BookingJourneysByJourneyKeyPassengersByPassengerKeyBaggagePost.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<IJsonResponse>(`${this.basePath}/api/nsk/v1/booking/journeys/${encodeURIComponent(String(journeyKey))}/passengers/${encodeURIComponent(String(passengerKey))}/baggage`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the travel document requirements for a specific journey for the booking in-state.
     * This endpoint will return a response containing a collection of travel document type codes that could fulfill  a travel document requirement.  If the \&quot;AtLeastOneDocumentRequired\&quot; value is true, then one or more documents  in the list are required.  However, it does not mean that every document in the list is required.  If  \&quot;AtLeastOneDocumentRequired\&quot; is false, then the list of document type codes represents a list of acceptable  travel documents, but nothing is required.                This endpoint does not determine if any passengers already have required travel documents.
     * @param journeyKey The journey key to get required travel documents for.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1BookingJourneysByJourneyKeyTravelDocumentRequirementsGet(journeyKey: string, observe?: 'body', reportProgress?: boolean): Observable<TravelDocumentRequirements>;
    public apiNskV1BookingJourneysByJourneyKeyTravelDocumentRequirementsGet(journeyKey: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TravelDocumentRequirements>>;
    public apiNskV1BookingJourneysByJourneyKeyTravelDocumentRequirementsGet(journeyKey: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TravelDocumentRequirements>>;
    public apiNskV1BookingJourneysByJourneyKeyTravelDocumentRequirementsGet(journeyKey: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (journeyKey === null || journeyKey === undefined) {
            throw new Error('Required parameter journeyKey was null or undefined when calling apiNskV1BookingJourneysByJourneyKeyTravelDocumentRequirementsGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<TravelDocumentRequirements>(`${this.basePath}/api/nsk/v1/booking/journeys/${encodeURIComponent(String(journeyKey))}/travelDocument/requirements`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Cancels all the journeys on the current booking in state.
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1BookingJourneysDelete(observe?: 'body', reportProgress?: boolean): Observable<IJsonResponse>;
    public apiNskV1BookingJourneysDelete(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1BookingJourneysDelete(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IJsonResponse>>;
    public apiNskV1BookingJourneysDelete(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<IJsonResponse>(`${this.basePath}/api/nsk/v1/booking/journeys`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the collection of journeys on the booking in state.
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1BookingJourneysGet(observe?: 'body', reportProgress?: boolean): Observable<Array<Journey>>;
    public apiNskV1BookingJourneysGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Journey>>>;
    public apiNskV1BookingJourneysGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Journey>>>;
    public apiNskV1BookingJourneysGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Journey>>(`${this.basePath}/api/nsk/v1/booking/journeys`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the passenger or associated infant&#39;s destination address requirements for all journeys for the booking in-state.
     * This endpoint will determine if the passenger or the associated infant requires a destination address.  If a  destination address is required for the passenger or associated infant for any journey, then this will return  true.                 This does not determine if the passenger already has a qualifying address, only if the destination address  is required.
     * @param passengerKey The passenger key to check requirements for.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1BookingJourneysPassengersByPassengerKeyAddressRequirementsGet(passengerKey: string, observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public apiNskV1BookingJourneysPassengersByPassengerKeyAddressRequirementsGet(passengerKey: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public apiNskV1BookingJourneysPassengersByPassengerKeyAddressRequirementsGet(passengerKey: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public apiNskV1BookingJourneysPassengersByPassengerKeyAddressRequirementsGet(passengerKey: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (passengerKey === null || passengerKey === undefined) {
            throw new Error('Required parameter passengerKey was null or undefined when calling apiNskV1BookingJourneysPassengersByPassengerKeyAddressRequirementsGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<boolean>(`${this.basePath}/api/nsk/v1/booking/journeys/passengers/${encodeURIComponent(String(passengerKey))}/address/requirements`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the travel document requirements for all journeys for the booking in-state.
     * This endpoint will return a response containing a collection of travel document type codes that could fulfill  a travel document requirement.  If the \&quot;AtLeastOneDocumentRequired\&quot; value is true, then one or more documents  in the list are required.  However, it does not mean that every document in the list is required.  If  \&quot;AtLeastOneDocumentRequired\&quot; is false, then the list of document type codes represents a list of acceptable  travel documents, but nothing is required.                This endpoint does not determine if any passengers already have required travel documents.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1BookingJourneysTravelDocumentRequirementsGet(observe?: 'body', reportProgress?: boolean): Observable<TravelDocumentRequirements>;
    public apiNskV1BookingJourneysTravelDocumentRequirementsGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TravelDocumentRequirements>>;
    public apiNskV1BookingJourneysTravelDocumentRequirementsGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TravelDocumentRequirements>>;
    public apiNskV1BookingJourneysTravelDocumentRequirementsGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<TravelDocumentRequirements>(`${this.basePath}/api/nsk/v1/booking/journeys/travelDocument/requirements`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
