/**
 * API - Current Routes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: trunk
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { AgencyCreationSettings } from '../model/agencyCreationSettings';
import { BookingPaymentSettingsv2 } from '../model/bookingPaymentSettingsv2';
import { CheckInSettings } from '../model/checkInSettings';
import { CodesSettings } from '../model/codesSettings';
import { ContactSettings } from '../model/contactSettings';
import { CustomerAccountSettings } from '../model/customerAccountSettings';
import { CustomerCreationSettings } from '../model/customerCreationSettings';
import { FeeSettings } from '../model/feeSettings';
import { FlightSearchSettings } from '../model/flightSearchSettings';
import { GeneralSettings } from '../model/generalSettings';
import { IJsonResponse } from '../model/iJsonResponse';
import { ItinerarySettings } from '../model/itinerarySettings';
import { LogonSettings } from '../model/logonSettings';
import { PassengerSettings } from '../model/passengerSettings';
import { PaymentSettings } from '../model/paymentSettings';
import { PremiumServicesSettingsv2 } from '../model/premiumServicesSettingsv2';
import { ReserveFlightsSettings } from '../model/reserveFlightsSettings';
import { SessionSettings } from '../model/sessionSettings';
import { SkySpeedSettingsv2 } from '../model/skySpeedSettingsv2';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class SettingsService {

    protected basePath = 'https://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Get the checkin settings.
     * 
     * @param eTag The cache eTag for this request.
     * @param roleCode Gets or sets the role code for this request.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1SettingsBookingCheckinGet(eTag?: string, roleCode?: string, observe?: 'body', reportProgress?: boolean): Observable<{data:CheckInSettings,metadata:{documentation_url:string}}>;
    public apiNskV1SettingsBookingCheckinGet(eTag?: string, roleCode?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<{data:CheckInSettings,metadata:{documentation_url:string}}>>;
    public apiNskV1SettingsBookingCheckinGet(eTag?: string, roleCode?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CheckInSettings>>;
    public apiNskV1SettingsBookingCheckinGet(eTag?: string, roleCode?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (eTag !== undefined && eTag !== null) {
            queryParameters = queryParameters.set('ETag', <any>eTag);
        }
        if (roleCode !== undefined && roleCode !== null) {
            queryParameters = queryParameters.set('RoleCode', <any>roleCode);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<CheckInSettings>(`${this.basePath}/api/nsk/v1/settings/booking/checkin`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get the contact settings.
     * 
     * @param eTag The cache eTag for this request.
     * @param roleCode Gets or sets the role code for this request.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1SettingsBookingContactGet(eTag?: string, roleCode?: string, observe?: 'body', reportProgress?: boolean): Observable<{data:ContactSettings,metadata:{documentation_url:string}}>;
    public apiNskV1SettingsBookingContactGet(eTag?: string, roleCode?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<{data:ContactSettings,metadata:{documentation_url:string}}>>;
    public apiNskV1SettingsBookingContactGet(eTag?: string, roleCode?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ContactSettings>>;
    public apiNskV1SettingsBookingContactGet(eTag?: string, roleCode?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (eTag !== undefined && eTag !== null) {
            queryParameters = queryParameters.set('ETag', <any>eTag);
        }
        if (roleCode !== undefined && roleCode !== null) {
            queryParameters = queryParameters.set('RoleCode', <any>roleCode);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ContactSettings>(`${this.basePath}/api/nsk/v1/settings/booking/contact`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get the custom account settings.
     * 
     * @param eTag The cache eTag for this request.
     * @param roleCode Gets or sets the role code for this request.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1SettingsBookingCustomerAccountGet(eTag?: string, roleCode?: string, observe?: 'body', reportProgress?: boolean): Observable<{data:CustomerAccountSettings,metadata:{documentation_url:string}}>;
    public apiNskV1SettingsBookingCustomerAccountGet(eTag?: string, roleCode?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<{data:CustomerAccountSettings,metadata:{documentation_url:string}}>>;
    public apiNskV1SettingsBookingCustomerAccountGet(eTag?: string, roleCode?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CustomerAccountSettings>>;
    public apiNskV1SettingsBookingCustomerAccountGet(eTag?: string, roleCode?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (eTag !== undefined && eTag !== null) {
            queryParameters = queryParameters.set('ETag', <any>eTag);
        }
        if (roleCode !== undefined && roleCode !== null) {
            queryParameters = queryParameters.set('RoleCode', <any>roleCode);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<CustomerAccountSettings>(`${this.basePath}/api/nsk/v1/settings/booking/customerAccount`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get the fee settings.
     * 
     * @param eTag The cache eTag for this request.
     * @param roleCode Gets or sets the role code for this request.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1SettingsBookingFeeGet(eTag?: string, roleCode?: string, observe?: 'body', reportProgress?: boolean): Observable<{data:FeeSettings,metadata:{documentation_url:string}}>;
    public apiNskV1SettingsBookingFeeGet(eTag?: string, roleCode?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<{data:FeeSettings,metadata:{documentation_url:string}}>>;
    public apiNskV1SettingsBookingFeeGet(eTag?: string, roleCode?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FeeSettings>>;
    public apiNskV1SettingsBookingFeeGet(eTag?: string, roleCode?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (eTag !== undefined && eTag !== null) {
            queryParameters = queryParameters.set('ETag', <any>eTag);
        }
        if (roleCode !== undefined && roleCode !== null) {
            queryParameters = queryParameters.set('RoleCode', <any>roleCode);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<FeeSettings>(`${this.basePath}/api/nsk/v1/settings/booking/fee`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get the flight search settings.
     * 
     * @param eTag The cache eTag for this request.
     * @param roleCode Gets or sets the role code for this request.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1SettingsBookingFlightSearchGet(eTag?: string, roleCode?: string, observe?: 'body', reportProgress?: boolean): Observable<{data:FlightSearchSettings,metadata:{documentation_url:string}}>;
    public apiNskV1SettingsBookingFlightSearchGet(eTag?: string, roleCode?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<{data:FlightSearchSettings,metadata:{documentation_url:string}}>>;
    public apiNskV1SettingsBookingFlightSearchGet(eTag?: string, roleCode?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FlightSearchSettings>>;
    public apiNskV1SettingsBookingFlightSearchGet(eTag?: string, roleCode?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (eTag !== undefined && eTag !== null) {
            queryParameters = queryParameters.set('ETag', <any>eTag);
        }
        if (roleCode !== undefined && roleCode !== null) {
            queryParameters = queryParameters.set('RoleCode', <any>roleCode);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<FlightSearchSettings>(`${this.basePath}/api/nsk/v1/settings/booking/flightSearch`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get the general settings.
     * 
     * @param eTag The cache eTag for this request.
     * @param roleCode Gets or sets the role code for this request.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1SettingsBookingGet(eTag?: string, roleCode?: string, observe?: 'body', reportProgress?: boolean): Observable<{data:GeneralSettings,metadata:{documentation_url:string}}>;
    public apiNskV1SettingsBookingGet(eTag?: string, roleCode?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<{data:GeneralSettings,metadata:{documentation_url:string}}>>;
    public apiNskV1SettingsBookingGet(eTag?: string, roleCode?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GeneralSettings>>;
    public apiNskV1SettingsBookingGet(eTag?: string, roleCode?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (eTag !== undefined && eTag !== null) {
            queryParameters = queryParameters.set('ETag', <any>eTag);
        }
        if (roleCode !== undefined && roleCode !== null) {
            queryParameters = queryParameters.set('RoleCode', <any>roleCode);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<GeneralSettings>(`${this.basePath}/api/nsk/v1/settings/booking`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get the passenger settings.
     * 
     * @param eTag The cache eTag for this request.
     * @param roleCode Gets or sets the role code for this request.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1SettingsBookingPassengerGet(eTag?: string, roleCode?: string, observe?: 'body', reportProgress?: boolean): Observable<{data:PassengerSettings,metadata:{documentation_url:string}}>;
    public apiNskV1SettingsBookingPassengerGet(eTag?: string, roleCode?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<{data:PassengerSettings,metadata:{documentation_url:string}}>>;
    public apiNskV1SettingsBookingPassengerGet(eTag?: string, roleCode?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PassengerSettings>>;
    public apiNskV1SettingsBookingPassengerGet(eTag?: string, roleCode?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (eTag !== undefined && eTag !== null) {
            queryParameters = queryParameters.set('ETag', <any>eTag);
        }
        if (roleCode !== undefined && roleCode !== null) {
            queryParameters = queryParameters.set('RoleCode', <any>roleCode);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PassengerSettings>(`${this.basePath}/api/nsk/v1/settings/booking/passenger`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get the reserve flight settings.
     * 
     * @param eTag The cache eTag for this request.
     * @param roleCode Gets or sets the role code for this request.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1SettingsBookingReserveFlightsGet(eTag?: string, roleCode?: string, observe?: 'body', reportProgress?: boolean): Observable<{data:ReserveFlightsSettings,metadata:{documentation_url:string}}>;
    public apiNskV1SettingsBookingReserveFlightsGet(eTag?: string, roleCode?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<{data:ReserveFlightsSettings,metadata:{documentation_url:string}}>>;
    public apiNskV1SettingsBookingReserveFlightsGet(eTag?: string, roleCode?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ReserveFlightsSettings>>;
    public apiNskV1SettingsBookingReserveFlightsGet(eTag?: string, roleCode?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (eTag !== undefined && eTag !== null) {
            queryParameters = queryParameters.set('ETag', <any>eTag);
        }
        if (roleCode !== undefined && roleCode !== null) {
            queryParameters = queryParameters.set('RoleCode', <any>roleCode);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ReserveFlightsSettings>(`${this.basePath}/api/nsk/v1/settings/booking/reserveFlights`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves the logon settings.
     * 
     * @param eTag The cache eTag for this request.
     * @param roleCode Gets or sets the role code for this request.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1SettingsGeneralApplicationLogonGet(eTag?: string, roleCode?: string, observe?: 'body', reportProgress?: boolean): Observable<{data:LogonSettings,metadata:{documentation_url:string}}>;
    public apiNskV1SettingsGeneralApplicationLogonGet(eTag?: string, roleCode?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<{data:LogonSettings,metadata:{documentation_url:string}}>>;
    public apiNskV1SettingsGeneralApplicationLogonGet(eTag?: string, roleCode?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<LogonSettings>>;
    public apiNskV1SettingsGeneralApplicationLogonGet(eTag?: string, roleCode?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (eTag !== undefined && eTag !== null) {
            queryParameters = queryParameters.set('ETag', <any>eTag);
        }
        if (roleCode !== undefined && roleCode !== null) {
            queryParameters = queryParameters.set('RoleCode', <any>roleCode);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<LogonSettings>(`${this.basePath}/api/nsk/v1/settings/general/applicationLogon`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves the codes settings.
     * 
     * @param eTag The cache eTag for this request.
     * @param roleCode Gets or sets the role code for this request.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1SettingsGeneralCodesGet(eTag?: string, roleCode?: string, observe?: 'body', reportProgress?: boolean): Observable<{data:CodesSettings,metadata:{documentation_url:string}}>;
    public apiNskV1SettingsGeneralCodesGet(eTag?: string, roleCode?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<{data:CodesSettings,metadata:{documentation_url:string}}>>;
    public apiNskV1SettingsGeneralCodesGet(eTag?: string, roleCode?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CodesSettings>>;
    public apiNskV1SettingsGeneralCodesGet(eTag?: string, roleCode?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (eTag !== undefined && eTag !== null) {
            queryParameters = queryParameters.set('ETag', <any>eTag);
        }
        if (roleCode !== undefined && roleCode !== null) {
            queryParameters = queryParameters.set('RoleCode', <any>roleCode);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<CodesSettings>(`${this.basePath}/api/nsk/v1/settings/general/codes`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves the session settings.
     * 
     * @param eTag The cache eTag for this request.
     * @param roleCode Gets or sets the role code for this request.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1SettingsGeneralSessionGet(eTag?: string, roleCode?: string, observe?: 'body', reportProgress?: boolean): Observable<{data:SessionSettings,metadata:{documentation_url:string}}>;
    public apiNskV1SettingsGeneralSessionGet(eTag?: string, roleCode?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<{data:SessionSettings,metadata:{documentation_url:string}}>>;
    public apiNskV1SettingsGeneralSessionGet(eTag?: string, roleCode?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SessionSettings>>;
    public apiNskV1SettingsGeneralSessionGet(eTag?: string, roleCode?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (eTag !== undefined && eTag !== null) {
            queryParameters = queryParameters.set('ETag', <any>eTag);
        }
        if (roleCode !== undefined && roleCode !== null) {
            queryParameters = queryParameters.set('RoleCode', <any>roleCode);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<SessionSettings>(`${this.basePath}/api/nsk/v1/settings/general/session`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves the itinerary settings.
     * 
     * @param eTag 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1SettingsItineraryGet(eTag?: string, observe?: 'body', reportProgress?: boolean): Observable<{data:ItinerarySettings,metadata:{documentation_url:string}}>;
    public apiNskV1SettingsItineraryGet(eTag?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<{data:ItinerarySettings,metadata:{documentation_url:string}}>>;
    public apiNskV1SettingsItineraryGet(eTag?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ItinerarySettings>>;
    public apiNskV1SettingsItineraryGet(eTag?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (eTag !== undefined && eTag !== null) {
            queryParameters = queryParameters.set('eTag', <any>eTag);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ItinerarySettings>(`${this.basePath}/api/nsk/v1/settings/itinerary`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get the non role based payment settings.
     * 
     * @param eTag 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1SettingsPaymentGet(eTag?: string, observe?: 'body', reportProgress?: boolean): Observable<{data:PaymentSettings,metadata:{documentation_url:string}}>;
    public apiNskV1SettingsPaymentGet(eTag?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<{data:PaymentSettings,metadata:{documentation_url:string}}>>;
    public apiNskV1SettingsPaymentGet(eTag?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PaymentSettings>>;
    public apiNskV1SettingsPaymentGet(eTag?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (eTag !== undefined && eTag !== null) {
            queryParameters = queryParameters.set('eTag', <any>eTag);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PaymentSettings>(`${this.basePath}/api/nsk/v1/settings/payment`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves the agency creation settings.
     * 
     * @param eTag The unique etag ID.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1SettingsUserAgencyCreationGet(eTag?: string, observe?: 'body', reportProgress?: boolean): Observable<{data:AgencyCreationSettings,metadata:{documentation_url:string}}>;
    public apiNskV1SettingsUserAgencyCreationGet(eTag?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<{data:AgencyCreationSettings,metadata:{documentation_url:string}}>>;
    public apiNskV1SettingsUserAgencyCreationGet(eTag?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AgencyCreationSettings>>;
    public apiNskV1SettingsUserAgencyCreationGet(eTag?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (eTag !== undefined && eTag !== null) {
            queryParameters = queryParameters.set('eTag', <any>eTag);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<AgencyCreationSettings>(`${this.basePath}/api/nsk/v1/settings/user/agencyCreation`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves the customer creation settings.
     * 
     * @param eTag The unique etag ID.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1SettingsUserCustomerCreationGet(eTag?: string, observe?: 'body', reportProgress?: boolean): Observable<{data:CustomerCreationSettings,metadata:{documentation_url:string}}>;
    public apiNskV1SettingsUserCustomerCreationGet(eTag?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<{data:CustomerCreationSettings,metadata:{documentation_url:string}}>>;
    public apiNskV1SettingsUserCustomerCreationGet(eTag?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CustomerCreationSettings>>;
    public apiNskV1SettingsUserCustomerCreationGet(eTag?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (eTag !== undefined && eTag !== null) {
            queryParameters = queryParameters.set('eTag', <any>eTag);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<CustomerCreationSettings>(`${this.basePath}/api/nsk/v1/settings/user/customerCreation`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get the role based booking payment settings.
     * 
     * @param eTag The cache eTag for this request.
     * @param roleCode Gets or sets the role code for this request.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV2SettingsBookingPaymentGet(eTag?: string, roleCode?: string, observe?: 'body', reportProgress?: boolean): Observable<{data:BookingPaymentSettingsv2,metadata:{documentation_url:string}}>;
    public apiNskV2SettingsBookingPaymentGet(eTag?: string, roleCode?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<{data:BookingPaymentSettingsv2,metadata:{documentation_url:string}}>>;
    public apiNskV2SettingsBookingPaymentGet(eTag?: string, roleCode?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<BookingPaymentSettingsv2>>;
    public apiNskV2SettingsBookingPaymentGet(eTag?: string, roleCode?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (eTag !== undefined && eTag !== null) {
            queryParameters = queryParameters.set('ETag', <any>eTag);
        }
        if (roleCode !== undefined && roleCode !== null) {
            queryParameters = queryParameters.set('RoleCode', <any>roleCode);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<BookingPaymentSettingsv2>(`${this.basePath}/api/nsk/v2/settings/booking/payment`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves the premium services settings.
     * 
     * @param eTag The unique etag ID.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV2SettingsPremiumServicesGet(eTag?: string, observe?: 'body', reportProgress?: boolean): Observable<{data:PremiumServicesSettingsv2,metadata:{documentation_url:string}}>;
    public apiNskV2SettingsPremiumServicesGet(eTag?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<{data:PremiumServicesSettingsv2,metadata:{documentation_url:string}}>>;
    public apiNskV2SettingsPremiumServicesGet(eTag?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PremiumServicesSettingsv2>>;
    public apiNskV2SettingsPremiumServicesGet(eTag?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (eTag !== undefined && eTag !== null) {
            queryParameters = queryParameters.set('eTag', <any>eTag);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PremiumServicesSettingsv2>(`${this.basePath}/api/nsk/v2/settings/premiumServices`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves the SkySpeed settings.
     * 
     * @param eTag The cache eTag for this request.
     * @param roleCode Gets or sets the role code for this request.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV2SettingsSkySpeedGet(eTag?: string, roleCode?: string, observe?: 'body', reportProgress?: boolean): Observable<{data:SkySpeedSettingsv2,metadata:{documentation_url:string}}>;
    public apiNskV2SettingsSkySpeedGet(eTag?: string, roleCode?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<{data:SkySpeedSettingsv2,metadata:{documentation_url:string}}>>;
    public apiNskV2SettingsSkySpeedGet(eTag?: string, roleCode?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SkySpeedSettingsv2>>;
    public apiNskV2SettingsSkySpeedGet(eTag?: string, roleCode?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (eTag !== undefined && eTag !== null) {
            queryParameters = queryParameters.set('ETag', <any>eTag);
        }
        if (roleCode !== undefined && roleCode !== null) {
            queryParameters = queryParameters.set('RoleCode', <any>roleCode);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<SkySpeedSettingsv2>(`${this.basePath}/api/nsk/v2/settings/skySpeed`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
