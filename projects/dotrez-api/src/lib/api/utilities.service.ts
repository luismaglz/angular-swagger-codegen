/**
 * API - Current Routes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: trunk
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import {
  HttpClient,
  HttpEvent,
  HttpHeaders,
  HttpResponse
} from "@angular/common/http";
import { Inject, Injectable, Optional } from "@angular/core";
import { Observable } from "rxjs";
import { Configuration } from "../configuration";
import { BASE_PATH } from "../variables";

@Injectable()
export class UtilitiesService {
  protected basePath = "https://localhost";
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  constructor(
    protected httpClient: HttpClient,
    @Optional() @Inject(BASE_PATH) basePath: string,
    @Optional() configuration: Configuration
  ) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
      this.basePath = basePath || configuration.basePath || this.basePath;
    }
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = "multipart/form-data";
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }

  /**
   * Retrieves the station local time.
   *
   * @param stationCode The station code.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiNskV1UtilitiesStationLocalTimeByStationCodeGet(
    stationCode: string,
    observe?: "body",
    reportProgress?: boolean
  ): Observable<Date>;
  public apiNskV1UtilitiesStationLocalTimeByStationCodeGet(
    stationCode: string,
    observe?: "response",
    reportProgress?: boolean
  ): Observable<HttpResponse<Date>>;
  public apiNskV1UtilitiesStationLocalTimeByStationCodeGet(
    stationCode: string,
    observe?: "events",
    reportProgress?: boolean
  ): Observable<HttpEvent<Date>>;
  public apiNskV1UtilitiesStationLocalTimeByStationCodeGet(
    stationCode: string,
    observe: any = "body",
    reportProgress: boolean = false
  ): Observable<any> {
    if (stationCode === null || stationCode === undefined) {
      throw new Error(
        "Required parameter stationCode was null or undefined when calling apiNskV1UtilitiesStationLocalTimeByStationCodeGet."
      );
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      "text/plain",
      "application/json",
      "text/json"
    ];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<Date>(
      `${
        this.basePath
      }/api/nsk/v1/utilities/stationLocalTime/${encodeURIComponent(
        String(stationCode)
      )}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }
}
