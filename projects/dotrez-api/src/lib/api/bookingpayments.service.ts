/**
 * API - Current Routes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: trunk
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import {
  HttpClient,
  HttpEvent,
  HttpHeaders,
  HttpParams,
  HttpResponse
} from "@angular/common/http";
import { Inject, Injectable, Optional } from "@angular/core";
import { Observable } from "rxjs";
import { Configuration } from "../configuration";
import { CustomHttpUrlEncodingCodec } from "../encoder";
import { ApplyBookingCreditRequestv2 } from "../model/applyBookingCreditRequestv2";
import { ApplyCreditAccountRequest } from "../model/applyCreditAccountRequest";
import { ApplyCreditRequest } from "../model/applyCreditRequest";
import { CreditAccount } from "../model/creditAccount";
import { CustomerCreditRefundRequest } from "../model/customerCreditRefundRequest";
import { DccRequestBasev2 } from "../model/dccRequestBasev2";
import { DirectCurrencyConversionAvailability } from "../model/directCurrencyConversionAvailability";
import { IJsonResponse } from "../model/iJsonResponse";
import { InlineResponse2008 } from "../model/inlineResponse2008";
import { InlineResponse2009 } from "../model/inlineResponse2009";
import { OrganizationRefundRequest } from "../model/organizationRefundRequest";
import { Payment } from "../model/payment";
import { PaymentFeeResponse } from "../model/paymentFeeResponse";
import { PaymentMethodRequest } from "../model/paymentMethodRequest";
import { PaymentRefundRequest } from "../model/paymentRefundRequest";
import { PaymentRequest } from "../model/paymentRequest";
import { ThreeDSecurePaymentMethodRequestv2 } from "../model/threeDSecurePaymentMethodRequestv2";
import { VoucherInformation } from "../model/voucherInformation";
import { VoucherPaymentRequest } from "../model/voucherPaymentRequest";
import { BASE_PATH } from "../variables";

@Injectable()
export class BookingpaymentsService {
  protected basePath = "https://localhost";
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  constructor(
    protected httpClient: HttpClient,
    @Optional() @Inject(BASE_PATH) basePath: string,
    @Optional() configuration: Configuration
  ) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
      this.basePath = basePath || configuration.basePath || this.basePath;
    }
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = "multipart/form-data";
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }

  /**
   * Deletes the payment.
   *
   * @param paymentKey Payment key.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiNskV1BookingPaymentsByPaymentKeyDelete(
    paymentKey: string,
    observe?: "body",
    reportProgress?: boolean
  ): Observable<IJsonResponse>;
  public apiNskV1BookingPaymentsByPaymentKeyDelete(
    paymentKey: string,
    observe?: "response",
    reportProgress?: boolean
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV1BookingPaymentsByPaymentKeyDelete(
    paymentKey: string,
    observe?: "events",
    reportProgress?: boolean
  ): Observable<HttpEvent<IJsonResponse>>;
  public apiNskV1BookingPaymentsByPaymentKeyDelete(
    paymentKey: string,
    observe: any = "body",
    reportProgress: boolean = false
  ): Observable<any> {
    if (paymentKey === null || paymentKey === undefined) {
      throw new Error(
        "Required parameter paymentKey was null or undefined when calling apiNskV1BookingPaymentsByPaymentKeyDelete."
      );
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      "text/plain",
      "application/json",
      "text/json"
    ];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.delete<IJsonResponse>(
      `${this.basePath}/api/nsk/v1/booking/payments/${encodeURIComponent(
        String(paymentKey)
      )}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Gets a specific payment.
   *
   * @param paymentKey Payment key.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiNskV1BookingPaymentsByPaymentKeyGet(
    paymentKey: string,
    observe?: "body",
    reportProgress?: boolean
  ): Observable<Payment>;
  public apiNskV1BookingPaymentsByPaymentKeyGet(
    paymentKey: string,
    observe?: "response",
    reportProgress?: boolean
  ): Observable<HttpResponse<Payment>>;
  public apiNskV1BookingPaymentsByPaymentKeyGet(
    paymentKey: string,
    observe?: "events",
    reportProgress?: boolean
  ): Observable<HttpEvent<Payment>>;
  public apiNskV1BookingPaymentsByPaymentKeyGet(
    paymentKey: string,
    observe: any = "body",
    reportProgress: boolean = false
  ): Observable<any> {
    if (paymentKey === null || paymentKey === undefined) {
      throw new Error(
        "Required parameter paymentKey was null or undefined when calling apiNskV1BookingPaymentsByPaymentKeyGet."
      );
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      "text/plain",
      "application/json",
      "text/json"
    ];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<Payment>(
      `${this.basePath}/api/nsk/v1/booking/payments/${encodeURIComponent(
        String(paymentKey)
      )}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Retrieves the booking payments on the booking in state.
   * Requires a booking in state.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiNskV1BookingPaymentsGet(
    observe?: "body",
    reportProgress?: boolean
  ): Observable<Array<Payment>>;
  public apiNskV1BookingPaymentsGet(
    observe?: "response",
    reportProgress?: boolean
  ): Observable<HttpResponse<Array<Payment>>>;
  public apiNskV1BookingPaymentsGet(
    observe?: "events",
    reportProgress?: boolean
  ): Observable<HttpEvent<Array<Payment>>>;
  public apiNskV1BookingPaymentsGet(
    observe: any = "body",
    reportProgress: boolean = false
  ): Observable<any> {
    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      "text/plain",
      "application/json",
      "text/json"
    ];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<Array<Payment>>(
      `${this.basePath}/api/nsk/v1/booking/payments`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Retrieves the booking payment methods available for a refund on the booking in state.
   * Requires a booking in state.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiNskV1BookingPaymentsRefundsGet(
    observe?: "body",
    reportProgress?: boolean
  ): Observable<InlineResponse2008>;
  public apiNskV1BookingPaymentsRefundsGet(
    observe?: "response",
    reportProgress?: boolean
  ): Observable<HttpResponse<InlineResponse2008>>;
  public apiNskV1BookingPaymentsRefundsGet(
    observe?: "events",
    reportProgress?: boolean
  ): Observable<HttpEvent<InlineResponse2008>>;
  public apiNskV1BookingPaymentsRefundsGet(
    observe: any = "body",
    reportProgress: boolean = false
  ): Observable<any> {
    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      "text/plain",
      "application/json",
      "text/json"
    ];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<InlineResponse2008>(
      `${this.basePath}/api/nsk/v1/booking/payments/refunds`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Creates an organization account refund for a payment from  the booking in state.
   *
   * @param request The organization refund request.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiNskV1BookingPaymentsRefundsOrganizationCreditPost(
    request?: OrganizationRefundRequest,
    observe?: "body",
    reportProgress?: boolean
  ): Observable<IJsonResponse>;
  public apiNskV1BookingPaymentsRefundsOrganizationCreditPost(
    request?: OrganizationRefundRequest,
    observe?: "response",
    reportProgress?: boolean
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV1BookingPaymentsRefundsOrganizationCreditPost(
    request?: OrganizationRefundRequest,
    observe?: "events",
    reportProgress?: boolean
  ): Observable<HttpEvent<IJsonResponse>>;
  public apiNskV1BookingPaymentsRefundsOrganizationCreditPost(
    request?: OrganizationRefundRequest,
    observe: any = "body",
    reportProgress: boolean = false
  ): Observable<any> {
    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      "text/plain",
      "application/json",
      "text/json"
    ];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      "application/json-patch+json",
      "application/json",
      "text/json",
      "application/_*+json"
    ];
    const httpContentTypeSelected:
      | string
      | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set("Content-Type", httpContentTypeSelected);
    }

    return this.httpClient.post<IJsonResponse>(
      `${this.basePath}/api/nsk/v1/booking/payments/refunds/organizationCredit`,
      request,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Deletes a voucher payment on the booking in state.
   *
   * @param voucherPaymentReference Voucher payment reference.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiNskV1BookingPaymentsVoucherByVoucherPaymentReferenceDelete(
    voucherPaymentReference: string,
    observe?: "body",
    reportProgress?: boolean
  ): Observable<IJsonResponse>;
  public apiNskV1BookingPaymentsVoucherByVoucherPaymentReferenceDelete(
    voucherPaymentReference: string,
    observe?: "response",
    reportProgress?: boolean
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV1BookingPaymentsVoucherByVoucherPaymentReferenceDelete(
    voucherPaymentReference: string,
    observe?: "events",
    reportProgress?: boolean
  ): Observable<HttpEvent<IJsonResponse>>;
  public apiNskV1BookingPaymentsVoucherByVoucherPaymentReferenceDelete(
    voucherPaymentReference: string,
    observe: any = "body",
    reportProgress: boolean = false
  ): Observable<any> {
    if (
      voucherPaymentReference === null ||
      voucherPaymentReference === undefined
    ) {
      throw new Error(
        "Required parameter voucherPaymentReference was null or undefined when calling apiNskV1BookingPaymentsVoucherByVoucherPaymentReferenceDelete."
      );
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      "text/plain",
      "application/json",
      "text/json"
    ];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.delete<IJsonResponse>(
      `${
        this.basePath
      }/api/nsk/v1/booking/payments/voucher/${encodeURIComponent(
        String(voucherPaymentReference)
      )}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Gets information regarding a specific voucher code.
   *
   * @param referenceCode The voucher reference code.
   * @param overrideRestrictions Override restrictions. Defaults to false.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiNskV1BookingPaymentsVoucherGet(
    referenceCode: string,
    overrideRestrictions?: boolean,
    observe?: "body",
    reportProgress?: boolean
  ): Observable<VoucherInformation>;
  public apiNskV1BookingPaymentsVoucherGet(
    referenceCode: string,
    overrideRestrictions?: boolean,
    observe?: "response",
    reportProgress?: boolean
  ): Observable<HttpResponse<VoucherInformation>>;
  public apiNskV1BookingPaymentsVoucherGet(
    referenceCode: string,
    overrideRestrictions?: boolean,
    observe?: "events",
    reportProgress?: boolean
  ): Observable<HttpEvent<VoucherInformation>>;
  public apiNskV1BookingPaymentsVoucherGet(
    referenceCode: string,
    overrideRestrictions?: boolean,
    observe: any = "body",
    reportProgress: boolean = false
  ): Observable<any> {
    if (referenceCode === null || referenceCode === undefined) {
      throw new Error(
        "Required parameter referenceCode was null or undefined when calling apiNskV1BookingPaymentsVoucherGet."
      );
    }

    let queryParameters = new HttpParams({
      encoder: new CustomHttpUrlEncodingCodec()
    });
    if (referenceCode !== undefined && referenceCode !== null) {
      queryParameters = queryParameters.set(
        "ReferenceCode",
        <any>referenceCode
      );
    }
    if (overrideRestrictions !== undefined && overrideRestrictions !== null) {
      queryParameters = queryParameters.set(
        "OverrideRestrictions",
        <any>overrideRestrictions
      );
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      "text/plain",
      "application/json",
      "text/json"
    ];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<VoucherInformation>(
      `${this.basePath}/api/nsk/v1/booking/payments/voucher`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Retrieves the booking payment methods available for the booking in state.
   * Requires a booking in state.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiNskV2BookingPaymentsAvailableGet(
    observe?: "body",
    reportProgress?: boolean
  ): Observable<InlineResponse2008>;
  public apiNskV2BookingPaymentsAvailableGet(
    observe?: "response",
    reportProgress?: boolean
  ): Observable<HttpResponse<InlineResponse2008>>;
  public apiNskV2BookingPaymentsAvailableGet(
    observe?: "events",
    reportProgress?: boolean
  ): Observable<HttpEvent<InlineResponse2008>>;
  public apiNskV2BookingPaymentsAvailableGet(
    observe: any = "body",
    reportProgress: boolean = false
  ): Observable<any> {
    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      "text/plain",
      "application/json",
      "text/json"
    ];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<InlineResponse2008>(
      `${this.basePath}/api/nsk/v2/booking/payments/available`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Gets credit available from a past booking.
   * See booking retrieve. This method uses the same validation rules.
   * @param recordLocator Record locator being requested.
   * @param currencyCode The currency code of the account.
   * @param emailAddress The email address of a contact.
   * @param origin The origin station code.
   * @param firstName The first name of a passenger or contact.
   * @param lastName The last name of a passenger or contact.
   * @param customerNumber One of the passengers customer numbers applied.
   * @param departureDate The first journeys departure date.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiNskV2BookingPaymentsBookingCreditGet(
    recordLocator: string,
    currencyCode?: string,
    emailAddress?: string,
    origin?: string,
    firstName?: string,
    lastName?: string,
    customerNumber?: string,
    departureDate?: Date,
    observe?: "body",
    reportProgress?: boolean
  ): Observable<CreditAccount>;
  public apiNskV2BookingPaymentsBookingCreditGet(
    recordLocator: string,
    currencyCode?: string,
    emailAddress?: string,
    origin?: string,
    firstName?: string,
    lastName?: string,
    customerNumber?: string,
    departureDate?: Date,
    observe?: "response",
    reportProgress?: boolean
  ): Observable<HttpResponse<CreditAccount>>;
  public apiNskV2BookingPaymentsBookingCreditGet(
    recordLocator: string,
    currencyCode?: string,
    emailAddress?: string,
    origin?: string,
    firstName?: string,
    lastName?: string,
    customerNumber?: string,
    departureDate?: Date,
    observe?: "events",
    reportProgress?: boolean
  ): Observable<HttpEvent<CreditAccount>>;
  public apiNskV2BookingPaymentsBookingCreditGet(
    recordLocator: string,
    currencyCode?: string,
    emailAddress?: string,
    origin?: string,
    firstName?: string,
    lastName?: string,
    customerNumber?: string,
    departureDate?: Date,
    observe: any = "body",
    reportProgress: boolean = false
  ): Observable<any> {
    if (recordLocator === null || recordLocator === undefined) {
      throw new Error(
        "Required parameter recordLocator was null or undefined when calling apiNskV2BookingPaymentsBookingCreditGet."
      );
    }

    let queryParameters = new HttpParams({
      encoder: new CustomHttpUrlEncodingCodec()
    });
    if (currencyCode !== undefined && currencyCode !== null) {
      queryParameters = queryParameters.set("CurrencyCode", <any>currencyCode);
    }
    if (recordLocator !== undefined && recordLocator !== null) {
      queryParameters = queryParameters.set(
        "RecordLocator",
        <any>recordLocator
      );
    }
    if (emailAddress !== undefined && emailAddress !== null) {
      queryParameters = queryParameters.set("EmailAddress", <any>emailAddress);
    }
    if (origin !== undefined && origin !== null) {
      queryParameters = queryParameters.set("Origin", <any>origin);
    }
    if (firstName !== undefined && firstName !== null) {
      queryParameters = queryParameters.set("FirstName", <any>firstName);
    }
    if (lastName !== undefined && lastName !== null) {
      queryParameters = queryParameters.set("LastName", <any>lastName);
    }
    if (customerNumber !== undefined && customerNumber !== null) {
      queryParameters = queryParameters.set(
        "CustomerNumber",
        <any>customerNumber
      );
    }
    if (departureDate !== undefined && departureDate !== null) {
      queryParameters = queryParameters.set(
        "DepartureDate",
        <any>departureDate.toISOString()
      );
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      "text/plain",
      "application/json",
      "text/json"
    ];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<CreditAccount>(
      `${this.basePath}/api/nsk/v2/booking/payments/bookingCredit`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Applies credit from a past booking.
   *
   * @param request Apply booking credit request.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiNskV2BookingPaymentsBookingCreditPost(
    request?: ApplyBookingCreditRequestv2,
    observe?: "body",
    reportProgress?: boolean
  ): Observable<IJsonResponse>;
  public apiNskV2BookingPaymentsBookingCreditPost(
    request?: ApplyBookingCreditRequestv2,
    observe?: "response",
    reportProgress?: boolean
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV2BookingPaymentsBookingCreditPost(
    request?: ApplyBookingCreditRequestv2,
    observe?: "events",
    reportProgress?: boolean
  ): Observable<HttpEvent<IJsonResponse>>;
  public apiNskV2BookingPaymentsBookingCreditPost(
    request?: ApplyBookingCreditRequestv2,
    observe: any = "body",
    reportProgress: boolean = false
  ): Observable<any> {
    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      "text/plain",
      "application/json",
      "text/json"
    ];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      "application/json-patch+json",
      "application/json",
      "text/json",
      "application/_*+json"
    ];
    const httpContentTypeSelected:
      | string
      | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set("Content-Type", httpContentTypeSelected);
    }

    return this.httpClient.post<IJsonResponse>(
      `${this.basePath}/api/nsk/v2/booking/payments/bookingCredit`,
      request,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Gets credit available by reference number and type.
   * This endpoint is for agents and can get credit available for any user or type.
   * @param referenceNumber The account reference. This will be the record locator, customer account number, or organization code depending on  the type.
   * @param type Defines the type of credit being applied.
   * @param currencyCode The currency code of the account.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiNskV2BookingPaymentsCreditGet(
    referenceNumber: string,
    type: "Customer" | "Booking" | "Organization",
    currencyCode?: string,
    observe?: "body",
    reportProgress?: boolean
  ): Observable<CreditAccount>;
  public apiNskV2BookingPaymentsCreditGet(
    referenceNumber: string,
    type: "Customer" | "Booking" | "Organization",
    currencyCode?: string,
    observe?: "response",
    reportProgress?: boolean
  ): Observable<HttpResponse<CreditAccount>>;
  public apiNskV2BookingPaymentsCreditGet(
    referenceNumber: string,
    type: "Customer" | "Booking" | "Organization",
    currencyCode?: string,
    observe?: "events",
    reportProgress?: boolean
  ): Observable<HttpEvent<CreditAccount>>;
  public apiNskV2BookingPaymentsCreditGet(
    referenceNumber: string,
    type: "Customer" | "Booking" | "Organization",
    currencyCode?: string,
    observe: any = "body",
    reportProgress: boolean = false
  ): Observable<any> {
    if (referenceNumber === null || referenceNumber === undefined) {
      throw new Error(
        "Required parameter referenceNumber was null or undefined when calling apiNskV2BookingPaymentsCreditGet."
      );
    }

    if (type === null || type === undefined) {
      throw new Error(
        "Required parameter type was null or undefined when calling apiNskV2BookingPaymentsCreditGet."
      );
    }

    let queryParameters = new HttpParams({
      encoder: new CustomHttpUrlEncodingCodec()
    });
    if (referenceNumber !== undefined && referenceNumber !== null) {
      queryParameters = queryParameters.set(
        "ReferenceNumber",
        <any>referenceNumber
      );
    }
    if (currencyCode !== undefined && currencyCode !== null) {
      queryParameters = queryParameters.set("CurrencyCode", <any>currencyCode);
    }
    if (type !== undefined && type !== null) {
      queryParameters = queryParameters.set("Type", <any>type);
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      "text/plain",
      "application/json",
      "text/json"
    ];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<CreditAccount>(
      `${this.basePath}/api/nsk/v2/booking/payments/credit`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Applies credit by reference number and type.
   * This endpoint is for agents and can apply credit for any user or type.
   * @param request Apply credit request.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiNskV2BookingPaymentsCreditPost(
    request?: ApplyCreditAccountRequest,
    observe?: "body",
    reportProgress?: boolean
  ): Observable<IJsonResponse>;
  public apiNskV2BookingPaymentsCreditPost(
    request?: ApplyCreditAccountRequest,
    observe?: "response",
    reportProgress?: boolean
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV2BookingPaymentsCreditPost(
    request?: ApplyCreditAccountRequest,
    observe?: "events",
    reportProgress?: boolean
  ): Observable<HttpEvent<IJsonResponse>>;
  public apiNskV2BookingPaymentsCreditPost(
    request?: ApplyCreditAccountRequest,
    observe: any = "body",
    reportProgress: boolean = false
  ): Observable<any> {
    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      "text/plain",
      "application/json",
      "text/json"
    ];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      "application/json-patch+json",
      "application/json",
      "text/json",
      "application/_*+json"
    ];
    const httpContentTypeSelected:
      | string
      | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set("Content-Type", httpContentTypeSelected);
    }

    return this.httpClient.post<IJsonResponse>(
      `${this.basePath}/api/nsk/v2/booking/payments/credit`,
      request,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Gets credit available for the logged in user on the booking in state.
   * Depending on configuration, credit may be validated by the contacts and passengers on the booking.
   * @param currencyCode The currency code of the account.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiNskV2BookingPaymentsCustomerCreditGet(
    currencyCode?: string,
    observe?: "body",
    reportProgress?: boolean
  ): Observable<CreditAccount>;
  public apiNskV2BookingPaymentsCustomerCreditGet(
    currencyCode?: string,
    observe?: "response",
    reportProgress?: boolean
  ): Observable<HttpResponse<CreditAccount>>;
  public apiNskV2BookingPaymentsCustomerCreditGet(
    currencyCode?: string,
    observe?: "events",
    reportProgress?: boolean
  ): Observable<HttpEvent<CreditAccount>>;
  public apiNskV2BookingPaymentsCustomerCreditGet(
    currencyCode?: string,
    observe: any = "body",
    reportProgress: boolean = false
  ): Observable<any> {
    let queryParameters = new HttpParams({
      encoder: new CustomHttpUrlEncodingCodec()
    });
    if (currencyCode !== undefined && currencyCode !== null) {
      queryParameters = queryParameters.set("CurrencyCode", <any>currencyCode);
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      "text/plain",
      "application/json",
      "text/json"
    ];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<CreditAccount>(
      `${this.basePath}/api/nsk/v2/booking/payments/customerCredit`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Applies credit from the logged in customer to the booking in state.
   *
   * @param request Apply credit request.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiNskV2BookingPaymentsCustomerCreditPost(
    request?: ApplyCreditRequest,
    observe?: "body",
    reportProgress?: boolean
  ): Observable<IJsonResponse>;
  public apiNskV2BookingPaymentsCustomerCreditPost(
    request?: ApplyCreditRequest,
    observe?: "response",
    reportProgress?: boolean
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV2BookingPaymentsCustomerCreditPost(
    request?: ApplyCreditRequest,
    observe?: "events",
    reportProgress?: boolean
  ): Observable<HttpEvent<IJsonResponse>>;
  public apiNskV2BookingPaymentsCustomerCreditPost(
    request?: ApplyCreditRequest,
    observe: any = "body",
    reportProgress: boolean = false
  ): Observable<any> {
    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      "text/plain",
      "application/json",
      "text/json"
    ];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      "application/json-patch+json",
      "application/json",
      "text/json",
      "application/_*+json"
    ];
    const httpContentTypeSelected:
      | string
      | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set("Content-Type", httpContentTypeSelected);
    }

    return this.httpClient.post<IJsonResponse>(
      `${this.basePath}/api/nsk/v2/booking/payments/customerCredit`,
      request,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Gets credit available for the logged in users organization.
   * Depending on configuration, credit may be validated by the contacts and passengers on the booking.
   * @param currencyCode The currency code of the account.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiNskV2BookingPaymentsOrganizationCreditGet(
    currencyCode?: string,
    observe?: "body",
    reportProgress?: boolean
  ): Observable<CreditAccount>;
  public apiNskV2BookingPaymentsOrganizationCreditGet(
    currencyCode?: string,
    observe?: "response",
    reportProgress?: boolean
  ): Observable<HttpResponse<CreditAccount>>;
  public apiNskV2BookingPaymentsOrganizationCreditGet(
    currencyCode?: string,
    observe?: "events",
    reportProgress?: boolean
  ): Observable<HttpEvent<CreditAccount>>;
  public apiNskV2BookingPaymentsOrganizationCreditGet(
    currencyCode?: string,
    observe: any = "body",
    reportProgress: boolean = false
  ): Observable<any> {
    let queryParameters = new HttpParams({
      encoder: new CustomHttpUrlEncodingCodec()
    });
    if (currencyCode !== undefined && currencyCode !== null) {
      queryParameters = queryParameters.set("CurrencyCode", <any>currencyCode);
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      "text/plain",
      "application/json",
      "text/json"
    ];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<CreditAccount>(
      `${this.basePath}/api/nsk/v2/booking/payments/organizationCredit`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Applies credit to the logged in user&#39;s organization.
   *
   * @param request Apply credit request.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiNskV2BookingPaymentsOrganizationCreditPost(
    request?: ApplyCreditRequest,
    observe?: "body",
    reportProgress?: boolean
  ): Observable<IJsonResponse>;
  public apiNskV2BookingPaymentsOrganizationCreditPost(
    request?: ApplyCreditRequest,
    observe?: "response",
    reportProgress?: boolean
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV2BookingPaymentsOrganizationCreditPost(
    request?: ApplyCreditRequest,
    observe?: "events",
    reportProgress?: boolean
  ): Observable<HttpEvent<IJsonResponse>>;
  public apiNskV2BookingPaymentsOrganizationCreditPost(
    request?: ApplyCreditRequest,
    observe: any = "body",
    reportProgress: boolean = false
  ): Observable<any> {
    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      "text/plain",
      "application/json",
      "text/json"
    ];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      "application/json-patch+json",
      "application/json",
      "text/json",
      "application/_*+json"
    ];
    const httpContentTypeSelected:
      | string
      | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set("Content-Type", httpContentTypeSelected);
    }

    return this.httpClient.post<IJsonResponse>(
      `${this.basePath}/api/nsk/v2/booking/payments/organizationCredit`,
      request,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Creates a new external payment or prepaid payment on the booking in state.
   * &lt;p&gt;                      The payment fields are dynamic to the criteria of your payment provider. Here is an example request for a                      credit card payment that does not require address, zip, etc.                      { \&quot;amount\&quot;: 10, \&quot;currencyCode\&quot;: \&quot;USD\&quot;, \&quot;paymentFields\&quot;: {\&quot;ACCTNO\&quot;:\&quot;411111111111\&quot;, \&quot;EXPDATE\&quot;:\&quot;10/8/2017\&quot;,                      \&quot;CC::AccountHolderName\&quot;:\&quot;Bob Smith\&quot;, \&quot;CC::VerificationCode\&quot;:\&quot;111\&quot;}}                  &lt;/p&gt;  &lt;p&gt;                      A 202 (HTTP status code) response returns alternate data signifying that Three D Secure was enabled for this                      payment                      and is required for this payment type. The payment will need to be resent using the 3DS endpoint.                  &lt;/p&gt;  &lt;p&gt;                      If you would like to make a ThreeDSecure payment, you will need to have these headers populated:                      &lt;ul&gt;&lt;li&gt;                              User Agent                          &lt;/li&gt;&lt;li&gt;                              Ip Address                          &lt;/li&gt;&lt;li&gt;                              Accept                          &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;
   * @param request Payment request.
   * @param termUrl The term URL.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiNskV2BookingPaymentsPost(
    request?: PaymentMethodRequest,
    termUrl?: string,
    observe?: "body",
    reportProgress?: boolean
  ): Observable<IJsonResponse>;
  public apiNskV2BookingPaymentsPost(
    request?: PaymentMethodRequest,
    termUrl?: string,
    observe?: "response",
    reportProgress?: boolean
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV2BookingPaymentsPost(
    request?: PaymentMethodRequest,
    termUrl?: string,
    observe?: "events",
    reportProgress?: boolean
  ): Observable<HttpEvent<IJsonResponse>>;
  public apiNskV2BookingPaymentsPost(
    request?: PaymentMethodRequest,
    termUrl?: string,
    observe: any = "body",
    reportProgress: boolean = false
  ): Observable<any> {
    let queryParameters = new HttpParams({
      encoder: new CustomHttpUrlEncodingCodec()
    });
    if (termUrl !== undefined && termUrl !== null) {
      queryParameters = queryParameters.set("termUrl", <any>termUrl);
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      "text/plain",
      "application/json",
      "text/json"
    ];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      "application/json-patch+json",
      "application/json",
      "text/json",
      "application/_*+json"
    ];
    const httpContentTypeSelected:
      | string
      | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set("Content-Type", httpContentTypeSelected);
    }

    return this.httpClient.post<IJsonResponse>(
      `${this.basePath}/api/nsk/v2/booking/payments`,
      request,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Creates a customer credit for a specified customer.
   * Requires a booking in state and an agent token. Agents should use /refunds endpoint for booking credits.
   * @param request
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiNskV2BookingPaymentsRefundsCustomerCreditPost(
    request?: CustomerCreditRefundRequest,
    observe?: "body",
    reportProgress?: boolean
  ): Observable<IJsonResponse>;
  public apiNskV2BookingPaymentsRefundsCustomerCreditPost(
    request?: CustomerCreditRefundRequest,
    observe?: "response",
    reportProgress?: boolean
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV2BookingPaymentsRefundsCustomerCreditPost(
    request?: CustomerCreditRefundRequest,
    observe?: "events",
    reportProgress?: boolean
  ): Observable<HttpEvent<IJsonResponse>>;
  public apiNskV2BookingPaymentsRefundsCustomerCreditPost(
    request?: CustomerCreditRefundRequest,
    observe: any = "body",
    reportProgress: boolean = false
  ): Observable<any> {
    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      "text/plain",
      "application/json",
      "text/json"
    ];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      "application/json-patch+json",
      "application/json",
      "text/json",
      "application/_*+json"
    ];
    const httpContentTypeSelected:
      | string
      | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set("Content-Type", httpContentTypeSelected);
    }

    return this.httpClient.post<IJsonResponse>(
      `${this.basePath}/api/nsk/v2/booking/payments/refunds/customerCredit`,
      request,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Deletes a voucher payment on the booking in state.
   *
   * @param voucherPaymentReference Voucher payment reference.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiNskV2BookingPaymentsVoucherByVoucherPaymentReferenceDelete(
    voucherPaymentReference: string,
    observe?: "body",
    reportProgress?: boolean
  ): Observable<IJsonResponse>;
  public apiNskV2BookingPaymentsVoucherByVoucherPaymentReferenceDelete(
    voucherPaymentReference: string,
    observe?: "response",
    reportProgress?: boolean
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV2BookingPaymentsVoucherByVoucherPaymentReferenceDelete(
    voucherPaymentReference: string,
    observe?: "events",
    reportProgress?: boolean
  ): Observable<HttpEvent<IJsonResponse>>;
  public apiNskV2BookingPaymentsVoucherByVoucherPaymentReferenceDelete(
    voucherPaymentReference: string,
    observe: any = "body",
    reportProgress: boolean = false
  ): Observable<any> {
    if (
      voucherPaymentReference === null ||
      voucherPaymentReference === undefined
    ) {
      throw new Error(
        "Required parameter voucherPaymentReference was null or undefined when calling apiNskV2BookingPaymentsVoucherByVoucherPaymentReferenceDelete."
      );
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      "text/plain",
      "application/json",
      "text/json"
    ];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.delete<IJsonResponse>(
      `${
        this.basePath
      }/api/nsk/v2/booking/payments/voucher/${encodeURIComponent(
        String(voucherPaymentReference)
      )}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Gets the available direct currency codes offer.
   *
   * @param paymentMethod Payment method code.
   * @param amount The amount being applied as a payment.
   * @param accountNumber The account number.
   * @param quotedCurrencyCode The quoted currency code to convert to.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiNskV3BookingPaymentsByPaymentMethodDccGet(
    paymentMethod: string,
    amount: number,
    accountNumber: string,
    quotedCurrencyCode: string,
    observe?: "body",
    reportProgress?: boolean
  ): Observable<DirectCurrencyConversionAvailability>;
  public apiNskV3BookingPaymentsByPaymentMethodDccGet(
    paymentMethod: string,
    amount: number,
    accountNumber: string,
    quotedCurrencyCode: string,
    observe?: "response",
    reportProgress?: boolean
  ): Observable<HttpResponse<DirectCurrencyConversionAvailability>>;
  public apiNskV3BookingPaymentsByPaymentMethodDccGet(
    paymentMethod: string,
    amount: number,
    accountNumber: string,
    quotedCurrencyCode: string,
    observe?: "events",
    reportProgress?: boolean
  ): Observable<HttpEvent<DirectCurrencyConversionAvailability>>;
  public apiNskV3BookingPaymentsByPaymentMethodDccGet(
    paymentMethod: string,
    amount: number,
    accountNumber: string,
    quotedCurrencyCode: string,
    observe: any = "body",
    reportProgress: boolean = false
  ): Observable<any> {
    if (paymentMethod === null || paymentMethod === undefined) {
      throw new Error(
        "Required parameter paymentMethod was null or undefined when calling apiNskV3BookingPaymentsByPaymentMethodDccGet."
      );
    }

    if (amount === null || amount === undefined) {
      throw new Error(
        "Required parameter amount was null or undefined when calling apiNskV3BookingPaymentsByPaymentMethodDccGet."
      );
    }

    if (accountNumber === null || accountNumber === undefined) {
      throw new Error(
        "Required parameter accountNumber was null or undefined when calling apiNskV3BookingPaymentsByPaymentMethodDccGet."
      );
    }

    if (quotedCurrencyCode === null || quotedCurrencyCode === undefined) {
      throw new Error(
        "Required parameter quotedCurrencyCode was null or undefined when calling apiNskV3BookingPaymentsByPaymentMethodDccGet."
      );
    }

    let queryParameters = new HttpParams({
      encoder: new CustomHttpUrlEncodingCodec()
    });
    if (amount !== undefined && amount !== null) {
      queryParameters = queryParameters.set("Amount", <any>amount);
    }
    if (accountNumber !== undefined && accountNumber !== null) {
      queryParameters = queryParameters.set(
        "AccountNumber",
        <any>accountNumber
      );
    }
    if (quotedCurrencyCode !== undefined && quotedCurrencyCode !== null) {
      queryParameters = queryParameters.set(
        "QuotedCurrencyCode",
        <any>quotedCurrencyCode
      );
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      "text/plain",
      "application/json",
      "text/json"
    ];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<DirectCurrencyConversionAvailability>(
      `${this.basePath}/api/nsk/v3/booking/payments/${encodeURIComponent(
        String(paymentMethod)
      )}/dcc`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Retrieves the payment fee for the fee code.
   *
   * @param feeCode The unique fee code identifier.
   * @param amount The amount being payed.
   * @param currencyCode The currency code. This will default to the bookings currency code.
   * @param collectedCurrencyCode The optional collected currency code. This will be needed for MCC requests.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiNskV3BookingPaymentsFeesByFeeCodeGet(
    feeCode: string,
    amount: number,
    currencyCode?: string,
    collectedCurrencyCode?: string,
    observe?: "body",
    reportProgress?: boolean
  ): Observable<PaymentFeeResponse>;
  public apiNskV3BookingPaymentsFeesByFeeCodeGet(
    feeCode: string,
    amount: number,
    currencyCode?: string,
    collectedCurrencyCode?: string,
    observe?: "response",
    reportProgress?: boolean
  ): Observable<HttpResponse<PaymentFeeResponse>>;
  public apiNskV3BookingPaymentsFeesByFeeCodeGet(
    feeCode: string,
    amount: number,
    currencyCode?: string,
    collectedCurrencyCode?: string,
    observe?: "events",
    reportProgress?: boolean
  ): Observable<HttpEvent<PaymentFeeResponse>>;
  public apiNskV3BookingPaymentsFeesByFeeCodeGet(
    feeCode: string,
    amount: number,
    currencyCode?: string,
    collectedCurrencyCode?: string,
    observe: any = "body",
    reportProgress: boolean = false
  ): Observable<any> {
    if (feeCode === null || feeCode === undefined) {
      throw new Error(
        "Required parameter feeCode was null or undefined when calling apiNskV3BookingPaymentsFeesByFeeCodeGet."
      );
    }

    if (amount === null || amount === undefined) {
      throw new Error(
        "Required parameter amount was null or undefined when calling apiNskV3BookingPaymentsFeesByFeeCodeGet."
      );
    }

    let queryParameters = new HttpParams({
      encoder: new CustomHttpUrlEncodingCodec()
    });
    if (amount !== undefined && amount !== null) {
      queryParameters = queryParameters.set("Amount", <any>amount);
    }
    if (currencyCode !== undefined && currencyCode !== null) {
      queryParameters = queryParameters.set("CurrencyCode", <any>currencyCode);
    }
    if (collectedCurrencyCode !== undefined && collectedCurrencyCode !== null) {
      queryParameters = queryParameters.set(
        "CollectedCurrencyCode",
        <any>collectedCurrencyCode
      );
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      "text/plain",
      "application/json",
      "text/json"
    ];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<PaymentFeeResponse>(
      `${this.basePath}/api/nsk/v3/booking/payments/fees/${encodeURIComponent(
        String(feeCode)
      )}`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Creates a new MCC payment.
   * This is affected by the booking currency code.
   * @param currencyCode The collected currency code.
   * @param request The payment method request.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiNskV3BookingPaymentsMccByCurrencyCodePost(
    currencyCode: string,
    request?: PaymentMethodRequest,
    observe?: "body",
    reportProgress?: boolean
  ): Observable<IJsonResponse>;
  public apiNskV3BookingPaymentsMccByCurrencyCodePost(
    currencyCode: string,
    request?: PaymentMethodRequest,
    observe?: "response",
    reportProgress?: boolean
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV3BookingPaymentsMccByCurrencyCodePost(
    currencyCode: string,
    request?: PaymentMethodRequest,
    observe?: "events",
    reportProgress?: boolean
  ): Observable<HttpEvent<IJsonResponse>>;
  public apiNskV3BookingPaymentsMccByCurrencyCodePost(
    currencyCode: string,
    request?: PaymentMethodRequest,
    observe: any = "body",
    reportProgress: boolean = false
  ): Observable<any> {
    if (currencyCode === null || currencyCode === undefined) {
      throw new Error(
        "Required parameter currencyCode was null or undefined when calling apiNskV3BookingPaymentsMccByCurrencyCodePost."
      );
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      "text/plain",
      "application/json",
      "text/json"
    ];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      "application/json-patch+json",
      "application/json",
      "text/json",
      "application/_*+json"
    ];
    const httpContentTypeSelected:
      | string
      | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set("Content-Type", httpContentTypeSelected);
    }

    return this.httpClient.post<IJsonResponse>(
      `${this.basePath}/api/nsk/v3/booking/payments/mcc/${encodeURIComponent(
        String(currencyCode)
      )}`,
      request,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Creates a new MCC payment from a stored payment.
   * This is affected by the booking currency code.
   * @param currencyCode The collected currency code.
   * @param storedPaymentKey Stored payment key.
   * @param request The payment method request.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiNskV3BookingPaymentsMccByCurrencyCodeStoredPaymentByStoredPaymentKeyPost(
    currencyCode: string,
    storedPaymentKey: string,
    request?: PaymentRequest,
    observe?: "body",
    reportProgress?: boolean
  ): Observable<IJsonResponse>;
  public apiNskV3BookingPaymentsMccByCurrencyCodeStoredPaymentByStoredPaymentKeyPost(
    currencyCode: string,
    storedPaymentKey: string,
    request?: PaymentRequest,
    observe?: "response",
    reportProgress?: boolean
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV3BookingPaymentsMccByCurrencyCodeStoredPaymentByStoredPaymentKeyPost(
    currencyCode: string,
    storedPaymentKey: string,
    request?: PaymentRequest,
    observe?: "events",
    reportProgress?: boolean
  ): Observable<HttpEvent<IJsonResponse>>;
  public apiNskV3BookingPaymentsMccByCurrencyCodeStoredPaymentByStoredPaymentKeyPost(
    currencyCode: string,
    storedPaymentKey: string,
    request?: PaymentRequest,
    observe: any = "body",
    reportProgress: boolean = false
  ): Observable<any> {
    if (currencyCode === null || currencyCode === undefined) {
      throw new Error(
        "Required parameter currencyCode was null or undefined when calling apiNskV3BookingPaymentsMccByCurrencyCodeStoredPaymentByStoredPaymentKeyPost."
      );
    }

    if (storedPaymentKey === null || storedPaymentKey === undefined) {
      throw new Error(
        "Required parameter storedPaymentKey was null or undefined when calling apiNskV3BookingPaymentsMccByCurrencyCodeStoredPaymentByStoredPaymentKeyPost."
      );
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      "text/plain",
      "application/json",
      "text/json"
    ];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      "application/json-patch+json",
      "application/json",
      "text/json",
      "application/_*+json"
    ];
    const httpContentTypeSelected:
      | string
      | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set("Content-Type", httpContentTypeSelected);
    }

    return this.httpClient.post<IJsonResponse>(
      `${this.basePath}/api/nsk/v3/booking/payments/mcc/${encodeURIComponent(
        String(currencyCode)
      )}/storedPayment/${encodeURIComponent(String(storedPaymentKey))}`,
      request,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Gets the available multi-currency codes available.
   * This is affected by the booking currency code.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiNskV3BookingPaymentsMccGet(
    observe?: "body",
    reportProgress?: boolean
  ): Observable<InlineResponse2009>;
  public apiNskV3BookingPaymentsMccGet(
    observe?: "response",
    reportProgress?: boolean
  ): Observable<HttpResponse<InlineResponse2009>>;
  public apiNskV3BookingPaymentsMccGet(
    observe?: "events",
    reportProgress?: boolean
  ): Observable<HttpEvent<InlineResponse2009>>;
  public apiNskV3BookingPaymentsMccGet(
    observe: any = "body",
    reportProgress: boolean = false
  ): Observable<any> {
    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      "text/plain",
      "application/json",
      "text/json"
    ];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<InlineResponse2009>(
      `${this.basePath}/api/nsk/v3/booking/payments/mcc`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Creates a refund for the booking in state.
   * Requires a booking in state. Credit shell payment types will default to a customer credit if logged in. If not  logged in a booking credit will be applied.
   * @param request
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiNskV3BookingPaymentsRefundsPost(
    request?: PaymentRefundRequest,
    observe?: "body",
    reportProgress?: boolean
  ): Observable<IJsonResponse>;
  public apiNskV3BookingPaymentsRefundsPost(
    request?: PaymentRefundRequest,
    observe?: "response",
    reportProgress?: boolean
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV3BookingPaymentsRefundsPost(
    request?: PaymentRefundRequest,
    observe?: "events",
    reportProgress?: boolean
  ): Observable<HttpEvent<IJsonResponse>>;
  public apiNskV3BookingPaymentsRefundsPost(
    request?: PaymentRefundRequest,
    observe: any = "body",
    reportProgress: boolean = false
  ): Observable<any> {
    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      "text/plain",
      "application/json",
      "text/json"
    ];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      "application/json-patch+json",
      "application/json",
      "text/json",
      "application/_*+json"
    ];
    const httpContentTypeSelected:
      | string
      | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set("Content-Type", httpContentTypeSelected);
    }

    return this.httpClient.post<IJsonResponse>(
      `${this.basePath}/api/nsk/v3/booking/payments/refunds`,
      request,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Creates a payment using the stored payment information for the booking in state.
   * Account Number and Expiration Date are stored.  With stored payments, payment fields may still be required to complete the transaction.  For example, a credit card that requires address information, this information is not stored with the stored  payment.
   * @param storedPaymentKey Stored payment key.
   * @param request Payment request.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiNskV3BookingPaymentsStoredPaymentByStoredPaymentKeyPost(
    storedPaymentKey: string,
    request?: PaymentRequest,
    observe?: "body",
    reportProgress?: boolean
  ): Observable<IJsonResponse>;
  public apiNskV3BookingPaymentsStoredPaymentByStoredPaymentKeyPost(
    storedPaymentKey: string,
    request?: PaymentRequest,
    observe?: "response",
    reportProgress?: boolean
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV3BookingPaymentsStoredPaymentByStoredPaymentKeyPost(
    storedPaymentKey: string,
    request?: PaymentRequest,
    observe?: "events",
    reportProgress?: boolean
  ): Observable<HttpEvent<IJsonResponse>>;
  public apiNskV3BookingPaymentsStoredPaymentByStoredPaymentKeyPost(
    storedPaymentKey: string,
    request?: PaymentRequest,
    observe: any = "body",
    reportProgress: boolean = false
  ): Observable<any> {
    if (storedPaymentKey === null || storedPaymentKey === undefined) {
      throw new Error(
        "Required parameter storedPaymentKey was null or undefined when calling apiNskV3BookingPaymentsStoredPaymentByStoredPaymentKeyPost."
      );
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      "text/plain",
      "application/json",
      "text/json"
    ];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      "application/json-patch+json",
      "application/json",
      "text/json",
      "application/_*+json"
    ];
    const httpContentTypeSelected:
      | string
      | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set("Content-Type", httpContentTypeSelected);
    }

    return this.httpClient.post<IJsonResponse>(
      `${
        this.basePath
      }/api/nsk/v3/booking/payments/storedPayment/${encodeURIComponent(
        String(storedPaymentKey)
      )}`,
      request,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Creates a new ThreeDSecure external payment or prepaid payment on the booking in state.
   * &lt;p&gt;                      A call to payments post should be made first and processed to verify a 3DS payment is required.                  &lt;/p&gt;  &lt;p&gt;                      If you would like to make a ThreeDSecure payment, you will need to provide a valid term url.                      You will also need to have these headers populated:                      &lt;ul&gt;&lt;li&gt;                              User Agent                          &lt;/li&gt;&lt;li&gt;                              Ip Address                          &lt;/li&gt;&lt;li&gt;                              Accept                          &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;
   * @param request Payment request.
   * @param termUrl The term URL.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiNskV3BookingPaymentsThreeDSecurePost(
    request?: ThreeDSecurePaymentMethodRequestv2,
    termUrl?: string,
    observe?: "body",
    reportProgress?: boolean
  ): Observable<IJsonResponse>;
  public apiNskV3BookingPaymentsThreeDSecurePost(
    request?: ThreeDSecurePaymentMethodRequestv2,
    termUrl?: string,
    observe?: "response",
    reportProgress?: boolean
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV3BookingPaymentsThreeDSecurePost(
    request?: ThreeDSecurePaymentMethodRequestv2,
    termUrl?: string,
    observe?: "events",
    reportProgress?: boolean
  ): Observable<HttpEvent<IJsonResponse>>;
  public apiNskV3BookingPaymentsThreeDSecurePost(
    request?: ThreeDSecurePaymentMethodRequestv2,
    termUrl?: string,
    observe: any = "body",
    reportProgress: boolean = false
  ): Observable<any> {
    let queryParameters = new HttpParams({
      encoder: new CustomHttpUrlEncodingCodec()
    });
    if (termUrl !== undefined && termUrl !== null) {
      queryParameters = queryParameters.set("termUrl", <any>termUrl);
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      "text/plain",
      "application/json",
      "text/json"
    ];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      "application/json-patch+json",
      "application/json",
      "text/json",
      "application/_*+json"
    ];
    const httpContentTypeSelected:
      | string
      | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set("Content-Type", httpContentTypeSelected);
    }

    return this.httpClient.post<IJsonResponse>(
      `${this.basePath}/api/nsk/v3/booking/payments/threeDSecure`,
      request,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Creates a new voucher payment on the booking in state.
   *
   * @param request
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiNskV3BookingPaymentsVoucherPost(
    request?: VoucherPaymentRequest,
    observe?: "body",
    reportProgress?: boolean
  ): Observable<IJsonResponse>;
  public apiNskV3BookingPaymentsVoucherPost(
    request?: VoucherPaymentRequest,
    observe?: "response",
    reportProgress?: boolean
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV3BookingPaymentsVoucherPost(
    request?: VoucherPaymentRequest,
    observe?: "events",
    reportProgress?: boolean
  ): Observable<HttpEvent<IJsonResponse>>;
  public apiNskV3BookingPaymentsVoucherPost(
    request?: VoucherPaymentRequest,
    observe: any = "body",
    reportProgress: boolean = false
  ): Observable<any> {
    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      "text/plain",
      "application/json",
      "text/json"
    ];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      "application/json-patch+json",
      "application/json",
      "text/json",
      "application/_*+json"
    ];
    const httpContentTypeSelected:
      | string
      | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set("Content-Type", httpContentTypeSelected);
    }

    return this.httpClient.post<IJsonResponse>(
      `${this.basePath}/api/nsk/v3/booking/payments/voucher`,
      request,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Creates a new external payment with direct currency conversion.
   *
   * @param dccKey
   * @param request
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiNskV4BookingPaymentsDccByDccKeyPost(
    dccKey: string,
    request?: DccRequestBasev2,
    observe?: "body",
    reportProgress?: boolean
  ): Observable<IJsonResponse>;
  public apiNskV4BookingPaymentsDccByDccKeyPost(
    dccKey: string,
    request?: DccRequestBasev2,
    observe?: "response",
    reportProgress?: boolean
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV4BookingPaymentsDccByDccKeyPost(
    dccKey: string,
    request?: DccRequestBasev2,
    observe?: "events",
    reportProgress?: boolean
  ): Observable<HttpEvent<IJsonResponse>>;
  public apiNskV4BookingPaymentsDccByDccKeyPost(
    dccKey: string,
    request?: DccRequestBasev2,
    observe: any = "body",
    reportProgress: boolean = false
  ): Observable<any> {
    if (dccKey === null || dccKey === undefined) {
      throw new Error(
        "Required parameter dccKey was null or undefined when calling apiNskV4BookingPaymentsDccByDccKeyPost."
      );
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      "text/plain",
      "application/json",
      "text/json"
    ];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      "application/json-patch+json",
      "application/json",
      "text/json",
      "application/_*+json"
    ];
    const httpContentTypeSelected:
      | string
      | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set("Content-Type", httpContentTypeSelected);
    }

    return this.httpClient.post<IJsonResponse>(
      `${this.basePath}/api/nsk/v4/booking/payments/dcc/${encodeURIComponent(
        String(dccKey)
      )}`,
      request,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }
}
