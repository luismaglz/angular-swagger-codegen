/**
 * API - Current Routes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: trunk
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import {
  HttpClient,
  HttpEvent,
  HttpHeaders,
  HttpResponse
} from "@angular/common/http";
import { Inject, Injectable, Optional } from "@angular/core";
import { Observable } from "rxjs";
import { Configuration } from "../configuration";
import { BundleApplication } from "../model/bundleApplication";
import { BundleApplicationDetails } from "../model/bundleApplicationDetails";
import { BundleSetDetails } from "../model/bundleSetDetails";
import { BASE_PATH } from "../variables";

@Injectable()
export class BundlesService {
  protected basePath = "https://localhost";
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  constructor(
    protected httpClient: HttpClient,
    @Optional() @Inject(BASE_PATH) basePath: string,
    @Optional() configuration: Configuration
  ) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
      this.basePath = basePath || configuration.basePath || this.basePath;
    }
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = "multipart/form-data";
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }

  /**
   * Retrieves a specific bundle application&#39;s details.
   * See api/nsk/v1/resources/bundles/applications to retrieve the collection of  bundle application resources.
   * @param bundleApplicationKey The bundle application key.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiNskV1BundlesApplicationsByBundleApplicationKeyDetailsGet(
    bundleApplicationKey: string,
    observe?: "body",
    reportProgress?: boolean
  ): Observable<BundleApplicationDetails>;
  public apiNskV1BundlesApplicationsByBundleApplicationKeyDetailsGet(
    bundleApplicationKey: string,
    observe?: "response",
    reportProgress?: boolean
  ): Observable<HttpResponse<BundleApplicationDetails>>;
  public apiNskV1BundlesApplicationsByBundleApplicationKeyDetailsGet(
    bundleApplicationKey: string,
    observe?: "events",
    reportProgress?: boolean
  ): Observable<HttpEvent<BundleApplicationDetails>>;
  public apiNskV1BundlesApplicationsByBundleApplicationKeyDetailsGet(
    bundleApplicationKey: string,
    observe: any = "body",
    reportProgress: boolean = false
  ): Observable<any> {
    if (bundleApplicationKey === null || bundleApplicationKey === undefined) {
      throw new Error(
        "Required parameter bundleApplicationKey was null or undefined when calling apiNskV1BundlesApplicationsByBundleApplicationKeyDetailsGet."
      );
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      "text/plain",
      "application/json",
      "text/json"
    ];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<BundleApplicationDetails>(
      `${this.basePath}/api/nsk/v1/bundles/applications/${encodeURIComponent(
        String(bundleApplicationKey)
      )}/details`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Retrieves the list of bundle applications associated with  the bundle rule.
   * See api/nsk/v1/resources/bundles/rules to retrieve the collection of  bundle rule resources.
   * @param bundleRuleCode The bundle rule code.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiNskV1BundlesRulesByBundleRuleCodeDetailsGet(
    bundleRuleCode: string,
    observe?: "body",
    reportProgress?: boolean
  ): Observable<Array<BundleApplication>>;
  public apiNskV1BundlesRulesByBundleRuleCodeDetailsGet(
    bundleRuleCode: string,
    observe?: "response",
    reportProgress?: boolean
  ): Observable<HttpResponse<Array<BundleApplication>>>;
  public apiNskV1BundlesRulesByBundleRuleCodeDetailsGet(
    bundleRuleCode: string,
    observe?: "events",
    reportProgress?: boolean
  ): Observable<HttpEvent<Array<BundleApplication>>>;
  public apiNskV1BundlesRulesByBundleRuleCodeDetailsGet(
    bundleRuleCode: string,
    observe: any = "body",
    reportProgress: boolean = false
  ): Observable<any> {
    if (bundleRuleCode === null || bundleRuleCode === undefined) {
      throw new Error(
        "Required parameter bundleRuleCode was null or undefined when calling apiNskV1BundlesRulesByBundleRuleCodeDetailsGet."
      );
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      "text/plain",
      "application/json",
      "text/json"
    ];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<Array<BundleApplication>>(
      `${this.basePath}/api/nsk/v1/bundles/rules/${encodeURIComponent(
        String(bundleRuleCode)
      )}/details`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Retrieves the list of bundle codes associated with the bundle set.
   * See api/nsk/v1/resources/bundles/sets to retrieve the collection of  bundle set resources.
   * @param bundleSetCode The bundle set code.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiNskV1BundlesSetsByBundleSetCodeDetailsGet(
    bundleSetCode: string,
    observe?: "body",
    reportProgress?: boolean
  ): Observable<BundleSetDetails>;
  public apiNskV1BundlesSetsByBundleSetCodeDetailsGet(
    bundleSetCode: string,
    observe?: "response",
    reportProgress?: boolean
  ): Observable<HttpResponse<BundleSetDetails>>;
  public apiNskV1BundlesSetsByBundleSetCodeDetailsGet(
    bundleSetCode: string,
    observe?: "events",
    reportProgress?: boolean
  ): Observable<HttpEvent<BundleSetDetails>>;
  public apiNskV1BundlesSetsByBundleSetCodeDetailsGet(
    bundleSetCode: string,
    observe: any = "body",
    reportProgress: boolean = false
  ): Observable<any> {
    if (bundleSetCode === null || bundleSetCode === undefined) {
      throw new Error(
        "Required parameter bundleSetCode was null or undefined when calling apiNskV1BundlesSetsByBundleSetCodeDetailsGet."
      );
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      "text/plain",
      "application/json",
      "text/json"
    ];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<BundleSetDetails>(
      `${this.basePath}/api/nsk/v1/bundles/sets/${encodeURIComponent(
        String(bundleSetCode)
      )}/details`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }
}
