/**
 * API - Current Routes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: trunk
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import {
  HttpClient,
  HttpEvent,
  HttpHeaders,
  HttpParams,
  HttpResponse
} from "@angular/common/http";
import { Inject, Injectable, Optional } from "@angular/core";
import { Observable } from "rxjs";
import { Configuration } from "../configuration";
import { CustomHttpUrlEncodingCodec } from "../encoder";
import { Availability } from "../model/availability";
import { AvailabilityFlyAheadRequest } from "../model/availabilityFlyAheadRequest";
import { AvailabilityMoveRequest } from "../model/availabilityMoveRequest";
import { AvailabilityRebookRequest } from "../model/availabilityRebookRequest";
import { Booking } from "../model/booking";
import { BookingSellRequest } from "../model/bookingSellRequest";
import { IJsonResponse } from "../model/iJsonResponse";
import { MoveRequest } from "../model/moveRequest";
import { ScheduleDetail } from "../model/scheduleDetail";
import { Trip } from "../model/trip";
import { TripDetails } from "../model/tripDetails";
import { TripDowngradeRequest } from "../model/tripDowngradeRequest";
import { TripInformationQuery } from "../model/tripInformationQuery";
import { TripInformationResponse } from "../model/tripInformationResponse";
import { TripSellRequest } from "../model/tripSellRequest";
import { TripStatusv2 } from "../model/tripStatusv2";
import { TripUpgradeBaseRequest } from "../model/tripUpgradeBaseRequest";
import { TripUpgradeRequest } from "../model/tripUpgradeRequest";
import { UpgradeSegment } from "../model/upgradeSegment";
import { BASE_PATH } from "../variables";

@Injectable()
export class TripService {
  protected basePath = "https://localhost";
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  constructor(
    protected httpClient: HttpClient,
    @Optional() @Inject(BASE_PATH) basePath: string,
    @Optional() configuration: Configuration
  ) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
      this.basePath = basePath || configuration.basePath || this.basePath;
    }
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = "multipart/form-data";
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }

  /**
   * Downgrades the current booking in state segments.
   *
   * @param request The trip downgrade request.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiNskV1TripDowngradePost(
    request?: TripDowngradeRequest,
    observe?: "body",
    reportProgress?: boolean
  ): Observable<IJsonResponse>;
  public apiNskV1TripDowngradePost(
    request?: TripDowngradeRequest,
    observe?: "response",
    reportProgress?: boolean
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV1TripDowngradePost(
    request?: TripDowngradeRequest,
    observe?: "events",
    reportProgress?: boolean
  ): Observable<HttpEvent<IJsonResponse>>;
  public apiNskV1TripDowngradePost(
    request?: TripDowngradeRequest,
    observe: any = "body",
    reportProgress: boolean = false
  ): Observable<any> {
    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      "text/plain",
      "application/json",
      "text/json"
    ];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      "application/json-patch+json",
      "application/json",
      "text/json",
      "application/_*+json"
    ];
    const httpContentTypeSelected:
      | string
      | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set("Content-Type", httpContentTypeSelected);
    }

    return this.httpClient.post<IJsonResponse>(
      `${this.basePath}/api/nsk/v1/trip/downgrade`,
      request,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Simple fly ahead search request covers the bare minimum search  by journey. AvailabilitySettings configure the rest.
   *
   * @param journeyKey The journey key.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiNskV1TripFlyAheadAvailabilityByJourneyKeyGet(
    journeyKey: string,
    observe?: "body",
    reportProgress?: boolean
  ): Observable<Trip>;
  public apiNskV1TripFlyAheadAvailabilityByJourneyKeyGet(
    journeyKey: string,
    observe?: "response",
    reportProgress?: boolean
  ): Observable<HttpResponse<Trip>>;
  public apiNskV1TripFlyAheadAvailabilityByJourneyKeyGet(
    journeyKey: string,
    observe?: "events",
    reportProgress?: boolean
  ): Observable<HttpEvent<Trip>>;
  public apiNskV1TripFlyAheadAvailabilityByJourneyKeyGet(
    journeyKey: string,
    observe: any = "body",
    reportProgress: boolean = false
  ): Observable<any> {
    if (journeyKey === null || journeyKey === undefined) {
      throw new Error(
        "Required parameter journeyKey was null or undefined when calling apiNskV1TripFlyAheadAvailabilityByJourneyKeyGet."
      );
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      "text/plain",
      "application/json",
      "text/json"
    ];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<Trip>(
      `${
        this.basePath
      }/api/nsk/v1/trip/flyAhead/availability/${encodeURIComponent(
        String(journeyKey)
      )}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Full fly ahead availability search request.
   * This request allows for total control over  the configuration. If a property is not set, the default settings (AvailabilitySettings) is used in its place.  Note, this is a post request even though it is only getting information. This is due to the complicated data needed  in the post data.
   * @param request The availability move request.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiNskV1TripFlyAheadAvailabilityPost(
    request?: AvailabilityFlyAheadRequest,
    observe?: "body",
    reportProgress?: boolean
  ): Observable<Trip>;
  public apiNskV1TripFlyAheadAvailabilityPost(
    request?: AvailabilityFlyAheadRequest,
    observe?: "response",
    reportProgress?: boolean
  ): Observable<HttpResponse<Trip>>;
  public apiNskV1TripFlyAheadAvailabilityPost(
    request?: AvailabilityFlyAheadRequest,
    observe?: "events",
    reportProgress?: boolean
  ): Observable<HttpEvent<Trip>>;
  public apiNskV1TripFlyAheadAvailabilityPost(
    request?: AvailabilityFlyAheadRequest,
    observe: any = "body",
    reportProgress: boolean = false
  ): Observable<any> {
    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      "text/plain",
      "application/json",
      "text/json"
    ];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      "application/json-patch+json",
      "application/json",
      "text/json",
      "application/_*+json"
    ];
    const httpContentTypeSelected:
      | string
      | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set("Content-Type", httpContentTypeSelected);
    }

    return this.httpClient.post<Trip>(
      `${this.basePath}/api/nsk/v1/trip/flyAhead/availability`,
      request,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Retrieves cabin and various details for the specified leg key.
   * The additional trip details include the leg cross references,   the cabin details (nest counts), and the checkin-lid.
   * @param legKey The encoded leg key.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiNskV1TripInfoByLegKeyDetailsGet(
    legKey: string,
    observe?: "body",
    reportProgress?: boolean
  ): Observable<TripDetails>;
  public apiNskV1TripInfoByLegKeyDetailsGet(
    legKey: string,
    observe?: "response",
    reportProgress?: boolean
  ): Observable<HttpResponse<TripDetails>>;
  public apiNskV1TripInfoByLegKeyDetailsGet(
    legKey: string,
    observe?: "events",
    reportProgress?: boolean
  ): Observable<HttpEvent<TripDetails>>;
  public apiNskV1TripInfoByLegKeyDetailsGet(
    legKey: string,
    observe: any = "body",
    reportProgress: boolean = false
  ): Observable<any> {
    if (legKey === null || legKey === undefined) {
      throw new Error(
        "Required parameter legKey was null or undefined when calling apiNskV1TripInfoByLegKeyDetailsGet."
      );
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      "text/plain",
      "application/json",
      "text/json"
    ];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<TripDetails>(
      `${this.basePath}/api/nsk/v1/trip/info/${encodeURIComponent(
        String(legKey)
      )}/details`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Gets the search results for the trip information, based on the search criteria.
   *
   * @param request The trip information request.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiNskV1TripInfoPost(
    request?: TripInformationQuery,
    observe?: "body",
    reportProgress?: boolean
  ): Observable<Array<TripInformationResponse>>;
  public apiNskV1TripInfoPost(
    request?: TripInformationQuery,
    observe?: "response",
    reportProgress?: boolean
  ): Observable<HttpResponse<Array<TripInformationResponse>>>;
  public apiNskV1TripInfoPost(
    request?: TripInformationQuery,
    observe?: "events",
    reportProgress?: boolean
  ): Observable<HttpEvent<Array<TripInformationResponse>>>;
  public apiNskV1TripInfoPost(
    request?: TripInformationQuery,
    observe: any = "body",
    reportProgress: boolean = false
  ): Observable<any> {
    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      "text/plain",
      "application/json",
      "text/json"
    ];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      "application/json-patch+json",
      "application/json",
      "text/json",
      "application/_*+json"
    ];
    const httpContentTypeSelected:
      | string
      | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set("Content-Type", httpContentTypeSelected);
    }

    return this.httpClient.post<Array<TripInformationResponse>>(
      `${this.basePath}/api/nsk/v1/trip/info`,
      request,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Performs a simplified search for trip information based upon minimal, required data for  the search criteria.
   *
   * @param beginDate The starting date of the trip information search.
   * @param numberOfJourneys When set to null, there will be no limit to the number of journeys to be returned.
   * @param origin The departure station.
   * @param destination The arrival station.
   * @param endDate The end date of the trip information search.
   * @param startTimeInterval The starting time of the trip information search.
   * @param endTimeInterval The end time of the trip information search.
   * @param identifier The transportation identifier, such as a flight number.
   * @param carrierCode The carrier code.
   * @param flightType The flight type.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiNskV1TripInfoSimpleGet(
    beginDate: Date,
    numberOfJourneys?: number,
    origin?: string,
    destination?: string,
    endDate?: Date,
    startTimeInterval?: string,
    endTimeInterval?: string,
    identifier?: string,
    carrierCode?: string,
    flightType?: "All" | "NonStop" | "Through" | "Direct" | "Connect",
    observe?: "body",
    reportProgress?: boolean
  ): Observable<Array<TripInformationResponse>>;
  public apiNskV1TripInfoSimpleGet(
    beginDate: Date,
    numberOfJourneys?: number,
    origin?: string,
    destination?: string,
    endDate?: Date,
    startTimeInterval?: string,
    endTimeInterval?: string,
    identifier?: string,
    carrierCode?: string,
    flightType?: "All" | "NonStop" | "Through" | "Direct" | "Connect",
    observe?: "response",
    reportProgress?: boolean
  ): Observable<HttpResponse<Array<TripInformationResponse>>>;
  public apiNskV1TripInfoSimpleGet(
    beginDate: Date,
    numberOfJourneys?: number,
    origin?: string,
    destination?: string,
    endDate?: Date,
    startTimeInterval?: string,
    endTimeInterval?: string,
    identifier?: string,
    carrierCode?: string,
    flightType?: "All" | "NonStop" | "Through" | "Direct" | "Connect",
    observe?: "events",
    reportProgress?: boolean
  ): Observable<HttpEvent<Array<TripInformationResponse>>>;
  public apiNskV1TripInfoSimpleGet(
    beginDate: Date,
    numberOfJourneys?: number,
    origin?: string,
    destination?: string,
    endDate?: Date,
    startTimeInterval?: string,
    endTimeInterval?: string,
    identifier?: string,
    carrierCode?: string,
    flightType?: "All" | "NonStop" | "Through" | "Direct" | "Connect",
    observe: any = "body",
    reportProgress: boolean = false
  ): Observable<any> {
    if (beginDate === null || beginDate === undefined) {
      throw new Error(
        "Required parameter beginDate was null or undefined when calling apiNskV1TripInfoSimpleGet."
      );
    }

    let queryParameters = new HttpParams({
      encoder: new CustomHttpUrlEncodingCodec()
    });
    if (numberOfJourneys !== undefined && numberOfJourneys !== null) {
      queryParameters = queryParameters.set(
        "NumberOfJourneys",
        <any>numberOfJourneys
      );
    }
    if (origin !== undefined && origin !== null) {
      queryParameters = queryParameters.set("Origin", <any>origin);
    }
    if (destination !== undefined && destination !== null) {
      queryParameters = queryParameters.set("Destination", <any>destination);
    }
    if (endDate !== undefined && endDate !== null) {
      queryParameters = queryParameters.set(
        "EndDate",
        <any>endDate.toISOString()
      );
    }
    if (startTimeInterval !== undefined && startTimeInterval !== null) {
      queryParameters = queryParameters.set(
        "StartTimeInterval",
        <any>startTimeInterval
      );
    }
    if (endTimeInterval !== undefined && endTimeInterval !== null) {
      queryParameters = queryParameters.set(
        "EndTimeInterval",
        <any>endTimeInterval
      );
    }
    if (beginDate !== undefined && beginDate !== null) {
      queryParameters = queryParameters.set(
        "BeginDate",
        <any>beginDate.toISOString()
      );
    }
    if (identifier !== undefined && identifier !== null) {
      queryParameters = queryParameters.set("Identifier", <any>identifier);
    }
    if (carrierCode !== undefined && carrierCode !== null) {
      queryParameters = queryParameters.set("CarrierCode", <any>carrierCode);
    }
    if (flightType !== undefined && flightType !== null) {
      queryParameters = queryParameters.set("FlightType", <any>flightType);
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      "text/plain",
      "application/json",
      "text/json"
    ];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<Array<TripInformationResponse>>(
      `${this.basePath}/api/nsk/v1/trip/info/simple`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Self-service search for move availability.
   *
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiNskV1TripMoveAvailabilitySelfServiceGet(
    observe?: "body",
    reportProgress?: boolean
  ): Observable<Availability>;
  public apiNskV1TripMoveAvailabilitySelfServiceGet(
    observe?: "response",
    reportProgress?: boolean
  ): Observable<HttpResponse<Availability>>;
  public apiNskV1TripMoveAvailabilitySelfServiceGet(
    observe?: "events",
    reportProgress?: boolean
  ): Observable<HttpEvent<Availability>>;
  public apiNskV1TripMoveAvailabilitySelfServiceGet(
    observe: any = "body",
    reportProgress: boolean = false
  ): Observable<any> {
    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      "text/plain",
      "application/json",
      "text/json"
    ];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<Availability>(
      `${this.basePath}/api/nsk/v1/trip/move/availability/selfService`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Moves a journey on the booking in state.
   *
   * @param request Move request.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiNskV1TripMovePost(
    request?: MoveRequest,
    observe?: "body",
    reportProgress?: boolean
  ): Observable<IJsonResponse>;
  public apiNskV1TripMovePost(
    request?: MoveRequest,
    observe?: "response",
    reportProgress?: boolean
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV1TripMovePost(
    request?: MoveRequest,
    observe?: "events",
    reportProgress?: boolean
  ): Observable<HttpEvent<IJsonResponse>>;
  public apiNskV1TripMovePost(
    request?: MoveRequest,
    observe: any = "body",
    reportProgress: boolean = false
  ): Observable<any> {
    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      "text/plain",
      "application/json",
      "text/json"
    ];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      "application/json-patch+json",
      "application/json",
      "text/json",
      "application/_*+json"
    ];
    const httpContentTypeSelected:
      | string
      | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set("Content-Type", httpContentTypeSelected);
    }

    return this.httpClient.post<IJsonResponse>(
      `${this.basePath}/api/nsk/v1/trip/move`,
      request,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Retrieves the schedule of flights for a market.
   *
   * @param origin The origin station code.
   * @param destination The destination station code.
   * @param beginDate The begin date to search for.
   * @param endDate The end date to search for.
   * @param type The flight type filter.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiNskV1TripScheduleGet(
    origin: string,
    destination: string,
    beginDate: Date,
    endDate: Date,
    type?: "None" | "NonStop" | "Through" | "Direct" | "Connect" | "All",
    observe?: "body",
    reportProgress?: boolean
  ): Observable<Array<ScheduleDetail>>;
  public apiNskV1TripScheduleGet(
    origin: string,
    destination: string,
    beginDate: Date,
    endDate: Date,
    type?: "None" | "NonStop" | "Through" | "Direct" | "Connect" | "All",
    observe?: "response",
    reportProgress?: boolean
  ): Observable<HttpResponse<Array<ScheduleDetail>>>;
  public apiNskV1TripScheduleGet(
    origin: string,
    destination: string,
    beginDate: Date,
    endDate: Date,
    type?: "None" | "NonStop" | "Through" | "Direct" | "Connect" | "All",
    observe?: "events",
    reportProgress?: boolean
  ): Observable<HttpEvent<Array<ScheduleDetail>>>;
  public apiNskV1TripScheduleGet(
    origin: string,
    destination: string,
    beginDate: Date,
    endDate: Date,
    type?: "None" | "NonStop" | "Through" | "Direct" | "Connect" | "All",
    observe: any = "body",
    reportProgress: boolean = false
  ): Observable<any> {
    if (origin === null || origin === undefined) {
      throw new Error(
        "Required parameter origin was null or undefined when calling apiNskV1TripScheduleGet."
      );
    }

    if (destination === null || destination === undefined) {
      throw new Error(
        "Required parameter destination was null or undefined when calling apiNskV1TripScheduleGet."
      );
    }

    if (beginDate === null || beginDate === undefined) {
      throw new Error(
        "Required parameter beginDate was null or undefined when calling apiNskV1TripScheduleGet."
      );
    }

    if (endDate === null || endDate === undefined) {
      throw new Error(
        "Required parameter endDate was null or undefined when calling apiNskV1TripScheduleGet."
      );
    }

    let queryParameters = new HttpParams({
      encoder: new CustomHttpUrlEncodingCodec()
    });
    if (origin !== undefined && origin !== null) {
      queryParameters = queryParameters.set("Origin", <any>origin);
    }
    if (destination !== undefined && destination !== null) {
      queryParameters = queryParameters.set("Destination", <any>destination);
    }
    if (beginDate !== undefined && beginDate !== null) {
      queryParameters = queryParameters.set(
        "BeginDate",
        <any>beginDate.toISOString()
      );
    }
    if (endDate !== undefined && endDate !== null) {
      queryParameters = queryParameters.set(
        "EndDate",
        <any>endDate.toISOString()
      );
    }
    if (type !== undefined && type !== null) {
      queryParameters = queryParameters.set("Type", <any>type);
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      "text/plain",
      "application/json",
      "text/json"
    ];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<Array<ScheduleDetail>>(
      `${this.basePath}/api/nsk/v1/trip/schedule`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Upgrades the current booking for the single key.
   *
   * @param upgradeKey The upgrade key.
   * @param request The trip upgrade request.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiNskV1TripUpgradeByUpgradeKeyPost(
    upgradeKey: string,
    request?: TripUpgradeBaseRequest,
    observe?: "body",
    reportProgress?: boolean
  ): Observable<IJsonResponse>;
  public apiNskV1TripUpgradeByUpgradeKeyPost(
    upgradeKey: string,
    request?: TripUpgradeBaseRequest,
    observe?: "response",
    reportProgress?: boolean
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV1TripUpgradeByUpgradeKeyPost(
    upgradeKey: string,
    request?: TripUpgradeBaseRequest,
    observe?: "events",
    reportProgress?: boolean
  ): Observable<HttpEvent<IJsonResponse>>;
  public apiNskV1TripUpgradeByUpgradeKeyPost(
    upgradeKey: string,
    request?: TripUpgradeBaseRequest,
    observe: any = "body",
    reportProgress: boolean = false
  ): Observable<any> {
    if (upgradeKey === null || upgradeKey === undefined) {
      throw new Error(
        "Required parameter upgradeKey was null or undefined when calling apiNskV1TripUpgradeByUpgradeKeyPost."
      );
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      "text/plain",
      "application/json",
      "text/json"
    ];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      "application/json-patch+json",
      "application/json",
      "text/json",
      "application/_*+json"
    ];
    const httpContentTypeSelected:
      | string
      | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set("Content-Type", httpContentTypeSelected);
    }

    return this.httpClient.post<IJsonResponse>(
      `${this.basePath}/api/nsk/v1/trip/upgrade/${encodeURIComponent(
        String(upgradeKey)
      )}`,
      request,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Gets the list of upgrade options for the booking in state.
   *
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiNskV1TripUpgradeGet(
    observe?: "body",
    reportProgress?: boolean
  ): Observable<Array<UpgradeSegment>>;
  public apiNskV1TripUpgradeGet(
    observe?: "response",
    reportProgress?: boolean
  ): Observable<HttpResponse<Array<UpgradeSegment>>>;
  public apiNskV1TripUpgradeGet(
    observe?: "events",
    reportProgress?: boolean
  ): Observable<HttpEvent<Array<UpgradeSegment>>>;
  public apiNskV1TripUpgradeGet(
    observe: any = "body",
    reportProgress: boolean = false
  ): Observable<any> {
    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      "text/plain",
      "application/json",
      "text/json"
    ];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<Array<UpgradeSegment>>(
      `${this.basePath}/api/nsk/v1/trip/upgrade`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Upgrades the current booking in state segments.
   *
   * @param request The trip upgrade request.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiNskV1TripUpgradePost(
    request?: TripUpgradeRequest,
    observe?: "body",
    reportProgress?: boolean
  ): Observable<IJsonResponse>;
  public apiNskV1TripUpgradePost(
    request?: TripUpgradeRequest,
    observe?: "response",
    reportProgress?: boolean
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV1TripUpgradePost(
    request?: TripUpgradeRequest,
    observe?: "events",
    reportProgress?: boolean
  ): Observable<HttpEvent<IJsonResponse>>;
  public apiNskV1TripUpgradePost(
    request?: TripUpgradeRequest,
    observe: any = "body",
    reportProgress: boolean = false
  ): Observable<any> {
    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      "text/plain",
      "application/json",
      "text/json"
    ];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      "application/json-patch+json",
      "application/json",
      "text/json",
      "application/_*+json"
    ];
    const httpContentTypeSelected:
      | string
      | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set("Content-Type", httpContentTypeSelected);
    }

    return this.httpClient.post<IJsonResponse>(
      `${this.basePath}/api/nsk/v1/trip/upgrade`,
      request,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Retrieves the trip status data for the specified leg key.
   *
   * @param legKey The encoded leg key.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiNskV2TripInfoByLegKeyStatusGet(
    legKey: string,
    observe?: "body",
    reportProgress?: boolean
  ): Observable<TripStatusv2>;
  public apiNskV2TripInfoByLegKeyStatusGet(
    legKey: string,
    observe?: "response",
    reportProgress?: boolean
  ): Observable<HttpResponse<TripStatusv2>>;
  public apiNskV2TripInfoByLegKeyStatusGet(
    legKey: string,
    observe?: "events",
    reportProgress?: boolean
  ): Observable<HttpEvent<TripStatusv2>>;
  public apiNskV2TripInfoByLegKeyStatusGet(
    legKey: string,
    observe: any = "body",
    reportProgress: boolean = false
  ): Observable<any> {
    if (legKey === null || legKey === undefined) {
      throw new Error(
        "Required parameter legKey was null or undefined when calling apiNskV2TripInfoByLegKeyStatusGet."
      );
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      "text/plain",
      "application/json",
      "text/json"
    ];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<TripStatusv2>(
      `${this.basePath}/api/nsk/v2/trip/info/${encodeURIComponent(
        String(legKey)
      )}/status`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Searches for availability with the simple move request. The simple search request covers the bare minimum search  criteria and lets default settings (AvailabilitySettings) configure the rest.
   *
   * @param journeyKey The journey key.
   * @param passengerMoveType The passenger move type.
   * @param beginDate The departure date.
   * @param origin The origin station code.
   * @param destination The destination station code.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiNskV2TripMoveAvailabilityByJourneyKeyGet(
    journeyKey: string,
    passengerMoveType:
      | "None"
      | "Irop"
      | "Diversion"
      | "FlightClose"
      | "FlyAhead"
      | "SplitJourney"
      | "SelfServiceRebooking",
    beginDate?: Date,
    origin?: string,
    destination?: string,
    observe?: "body",
    reportProgress?: boolean
  ): Observable<Availability>;
  public apiNskV2TripMoveAvailabilityByJourneyKeyGet(
    journeyKey: string,
    passengerMoveType:
      | "None"
      | "Irop"
      | "Diversion"
      | "FlightClose"
      | "FlyAhead"
      | "SplitJourney"
      | "SelfServiceRebooking",
    beginDate?: Date,
    origin?: string,
    destination?: string,
    observe?: "response",
    reportProgress?: boolean
  ): Observable<HttpResponse<Availability>>;
  public apiNskV2TripMoveAvailabilityByJourneyKeyGet(
    journeyKey: string,
    passengerMoveType:
      | "None"
      | "Irop"
      | "Diversion"
      | "FlightClose"
      | "FlyAhead"
      | "SplitJourney"
      | "SelfServiceRebooking",
    beginDate?: Date,
    origin?: string,
    destination?: string,
    observe?: "events",
    reportProgress?: boolean
  ): Observable<HttpEvent<Availability>>;
  public apiNskV2TripMoveAvailabilityByJourneyKeyGet(
    journeyKey: string,
    passengerMoveType:
      | "None"
      | "Irop"
      | "Diversion"
      | "FlightClose"
      | "FlyAhead"
      | "SplitJourney"
      | "SelfServiceRebooking",
    beginDate?: Date,
    origin?: string,
    destination?: string,
    observe: any = "body",
    reportProgress: boolean = false
  ): Observable<any> {
    if (journeyKey === null || journeyKey === undefined) {
      throw new Error(
        "Required parameter journeyKey was null or undefined when calling apiNskV2TripMoveAvailabilityByJourneyKeyGet."
      );
    }

    if (passengerMoveType === null || passengerMoveType === undefined) {
      throw new Error(
        "Required parameter passengerMoveType was null or undefined when calling apiNskV2TripMoveAvailabilityByJourneyKeyGet."
      );
    }

    let queryParameters = new HttpParams({
      encoder: new CustomHttpUrlEncodingCodec()
    });
    if (beginDate !== undefined && beginDate !== null) {
      queryParameters = queryParameters.set(
        "BeginDate",
        <any>beginDate.toISOString()
      );
    }
    if (origin !== undefined && origin !== null) {
      queryParameters = queryParameters.set("Origin", <any>origin);
    }
    if (destination !== undefined && destination !== null) {
      queryParameters = queryParameters.set("Destination", <any>destination);
    }
    if (passengerMoveType !== undefined && passengerMoveType !== null) {
      queryParameters = queryParameters.set(
        "PassengerMoveType",
        <any>passengerMoveType
      );
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      "text/plain",
      "application/json",
      "text/json"
    ];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<Availability>(
      `${this.basePath}/api/nsk/v2/trip/move/availability/${encodeURIComponent(
        String(journeyKey)
      )}`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Searches for move availability with the full availability search request. This request will allow for total control  over  the configuration. If a property is not set, the default settings (AvailabilitySettings) is used in its place.
   * Note, this is a post request even though it is only getting information. This is due to the complicated data needed  in the post data.
   * @param request The availability move request.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiNskV2TripMoveAvailabilityPost(
    request?: AvailabilityMoveRequest,
    observe?: "body",
    reportProgress?: boolean
  ): Observable<Availability>;
  public apiNskV2TripMoveAvailabilityPost(
    request?: AvailabilityMoveRequest,
    observe?: "response",
    reportProgress?: boolean
  ): Observable<HttpResponse<Availability>>;
  public apiNskV2TripMoveAvailabilityPost(
    request?: AvailabilityMoveRequest,
    observe?: "events",
    reportProgress?: boolean
  ): Observable<HttpEvent<Availability>>;
  public apiNskV2TripMoveAvailabilityPost(
    request?: AvailabilityMoveRequest,
    observe: any = "body",
    reportProgress: boolean = false
  ): Observable<any> {
    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      "text/plain",
      "application/json",
      "text/json"
    ];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      "application/json-patch+json",
      "application/json",
      "text/json",
      "application/_*+json"
    ];
    const httpContentTypeSelected:
      | string
      | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set("Content-Type", httpContentTypeSelected);
    }

    return this.httpClient.post<Availability>(
      `${this.basePath}/api/nsk/v2/trip/move/availability`,
      request,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Rebook search with the current booking defaults.
   * Requires a booking in state.   Although this endpoint behaves like a GET, POST is used to reduce the limitations resulting from URL length issues.
   * @param request The rebook request.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiNskV3TripRebookAvailabilityPost(
    request?: AvailabilityRebookRequest,
    observe?: "body",
    reportProgress?: boolean
  ): Observable<Availability>;
  public apiNskV3TripRebookAvailabilityPost(
    request?: AvailabilityRebookRequest,
    observe?: "response",
    reportProgress?: boolean
  ): Observable<HttpResponse<Availability>>;
  public apiNskV3TripRebookAvailabilityPost(
    request?: AvailabilityRebookRequest,
    observe?: "events",
    reportProgress?: boolean
  ): Observable<HttpEvent<Availability>>;
  public apiNskV3TripRebookAvailabilityPost(
    request?: AvailabilityRebookRequest,
    observe: any = "body",
    reportProgress: boolean = false
  ): Observable<any> {
    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      "text/plain",
      "application/json",
      "text/json"
    ];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      "application/json-patch+json",
      "application/json",
      "text/json",
      "application/_*+json"
    ];
    const httpContentTypeSelected:
      | string
      | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set("Content-Type", httpContentTypeSelected);
    }

    return this.httpClient.post<Availability>(
      `${this.basePath}/api/nsk/v3/trip/rebook/availability`,
      request,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Simple rebook search with the current booking defaults.
   * Requires a booking in state.
   * @param origin The origin station code.
   * @param destination The destination station code.
   * @param beginDate The departure date.
   * @param endDate The return date if this is a round trip request.
   * @param loyaltyFilter The loyalty fare filter.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiNskV3TripRebookAvailabilitySimpleGet(
    origin: string,
    destination: string,
    beginDate: Date,
    endDate?: Date,
    loyaltyFilter?:
      | "MonetaryOnly"
      | "PointsOnly"
      | "PointsAndMonetary"
      | "PreserveCurrent",
    observe?: "body",
    reportProgress?: boolean
  ): Observable<Availability>;
  public apiNskV3TripRebookAvailabilitySimpleGet(
    origin: string,
    destination: string,
    beginDate: Date,
    endDate?: Date,
    loyaltyFilter?:
      | "MonetaryOnly"
      | "PointsOnly"
      | "PointsAndMonetary"
      | "PreserveCurrent",
    observe?: "response",
    reportProgress?: boolean
  ): Observable<HttpResponse<Availability>>;
  public apiNskV3TripRebookAvailabilitySimpleGet(
    origin: string,
    destination: string,
    beginDate: Date,
    endDate?: Date,
    loyaltyFilter?:
      | "MonetaryOnly"
      | "PointsOnly"
      | "PointsAndMonetary"
      | "PreserveCurrent",
    observe?: "events",
    reportProgress?: boolean
  ): Observable<HttpEvent<Availability>>;
  public apiNskV3TripRebookAvailabilitySimpleGet(
    origin: string,
    destination: string,
    beginDate: Date,
    endDate?: Date,
    loyaltyFilter?:
      | "MonetaryOnly"
      | "PointsOnly"
      | "PointsAndMonetary"
      | "PreserveCurrent",
    observe: any = "body",
    reportProgress: boolean = false
  ): Observable<any> {
    if (origin === null || origin === undefined) {
      throw new Error(
        "Required parameter origin was null or undefined when calling apiNskV3TripRebookAvailabilitySimpleGet."
      );
    }

    if (destination === null || destination === undefined) {
      throw new Error(
        "Required parameter destination was null or undefined when calling apiNskV3TripRebookAvailabilitySimpleGet."
      );
    }

    if (beginDate === null || beginDate === undefined) {
      throw new Error(
        "Required parameter beginDate was null or undefined when calling apiNskV3TripRebookAvailabilitySimpleGet."
      );
    }

    let queryParameters = new HttpParams({
      encoder: new CustomHttpUrlEncodingCodec()
    });
    if (origin !== undefined && origin !== null) {
      queryParameters = queryParameters.set("Origin", <any>origin);
    }
    if (destination !== undefined && destination !== null) {
      queryParameters = queryParameters.set("Destination", <any>destination);
    }
    if (beginDate !== undefined && beginDate !== null) {
      queryParameters = queryParameters.set(
        "BeginDate",
        <any>beginDate.toISOString()
      );
    }
    if (endDate !== undefined && endDate !== null) {
      queryParameters = queryParameters.set(
        "EndDate",
        <any>endDate.toISOString()
      );
    }
    if (loyaltyFilter !== undefined && loyaltyFilter !== null) {
      queryParameters = queryParameters.set(
        "LoyaltyFilter",
        <any>loyaltyFilter
      );
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      "text/plain",
      "application/json",
      "text/json"
    ];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<Availability>(
      `${this.basePath}/api/nsk/v3/trip/rebook/availability/simple`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Creates a new booking with the provided journeys, contacts, passengers, and SSRs.
   *
   * @param request The booking sell request.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiNskV4TripPost(
    request?: BookingSellRequest,
    observe?: "body",
    reportProgress?: boolean
  ): Observable<IJsonResponse>;
  public apiNskV4TripPost(
    request?: BookingSellRequest,
    observe?: "response",
    reportProgress?: boolean
  ): Observable<HttpResponse<IJsonResponse>>;
  public apiNskV4TripPost(
    request?: BookingSellRequest,
    observe?: "events",
    reportProgress?: boolean
  ): Observable<HttpEvent<IJsonResponse>>;
  public apiNskV4TripPost(
    request?: BookingSellRequest,
    observe: any = "body",
    reportProgress: boolean = false
  ): Observable<any> {
    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      "text/plain",
      "application/json",
      "text/json"
    ];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      "application/json-patch+json",
      "application/json",
      "text/json",
      "application/_*+json"
    ];
    const httpContentTypeSelected:
      | string
      | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set("Content-Type", httpContentTypeSelected);
    }

    return this.httpClient.post<IJsonResponse>(
      `${this.basePath}/api/nsk/v4/trip`,
      request,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Sells the list of journeys and creates a booking if it doesn&#39;t already exist.
   *
   * @param request The trip sell request.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiNskV4TripSellPost(
    request?: TripSellRequest,
    observe?: "body",
    reportProgress?: boolean
  ): Observable<Booking>;
  public apiNskV4TripSellPost(
    request?: TripSellRequest,
    observe?: "response",
    reportProgress?: boolean
  ): Observable<HttpResponse<Booking>>;
  public apiNskV4TripSellPost(
    request?: TripSellRequest,
    observe?: "events",
    reportProgress?: boolean
  ): Observable<HttpEvent<Booking>>;
  public apiNskV4TripSellPost(
    request?: TripSellRequest,
    observe: any = "body",
    reportProgress: boolean = false
  ): Observable<any> {
    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      "text/plain",
      "application/json",
      "text/json"
    ];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      "application/json-patch+json",
      "application/json",
      "text/json",
      "application/_*+json"
    ];
    const httpContentTypeSelected:
      | string
      | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set("Content-Type", httpContentTypeSelected);
    }

    return this.httpClient.post<Booking>(
      `${this.basePath}/api/nsk/v4/trip/sell`,
      request,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }
}
