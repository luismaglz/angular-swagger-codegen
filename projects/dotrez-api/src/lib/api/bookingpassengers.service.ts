/**
 * API - Current Routes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: trunk
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { AddSeatRequest } from '../model/addSeatRequest';
import { DeltaMapperInfant } from '../model/deltaMapperInfant';
import { DeltaMapperPassengerAddressEditRequest } from '../model/deltaMapperPassengerAddressEditRequest';
import { DeltaMapperPassengerBase } from '../model/deltaMapperPassengerBase';
import { DeltaMapperTravelDocumentEditRequest } from '../model/deltaMapperTravelDocumentEditRequest';
import { DeltaMapperTravelNotificationEditRequest } from '../model/deltaMapperTravelNotificationEditRequest';
import { IJsonResponse } from '../model/iJsonResponse';
import { Infant } from '../model/infant';
import { InlineResponse2005 } from '../model/inlineResponse2005';
import { InlineResponse2006 } from '../model/inlineResponse2006';
import { InlineResponse2007 } from '../model/inlineResponse2007';
import { NotificationEvent } from '../model/notificationEvent';
import { NotificationEventCreateRequest } from '../model/notificationEventCreateRequest';
import { NotificationTimedEvent } from '../model/notificationTimedEvent';
import { NotificationTimedEventCreateRequest } from '../model/notificationTimedEventCreateRequest';
import { NotificationTimedEventEditRequest } from '../model/notificationTimedEventEditRequest';
import { Passenger } from '../model/passenger';
import { PassengerAddress } from '../model/passengerAddress';
import { PassengerAddressCreateRequest } from '../model/passengerAddressCreateRequest';
import { PassengerAddressEditRequest } from '../model/passengerAddressEditRequest';
import { PassengerBag } from '../model/passengerBag';
import { PassengerBase } from '../model/passengerBase';
import { PassengerInfant } from '../model/passengerInfant';
import { PassengerInfantCreateRequest } from '../model/passengerInfantCreateRequest';
import { PassengerKeyResponse } from '../model/passengerKeyResponse';
import { PassengerPriceBreakdown } from '../model/passengerPriceBreakdown';
import { PassengerSeat } from '../model/passengerSeat';
import { PassengerTravelDocument } from '../model/passengerTravelDocument';
import { PassengerTypeCodeEditRequest } from '../model/passengerTypeCodeEditRequest';
import { TravelDocumentCreateRequest } from '../model/travelDocumentCreateRequest';
import { TravelDocumentEditRequest } from '../model/travelDocumentEditRequest';
import { TravelNotification } from '../model/travelNotification';
import { TravelNotificationCreateRequest } from '../model/travelNotificationCreateRequest';
import { TravelNotificationEditRequest } from '../model/travelNotificationEditRequest';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class BookingpassengersService {

    protected basePath = 'https://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Gets all the passenger price breakdown by passenger type.
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1BookingPassengersBreakdownByTypeGet(observe?: 'body', reportProgress?: boolean): Observable<InlineResponse2007>;
    public apiNskV1BookingPassengersBreakdownByTypeGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse2007>>;
    public apiNskV1BookingPassengersBreakdownByTypeGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse2007>>;
    public apiNskV1BookingPassengersBreakdownByTypeGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<InlineResponse2007>(`${this.basePath}/api/nsk/v1/booking/passengers/breakdown/byType`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets all the passenger price breakdowns.
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1BookingPassengersBreakdownGet(observe?: 'body', reportProgress?: boolean): Observable<InlineResponse2006>;
    public apiNskV1BookingPassengersBreakdownGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse2006>>;
    public apiNskV1BookingPassengersBreakdownGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse2006>>;
    public apiNskV1BookingPassengersBreakdownGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<InlineResponse2006>(`${this.basePath}/api/nsk/v1/booking/passengers/breakdown`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes a passenger travel notification for a specific passenger on the booking in state.
     * 
     * @param passengerAlternateKey The passenger alternate key. This key will be null until the booking is committed.
     * @param travelNotificationKey The travel notification key.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyDelete(passengerAlternateKey: string, travelNotificationKey: string, observe?: 'body', reportProgress?: boolean): Observable<IJsonResponse>;
    public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyDelete(passengerAlternateKey: string, travelNotificationKey: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyDelete(passengerAlternateKey: string, travelNotificationKey: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IJsonResponse>>;
    public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyDelete(passengerAlternateKey: string, travelNotificationKey: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (passengerAlternateKey === null || passengerAlternateKey === undefined) {
            throw new Error('Required parameter passengerAlternateKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyDelete.');
        }

        if (travelNotificationKey === null || travelNotificationKey === undefined) {
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyDelete.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<IJsonResponse>(`${this.basePath}/api/nsk/v1/booking/passengers/${encodeURIComponent(String(passengerAlternateKey))}/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes a notification event from a specific passenger travel notification on the booking in state.
     * 
     * @param passengerAlternateKey The passenger alternate key. This key will be null until the booking is committed.
     * @param travelNotificationKey The travel notification key.
     * @param eventType The notification event type.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyEventsByEventTypeDelete(passengerAlternateKey: string, travelNotificationKey: string, eventType: 'DepartureDelay' | 'ArrivalDelay' | 'ScheduleChange' | 'CheckIn', observe?: 'body', reportProgress?: boolean): Observable<IJsonResponse>;
    public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyEventsByEventTypeDelete(passengerAlternateKey: string, travelNotificationKey: string, eventType: 'DepartureDelay' | 'ArrivalDelay' | 'ScheduleChange' | 'CheckIn', observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyEventsByEventTypeDelete(passengerAlternateKey: string, travelNotificationKey: string, eventType: 'DepartureDelay' | 'ArrivalDelay' | 'ScheduleChange' | 'CheckIn', observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IJsonResponse>>;
    public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyEventsByEventTypeDelete(passengerAlternateKey: string, travelNotificationKey: string, eventType: 'DepartureDelay' | 'ArrivalDelay' | 'ScheduleChange' | 'CheckIn', observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (passengerAlternateKey === null || passengerAlternateKey === undefined) {
            throw new Error('Required parameter passengerAlternateKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyEventsByEventTypeDelete.');
        }

        if (travelNotificationKey === null || travelNotificationKey === undefined) {
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyEventsByEventTypeDelete.');
        }

        if (eventType === null || eventType === undefined) {
            throw new Error('Required parameter eventType was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyEventsByEventTypeDelete.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<IJsonResponse>(`${this.basePath}/api/nsk/v1/booking/passengers/${encodeURIComponent(String(passengerAlternateKey))}/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}/events/${encodeURIComponent(String(eventType))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get a notification event for a specific passenger travel notification on the booking in state.
     * 
     * @param passengerAlternateKey The passenger alternate key. This key will be null until the booking is committed.
     * @param travelNotificationKey The travel notification key.
     * @param eventType The event type.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyEventsByEventTypeGet(passengerAlternateKey: string, travelNotificationKey: string, eventType: 'DepartureDelay' | 'ArrivalDelay' | 'ScheduleChange' | 'CheckIn', observe?: 'body', reportProgress?: boolean): Observable<NotificationEvent>;
    public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyEventsByEventTypeGet(passengerAlternateKey: string, travelNotificationKey: string, eventType: 'DepartureDelay' | 'ArrivalDelay' | 'ScheduleChange' | 'CheckIn', observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<NotificationEvent>>;
    public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyEventsByEventTypeGet(passengerAlternateKey: string, travelNotificationKey: string, eventType: 'DepartureDelay' | 'ArrivalDelay' | 'ScheduleChange' | 'CheckIn', observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<NotificationEvent>>;
    public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyEventsByEventTypeGet(passengerAlternateKey: string, travelNotificationKey: string, eventType: 'DepartureDelay' | 'ArrivalDelay' | 'ScheduleChange' | 'CheckIn', observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (passengerAlternateKey === null || passengerAlternateKey === undefined) {
            throw new Error('Required parameter passengerAlternateKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyEventsByEventTypeGet.');
        }

        if (travelNotificationKey === null || travelNotificationKey === undefined) {
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyEventsByEventTypeGet.');
        }

        if (eventType === null || eventType === undefined) {
            throw new Error('Required parameter eventType was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyEventsByEventTypeGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<NotificationEvent>(`${this.basePath}/api/nsk/v1/booking/passengers/${encodeURIComponent(String(passengerAlternateKey))}/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}/events/${encodeURIComponent(String(eventType))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets notification events for a specific passenger travel notification on the booking in state.
     * 
     * @param passengerAlternateKey The passenger alternate key. This key will be null until the booking is committed.
     * @param travelNotificationKey The travel notification key.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyEventsGet(passengerAlternateKey: string, travelNotificationKey: string, observe?: 'body', reportProgress?: boolean): Observable<Array<NotificationEvent>>;
    public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyEventsGet(passengerAlternateKey: string, travelNotificationKey: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<NotificationEvent>>>;
    public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyEventsGet(passengerAlternateKey: string, travelNotificationKey: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<NotificationEvent>>>;
    public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyEventsGet(passengerAlternateKey: string, travelNotificationKey: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (passengerAlternateKey === null || passengerAlternateKey === undefined) {
            throw new Error('Required parameter passengerAlternateKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyEventsGet.');
        }

        if (travelNotificationKey === null || travelNotificationKey === undefined) {
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyEventsGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<NotificationEvent>>(`${this.basePath}/api/nsk/v1/booking/passengers/${encodeURIComponent(String(passengerAlternateKey))}/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}/events`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Adds a notification event to a specific passenger travel notification on the booking in state.
     * 
     * @param passengerAlternateKey The passenger alternate key. This key will be null until the booking is committed.
     * @param travelNotificationKey The travel notification key.
     * @param request The notification event create request.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyEventsPost(passengerAlternateKey: string, travelNotificationKey: string, request?: NotificationEventCreateRequest, observe?: 'body', reportProgress?: boolean): Observable<IJsonResponse>;
    public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyEventsPost(passengerAlternateKey: string, travelNotificationKey: string, request?: NotificationEventCreateRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyEventsPost(passengerAlternateKey: string, travelNotificationKey: string, request?: NotificationEventCreateRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IJsonResponse>>;
    public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyEventsPost(passengerAlternateKey: string, travelNotificationKey: string, request?: NotificationEventCreateRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (passengerAlternateKey === null || passengerAlternateKey === undefined) {
            throw new Error('Required parameter passengerAlternateKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyEventsPost.');
        }

        if (travelNotificationKey === null || travelNotificationKey === undefined) {
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyEventsPost.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<IJsonResponse>(`${this.basePath}/api/nsk/v1/booking/passengers/${encodeURIComponent(String(passengerAlternateKey))}/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}/events`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a passenger travel notification for a specific passenger on the booking in state.
     * 
     * @param passengerAlternateKey The passenger alternate key. This key will be null until the booking is committed.
     * @param travelNotificationKey The travel notification key.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyGet(passengerAlternateKey: string, travelNotificationKey: string, observe?: 'body', reportProgress?: boolean): Observable<TravelNotification>;
    public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyGet(passengerAlternateKey: string, travelNotificationKey: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TravelNotification>>;
    public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyGet(passengerAlternateKey: string, travelNotificationKey: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TravelNotification>>;
    public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyGet(passengerAlternateKey: string, travelNotificationKey: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (passengerAlternateKey === null || passengerAlternateKey === undefined) {
            throw new Error('Required parameter passengerAlternateKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyGet.');
        }

        if (travelNotificationKey === null || travelNotificationKey === undefined) {
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<TravelNotification>(`${this.basePath}/api/nsk/v1/booking/passengers/${encodeURIComponent(String(passengerAlternateKey))}/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Patches a passenger travel notification for a specific passenger on the booking in state.
     * 
     * @param passengerAlternateKey The passenger alternate key. This key will be null until the booking is committed.
     * @param travelNotificationKey The travel notification key.
     * @param request The delta mapper travel notification edit request.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyPatch(passengerAlternateKey: string, travelNotificationKey: string, request?: DeltaMapperTravelNotificationEditRequest, observe?: 'body', reportProgress?: boolean): Observable<IJsonResponse>;
    public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyPatch(passengerAlternateKey: string, travelNotificationKey: string, request?: DeltaMapperTravelNotificationEditRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyPatch(passengerAlternateKey: string, travelNotificationKey: string, request?: DeltaMapperTravelNotificationEditRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IJsonResponse>>;
    public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyPatch(passengerAlternateKey: string, travelNotificationKey: string, request?: DeltaMapperTravelNotificationEditRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (passengerAlternateKey === null || passengerAlternateKey === undefined) {
            throw new Error('Required parameter passengerAlternateKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyPatch.');
        }

        if (travelNotificationKey === null || travelNotificationKey === undefined) {
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyPatch.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.patch<IJsonResponse>(`${this.basePath}/api/nsk/v1/booking/passengers/${encodeURIComponent(String(passengerAlternateKey))}/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates a passenger travel notification for a specific passenger on the booking in state.
     * 
     * @param passengerAlternateKey The passenger alternate key. This key will be null until the booking is committed.
     * @param travelNotificationKey The travel notification key.
     * @param request The travel notification edit request.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyPut(passengerAlternateKey: string, travelNotificationKey: string, request?: TravelNotificationEditRequest, observe?: 'body', reportProgress?: boolean): Observable<IJsonResponse>;
    public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyPut(passengerAlternateKey: string, travelNotificationKey: string, request?: TravelNotificationEditRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyPut(passengerAlternateKey: string, travelNotificationKey: string, request?: TravelNotificationEditRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IJsonResponse>>;
    public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyPut(passengerAlternateKey: string, travelNotificationKey: string, request?: TravelNotificationEditRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (passengerAlternateKey === null || passengerAlternateKey === undefined) {
            throw new Error('Required parameter passengerAlternateKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyPut.');
        }

        if (travelNotificationKey === null || travelNotificationKey === undefined) {
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyPut.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<IJsonResponse>(`${this.basePath}/api/nsk/v1/booking/passengers/${encodeURIComponent(String(passengerAlternateKey))}/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes a notification timed event from a specific passenger travel notification on the booking in state.
     * 
     * @param passengerAlternateKey The passenger alternate key. This key will be null until the booking is committed.
     * @param travelNotificationKey The travel notification key.
     * @param timedEventType The notification timed event type.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeDelete(passengerAlternateKey: string, travelNotificationKey: string, timedEventType: 'Departure' | 'Arrival', observe?: 'body', reportProgress?: boolean): Observable<IJsonResponse>;
    public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeDelete(passengerAlternateKey: string, travelNotificationKey: string, timedEventType: 'Departure' | 'Arrival', observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeDelete(passengerAlternateKey: string, travelNotificationKey: string, timedEventType: 'Departure' | 'Arrival', observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IJsonResponse>>;
    public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeDelete(passengerAlternateKey: string, travelNotificationKey: string, timedEventType: 'Departure' | 'Arrival', observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (passengerAlternateKey === null || passengerAlternateKey === undefined) {
            throw new Error('Required parameter passengerAlternateKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeDelete.');
        }

        if (travelNotificationKey === null || travelNotificationKey === undefined) {
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeDelete.');
        }

        if (timedEventType === null || timedEventType === undefined) {
            throw new Error('Required parameter timedEventType was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeDelete.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<IJsonResponse>(`${this.basePath}/api/nsk/v1/booking/passengers/${encodeURIComponent(String(passengerAlternateKey))}/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}/timedEvents/${encodeURIComponent(String(timedEventType))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get a notification timed event for a specific passenger travel notification on the booking in state.
     * 
     * @param passengerAlternateKey The passenger alternate key. This key will be null until the booking is committed.
     * @param travelNotificationKey The travel notification key.
     * @param timedEventType The timed event type.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeGet(passengerAlternateKey: string, travelNotificationKey: string, timedEventType: 'Departure' | 'Arrival', observe?: 'body', reportProgress?: boolean): Observable<NotificationTimedEvent>;
    public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeGet(passengerAlternateKey: string, travelNotificationKey: string, timedEventType: 'Departure' | 'Arrival', observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<NotificationTimedEvent>>;
    public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeGet(passengerAlternateKey: string, travelNotificationKey: string, timedEventType: 'Departure' | 'Arrival', observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<NotificationTimedEvent>>;
    public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeGet(passengerAlternateKey: string, travelNotificationKey: string, timedEventType: 'Departure' | 'Arrival', observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (passengerAlternateKey === null || passengerAlternateKey === undefined) {
            throw new Error('Required parameter passengerAlternateKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeGet.');
        }

        if (travelNotificationKey === null || travelNotificationKey === undefined) {
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeGet.');
        }

        if (timedEventType === null || timedEventType === undefined) {
            throw new Error('Required parameter timedEventType was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypeGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<NotificationTimedEvent>(`${this.basePath}/api/nsk/v1/booking/passengers/${encodeURIComponent(String(passengerAlternateKey))}/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}/timedEvents/${encodeURIComponent(String(timedEventType))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates a notification timed event for a specific passenger travel notification on the booking in state.
     * 
     * @param passengerAlternateKey The passenger alternate key. This key will be null until the booking is committed.
     * @param travelNotificationKey The travel notification key.
     * @param timedEventType The notification timed event type.
     * @param request The updated notification timed event request.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypePut(passengerAlternateKey: string, travelNotificationKey: string, timedEventType: 'Departure' | 'Arrival', request?: NotificationTimedEventEditRequest, observe?: 'body', reportProgress?: boolean): Observable<IJsonResponse>;
    public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypePut(passengerAlternateKey: string, travelNotificationKey: string, timedEventType: 'Departure' | 'Arrival', request?: NotificationTimedEventEditRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypePut(passengerAlternateKey: string, travelNotificationKey: string, timedEventType: 'Departure' | 'Arrival', request?: NotificationTimedEventEditRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IJsonResponse>>;
    public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypePut(passengerAlternateKey: string, travelNotificationKey: string, timedEventType: 'Departure' | 'Arrival', request?: NotificationTimedEventEditRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (passengerAlternateKey === null || passengerAlternateKey === undefined) {
            throw new Error('Required parameter passengerAlternateKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypePut.');
        }

        if (travelNotificationKey === null || travelNotificationKey === undefined) {
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypePut.');
        }

        if (timedEventType === null || timedEventType === undefined) {
            throw new Error('Required parameter timedEventType was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyTimedEventsByTimedEventTypePut.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<IJsonResponse>(`${this.basePath}/api/nsk/v1/booking/passengers/${encodeURIComponent(String(passengerAlternateKey))}/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}/timedEvents/${encodeURIComponent(String(timedEventType))}`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets notification timed events for a specific passenger travel notification on the booking in state.
     * 
     * @param passengerAlternateKey The passenger alternate key. This key will be null until the booking is committed.
     * @param travelNotificationKey The travel notification key.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyTimedEventsGet(passengerAlternateKey: string, travelNotificationKey: string, observe?: 'body', reportProgress?: boolean): Observable<Array<NotificationTimedEvent>>;
    public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyTimedEventsGet(passengerAlternateKey: string, travelNotificationKey: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<NotificationTimedEvent>>>;
    public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyTimedEventsGet(passengerAlternateKey: string, travelNotificationKey: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<NotificationTimedEvent>>>;
    public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyTimedEventsGet(passengerAlternateKey: string, travelNotificationKey: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (passengerAlternateKey === null || passengerAlternateKey === undefined) {
            throw new Error('Required parameter passengerAlternateKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyTimedEventsGet.');
        }

        if (travelNotificationKey === null || travelNotificationKey === undefined) {
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyTimedEventsGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<NotificationTimedEvent>>(`${this.basePath}/api/nsk/v1/booking/passengers/${encodeURIComponent(String(passengerAlternateKey))}/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}/timedEvents`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Adds a notification timed event to a specific passenger travel notification on the booking in state.
     * 
     * @param passengerAlternateKey The passenger alternate key. This key will be null until the booking is committed.
     * @param travelNotificationKey The travel notification key.
     * @param request The notification timed even create request.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyTimedEventsPost(passengerAlternateKey: string, travelNotificationKey: string, request?: NotificationTimedEventCreateRequest, observe?: 'body', reportProgress?: boolean): Observable<IJsonResponse>;
    public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyTimedEventsPost(passengerAlternateKey: string, travelNotificationKey: string, request?: NotificationTimedEventCreateRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyTimedEventsPost(passengerAlternateKey: string, travelNotificationKey: string, request?: NotificationTimedEventCreateRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IJsonResponse>>;
    public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyTimedEventsPost(passengerAlternateKey: string, travelNotificationKey: string, request?: NotificationTimedEventCreateRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (passengerAlternateKey === null || passengerAlternateKey === undefined) {
            throw new Error('Required parameter passengerAlternateKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyTimedEventsPost.');
        }

        if (travelNotificationKey === null || travelNotificationKey === undefined) {
            throw new Error('Required parameter travelNotificationKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsByTravelNotificationKeyTimedEventsPost.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<IJsonResponse>(`${this.basePath}/api/nsk/v1/booking/passengers/${encodeURIComponent(String(passengerAlternateKey))}/travelNotifications/${encodeURIComponent(String(travelNotificationKey))}/timedEvents`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets passenger travel notifications for a specific passenger on the booking in state.
     * 
     * @param passengerAlternateKey The passenger alternate key. This key will be null until the booking is committed.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsGet(passengerAlternateKey: string, observe?: 'body', reportProgress?: boolean): Observable<Array<TravelNotification>>;
    public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsGet(passengerAlternateKey: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TravelNotification>>>;
    public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsGet(passengerAlternateKey: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TravelNotification>>>;
    public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsGet(passengerAlternateKey: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (passengerAlternateKey === null || passengerAlternateKey === undefined) {
            throw new Error('Required parameter passengerAlternateKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<TravelNotification>>(`${this.basePath}/api/nsk/v1/booking/passengers/${encodeURIComponent(String(passengerAlternateKey))}/travelNotifications`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates a passenger travel notification for a specific passenger on the booking in state.
     * 
     * @param passengerAlternateKey The passenger alternate key. This key will be null until the booking is committed.
     * @param request The passenger travel notification create request.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsPost(passengerAlternateKey: string, request?: TravelNotificationCreateRequest, observe?: 'body', reportProgress?: boolean): Observable<IJsonResponse>;
    public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsPost(passengerAlternateKey: string, request?: TravelNotificationCreateRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsPost(passengerAlternateKey: string, request?: TravelNotificationCreateRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IJsonResponse>>;
    public apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsPost(passengerAlternateKey: string, request?: TravelNotificationCreateRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (passengerAlternateKey === null || passengerAlternateKey === undefined) {
            throw new Error('Required parameter passengerAlternateKey was null or undefined when calling apiNskV1BookingPassengersByPassengerAlternateKeyTravelNotificationsPost.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<IJsonResponse>(`${this.basePath}/api/nsk/v1/booking/passengers/${encodeURIComponent(String(passengerAlternateKey))}/travelNotifications`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a specific address from a specific passenger.
     * 
     * @param passengerKey The unique passenger key.
     * @param addressKey The unique address key.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1BookingPassengersByPassengerKeyAddressesByAddressKeyGet(passengerKey: string, addressKey: string, observe?: 'body', reportProgress?: boolean): Observable<PassengerAddress>;
    public apiNskV1BookingPassengersByPassengerKeyAddressesByAddressKeyGet(passengerKey: string, addressKey: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PassengerAddress>>;
    public apiNskV1BookingPassengersByPassengerKeyAddressesByAddressKeyGet(passengerKey: string, addressKey: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PassengerAddress>>;
    public apiNskV1BookingPassengersByPassengerKeyAddressesByAddressKeyGet(passengerKey: string, addressKey: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (passengerKey === null || passengerKey === undefined) {
            throw new Error('Required parameter passengerKey was null or undefined when calling apiNskV1BookingPassengersByPassengerKeyAddressesByAddressKeyGet.');
        }

        if (addressKey === null || addressKey === undefined) {
            throw new Error('Required parameter addressKey was null or undefined when calling apiNskV1BookingPassengersByPassengerKeyAddressesByAddressKeyGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PassengerAddress>(`${this.basePath}/api/nsk/v1/booking/passengers/${encodeURIComponent(String(passengerKey))}/addresses/${encodeURIComponent(String(addressKey))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the collection of addresses from a specific passenger.
     * 
     * @param passengerKey The unique passenger key.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1BookingPassengersByPassengerKeyAddressesGet(passengerKey: string, observe?: 'body', reportProgress?: boolean): Observable<Array<PassengerAddress>>;
    public apiNskV1BookingPassengersByPassengerKeyAddressesGet(passengerKey: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<PassengerAddress>>>;
    public apiNskV1BookingPassengersByPassengerKeyAddressesGet(passengerKey: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<PassengerAddress>>>;
    public apiNskV1BookingPassengersByPassengerKeyAddressesGet(passengerKey: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (passengerKey === null || passengerKey === undefined) {
            throw new Error('Required parameter passengerKey was null or undefined when calling apiNskV1BookingPassengersByPassengerKeyAddressesGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<PassengerAddress>>(`${this.basePath}/api/nsk/v1/booking/passengers/${encodeURIComponent(String(passengerKey))}/addresses`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieve a single bag from a specific passenger.
     * 
     * @param passengerKey The passenger key for the passenger to retrieve from.
     * @param baggageKey The bag key for the bag to retrieve.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1BookingPassengersByPassengerKeyBaggageByBaggageKeyGet(passengerKey: string, baggageKey: string, observe?: 'body', reportProgress?: boolean): Observable<PassengerBag>;
    public apiNskV1BookingPassengersByPassengerKeyBaggageByBaggageKeyGet(passengerKey: string, baggageKey: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PassengerBag>>;
    public apiNskV1BookingPassengersByPassengerKeyBaggageByBaggageKeyGet(passengerKey: string, baggageKey: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PassengerBag>>;
    public apiNskV1BookingPassengersByPassengerKeyBaggageByBaggageKeyGet(passengerKey: string, baggageKey: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (passengerKey === null || passengerKey === undefined) {
            throw new Error('Required parameter passengerKey was null or undefined when calling apiNskV1BookingPassengersByPassengerKeyBaggageByBaggageKeyGet.');
        }

        if (baggageKey === null || baggageKey === undefined) {
            throw new Error('Required parameter baggageKey was null or undefined when calling apiNskV1BookingPassengersByPassengerKeyBaggageByBaggageKeyGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PassengerBag>(`${this.basePath}/api/nsk/v1/booking/passengers/${encodeURIComponent(String(passengerKey))}/baggage/${encodeURIComponent(String(baggageKey))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets all the baggage for a specified passenger.
     * 
     * @param passengerKey The unique identifier for the passenger to get baggage for.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1BookingPassengersByPassengerKeyBaggageGet(passengerKey: string, observe?: 'body', reportProgress?: boolean): Observable<Array<PassengerBag>>;
    public apiNskV1BookingPassengersByPassengerKeyBaggageGet(passengerKey: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<PassengerBag>>>;
    public apiNskV1BookingPassengersByPassengerKeyBaggageGet(passengerKey: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<PassengerBag>>>;
    public apiNskV1BookingPassengersByPassengerKeyBaggageGet(passengerKey: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (passengerKey === null || passengerKey === undefined) {
            throw new Error('Required parameter passengerKey was null or undefined when calling apiNskV1BookingPassengersByPassengerKeyBaggageGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<PassengerBag>>(`${this.basePath}/api/nsk/v1/booking/passengers/${encodeURIComponent(String(passengerKey))}/baggage`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a specific passenger price breakdown by passenger key.
     * 
     * @param passengerKey The specific passenger key.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1BookingPassengersByPassengerKeyBreakdownGet(passengerKey: string, observe?: 'body', reportProgress?: boolean): Observable<PassengerPriceBreakdown>;
    public apiNskV1BookingPassengersByPassengerKeyBreakdownGet(passengerKey: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PassengerPriceBreakdown>>;
    public apiNskV1BookingPassengersByPassengerKeyBreakdownGet(passengerKey: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PassengerPriceBreakdown>>;
    public apiNskV1BookingPassengersByPassengerKeyBreakdownGet(passengerKey: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (passengerKey === null || passengerKey === undefined) {
            throw new Error('Required parameter passengerKey was null or undefined when calling apiNskV1BookingPassengersByPassengerKeyBreakdownGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PassengerPriceBreakdown>(`${this.basePath}/api/nsk/v1/booking/passengers/${encodeURIComponent(String(passengerKey))}/breakdown`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a specific passenger&#39;s specific travel document.
     * 
     * @param passengerKey The unique passenger key.
     * @param travelDocumentKey The unique travel document key.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1BookingPassengersByPassengerKeyDocumentsByTravelDocumentKeyGet(passengerKey: string, travelDocumentKey: string, observe?: 'body', reportProgress?: boolean): Observable<PassengerTravelDocument>;
    public apiNskV1BookingPassengersByPassengerKeyDocumentsByTravelDocumentKeyGet(passengerKey: string, travelDocumentKey: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PassengerTravelDocument>>;
    public apiNskV1BookingPassengersByPassengerKeyDocumentsByTravelDocumentKeyGet(passengerKey: string, travelDocumentKey: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PassengerTravelDocument>>;
    public apiNskV1BookingPassengersByPassengerKeyDocumentsByTravelDocumentKeyGet(passengerKey: string, travelDocumentKey: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (passengerKey === null || passengerKey === undefined) {
            throw new Error('Required parameter passengerKey was null or undefined when calling apiNskV1BookingPassengersByPassengerKeyDocumentsByTravelDocumentKeyGet.');
        }

        if (travelDocumentKey === null || travelDocumentKey === undefined) {
            throw new Error('Required parameter travelDocumentKey was null or undefined when calling apiNskV1BookingPassengersByPassengerKeyDocumentsByTravelDocumentKeyGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PassengerTravelDocument>(`${this.basePath}/api/nsk/v1/booking/passengers/${encodeURIComponent(String(passengerKey))}/documents/${encodeURIComponent(String(travelDocumentKey))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a specific passenger&#39;s collection of travel documents.
     * 
     * @param passengerKey The unique passenger key.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1BookingPassengersByPassengerKeyDocumentsGet(passengerKey: string, observe?: 'body', reportProgress?: boolean): Observable<Array<PassengerTravelDocument>>;
    public apiNskV1BookingPassengersByPassengerKeyDocumentsGet(passengerKey: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<PassengerTravelDocument>>>;
    public apiNskV1BookingPassengersByPassengerKeyDocumentsGet(passengerKey: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<PassengerTravelDocument>>>;
    public apiNskV1BookingPassengersByPassengerKeyDocumentsGet(passengerKey: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (passengerKey === null || passengerKey === undefined) {
            throw new Error('Required parameter passengerKey was null or undefined when calling apiNskV1BookingPassengersByPassengerKeyDocumentsGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<PassengerTravelDocument>>(`${this.basePath}/api/nsk/v1/booking/passengers/${encodeURIComponent(String(passengerKey))}/documents`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a specific passenger on the booking.
     * 
     * @param passengerKey The unique passenger key.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1BookingPassengersByPassengerKeyGet(passengerKey: string, observe?: 'body', reportProgress?: boolean): Observable<Passenger>;
    public apiNskV1BookingPassengersByPassengerKeyGet(passengerKey: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Passenger>>;
    public apiNskV1BookingPassengersByPassengerKeyGet(passengerKey: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Passenger>>;
    public apiNskV1BookingPassengersByPassengerKeyGet(passengerKey: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (passengerKey === null || passengerKey === undefined) {
            throw new Error('Required parameter passengerKey was null or undefined when calling apiNskV1BookingPassengersByPassengerKeyGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Passenger>(`${this.basePath}/api/nsk/v1/booking/passengers/${encodeURIComponent(String(passengerKey))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a specific passenger infant&#39;s specific travel document.
     * 
     * @param passengerKey The unique passenger key.
     * @param travelDocumentKey The unique travel document key.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1BookingPassengersByPassengerKeyInfantDocumentsByTravelDocumentKeyGet(passengerKey: string, travelDocumentKey: string, observe?: 'body', reportProgress?: boolean): Observable<PassengerTravelDocument>;
    public apiNskV1BookingPassengersByPassengerKeyInfantDocumentsByTravelDocumentKeyGet(passengerKey: string, travelDocumentKey: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PassengerTravelDocument>>;
    public apiNskV1BookingPassengersByPassengerKeyInfantDocumentsByTravelDocumentKeyGet(passengerKey: string, travelDocumentKey: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PassengerTravelDocument>>;
    public apiNskV1BookingPassengersByPassengerKeyInfantDocumentsByTravelDocumentKeyGet(passengerKey: string, travelDocumentKey: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (passengerKey === null || passengerKey === undefined) {
            throw new Error('Required parameter passengerKey was null or undefined when calling apiNskV1BookingPassengersByPassengerKeyInfantDocumentsByTravelDocumentKeyGet.');
        }

        if (travelDocumentKey === null || travelDocumentKey === undefined) {
            throw new Error('Required parameter travelDocumentKey was null or undefined when calling apiNskV1BookingPassengersByPassengerKeyInfantDocumentsByTravelDocumentKeyGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PassengerTravelDocument>(`${this.basePath}/api/nsk/v1/booking/passengers/${encodeURIComponent(String(passengerKey))}/infant/documents/${encodeURIComponent(String(travelDocumentKey))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a specific passenger infant&#39;s collection of travel documents.
     * 
     * @param passengerKey The unique passenger key.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1BookingPassengersByPassengerKeyInfantDocumentsGet(passengerKey: string, observe?: 'body', reportProgress?: boolean): Observable<Array<PassengerTravelDocument>>;
    public apiNskV1BookingPassengersByPassengerKeyInfantDocumentsGet(passengerKey: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<PassengerTravelDocument>>>;
    public apiNskV1BookingPassengersByPassengerKeyInfantDocumentsGet(passengerKey: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<PassengerTravelDocument>>>;
    public apiNskV1BookingPassengersByPassengerKeyInfantDocumentsGet(passengerKey: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (passengerKey === null || passengerKey === undefined) {
            throw new Error('Required parameter passengerKey was null or undefined when calling apiNskV1BookingPassengersByPassengerKeyInfantDocumentsGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<PassengerTravelDocument>>(`${this.basePath}/api/nsk/v1/booking/passengers/${encodeURIComponent(String(passengerKey))}/infant/documents`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a specific passenger&#39;s infant.
     * 
     * @param passengerKey The unique passenger key.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1BookingPassengersByPassengerKeyInfantGet(passengerKey: string, observe?: 'body', reportProgress?: boolean): Observable<PassengerInfant>;
    public apiNskV1BookingPassengersByPassengerKeyInfantGet(passengerKey: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PassengerInfant>>;
    public apiNskV1BookingPassengersByPassengerKeyInfantGet(passengerKey: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PassengerInfant>>;
    public apiNskV1BookingPassengersByPassengerKeyInfantGet(passengerKey: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (passengerKey === null || passengerKey === undefined) {
            throw new Error('Required parameter passengerKey was null or undefined when calling apiNskV1BookingPassengersByPassengerKeyInfantGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PassengerInfant>(`${this.basePath}/api/nsk/v1/booking/passengers/${encodeURIComponent(String(passengerKey))}/infant`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Patches a specific passenger to the given passenger type.
     * NOTE: The date of birth doesn&#39;t need to be updated if the passenger&#39;s current date of birth still falls within the  new passenger type&#39;s age restriction.  This could also cause a repricing on the booking.  In addition, changing the passenger type will change the passenger key as well.
     * @param passengerKey The unique passenger key.
     * @param request The passenger type request containing the new passenger type.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1BookingPassengersByPassengerKeyPassengerTypeCodePatch(passengerKey: string, request?: PassengerTypeCodeEditRequest, observe?: 'body', reportProgress?: boolean): Observable<PassengerKeyResponse>;
    public apiNskV1BookingPassengersByPassengerKeyPassengerTypeCodePatch(passengerKey: string, request?: PassengerTypeCodeEditRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PassengerKeyResponse>>;
    public apiNskV1BookingPassengersByPassengerKeyPassengerTypeCodePatch(passengerKey: string, request?: PassengerTypeCodeEditRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PassengerKeyResponse>>;
    public apiNskV1BookingPassengersByPassengerKeyPassengerTypeCodePatch(passengerKey: string, request?: PassengerTypeCodeEditRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (passengerKey === null || passengerKey === undefined) {
            throw new Error('Required parameter passengerKey was null or undefined when calling apiNskV1BookingPassengersByPassengerKeyPassengerTypeCodePatch.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.patch<PassengerKeyResponse>(`${this.basePath}/api/nsk/v1/booking/passengers/${encodeURIComponent(String(passengerKey))}/passengerTypeCode`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes a seat assignment from a specific passenger on the booking in state.
     * 
     * @param passengerKey 
     * @param unitKey The unique unit key.
     * @param waiveFee The flag indicating to waive the seat fees if permissions permit.
     * @param ignoreSeatSsrs Flag indicating whether to ignore seat SSR&#39;s.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1BookingPassengersByPassengerKeySeatsByUnitKeyDelete(passengerKey: string, unitKey: string, waiveFee?: boolean, ignoreSeatSsrs?: boolean, observe?: 'body', reportProgress?: boolean): Observable<IJsonResponse>;
    public apiNskV1BookingPassengersByPassengerKeySeatsByUnitKeyDelete(passengerKey: string, unitKey: string, waiveFee?: boolean, ignoreSeatSsrs?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV1BookingPassengersByPassengerKeySeatsByUnitKeyDelete(passengerKey: string, unitKey: string, waiveFee?: boolean, ignoreSeatSsrs?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IJsonResponse>>;
    public apiNskV1BookingPassengersByPassengerKeySeatsByUnitKeyDelete(passengerKey: string, unitKey: string, waiveFee?: boolean, ignoreSeatSsrs?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (passengerKey === null || passengerKey === undefined) {
            throw new Error('Required parameter passengerKey was null or undefined when calling apiNskV1BookingPassengersByPassengerKeySeatsByUnitKeyDelete.');
        }

        if (unitKey === null || unitKey === undefined) {
            throw new Error('Required parameter unitKey was null or undefined when calling apiNskV1BookingPassengersByPassengerKeySeatsByUnitKeyDelete.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (waiveFee !== undefined && waiveFee !== null) {
            queryParameters = queryParameters.set('WaiveFee', <any>waiveFee);
        }
        if (ignoreSeatSsrs !== undefined && ignoreSeatSsrs !== null) {
            queryParameters = queryParameters.set('IgnoreSeatSsrs', <any>ignoreSeatSsrs);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<IJsonResponse>(`${this.basePath}/api/nsk/v1/booking/passengers/${encodeURIComponent(String(passengerKey))}/seats/${encodeURIComponent(String(unitKey))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the collection of passengers on the booking.
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV1BookingPassengersGet(observe?: 'body', reportProgress?: boolean): Observable<InlineResponse2005>;
    public apiNskV1BookingPassengersGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse2005>>;
    public apiNskV1BookingPassengersGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse2005>>;
    public apiNskV1BookingPassengersGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<InlineResponse2005>(`${this.basePath}/api/nsk/v1/booking/passengers`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes a specific address on a specific passenger.
     * 
     * @param passengerKey The unique passenger key.
     * @param addressKey The unique addres key.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV2BookingPassengersByPassengerKeyAddressesByAddressKeyDelete(passengerKey: string, addressKey: string, observe?: 'body', reportProgress?: boolean): Observable<IJsonResponse>;
    public apiNskV2BookingPassengersByPassengerKeyAddressesByAddressKeyDelete(passengerKey: string, addressKey: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV2BookingPassengersByPassengerKeyAddressesByAddressKeyDelete(passengerKey: string, addressKey: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IJsonResponse>>;
    public apiNskV2BookingPassengersByPassengerKeyAddressesByAddressKeyDelete(passengerKey: string, addressKey: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (passengerKey === null || passengerKey === undefined) {
            throw new Error('Required parameter passengerKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeyAddressesByAddressKeyDelete.');
        }

        if (addressKey === null || addressKey === undefined) {
            throw new Error('Required parameter addressKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeyAddressesByAddressKeyDelete.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<IJsonResponse>(`${this.basePath}/api/nsk/v2/booking/passengers/${encodeURIComponent(String(passengerKey))}/addresses/${encodeURIComponent(String(addressKey))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Patches a specific address on a specific passenger.
     * 
     * @param passengerKey The unique passenger key.
     * @param addressKey The unique addres key.
     * @param request The patched address.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV2BookingPassengersByPassengerKeyAddressesByAddressKeyPatch(passengerKey: string, addressKey: string, request?: DeltaMapperPassengerAddressEditRequest, observe?: 'body', reportProgress?: boolean): Observable<IJsonResponse>;
    public apiNskV2BookingPassengersByPassengerKeyAddressesByAddressKeyPatch(passengerKey: string, addressKey: string, request?: DeltaMapperPassengerAddressEditRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV2BookingPassengersByPassengerKeyAddressesByAddressKeyPatch(passengerKey: string, addressKey: string, request?: DeltaMapperPassengerAddressEditRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IJsonResponse>>;
    public apiNskV2BookingPassengersByPassengerKeyAddressesByAddressKeyPatch(passengerKey: string, addressKey: string, request?: DeltaMapperPassengerAddressEditRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (passengerKey === null || passengerKey === undefined) {
            throw new Error('Required parameter passengerKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeyAddressesByAddressKeyPatch.');
        }

        if (addressKey === null || addressKey === undefined) {
            throw new Error('Required parameter addressKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeyAddressesByAddressKeyPatch.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.patch<IJsonResponse>(`${this.basePath}/api/nsk/v2/booking/passengers/${encodeURIComponent(String(passengerKey))}/addresses/${encodeURIComponent(String(addressKey))}`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates a specific address on a specific passenger.
     * 
     * @param passengerKey The unique passenger key.
     * @param addressKey The unique address key.
     * @param request The modified address.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV2BookingPassengersByPassengerKeyAddressesByAddressKeyPut(passengerKey: string, addressKey: string, request?: PassengerAddressEditRequest, observe?: 'body', reportProgress?: boolean): Observable<IJsonResponse>;
    public apiNskV2BookingPassengersByPassengerKeyAddressesByAddressKeyPut(passengerKey: string, addressKey: string, request?: PassengerAddressEditRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV2BookingPassengersByPassengerKeyAddressesByAddressKeyPut(passengerKey: string, addressKey: string, request?: PassengerAddressEditRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IJsonResponse>>;
    public apiNskV2BookingPassengersByPassengerKeyAddressesByAddressKeyPut(passengerKey: string, addressKey: string, request?: PassengerAddressEditRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (passengerKey === null || passengerKey === undefined) {
            throw new Error('Required parameter passengerKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeyAddressesByAddressKeyPut.');
        }

        if (addressKey === null || addressKey === undefined) {
            throw new Error('Required parameter addressKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeyAddressesByAddressKeyPut.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<IJsonResponse>(`${this.basePath}/api/nsk/v2/booking/passengers/${encodeURIComponent(String(passengerKey))}/addresses/${encodeURIComponent(String(addressKey))}`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates a new address for a specific passenger.
     * 
     * @param passengerKey The unique passenger key.
     * @param request The new address request.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV2BookingPassengersByPassengerKeyAddressesPost(passengerKey: string, request?: PassengerAddressCreateRequest, observe?: 'body', reportProgress?: boolean): Observable<IJsonResponse>;
    public apiNskV2BookingPassengersByPassengerKeyAddressesPost(passengerKey: string, request?: PassengerAddressCreateRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV2BookingPassengersByPassengerKeyAddressesPost(passengerKey: string, request?: PassengerAddressCreateRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IJsonResponse>>;
    public apiNskV2BookingPassengersByPassengerKeyAddressesPost(passengerKey: string, request?: PassengerAddressCreateRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (passengerKey === null || passengerKey === undefined) {
            throw new Error('Required parameter passengerKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeyAddressesPost.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<IJsonResponse>(`${this.basePath}/api/nsk/v2/booking/passengers/${encodeURIComponent(String(passengerKey))}/addresses`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes a specific passenger&#39;s specific travel document.
     * 
     * @param passengerKey The unique passenger key.
     * @param travelDocumentKey The unique travel document key.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV2BookingPassengersByPassengerKeyDocumentsByTravelDocumentKeyDelete(passengerKey: string, travelDocumentKey: string, observe?: 'body', reportProgress?: boolean): Observable<IJsonResponse>;
    public apiNskV2BookingPassengersByPassengerKeyDocumentsByTravelDocumentKeyDelete(passengerKey: string, travelDocumentKey: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV2BookingPassengersByPassengerKeyDocumentsByTravelDocumentKeyDelete(passengerKey: string, travelDocumentKey: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IJsonResponse>>;
    public apiNskV2BookingPassengersByPassengerKeyDocumentsByTravelDocumentKeyDelete(passengerKey: string, travelDocumentKey: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (passengerKey === null || passengerKey === undefined) {
            throw new Error('Required parameter passengerKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeyDocumentsByTravelDocumentKeyDelete.');
        }

        if (travelDocumentKey === null || travelDocumentKey === undefined) {
            throw new Error('Required parameter travelDocumentKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeyDocumentsByTravelDocumentKeyDelete.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<IJsonResponse>(`${this.basePath}/api/nsk/v2/booking/passengers/${encodeURIComponent(String(passengerKey))}/documents/${encodeURIComponent(String(travelDocumentKey))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Patches a specific passenger&#39;s travel document.
     * 
     * @param passengerKey The unique passenger key.
     * @param travelDocumentKey The unique travel document key.
     * @param request The patched travel document.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV2BookingPassengersByPassengerKeyDocumentsByTravelDocumentKeyPatch(passengerKey: string, travelDocumentKey: string, request?: DeltaMapperTravelDocumentEditRequest, observe?: 'body', reportProgress?: boolean): Observable<IJsonResponse>;
    public apiNskV2BookingPassengersByPassengerKeyDocumentsByTravelDocumentKeyPatch(passengerKey: string, travelDocumentKey: string, request?: DeltaMapperTravelDocumentEditRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV2BookingPassengersByPassengerKeyDocumentsByTravelDocumentKeyPatch(passengerKey: string, travelDocumentKey: string, request?: DeltaMapperTravelDocumentEditRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IJsonResponse>>;
    public apiNskV2BookingPassengersByPassengerKeyDocumentsByTravelDocumentKeyPatch(passengerKey: string, travelDocumentKey: string, request?: DeltaMapperTravelDocumentEditRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (passengerKey === null || passengerKey === undefined) {
            throw new Error('Required parameter passengerKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeyDocumentsByTravelDocumentKeyPatch.');
        }

        if (travelDocumentKey === null || travelDocumentKey === undefined) {
            throw new Error('Required parameter travelDocumentKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeyDocumentsByTravelDocumentKeyPatch.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.patch<IJsonResponse>(`${this.basePath}/api/nsk/v2/booking/passengers/${encodeURIComponent(String(passengerKey))}/documents/${encodeURIComponent(String(travelDocumentKey))}`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates a specific passenger&#39;s travel document.
     * 
     * @param passengerKey The unique passenger key.
     * @param travelDocumentKey The unique travel document key.
     * @param request The modified travel document.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV2BookingPassengersByPassengerKeyDocumentsByTravelDocumentKeyPut(passengerKey: string, travelDocumentKey: string, request?: TravelDocumentEditRequest, observe?: 'body', reportProgress?: boolean): Observable<IJsonResponse>;
    public apiNskV2BookingPassengersByPassengerKeyDocumentsByTravelDocumentKeyPut(passengerKey: string, travelDocumentKey: string, request?: TravelDocumentEditRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV2BookingPassengersByPassengerKeyDocumentsByTravelDocumentKeyPut(passengerKey: string, travelDocumentKey: string, request?: TravelDocumentEditRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IJsonResponse>>;
    public apiNskV2BookingPassengersByPassengerKeyDocumentsByTravelDocumentKeyPut(passengerKey: string, travelDocumentKey: string, request?: TravelDocumentEditRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (passengerKey === null || passengerKey === undefined) {
            throw new Error('Required parameter passengerKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeyDocumentsByTravelDocumentKeyPut.');
        }

        if (travelDocumentKey === null || travelDocumentKey === undefined) {
            throw new Error('Required parameter travelDocumentKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeyDocumentsByTravelDocumentKeyPut.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<IJsonResponse>(`${this.basePath}/api/nsk/v2/booking/passengers/${encodeURIComponent(String(passengerKey))}/documents/${encodeURIComponent(String(travelDocumentKey))}`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create a new travel document for a specific passenger.
     * 
     * @param passengerKey The unique passenger key.
     * @param request The new travel document.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV2BookingPassengersByPassengerKeyDocumentsPost(passengerKey: string, request?: TravelDocumentCreateRequest, observe?: 'body', reportProgress?: boolean): Observable<IJsonResponse>;
    public apiNskV2BookingPassengersByPassengerKeyDocumentsPost(passengerKey: string, request?: TravelDocumentCreateRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV2BookingPassengersByPassengerKeyDocumentsPost(passengerKey: string, request?: TravelDocumentCreateRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IJsonResponse>>;
    public apiNskV2BookingPassengersByPassengerKeyDocumentsPost(passengerKey: string, request?: TravelDocumentCreateRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (passengerKey === null || passengerKey === undefined) {
            throw new Error('Required parameter passengerKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeyDocumentsPost.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<IJsonResponse>(`${this.basePath}/api/nsk/v2/booking/passengers/${encodeURIComponent(String(passengerKey))}/documents`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes a infant from a specific passenger.
     * 
     * @param passengerKey The unique passenger key.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV2BookingPassengersByPassengerKeyInfantDelete(passengerKey: string, observe?: 'body', reportProgress?: boolean): Observable<IJsonResponse>;
    public apiNskV2BookingPassengersByPassengerKeyInfantDelete(passengerKey: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV2BookingPassengersByPassengerKeyInfantDelete(passengerKey: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IJsonResponse>>;
    public apiNskV2BookingPassengersByPassengerKeyInfantDelete(passengerKey: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (passengerKey === null || passengerKey === undefined) {
            throw new Error('Required parameter passengerKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeyInfantDelete.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<IJsonResponse>(`${this.basePath}/api/nsk/v2/booking/passengers/${encodeURIComponent(String(passengerKey))}/infant`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes a specific passenger infant specific travel document.
     * 
     * @param passengerKey The unique passenger key.
     * @param travelDocumentKey The unique travel document key.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV2BookingPassengersByPassengerKeyInfantDocumentsByTravelDocumentKeyDelete(passengerKey: string, travelDocumentKey: string, observe?: 'body', reportProgress?: boolean): Observable<IJsonResponse>;
    public apiNskV2BookingPassengersByPassengerKeyInfantDocumentsByTravelDocumentKeyDelete(passengerKey: string, travelDocumentKey: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV2BookingPassengersByPassengerKeyInfantDocumentsByTravelDocumentKeyDelete(passengerKey: string, travelDocumentKey: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IJsonResponse>>;
    public apiNskV2BookingPassengersByPassengerKeyInfantDocumentsByTravelDocumentKeyDelete(passengerKey: string, travelDocumentKey: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (passengerKey === null || passengerKey === undefined) {
            throw new Error('Required parameter passengerKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeyInfantDocumentsByTravelDocumentKeyDelete.');
        }

        if (travelDocumentKey === null || travelDocumentKey === undefined) {
            throw new Error('Required parameter travelDocumentKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeyInfantDocumentsByTravelDocumentKeyDelete.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<IJsonResponse>(`${this.basePath}/api/nsk/v2/booking/passengers/${encodeURIComponent(String(passengerKey))}/infant/documents/${encodeURIComponent(String(travelDocumentKey))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Patches a specific passenger infant travel document.
     * 
     * @param passengerKey The unique passenger key.
     * @param travelDocumentKey The unique travel document key.
     * @param request The patched travel document.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV2BookingPassengersByPassengerKeyInfantDocumentsByTravelDocumentKeyPatch(passengerKey: string, travelDocumentKey: string, request?: DeltaMapperTravelDocumentEditRequest, observe?: 'body', reportProgress?: boolean): Observable<IJsonResponse>;
    public apiNskV2BookingPassengersByPassengerKeyInfantDocumentsByTravelDocumentKeyPatch(passengerKey: string, travelDocumentKey: string, request?: DeltaMapperTravelDocumentEditRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV2BookingPassengersByPassengerKeyInfantDocumentsByTravelDocumentKeyPatch(passengerKey: string, travelDocumentKey: string, request?: DeltaMapperTravelDocumentEditRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IJsonResponse>>;
    public apiNskV2BookingPassengersByPassengerKeyInfantDocumentsByTravelDocumentKeyPatch(passengerKey: string, travelDocumentKey: string, request?: DeltaMapperTravelDocumentEditRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (passengerKey === null || passengerKey === undefined) {
            throw new Error('Required parameter passengerKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeyInfantDocumentsByTravelDocumentKeyPatch.');
        }

        if (travelDocumentKey === null || travelDocumentKey === undefined) {
            throw new Error('Required parameter travelDocumentKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeyInfantDocumentsByTravelDocumentKeyPatch.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.patch<IJsonResponse>(`${this.basePath}/api/nsk/v2/booking/passengers/${encodeURIComponent(String(passengerKey))}/infant/documents/${encodeURIComponent(String(travelDocumentKey))}`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates a specific passenger infant travel document.
     * 
     * @param passengerKey The unique passenger key.
     * @param travelDocumentKey The unique travel document key.
     * @param request The modified travel document.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV2BookingPassengersByPassengerKeyInfantDocumentsByTravelDocumentKeyPut(passengerKey: string, travelDocumentKey: string, request?: TravelDocumentEditRequest, observe?: 'body', reportProgress?: boolean): Observable<IJsonResponse>;
    public apiNskV2BookingPassengersByPassengerKeyInfantDocumentsByTravelDocumentKeyPut(passengerKey: string, travelDocumentKey: string, request?: TravelDocumentEditRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV2BookingPassengersByPassengerKeyInfantDocumentsByTravelDocumentKeyPut(passengerKey: string, travelDocumentKey: string, request?: TravelDocumentEditRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IJsonResponse>>;
    public apiNskV2BookingPassengersByPassengerKeyInfantDocumentsByTravelDocumentKeyPut(passengerKey: string, travelDocumentKey: string, request?: TravelDocumentEditRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (passengerKey === null || passengerKey === undefined) {
            throw new Error('Required parameter passengerKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeyInfantDocumentsByTravelDocumentKeyPut.');
        }

        if (travelDocumentKey === null || travelDocumentKey === undefined) {
            throw new Error('Required parameter travelDocumentKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeyInfantDocumentsByTravelDocumentKeyPut.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<IJsonResponse>(`${this.basePath}/api/nsk/v2/booking/passengers/${encodeURIComponent(String(passengerKey))}/infant/documents/${encodeURIComponent(String(travelDocumentKey))}`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create a new travel document for a specific passenger infant.
     * 
     * @param passengerKey The unique passenger key.
     * @param request The new travel document.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV2BookingPassengersByPassengerKeyInfantDocumentsPost(passengerKey: string, request?: TravelDocumentCreateRequest, observe?: 'body', reportProgress?: boolean): Observable<IJsonResponse>;
    public apiNskV2BookingPassengersByPassengerKeyInfantDocumentsPost(passengerKey: string, request?: TravelDocumentCreateRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV2BookingPassengersByPassengerKeyInfantDocumentsPost(passengerKey: string, request?: TravelDocumentCreateRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IJsonResponse>>;
    public apiNskV2BookingPassengersByPassengerKeyInfantDocumentsPost(passengerKey: string, request?: TravelDocumentCreateRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (passengerKey === null || passengerKey === undefined) {
            throw new Error('Required parameter passengerKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeyInfantDocumentsPost.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<IJsonResponse>(`${this.basePath}/api/nsk/v2/booking/passengers/${encodeURIComponent(String(passengerKey))}/infant/documents`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Patches a infant on a specific passenger.
     * 
     * @param passengerKey The unique passenger key.
     * @param request The patched infant.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV2BookingPassengersByPassengerKeyInfantPatch(passengerKey: string, request?: DeltaMapperInfant, observe?: 'body', reportProgress?: boolean): Observable<IJsonResponse>;
    public apiNskV2BookingPassengersByPassengerKeyInfantPatch(passengerKey: string, request?: DeltaMapperInfant, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV2BookingPassengersByPassengerKeyInfantPatch(passengerKey: string, request?: DeltaMapperInfant, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IJsonResponse>>;
    public apiNskV2BookingPassengersByPassengerKeyInfantPatch(passengerKey: string, request?: DeltaMapperInfant, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (passengerKey === null || passengerKey === undefined) {
            throw new Error('Required parameter passengerKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeyInfantPatch.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.patch<IJsonResponse>(`${this.basePath}/api/nsk/v2/booking/passengers/${encodeURIComponent(String(passengerKey))}/infant`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets passenger seat by key.
     * 
     * @param passengerKey Unique passenger key.
     * @param unitKey Unique unit key.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV2BookingPassengersByPassengerKeySeatsByUnitKeyGet(passengerKey: string, unitKey: string, observe?: 'body', reportProgress?: boolean): Observable<PassengerSeat>;
    public apiNskV2BookingPassengersByPassengerKeySeatsByUnitKeyGet(passengerKey: string, unitKey: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PassengerSeat>>;
    public apiNskV2BookingPassengersByPassengerKeySeatsByUnitKeyGet(passengerKey: string, unitKey: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PassengerSeat>>;
    public apiNskV2BookingPassengersByPassengerKeySeatsByUnitKeyGet(passengerKey: string, unitKey: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (passengerKey === null || passengerKey === undefined) {
            throw new Error('Required parameter passengerKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeySeatsByUnitKeyGet.');
        }

        if (unitKey === null || unitKey === undefined) {
            throw new Error('Required parameter unitKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeySeatsByUnitKeyGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PassengerSeat>(`${this.basePath}/api/nsk/v2/booking/passengers/${encodeURIComponent(String(passengerKey))}/seats/${encodeURIComponent(String(unitKey))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Adds a seat assignment to a specific passenger on the booking in state.
     * This endpoint actively checks whether the passenger has a seat. If the passenger does  have a seat, it will delete the current seat the passenger occupies and add the requested  one. This may result in slightly slower response times.
     * @param passengerKey The passenger key.
     * @param unitKey The unit key.
     * @param request The add seat request.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV2BookingPassengersByPassengerKeySeatsByUnitKeyPost(passengerKey: string, unitKey: string, request?: AddSeatRequest, observe?: 'body', reportProgress?: boolean): Observable<IJsonResponse>;
    public apiNskV2BookingPassengersByPassengerKeySeatsByUnitKeyPost(passengerKey: string, unitKey: string, request?: AddSeatRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV2BookingPassengersByPassengerKeySeatsByUnitKeyPost(passengerKey: string, unitKey: string, request?: AddSeatRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IJsonResponse>>;
    public apiNskV2BookingPassengersByPassengerKeySeatsByUnitKeyPost(passengerKey: string, unitKey: string, request?: AddSeatRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (passengerKey === null || passengerKey === undefined) {
            throw new Error('Required parameter passengerKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeySeatsByUnitKeyPost.');
        }

        if (unitKey === null || unitKey === undefined) {
            throw new Error('Required parameter unitKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeySeatsByUnitKeyPost.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<IJsonResponse>(`${this.basePath}/api/nsk/v2/booking/passengers/${encodeURIComponent(String(passengerKey))}/seats/${encodeURIComponent(String(unitKey))}`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets all seats associated with a passenger.
     * 
     * @param passengerKey Passengers to get seats for.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV2BookingPassengersByPassengerKeySeatsGet(passengerKey: string, observe?: 'body', reportProgress?: boolean): Observable<Array<PassengerSeat>>;
    public apiNskV2BookingPassengersByPassengerKeySeatsGet(passengerKey: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<PassengerSeat>>>;
    public apiNskV2BookingPassengersByPassengerKeySeatsGet(passengerKey: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<PassengerSeat>>>;
    public apiNskV2BookingPassengersByPassengerKeySeatsGet(passengerKey: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (passengerKey === null || passengerKey === undefined) {
            throw new Error('Required parameter passengerKey was null or undefined when calling apiNskV2BookingPassengersByPassengerKeySeatsGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<PassengerSeat>>(`${this.basePath}/api/nsk/v2/booking/passengers/${encodeURIComponent(String(passengerKey))}/seats`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates an infant on a specific passenger.
     * 
     * @param passengerKey The unique passenger key.
     * @param request The new infant.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV3BookingPassengersByPassengerKeyInfantPost(passengerKey: string, request?: PassengerInfantCreateRequest, observe?: 'body', reportProgress?: boolean): Observable<IJsonResponse>;
    public apiNskV3BookingPassengersByPassengerKeyInfantPost(passengerKey: string, request?: PassengerInfantCreateRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV3BookingPassengersByPassengerKeyInfantPost(passengerKey: string, request?: PassengerInfantCreateRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IJsonResponse>>;
    public apiNskV3BookingPassengersByPassengerKeyInfantPost(passengerKey: string, request?: PassengerInfantCreateRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (passengerKey === null || passengerKey === undefined) {
            throw new Error('Required parameter passengerKey was null or undefined when calling apiNskV3BookingPassengersByPassengerKeyInfantPost.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<IJsonResponse>(`${this.basePath}/api/nsk/v3/booking/passengers/${encodeURIComponent(String(passengerKey))}/infant`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates an infant on a specific passenger.
     * 
     * @param passengerKey The unique passenger key
     * @param request The modified infant.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV3BookingPassengersByPassengerKeyInfantPut(passengerKey: string, request?: Infant, observe?: 'body', reportProgress?: boolean): Observable<IJsonResponse>;
    public apiNskV3BookingPassengersByPassengerKeyInfantPut(passengerKey: string, request?: Infant, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV3BookingPassengersByPassengerKeyInfantPut(passengerKey: string, request?: Infant, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IJsonResponse>>;
    public apiNskV3BookingPassengersByPassengerKeyInfantPut(passengerKey: string, request?: Infant, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (passengerKey === null || passengerKey === undefined) {
            throw new Error('Required parameter passengerKey was null or undefined when calling apiNskV3BookingPassengersByPassengerKeyInfantPut.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<IJsonResponse>(`${this.basePath}/api/nsk/v3/booking/passengers/${encodeURIComponent(String(passengerKey))}/infant`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Patches a specific passenger on the booking.
     * 
     * @param passengerKey The unique passenger key.
     * @param waiveNameChangeFees Waive the name change fee.
     * @param request The patched passenger request.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV3BookingPassengersByPassengerKeyPatch(passengerKey: string, waiveNameChangeFees?: boolean, request?: DeltaMapperPassengerBase, observe?: 'body', reportProgress?: boolean): Observable<IJsonResponse>;
    public apiNskV3BookingPassengersByPassengerKeyPatch(passengerKey: string, waiveNameChangeFees?: boolean, request?: DeltaMapperPassengerBase, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV3BookingPassengersByPassengerKeyPatch(passengerKey: string, waiveNameChangeFees?: boolean, request?: DeltaMapperPassengerBase, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IJsonResponse>>;
    public apiNskV3BookingPassengersByPassengerKeyPatch(passengerKey: string, waiveNameChangeFees?: boolean, request?: DeltaMapperPassengerBase, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (passengerKey === null || passengerKey === undefined) {
            throw new Error('Required parameter passengerKey was null or undefined when calling apiNskV3BookingPassengersByPassengerKeyPatch.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (waiveNameChangeFees !== undefined && waiveNameChangeFees !== null) {
            queryParameters = queryParameters.set('waiveNameChangeFees', <any>waiveNameChangeFees);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.patch<IJsonResponse>(`${this.basePath}/api/nsk/v3/booking/passengers/${encodeURIComponent(String(passengerKey))}`,
            request,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates a specific passenger on the booking.
     * 
     * @param passengerKey The unique passenger key.
     * @param waiveNameChangeFees Waive the name change fees.
     * @param request The modified passenger request.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNskV3BookingPassengersByPassengerKeyPut(passengerKey: string, waiveNameChangeFees?: boolean, request?: PassengerBase, observe?: 'body', reportProgress?: boolean): Observable<IJsonResponse>;
    public apiNskV3BookingPassengersByPassengerKeyPut(passengerKey: string, waiveNameChangeFees?: boolean, request?: PassengerBase, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IJsonResponse>>;
    public apiNskV3BookingPassengersByPassengerKeyPut(passengerKey: string, waiveNameChangeFees?: boolean, request?: PassengerBase, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IJsonResponse>>;
    public apiNskV3BookingPassengersByPassengerKeyPut(passengerKey: string, waiveNameChangeFees?: boolean, request?: PassengerBase, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (passengerKey === null || passengerKey === undefined) {
            throw new Error('Required parameter passengerKey was null or undefined when calling apiNskV3BookingPassengersByPassengerKeyPut.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (waiveNameChangeFees !== undefined && waiveNameChangeFees !== null) {
            queryParameters = queryParameters.set('waiveNameChangeFees', <any>waiveNameChangeFees);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<IJsonResponse>(`${this.basePath}/api/nsk/v3/booking/passengers/${encodeURIComponent(String(passengerKey))}`,
            request,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
